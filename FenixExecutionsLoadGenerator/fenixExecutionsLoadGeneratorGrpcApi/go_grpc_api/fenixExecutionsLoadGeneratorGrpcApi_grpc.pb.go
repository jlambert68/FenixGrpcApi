// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FenixExecutionsLoadGeneratorGrpcServicesClient is the client API for FenixExecutionsLoadGeneratorGrpcServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FenixExecutionsLoadGeneratorGrpcServicesClient interface {
	//Check if 'FenixExecutionsLoadGenerator' is alive with this service
	AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	//Ask 'FenixExecutionsLoadGenerator' if 'GuiExecutionServer' is alive with this service
	GuiExecutionServerAreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Send TestCase to be Executed
	ExecuteTestCase(ctx context.Context, in *TestCaseExecutionRequest, opts ...grpc.CallOption) (*AckNackResponse, error)
}

type fenixExecutionsLoadGeneratorGrpcServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewFenixExecutionsLoadGeneratorGrpcServicesClient(cc grpc.ClientConnInterface) FenixExecutionsLoadGeneratorGrpcServicesClient {
	return &fenixExecutionsLoadGeneratorGrpcServicesClient{cc}
}

func (c *fenixExecutionsLoadGeneratorGrpcServicesClient) AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionsLoadGeneratorGrpcApi.FenixExecutionsLoadGeneratorGrpcServices/AreYouAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionsLoadGeneratorGrpcServicesClient) GuiExecutionServerAreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionsLoadGeneratorGrpcApi.FenixExecutionsLoadGeneratorGrpcServices/GuiExecutionServerAreYouAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionsLoadGeneratorGrpcServicesClient) ExecuteTestCase(ctx context.Context, in *TestCaseExecutionRequest, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionsLoadGeneratorGrpcApi.FenixExecutionsLoadGeneratorGrpcServices/ExecuteTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FenixExecutionsLoadGeneratorGrpcServicesServer is the server API for FenixExecutionsLoadGeneratorGrpcServices service.
// All implementations must embed UnimplementedFenixExecutionsLoadGeneratorGrpcServicesServer
// for forward compatibility
type FenixExecutionsLoadGeneratorGrpcServicesServer interface {
	//Check if 'FenixExecutionsLoadGenerator' is alive with this service
	AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error)
	//Ask 'FenixExecutionsLoadGenerator' if 'GuiExecutionServer' is alive with this service
	GuiExecutionServerAreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error)
	// Send TestCase to be Executed
	ExecuteTestCase(context.Context, *TestCaseExecutionRequest) (*AckNackResponse, error)
	mustEmbedUnimplementedFenixExecutionsLoadGeneratorGrpcServicesServer()
}

// UnimplementedFenixExecutionsLoadGeneratorGrpcServicesServer must be embedded to have forward compatible implementations.
type UnimplementedFenixExecutionsLoadGeneratorGrpcServicesServer struct {
}

func (UnimplementedFenixExecutionsLoadGeneratorGrpcServicesServer) AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreYouAlive not implemented")
}
func (UnimplementedFenixExecutionsLoadGeneratorGrpcServicesServer) GuiExecutionServerAreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuiExecutionServerAreYouAlive not implemented")
}
func (UnimplementedFenixExecutionsLoadGeneratorGrpcServicesServer) ExecuteTestCase(context.Context, *TestCaseExecutionRequest) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTestCase not implemented")
}
func (UnimplementedFenixExecutionsLoadGeneratorGrpcServicesServer) mustEmbedUnimplementedFenixExecutionsLoadGeneratorGrpcServicesServer() {
}

// UnsafeFenixExecutionsLoadGeneratorGrpcServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FenixExecutionsLoadGeneratorGrpcServicesServer will
// result in compilation errors.
type UnsafeFenixExecutionsLoadGeneratorGrpcServicesServer interface {
	mustEmbedUnimplementedFenixExecutionsLoadGeneratorGrpcServicesServer()
}

func RegisterFenixExecutionsLoadGeneratorGrpcServicesServer(s grpc.ServiceRegistrar, srv FenixExecutionsLoadGeneratorGrpcServicesServer) {
	s.RegisterService(&FenixExecutionsLoadGeneratorGrpcServices_ServiceDesc, srv)
}

func _FenixExecutionsLoadGeneratorGrpcServices_AreYouAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionsLoadGeneratorGrpcServicesServer).AreYouAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionsLoadGeneratorGrpcApi.FenixExecutionsLoadGeneratorGrpcServices/AreYouAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionsLoadGeneratorGrpcServicesServer).AreYouAlive(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionsLoadGeneratorGrpcServices_GuiExecutionServerAreYouAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionsLoadGeneratorGrpcServicesServer).GuiExecutionServerAreYouAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionsLoadGeneratorGrpcApi.FenixExecutionsLoadGeneratorGrpcServices/GuiExecutionServerAreYouAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionsLoadGeneratorGrpcServicesServer).GuiExecutionServerAreYouAlive(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionsLoadGeneratorGrpcServices_ExecuteTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionsLoadGeneratorGrpcServicesServer).ExecuteTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionsLoadGeneratorGrpcApi.FenixExecutionsLoadGeneratorGrpcServices/ExecuteTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionsLoadGeneratorGrpcServicesServer).ExecuteTestCase(ctx, req.(*TestCaseExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FenixExecutionsLoadGeneratorGrpcServices_ServiceDesc is the grpc.ServiceDesc for FenixExecutionsLoadGeneratorGrpcServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FenixExecutionsLoadGeneratorGrpcServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fenixExecutionsLoadGeneratorGrpcApi.FenixExecutionsLoadGeneratorGrpcServices",
	HandlerType: (*FenixExecutionsLoadGeneratorGrpcServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AreYouAlive",
			Handler:    _FenixExecutionsLoadGeneratorGrpcServices_AreYouAlive_Handler,
		},
		{
			MethodName: "GuiExecutionServerAreYouAlive",
			Handler:    _FenixExecutionsLoadGeneratorGrpcServices_GuiExecutionServerAreYouAlive_Handler,
		},
		{
			MethodName: "ExecuteTestCase",
			Handler:    _FenixExecutionsLoadGeneratorGrpcServices_ExecuteTestCase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "FenixExecutionsLoadGenerator/fenixExecutionsLoadGeneratorGrpcApi/fenixExecutionsLoadGeneratorGrpcApi.proto",
}
