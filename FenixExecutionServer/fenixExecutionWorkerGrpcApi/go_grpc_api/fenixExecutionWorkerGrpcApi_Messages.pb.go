// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: FenixExecutionServer/fenixExecutionWorkerGrpcApi/fenixExecutionWorkerGrpcApi_Messages.proto

package go_grpc_api

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request used by Execution Server to initiate an TestInstruction Execution by Execution Client
type ProcessTestInstructionExecutionReveredRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoFileVersionUsedByClient CurrentFenixExecutionWorkerProtoFileVersionEnum                                `protobuf:"varint,1,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixExecutionWorkerGrpcApi.CurrentFenixExecutionWorkerProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
	TestInstruction              *ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage `protobuf:"bytes,2,opt,name=TestInstruction,proto3" json:"TestInstruction,omitempty"`                                                                                                             // The TestInstruction itself an its attributes
	TestData                     *ProcessTestInstructionExecutionReveredRequest_TestDataMessage                 `protobuf:"bytes,7,opt,name=TestData,proto3" json:"TestData,omitempty"`                                                                                                                           // TestData used in TestExecution
}

func (x *ProcessTestInstructionExecutionReveredRequest) Reset() {
	*x = ProcessTestInstructionExecutionReveredRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTestInstructionExecutionReveredRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTestInstructionExecutionReveredRequest) ProtoMessage() {}

func (x *ProcessTestInstructionExecutionReveredRequest) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTestInstructionExecutionReveredRequest.ProtoReflect.Descriptor instead.
func (*ProcessTestInstructionExecutionReveredRequest) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessTestInstructionExecutionReveredRequest) GetProtoFileVersionUsedByClient() CurrentFenixExecutionWorkerProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixExecutionWorkerProtoFileVersionEnum_CurrentFenixExecutionWorkerProtoFileVersionEnum_DEFAULT_NOT_SET
}

func (x *ProcessTestInstructionExecutionReveredRequest) GetTestInstruction() *ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage {
	if x != nil {
		return x.TestInstruction
	}
	return nil
}

func (x *ProcessTestInstructionExecutionReveredRequest) GetTestData() *ProcessTestInstructionExecutionReveredRequest_TestDataMessage {
	if x != nil {
		return x.TestData
	}
	return nil
}

// Response from execution client to execution server that client can execute TestInstruction
type ProcessTestInstructionExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckNackResponse                *AckNackResponse     `protobuf:"bytes,1,opt,name=AckNackResponse,proto3" json:"AckNackResponse,omitempty"`
	TestInstructionExecutionUuid   string               `protobuf:"bytes,2,opt,name=TestInstructionExecutionUuid,proto3" json:"TestInstructionExecutionUuid,omitempty"`      // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
	ExpectedExecutionDuration      *timestamp.Timestamp `protobuf:"bytes,3,opt,name=ExpectedExecutionDuration,proto3" json:"ExpectedExecutionDuration,omitempty"`            // The expected time during an execution result can be expected back to execution server
	TestInstructionCanBeReExecuted bool                 `protobuf:"varint,4,opt,name=TestInstructionCanBeReExecuted,proto3" json:"TestInstructionCanBeReExecuted,omitempty"` // Indicates if the TestInstruction can be resent to be re-executed. Good example is validations that can be don't as many times as needed
}

func (x *ProcessTestInstructionExecutionResponse) Reset() {
	*x = ProcessTestInstructionExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTestInstructionExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTestInstructionExecutionResponse) ProtoMessage() {}

func (x *ProcessTestInstructionExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTestInstructionExecutionResponse.ProtoReflect.Descriptor instead.
func (*ProcessTestInstructionExecutionResponse) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessTestInstructionExecutionResponse) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

func (x *ProcessTestInstructionExecutionResponse) GetTestInstructionExecutionUuid() string {
	if x != nil {
		return x.TestInstructionExecutionUuid
	}
	return ""
}

func (x *ProcessTestInstructionExecutionResponse) GetExpectedExecutionDuration() *timestamp.Timestamp {
	if x != nil {
		return x.ExpectedExecutionDuration
	}
	return nil
}

func (x *ProcessTestInstructionExecutionResponse) GetTestInstructionCanBeReExecuted() bool {
	if x != nil {
		return x.TestInstructionCanBeReExecuted
	}
	return false
}

// This message is sent from Fenix Execution Server, to Client System, to request something for a specific TestInstruction-execution
type TestInstructionExecutionRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoFileVersionUsedByClient CurrentFenixExecutionWorkerProtoFileVersionEnum `protobuf:"varint,1,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixExecutionWorkerGrpcApi.CurrentFenixExecutionWorkerProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
	TestInstructionExecutionUuid string                                          `protobuf:"bytes,2,opt,name=TestInstructionExecutionUuid,proto3" json:"TestInstructionExecutionUuid,omitempty"`                                                                                   // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
}

func (x *TestInstructionExecutionRequestMessage) Reset() {
	*x = TestInstructionExecutionRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionExecutionRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionExecutionRequestMessage) ProtoMessage() {}

func (x *TestInstructionExecutionRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionExecutionRequestMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionExecutionRequestMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{2}
}

func (x *TestInstructionExecutionRequestMessage) GetProtoFileVersionUsedByClient() CurrentFenixExecutionWorkerProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixExecutionWorkerProtoFileVersionEnum_CurrentFenixExecutionWorkerProtoFileVersionEnum_DEFAULT_NOT_SET
}

func (x *TestInstructionExecutionRequestMessage) GetTestInstructionExecutionUuid() string {
	if x != nil {
		return x.TestInstructionExecutionUuid
	}
	return ""
}

// This message is sent from Fenix Execution Server, stream LogPostsMessageto Client System, to request current execution result/status for a TestInstruction
type CurrentTestInstructionExecutionResultRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoFileVersionUsedByClient CurrentFenixExecutionWorkerProtoFileVersionEnum `protobuf:"varint,1,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixExecutionWorkerGrpcApi.CurrentFenixExecutionWorkerProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
	TestInstructionExecutionUuid string                                          `protobuf:"bytes,2,opt,name=TestInstructionExecutionUuid,proto3" json:"TestInstructionExecutionUuid,omitempty"`                                                                                   // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
}

func (x *CurrentTestInstructionExecutionResultRequestMessage) Reset() {
	*x = CurrentTestInstructionExecutionResultRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentTestInstructionExecutionResultRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentTestInstructionExecutionResultRequestMessage) ProtoMessage() {}

func (x *CurrentTestInstructionExecutionResultRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentTestInstructionExecutionResultRequestMessage.ProtoReflect.Descriptor instead.
func (*CurrentTestInstructionExecutionResultRequestMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{3}
}

func (x *CurrentTestInstructionExecutionResultRequestMessage) GetProtoFileVersionUsedByClient() CurrentFenixExecutionWorkerProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixExecutionWorkerProtoFileVersionEnum_CurrentFenixExecutionWorkerProtoFileVersionEnum_DEFAULT_NOT_SET
}

func (x *CurrentTestInstructionExecutionResultRequestMessage) GetTestInstructionExecutionUuid() string {
	if x != nil {
		return x.TestInstructionExecutionUuid
	}
	return ""
}

// This message is sent from Client System, to Fenix Execution Server via a Execution Worker, when a TestExecution has stopped executed, and the result is final (OK or not OK result)
type FinalTestInstructionExecutionResultMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSystemIdentification             *ClientSystemIdentificationMessage                                    `protobuf:"bytes,1,opt,name=ClientSystemIdentification,proto3" json:"ClientSystemIdentification,omitempty"`                                                                              // Identifies Client System and Proto-file version used
	TestInstructionExecutionUuid           string                                                                `protobuf:"bytes,2,opt,name=TestInstructionExecutionUuid,proto3" json:"TestInstructionExecutionUuid,omitempty"`                                                                          // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
	TestInstructionExecutionVersion        string                                                                `protobuf:"bytes,3,opt,name=TestInstructionExecutionVersion,proto3" json:"TestInstructionExecutionVersion,omitempty"`                                                                    // The version number for the TestInstructionExecution, set by Fenix Execution Server
	TestInstructionExecutionStatus         TestInstructionExecutionStatusEnum                                    `protobuf:"varint,4,opt,name=TestInstructionExecutionStatus,proto3,enum=fenixExecutionWorkerGrpcApi.TestInstructionExecutionStatusEnum" json:"TestInstructionExecutionStatus,omitempty"` // The final status for the TestInstruction-execution
	TestInstructionExecutionStartTimeStamp *timestamp.Timestamp                                                  `protobuf:"bytes,5,opt,name=TestInstructionExecutionStartTimeStamp,proto3" json:"TestInstructionExecutionStartTimeStamp,omitempty"`                                                      // The TimeStamp for when the TestInstructionExecution started
	TestInstructionExecutionEndTimeStamp   *timestamp.Timestamp                                                  `protobuf:"bytes,6,opt,name=TestInstructionExecutionEndTimeStamp,proto3" json:"TestInstructionExecutionEndTimeStamp,omitempty"`                                                          // The TimeStamp for when the TestInstructionExecution ended
	ResponseVariables                      []*FinalTestInstructionExecutionResultMessage_ResponseVariableMessage `protobuf:"bytes,7,rep,name=ResponseVariables,proto3" json:"ResponseVariables,omitempty"`                                                                                                // Connector can send back variables to be used by later TestInstructionExecutions
	LogPosts                               []*FinalTestInstructionExecutionResultMessage_LogPostMessage          `protobuf:"bytes,8,rep,name=LogPosts,proto3" json:"LogPosts,omitempty"`                                                                                                                  // The container containing the actual log information
}

func (x *FinalTestInstructionExecutionResultMessage) Reset() {
	*x = FinalTestInstructionExecutionResultMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalTestInstructionExecutionResultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalTestInstructionExecutionResultMessage) ProtoMessage() {}

func (x *FinalTestInstructionExecutionResultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalTestInstructionExecutionResultMessage.ProtoReflect.Descriptor instead.
func (*FinalTestInstructionExecutionResultMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{4}
}

func (x *FinalTestInstructionExecutionResultMessage) GetClientSystemIdentification() *ClientSystemIdentificationMessage {
	if x != nil {
		return x.ClientSystemIdentification
	}
	return nil
}

func (x *FinalTestInstructionExecutionResultMessage) GetTestInstructionExecutionUuid() string {
	if x != nil {
		return x.TestInstructionExecutionUuid
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage) GetTestInstructionExecutionVersion() string {
	if x != nil {
		return x.TestInstructionExecutionVersion
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage) GetTestInstructionExecutionStatus() TestInstructionExecutionStatusEnum {
	if x != nil {
		return x.TestInstructionExecutionStatus
	}
	return TestInstructionExecutionStatusEnum_TestInstructionExecutionStatusEnum_DEFAULT_NOT_SET
}

func (x *FinalTestInstructionExecutionResultMessage) GetTestInstructionExecutionStartTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.TestInstructionExecutionStartTimeStamp
	}
	return nil
}

func (x *FinalTestInstructionExecutionResultMessage) GetTestInstructionExecutionEndTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.TestInstructionExecutionEndTimeStamp
	}
	return nil
}

func (x *FinalTestInstructionExecutionResultMessage) GetResponseVariables() []*FinalTestInstructionExecutionResultMessage_ResponseVariableMessage {
	if x != nil {
		return x.ResponseVariables
	}
	return nil
}

func (x *FinalTestInstructionExecutionResultMessage) GetLogPosts() []*FinalTestInstructionExecutionResultMessage_LogPostMessage {
	if x != nil {
		return x.LogPosts
	}
	return nil
}

// This message is a log post message that can be sent any time from Client System to Fenix Execution Server
type LogPostsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSystemIdentification *ClientSystemIdentificationMessage `protobuf:"bytes,1,opt,name=ClientSystemIdentification,proto3" json:"ClientSystemIdentification,omitempty"` // Identifies Client System and Proto-file version used
	LogPostUuid                string                             `protobuf:"bytes,2,opt,name=LogPostUuid,proto3" json:"LogPostUuid,omitempty"`                               // A unique uuid for the log post
	LogPosts                   []*LogPostsMessage_LogPostMessage  `protobuf:"bytes,3,rep,name=LogPosts,proto3" json:"LogPosts,omitempty"`                                     // The container containing the actual log information
}

func (x *LogPostsMessage) Reset() {
	*x = LogPostsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogPostsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogPostsMessage) ProtoMessage() {}

func (x *LogPostsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogPostsMessage.ProtoReflect.Descriptor instead.
func (*LogPostsMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{5}
}

func (x *LogPostsMessage) GetClientSystemIdentification() *ClientSystemIdentificationMessage {
	if x != nil {
		return x.ClientSystemIdentification
	}
	return nil
}

func (x *LogPostsMessage) GetLogPostUuid() string {
	if x != nil {
		return x.LogPostUuid
	}
	return ""
}

func (x *LogPostsMessage) GetLogPosts() []*LogPostsMessage_LogPostMessage {
	if x != nil {
		return x.LogPosts
	}
	return nil
}

// Response from execution client to execution worker using direct gRPC call instead of doing response on call, due to it is not possible to call Worker from Connector
type ProcessTestInstructionExecutionReversedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckNackResponse                *AckNackResponse     `protobuf:"bytes,1,opt,name=AckNackResponse,proto3" json:"AckNackResponse,omitempty"`
	TestInstructionExecutionUuid   string               `protobuf:"bytes,2,opt,name=TestInstructionExecutionUuid,proto3" json:"TestInstructionExecutionUuid,omitempty"`      // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
	ExpectedExecutionDuration      *timestamp.Timestamp `protobuf:"bytes,3,opt,name=ExpectedExecutionDuration,proto3" json:"ExpectedExecutionDuration,omitempty"`            // The expected time during an execution result can be expected back to execution server
	TestInstructionCanBeReExecuted bool                 `protobuf:"varint,4,opt,name=TestInstructionCanBeReExecuted,proto3" json:"TestInstructionCanBeReExecuted,omitempty"` // Indicates if the TestInstruction can be resent to be re-executed. Good example is validations that can be don't as many times as needed
}

func (x *ProcessTestInstructionExecutionReversedResponse) Reset() {
	*x = ProcessTestInstructionExecutionReversedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTestInstructionExecutionReversedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTestInstructionExecutionReversedResponse) ProtoMessage() {}

func (x *ProcessTestInstructionExecutionReversedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTestInstructionExecutionReversedResponse.ProtoReflect.Descriptor instead.
func (*ProcessTestInstructionExecutionReversedResponse) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{6}
}

func (x *ProcessTestInstructionExecutionReversedResponse) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

func (x *ProcessTestInstructionExecutionReversedResponse) GetTestInstructionExecutionUuid() string {
	if x != nil {
		return x.TestInstructionExecutionUuid
	}
	return ""
}

func (x *ProcessTestInstructionExecutionReversedResponse) GetExpectedExecutionDuration() *timestamp.Timestamp {
	if x != nil {
		return x.ExpectedExecutionDuration
	}
	return nil
}

func (x *ProcessTestInstructionExecutionReversedResponse) GetTestInstructionCanBeReExecuted() bool {
	if x != nil {
		return x.TestInstructionCanBeReExecuted
	}
	return false
}

// Message from Connector to Worker says that it is alive and can receive work or if Connector will shut down
type ConnectorIsReadyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSystemIdentification *ClientSystemIdentificationMessage `protobuf:"bytes,1,opt,name=ClientSystemIdentification,proto3" json:"ClientSystemIdentification,omitempty"`                                    // Identifies Client System and Proto-file version used
	ConnectorIsReady           ConnectorIsReadyEnum               `protobuf:"varint,2,opt,name=ConnectorIsReady,proto3,enum=fenixExecutionWorkerGrpcApi.ConnectorIsReadyEnum" json:"ConnectorIsReady,omitempty"` // The values the Connector sends to the Worker to tell it's status
}

func (x *ConnectorIsReadyMessage) Reset() {
	*x = ConnectorIsReadyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorIsReadyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorIsReadyMessage) ProtoMessage() {}

func (x *ConnectorIsReadyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorIsReadyMessage.ProtoReflect.Descriptor instead.
func (*ConnectorIsReadyMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{7}
}

func (x *ConnectorIsReadyMessage) GetClientSystemIdentification() *ClientSystemIdentificationMessage {
	if x != nil {
		return x.ClientSystemIdentification
	}
	return nil
}

func (x *ConnectorIsReadyMessage) GetConnectorIsReady() ConnectorIsReadyEnum {
	if x != nil {
		return x.ConnectorIsReady
	}
	return ConnectorIsReadyEnum_ConnectorIsReadyEnum_DEFAULT_NOT_SET
}

// Message from Worker to Connector when Connector says that it is alive and can receive work or if Connector will shut down
type ConnectorIsReadyResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckNackResponse *AckNackResponse `protobuf:"bytes,1,opt,name=AckNackResponse,proto3" json:"AckNackResponse,omitempty"`
}

func (x *ConnectorIsReadyResponseMessage) Reset() {
	*x = ConnectorIsReadyResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorIsReadyResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorIsReadyResponseMessage) ProtoMessage() {}

func (x *ConnectorIsReadyResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorIsReadyResponseMessage.ProtoReflect.Descriptor instead.
func (*ConnectorIsReadyResponseMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{8}
}

func (x *ConnectorIsReadyResponseMessage) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

type ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionExecutionUuid string                                                                           `protobuf:"bytes,1,opt,name=TestInstructionExecutionUuid,proto3" json:"TestInstructionExecutionUuid,omitempty"` // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
	TestInstructionUuid          string                                                                           `protobuf:"bytes,2,opt,name=TestInstructionUuid,proto3" json:"TestInstructionUuid,omitempty"`                   // TestInstruction UUID, set by Client system
	TestInstructionName          string                                                                           `protobuf:"bytes,3,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"`                   // TestInstruction Name, set by Client system
	MajorVersionNumber           uint32                                                                           `protobuf:"varint,4,opt,name=MajorVersionNumber,proto3" json:"MajorVersionNumber,omitempty"`                    // Major Version Number
	MinorVersionNumber           uint32                                                                           `protobuf:"varint,5,opt,name=MinorVersionNumber,proto3" json:"MinorVersionNumber,omitempty"`                    // Minor Version Number
	TestInstructionAttributes    []*ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage `protobuf:"bytes,6,rep,name=TestInstructionAttributes,proto3" json:"TestInstructionAttributes,omitempty"`       // A list of all attributes for the TestInstruction
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage) Reset() {
	*x = ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage) ProtoMessage() {
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage.ProtoReflect.Descriptor instead.
func (*ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage) GetTestInstructionExecutionUuid() string {
	if x != nil {
		return x.TestInstructionExecutionUuid
	}
	return ""
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage) GetTestInstructionUuid() string {
	if x != nil {
		return x.TestInstructionUuid
	}
	return ""
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage) GetMajorVersionNumber() uint32 {
	if x != nil {
		return x.MajorVersionNumber
	}
	return 0
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage) GetMinorVersionNumber() uint32 {
	if x != nil {
		return x.MinorVersionNumber
	}
	return 0
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage) GetTestInstructionAttributes() []*ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage {
	if x != nil {
		return x.TestInstructionAttributes
	}
	return nil
}

type ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionAttributeType     TestInstructionAttributeTypeEnum `protobuf:"varint,1,opt,name=TestInstructionAttributeType,proto3,enum=fenixExecutionWorkerGrpcApi.TestInstructionAttributeTypeEnum" json:"TestInstructionAttributeType,omitempty"` // Defines witch type attribute; TEXTBOX, COMBOBOX...
	TestInstructionAttributeUuid     string                           `protobuf:"bytes,2,opt,name=TestInstructionAttributeUuid,proto3" json:"TestInstructionAttributeUuid,omitempty"`                                                                    // The unique uuid for the TestInstructionAttribute, set by client system
	TestInstructionAttributeName     string                           `protobuf:"bytes,3,opt,name=TestInstructionAttributeName,proto3" json:"TestInstructionAttributeName,omitempty"`                                                                    // The name of the TestInstructionAttribute
	AttributeValueAsString           string                           `protobuf:"bytes,4,opt,name=AttributeValueAsString,proto3" json:"AttributeValueAsString,omitempty"`                                                                                // The String-representation of the value
	AttributeValueUuid               string                           `protobuf:"bytes,5,opt,name=AttributeValueUuid,proto3" json:"AttributeValueUuid,omitempty"`                                                                                        // Combo-boxes can us a UUID as unique value behind the text visible in the combo-box
	TestInstructionAttributeTypeUuid string                           `protobuf:"bytes,7,opt,name=TestInstructionAttributeTypeUuid,proto3" json:"TestInstructionAttributeTypeUuid,omitempty"`                                                            // The unique uuid for the TestInstructionAttribute-type, used to extract certain attributes types in Connector (CA)
	TestInstructionAttributeTypeName string                           `protobuf:"bytes,8,opt,name=TestInstructionAttributeTypeName,proto3" json:"TestInstructionAttributeTypeName,omitempty"`                                                            // The name for the TestInstructionAttribute-type, used to group attributes in GUI
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage) Reset() {
	*x = ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage) ProtoMessage() {
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage.ProtoReflect.Descriptor instead.
func (*ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage) GetTestInstructionAttributeType() TestInstructionAttributeTypeEnum {
	if x != nil {
		return x.TestInstructionAttributeType
	}
	return TestInstructionAttributeTypeEnum_TestInstructionAttributeTypeEnum_DEFAULT_NOT_SET
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage) GetTestInstructionAttributeUuid() string {
	if x != nil {
		return x.TestInstructionAttributeUuid
	}
	return ""
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage) GetTestInstructionAttributeName() string {
	if x != nil {
		return x.TestInstructionAttributeName
	}
	return ""
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage) GetAttributeValueAsString() string {
	if x != nil {
		return x.AttributeValueAsString
	}
	return ""
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage) GetAttributeValueUuid() string {
	if x != nil {
		return x.AttributeValueUuid
	}
	return ""
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage) GetTestInstructionAttributeTypeUuid() string {
	if x != nil {
		return x.TestInstructionAttributeTypeUuid
	}
	return ""
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage) GetTestInstructionAttributeTypeName() string {
	if x != nil {
		return x.TestInstructionAttributeTypeName
	}
	return ""
}

type ProcessTestInstructionExecutionReveredRequest_TestDataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataSetUuid           string                                                                                            `protobuf:"bytes,1,opt,name=TestDataSetUuid,proto3" json:"TestDataSetUuid,omitempty"`                     // Reference to TestDataSet held by client system to understand what testdata to use
	ManualOverrideForTestData []*ProcessTestInstructionExecutionReveredRequest_TestDataMessage_ManualOverrideForTestDataMessage `protobuf:"bytes,2,rep,name=ManualOverrideForTestData,proto3" json:"ManualOverrideForTestData,omitempty"` // If the user has done manual changes to testdata then that is specified here
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestDataMessage) Reset() {
	*x = ProcessTestInstructionExecutionReveredRequest_TestDataMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestDataMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTestInstructionExecutionReveredRequest_TestDataMessage) ProtoMessage() {}

func (x *ProcessTestInstructionExecutionReveredRequest_TestDataMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTestInstructionExecutionReveredRequest_TestDataMessage.ProtoReflect.Descriptor instead.
func (*ProcessTestInstructionExecutionReveredRequest_TestDataMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestDataMessage) GetTestDataSetUuid() string {
	if x != nil {
		return x.TestDataSetUuid
	}
	return ""
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestDataMessage) GetManualOverrideForTestData() []*ProcessTestInstructionExecutionReveredRequest_TestDataMessage_ManualOverrideForTestDataMessage {
	if x != nil {
		return x.ManualOverrideForTestData
	}
	return nil
}

type ProcessTestInstructionExecutionReveredRequest_TestDataMessage_ManualOverrideForTestDataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataSetAttributeUuid  string `protobuf:"bytes,1,opt,name=TestDataSetAttributeUuid,proto3" json:"TestDataSetAttributeUuid,omitempty"`   // A unique reference for the specified TestDataSetAttribute
	TestDataSetAttributeName  string `protobuf:"bytes,2,opt,name=TestDataSetAttributeName,proto3" json:"TestDataSetAttributeName,omitempty"`   // The name of the TestDataSetAttribute
	TestDataSetAttributeValue string `protobuf:"bytes,3,opt,name=TestDataSetAttributeValue,proto3" json:"TestDataSetAttributeValue,omitempty"` // The value for the TestDataSetAttribute to be used within the test
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestDataMessage_ManualOverrideForTestDataMessage) Reset() {
	*x = ProcessTestInstructionExecutionReveredRequest_TestDataMessage_ManualOverrideForTestDataMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestDataMessage_ManualOverrideForTestDataMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTestInstructionExecutionReveredRequest_TestDataMessage_ManualOverrideForTestDataMessage) ProtoMessage() {
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestDataMessage_ManualOverrideForTestDataMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTestInstructionExecutionReveredRequest_TestDataMessage_ManualOverrideForTestDataMessage.ProtoReflect.Descriptor instead.
func (*ProcessTestInstructionExecutionReveredRequest_TestDataMessage_ManualOverrideForTestDataMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestDataMessage_ManualOverrideForTestDataMessage) GetTestDataSetAttributeUuid() string {
	if x != nil {
		return x.TestDataSetAttributeUuid
	}
	return ""
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestDataMessage_ManualOverrideForTestDataMessage) GetTestDataSetAttributeName() string {
	if x != nil {
		return x.TestDataSetAttributeName
	}
	return ""
}

func (x *ProcessTestInstructionExecutionReveredRequest_TestDataMessage_ManualOverrideForTestDataMessage) GetTestDataSetAttributeValue() string {
	if x != nil {
		return x.TestDataSetAttributeValue
	}
	return ""
}

type FinalTestInstructionExecutionResultMessage_ResponseVariableMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseVariableUuid          string `protobuf:"bytes,1,opt,name=ResponseVariableUuid,proto3" json:"ResponseVariableUuid,omitempty"`                   // The UUID of the Variable
	ResponseVariableName          string `protobuf:"bytes,2,opt,name=ResponseVariableName,proto3" json:"ResponseVariableName,omitempty"`                   // The Name of the Variable
	ResponseVariableValueAsString string `protobuf:"bytes,3,opt,name=ResponseVariableValueAsString,proto3" json:"ResponseVariableValueAsString,omitempty"` // The string representation of the Variable
}

func (x *FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) Reset() {
	*x = FinalTestInstructionExecutionResultMessage_ResponseVariableMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) ProtoMessage() {}

func (x *FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalTestInstructionExecutionResultMessage_ResponseVariableMessage.ProtoReflect.Descriptor instead.
func (*FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{4, 0}
}

func (x *FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) GetResponseVariableUuid() string {
	if x != nil {
		return x.ResponseVariableUuid
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) GetResponseVariableName() string {
	if x != nil {
		return x.ResponseVariableName
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) GetResponseVariableValueAsString() string {
	if x != nil {
		return x.ResponseVariableValueAsString
	}
	return ""
}

type FinalTestInstructionExecutionResultMessage_LogPostMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogPostTimeStamp         *timestamp.Timestamp                                                                         `protobuf:"bytes,1,opt,name=LogPostTimeStamp,proto3" json:"LogPostTimeStamp,omitempty"`                                               // The TimeStamp for the specific log post
	LogPostStatus            LogPostStatusEnum                                                                            `protobuf:"varint,2,opt,name=LogPostStatus,proto3,enum=fenixExecutionWorkerGrpcApi.LogPostStatusEnum" json:"LogPostStatus,omitempty"` // The status for the log post
	LogPostText              string                                                                                       `protobuf:"bytes,3,opt,name=LogPostText,proto3" json:"LogPostText,omitempty"`                                                         // Information text for log post
	FoundVersusExpectedValue []*FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage `protobuf:"bytes,4,rep,name=FoundVersusExpectedValue,proto3" json:"FoundVersusExpectedValue,omitempty"`                               // A list with found versus expected values, in string representations
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage) Reset() {
	*x = FinalTestInstructionExecutionResultMessage_LogPostMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalTestInstructionExecutionResultMessage_LogPostMessage) ProtoMessage() {}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalTestInstructionExecutionResultMessage_LogPostMessage.ProtoReflect.Descriptor instead.
func (*FinalTestInstructionExecutionResultMessage_LogPostMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{4, 1}
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage) GetLogPostTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.LogPostTimeStamp
	}
	return nil
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage) GetLogPostStatus() LogPostStatusEnum {
	if x != nil {
		return x.LogPostStatus
	}
	return LogPostStatusEnum_LogPostStatusEnum_DEFAULT_NOT_SET
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage) GetLogPostText() string {
	if x != nil {
		return x.LogPostText
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage) GetFoundVersusExpectedValue() []*FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage {
	if x != nil {
		return x.FoundVersusExpectedValue
	}
	return nil
}

type FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FoundValue    string `protobuf:"bytes,1,opt,name=FoundValue,proto3" json:"FoundValue,omitempty"`       // The value that was found
	ExpectedValue string `protobuf:"bytes,2,opt,name=ExpectedValue,proto3" json:"ExpectedValue,omitempty"` // The value that was expected
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage) Reset() {
	*x = FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage) ProtoMessage() {
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage.ProtoReflect.Descriptor instead.
func (*FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{4, 1, 0}
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage) GetFoundValue() string {
	if x != nil {
		return x.FoundValue
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage) GetExpectedValue() string {
	if x != nil {
		return x.ExpectedValue
	}
	return ""
}

type LogPostsMessage_LogPostMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogPostTimeStamp         *timestamp.Timestamp                                              `protobuf:"bytes,1,opt,name=LogPostTimeStamp,proto3" json:"LogPostTimeStamp,omitempty"`                                               // The TimeStamp for the specific log post
	LogPostStatus            LogPostStatusEnum                                                 `protobuf:"varint,2,opt,name=LogPostStatus,proto3,enum=fenixExecutionWorkerGrpcApi.LogPostStatusEnum" json:"LogPostStatus,omitempty"` // The status for the log post
	LogPostText              string                                                            `protobuf:"bytes,3,opt,name=LogPostText,proto3" json:"LogPostText,omitempty"`                                                         // Information text for log post
	FoundVersusExpectedValue []*LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage `protobuf:"bytes,4,rep,name=FoundVersusExpectedValue,proto3" json:"FoundVersusExpectedValue,omitempty"`                               // A list with found versus expected values, in string representations
}

func (x *LogPostsMessage_LogPostMessage) Reset() {
	*x = LogPostsMessage_LogPostMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogPostsMessage_LogPostMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogPostsMessage_LogPostMessage) ProtoMessage() {}

func (x *LogPostsMessage_LogPostMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogPostsMessage_LogPostMessage.ProtoReflect.Descriptor instead.
func (*LogPostsMessage_LogPostMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{5, 0}
}

func (x *LogPostsMessage_LogPostMessage) GetLogPostTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.LogPostTimeStamp
	}
	return nil
}

func (x *LogPostsMessage_LogPostMessage) GetLogPostStatus() LogPostStatusEnum {
	if x != nil {
		return x.LogPostStatus
	}
	return LogPostStatusEnum_LogPostStatusEnum_DEFAULT_NOT_SET
}

func (x *LogPostsMessage_LogPostMessage) GetLogPostText() string {
	if x != nil {
		return x.LogPostText
	}
	return ""
}

func (x *LogPostsMessage_LogPostMessage) GetFoundVersusExpectedValue() []*LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage {
	if x != nil {
		return x.FoundVersusExpectedValue
	}
	return nil
}

type LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FoundValue    string `protobuf:"bytes,1,opt,name=FoundValue,proto3" json:"FoundValue,omitempty"`       // The value that was found
	ExpectedValue string `protobuf:"bytes,2,opt,name=ExpectedValue,proto3" json:"ExpectedValue,omitempty"` // The value that was expected
}

func (x *LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage) Reset() {
	*x = LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage) ProtoMessage() {}

func (x *LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage.ProtoReflect.Descriptor instead.
func (*LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage) GetFoundValue() string {
	if x != nil {
		return x.FoundValue
	}
	return ""
}

func (x *LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage) GetExpectedValue() string {
	if x != nil {
		return x.ExpectedValue
	}
	return ""
}

var File_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto protoreflect.FileDescriptor

var file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDesc = []byte{
	0x0a, 0x5b, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x6a, 0x46, 0x65, 0x6e,
	0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x0f, 0x0a, 0x2d, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x1c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4c, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x94, 0x01, 0x0a,
	0x0f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xd4, 0x03, 0x0a, 0x1f,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xa8, 0x01, 0x0a, 0x19, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x19, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x1a, 0xad, 0x04, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x42,
	0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0xd2, 0x03, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0xb9, 0x01, 0x0a, 0x19, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46,
	0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x19, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xd8, 0x01, 0x0a,
	0x20, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46,
	0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a,
	0x18, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe7, 0x02, 0x0a, 0x27, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x41, 0x63, 0x6b, 0x4e,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x58, 0x0a, 0x19, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1e, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x42,
	0x65, 0x52, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x52, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x22, 0xff, 0x01, 0x0a, 0x26, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x90, 0x01, 0x0a,
	0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x75, 0x69, 0x64, 0x22, 0x8c, 0x02, 0x0a, 0x33, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x1c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x42,
	0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75,
	0x69, 0x64, 0x22, 0xe7, 0x0c, 0x0a, 0x2a, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x7e, 0x0a, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x87, 0x01, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x72, 0x0a, 0x26, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x26, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x6e, 0x0a,
	0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x8d, 0x01,
	0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x11, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x72, 0x0a,
	0x08, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x56, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74,
	0x73, 0x1a, 0xc7, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0xee, 0x03, 0x0a, 0x0e,
	0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46,
	0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x50,
	0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x4c,
	0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0xb2,
	0x01, 0x0a, 0x18, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x76, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x6f,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56,
	0x65, 0x72, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x18, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x67, 0x0a, 0x1f, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe2, 0x05, 0x0a,
	0x0f, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x7e, 0x0a, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x57, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x1a, 0xd3, 0x03, 0x0a, 0x0e,
	0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46,
	0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x50,
	0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x4c,
	0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x97,
	0x01, 0x0a, 0x18, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x5b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x18,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x67, 0x0a, 0x1f, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x45,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xef, 0x02, 0x0a, 0x2f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b,
	0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x41, 0x63,
	0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x58, 0x0a, 0x19, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x19, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1e, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6e, 0x42, 0x65, 0x52, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x52, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x7e, 0x0a, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5d, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x10, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0x79,
	0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x56, 0x0a, 0x0f, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2d, 0x5a, 0x0d, 0x2e, 0x2f, 0x67,
	0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x1b, 0x46, 0x65, 0x6e,
	0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescOnce sync.Once
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescData = file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDesc
)

func file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescGZIP() []byte {
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescOnce.Do(func() {
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescData)
	})
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDescData
}

var file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_goTypes = []interface{}{
	(*ProcessTestInstructionExecutionReveredRequest)(nil),                                                  // 0: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReveredRequest
	(*ProcessTestInstructionExecutionResponse)(nil),                                                        // 1: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionResponse
	(*TestInstructionExecutionRequestMessage)(nil),                                                         // 2: fenixExecutionWorkerGrpcApi.TestInstructionExecutionRequestMessage
	(*CurrentTestInstructionExecutionResultRequestMessage)(nil),                                            // 3: fenixExecutionWorkerGrpcApi.CurrentTestInstructionExecutionResultRequestMessage
	(*FinalTestInstructionExecutionResultMessage)(nil),                                                     // 4: fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage
	(*LogPostsMessage)(nil),                                                                                // 5: fenixExecutionWorkerGrpcApi.LogPostsMessage
	(*ProcessTestInstructionExecutionReversedResponse)(nil),                                                // 6: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReversedResponse
	(*ConnectorIsReadyMessage)(nil),                                                                        // 7: fenixExecutionWorkerGrpcApi.ConnectorIsReadyMessage
	(*ConnectorIsReadyResponseMessage)(nil),                                                                // 8: fenixExecutionWorkerGrpcApi.ConnectorIsReadyResponseMessage
	(*ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage)(nil),                  // 9: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReveredRequest.TestInstructionExecutionMessage
	(*ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage)(nil),                  // 10: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReveredRequest.TestInstructionAttributeMessage
	(*ProcessTestInstructionExecutionReveredRequest_TestDataMessage)(nil),                                  // 11: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReveredRequest.TestDataMessage
	(*ProcessTestInstructionExecutionReveredRequest_TestDataMessage_ManualOverrideForTestDataMessage)(nil), // 12: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReveredRequest.TestDataMessage.ManualOverrideForTestDataMessage
	(*FinalTestInstructionExecutionResultMessage_ResponseVariableMessage)(nil),                             // 13: fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage.ResponseVariableMessage
	(*FinalTestInstructionExecutionResultMessage_LogPostMessage)(nil),                                      // 14: fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPostMessage
	(*FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage)(nil),      // 15: fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPostMessage.FoundVersusExpectedValueMessage
	(*LogPostsMessage_LogPostMessage)(nil),                                                                 // 16: fenixExecutionWorkerGrpcApi.LogPostsMessage.LogPostMessage
	(*LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage)(nil),                                 // 17: fenixExecutionWorkerGrpcApi.LogPostsMessage.LogPostMessage.FoundVersusExpectedValueMessage
	(CurrentFenixExecutionWorkerProtoFileVersionEnum)(0),                                                   // 18: fenixExecutionWorkerGrpcApi.CurrentFenixExecutionWorkerProtoFileVersionEnum
	(*AckNackResponse)(nil),                                                                                // 19: fenixExecutionWorkerGrpcApi.AckNackResponse
	(*timestamp.Timestamp)(nil),                                                                            // 20: google.protobuf.Timestamp
	(*ClientSystemIdentificationMessage)(nil),                                                              // 21: fenixExecutionWorkerGrpcApi.ClientSystemIdentificationMessage
	(TestInstructionExecutionStatusEnum)(0),                                                                // 22: fenixExecutionWorkerGrpcApi.TestInstructionExecutionStatusEnum
	(ConnectorIsReadyEnum)(0),                                                                              // 23: fenixExecutionWorkerGrpcApi.ConnectorIsReadyEnum
	(TestInstructionAttributeTypeEnum)(0),                                                                  // 24: fenixExecutionWorkerGrpcApi.TestInstructionAttributeTypeEnum
	(LogPostStatusEnum)(0),                                                                                 // 25: fenixExecutionWorkerGrpcApi.LogPostStatusEnum
}
var file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_depIdxs = []int32{
	18, // 0: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReveredRequest.ProtoFileVersionUsedByClient:type_name -> fenixExecutionWorkerGrpcApi.CurrentFenixExecutionWorkerProtoFileVersionEnum
	9,  // 1: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReveredRequest.TestInstruction:type_name -> fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReveredRequest.TestInstructionExecutionMessage
	11, // 2: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReveredRequest.TestData:type_name -> fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReveredRequest.TestDataMessage
	19, // 3: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionResponse.AckNackResponse:type_name -> fenixExecutionWorkerGrpcApi.AckNackResponse
	20, // 4: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionResponse.ExpectedExecutionDuration:type_name -> google.protobuf.Timestamp
	18, // 5: fenixExecutionWorkerGrpcApi.TestInstructionExecutionRequestMessage.ProtoFileVersionUsedByClient:type_name -> fenixExecutionWorkerGrpcApi.CurrentFenixExecutionWorkerProtoFileVersionEnum
	18, // 6: fenixExecutionWorkerGrpcApi.CurrentTestInstructionExecutionResultRequestMessage.ProtoFileVersionUsedByClient:type_name -> fenixExecutionWorkerGrpcApi.CurrentFenixExecutionWorkerProtoFileVersionEnum
	21, // 7: fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage.ClientSystemIdentification:type_name -> fenixExecutionWorkerGrpcApi.ClientSystemIdentificationMessage
	22, // 8: fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage.TestInstructionExecutionStatus:type_name -> fenixExecutionWorkerGrpcApi.TestInstructionExecutionStatusEnum
	20, // 9: fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage.TestInstructionExecutionStartTimeStamp:type_name -> google.protobuf.Timestamp
	20, // 10: fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage.TestInstructionExecutionEndTimeStamp:type_name -> google.protobuf.Timestamp
	13, // 11: fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage.ResponseVariables:type_name -> fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage.ResponseVariableMessage
	14, // 12: fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPosts:type_name -> fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPostMessage
	21, // 13: fenixExecutionWorkerGrpcApi.LogPostsMessage.ClientSystemIdentification:type_name -> fenixExecutionWorkerGrpcApi.ClientSystemIdentificationMessage
	16, // 14: fenixExecutionWorkerGrpcApi.LogPostsMessage.LogPosts:type_name -> fenixExecutionWorkerGrpcApi.LogPostsMessage.LogPostMessage
	19, // 15: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReversedResponse.AckNackResponse:type_name -> fenixExecutionWorkerGrpcApi.AckNackResponse
	20, // 16: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReversedResponse.ExpectedExecutionDuration:type_name -> google.protobuf.Timestamp
	21, // 17: fenixExecutionWorkerGrpcApi.ConnectorIsReadyMessage.ClientSystemIdentification:type_name -> fenixExecutionWorkerGrpcApi.ClientSystemIdentificationMessage
	23, // 18: fenixExecutionWorkerGrpcApi.ConnectorIsReadyMessage.ConnectorIsReady:type_name -> fenixExecutionWorkerGrpcApi.ConnectorIsReadyEnum
	19, // 19: fenixExecutionWorkerGrpcApi.ConnectorIsReadyResponseMessage.AckNackResponse:type_name -> fenixExecutionWorkerGrpcApi.AckNackResponse
	10, // 20: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReveredRequest.TestInstructionExecutionMessage.TestInstructionAttributes:type_name -> fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReveredRequest.TestInstructionAttributeMessage
	24, // 21: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReveredRequest.TestInstructionAttributeMessage.TestInstructionAttributeType:type_name -> fenixExecutionWorkerGrpcApi.TestInstructionAttributeTypeEnum
	12, // 22: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReveredRequest.TestDataMessage.ManualOverrideForTestData:type_name -> fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReveredRequest.TestDataMessage.ManualOverrideForTestDataMessage
	20, // 23: fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPostMessage.LogPostTimeStamp:type_name -> google.protobuf.Timestamp
	25, // 24: fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPostMessage.LogPostStatus:type_name -> fenixExecutionWorkerGrpcApi.LogPostStatusEnum
	15, // 25: fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPostMessage.FoundVersusExpectedValue:type_name -> fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPostMessage.FoundVersusExpectedValueMessage
	20, // 26: fenixExecutionWorkerGrpcApi.LogPostsMessage.LogPostMessage.LogPostTimeStamp:type_name -> google.protobuf.Timestamp
	25, // 27: fenixExecutionWorkerGrpcApi.LogPostsMessage.LogPostMessage.LogPostStatus:type_name -> fenixExecutionWorkerGrpcApi.LogPostStatusEnum
	17, // 28: fenixExecutionWorkerGrpcApi.LogPostsMessage.LogPostMessage.FoundVersusExpectedValue:type_name -> fenixExecutionWorkerGrpcApi.LogPostsMessage.LogPostMessage.FoundVersusExpectedValueMessage
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() {
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_init()
}
func file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_init() {
	if File_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto != nil {
		return
	}
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_GeneralMessagesAndEnums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTestInstructionExecutionReveredRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTestInstructionExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionExecutionRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentTestInstructionExecutionResultRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalTestInstructionExecutionResultMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogPostsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTestInstructionExecutionReversedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorIsReadyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorIsReadyResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTestInstructionExecutionReveredRequest_TestInstructionExecutionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTestInstructionExecutionReveredRequest_TestInstructionAttributeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTestInstructionExecutionReveredRequest_TestDataMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTestInstructionExecutionReveredRequest_TestDataMessage_ManualOverrideForTestDataMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalTestInstructionExecutionResultMessage_ResponseVariableMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalTestInstructionExecutionResultMessage_LogPostMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogPostsMessage_LogPostMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_goTypes,
		DependencyIndexes: file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_depIdxs,
		MessageInfos:      file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_msgTypes,
	}.Build()
	File_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto = out.File
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_rawDesc = nil
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_goTypes = nil
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_depIdxs = nil
}
