// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: FenixExecutionServer/fenixExecutionWorkerGrpcApi/fenixExecutionWorkerGrpcApi.proto

package go_grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FenixExecutionWorkerGrpcServices_AreYouAlive_FullMethodName                                  = "/fenixExecutionWorkerGrpcApi.FenixExecutionWorkerGrpcServices/AreYouAlive"
	FenixExecutionWorkerGrpcServices_ReportProcessingCapability_FullMethodName                   = "/fenixExecutionWorkerGrpcApi.FenixExecutionWorkerGrpcServices/ReportProcessingCapability"
	FenixExecutionWorkerGrpcServices_ProcessTestInstructionExecution_FullMethodName              = "/fenixExecutionWorkerGrpcApi.FenixExecutionWorkerGrpcServices/ProcessTestInstructionExecution"
	FenixExecutionWorkerGrpcServices_ProcessTestInstructionExecutionPubSub_FullMethodName        = "/fenixExecutionWorkerGrpcApi.FenixExecutionWorkerGrpcServices/ProcessTestInstructionExecutionPubSub"
	FenixExecutionWorkerGrpcServices_ReportCompleteTestInstructionExecutionResult_FullMethodName = "/fenixExecutionWorkerGrpcApi.FenixExecutionWorkerGrpcServices/ReportCompleteTestInstructionExecutionResult"
	FenixExecutionWorkerGrpcServices_ReportCurrentTestInstructionExecutionResult_FullMethodName  = "/fenixExecutionWorkerGrpcApi.FenixExecutionWorkerGrpcServices/ReportCurrentTestInstructionExecutionResult"
	FenixExecutionWorkerGrpcServices_SendAllLogPostForExecution_FullMethodName                   = "/fenixExecutionWorkerGrpcApi.FenixExecutionWorkerGrpcServices/SendAllLogPostForExecution"
)

// FenixExecutionWorkerGrpcServicesClient is the client API for FenixExecutionWorkerGrpcServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FenixExecutionWorkerGrpcServicesClient interface {
	// Anyone can check if Fenix Execution Worker is alive with this service
	AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Ask Client to inform Execution Server of Clients capability to execute requests in parallell, serial or no processing at all
	ReportProcessingCapability(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Fenix Execution Server send a request to Execution Worker to initiate a execution of a TestInstruction
	ProcessTestInstructionExecution(ctx context.Context, in *ProcessTestInstructionExecutionReveredRequest, opts ...grpc.CallOption) (*ProcessTestInstructionExecutionResponse, error)
	// Fenix Execution Server send a request to Execution Worker to initiate an execution of a TestInstruction
	ProcessTestInstructionExecutionPubSub(ctx context.Context, in *ProcessTestInstructionExecutionPubSubRequest, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Execution Server ask Worker (client) to report the final results of the execution result to the Server
	ReportCompleteTestInstructionExecutionResult(ctx context.Context, in *TestInstructionExecutionRequestMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Execution Server ask Worker (client) to report the ongoing results of the execution result to the Server
	ReportCurrentTestInstructionExecutionResult(ctx context.Context, in *TestInstructionExecutionRequestMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Execution Server ask Worker (client) to report all log posts of the execution result to the Server
	SendAllLogPostForExecution(ctx context.Context, in *TestInstructionExecutionRequestMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
}

type fenixExecutionWorkerGrpcServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewFenixExecutionWorkerGrpcServicesClient(cc grpc.ClientConnInterface) FenixExecutionWorkerGrpcServicesClient {
	return &fenixExecutionWorkerGrpcServicesClient{cc}
}

func (c *fenixExecutionWorkerGrpcServicesClient) AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionWorkerGrpcServices_AreYouAlive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionWorkerGrpcServicesClient) ReportProcessingCapability(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionWorkerGrpcServices_ReportProcessingCapability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionWorkerGrpcServicesClient) ProcessTestInstructionExecution(ctx context.Context, in *ProcessTestInstructionExecutionReveredRequest, opts ...grpc.CallOption) (*ProcessTestInstructionExecutionResponse, error) {
	out := new(ProcessTestInstructionExecutionResponse)
	err := c.cc.Invoke(ctx, FenixExecutionWorkerGrpcServices_ProcessTestInstructionExecution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionWorkerGrpcServicesClient) ProcessTestInstructionExecutionPubSub(ctx context.Context, in *ProcessTestInstructionExecutionPubSubRequest, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionWorkerGrpcServices_ProcessTestInstructionExecutionPubSub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionWorkerGrpcServicesClient) ReportCompleteTestInstructionExecutionResult(ctx context.Context, in *TestInstructionExecutionRequestMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionWorkerGrpcServices_ReportCompleteTestInstructionExecutionResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionWorkerGrpcServicesClient) ReportCurrentTestInstructionExecutionResult(ctx context.Context, in *TestInstructionExecutionRequestMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionWorkerGrpcServices_ReportCurrentTestInstructionExecutionResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionWorkerGrpcServicesClient) SendAllLogPostForExecution(ctx context.Context, in *TestInstructionExecutionRequestMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionWorkerGrpcServices_SendAllLogPostForExecution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FenixExecutionWorkerGrpcServicesServer is the server API for FenixExecutionWorkerGrpcServices service.
// All implementations must embed UnimplementedFenixExecutionWorkerGrpcServicesServer
// for forward compatibility
type FenixExecutionWorkerGrpcServicesServer interface {
	// Anyone can check if Fenix Execution Worker is alive with this service
	AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error)
	// Ask Client to inform Execution Server of Clients capability to execute requests in parallell, serial or no processing at all
	ReportProcessingCapability(context.Context, *EmptyParameter) (*AckNackResponse, error)
	// Fenix Execution Server send a request to Execution Worker to initiate a execution of a TestInstruction
	ProcessTestInstructionExecution(context.Context, *ProcessTestInstructionExecutionReveredRequest) (*ProcessTestInstructionExecutionResponse, error)
	// Fenix Execution Server send a request to Execution Worker to initiate an execution of a TestInstruction
	ProcessTestInstructionExecutionPubSub(context.Context, *ProcessTestInstructionExecutionPubSubRequest) (*AckNackResponse, error)
	// Execution Server ask Worker (client) to report the final results of the execution result to the Server
	ReportCompleteTestInstructionExecutionResult(context.Context, *TestInstructionExecutionRequestMessage) (*AckNackResponse, error)
	// Execution Server ask Worker (client) to report the ongoing results of the execution result to the Server
	ReportCurrentTestInstructionExecutionResult(context.Context, *TestInstructionExecutionRequestMessage) (*AckNackResponse, error)
	// Execution Server ask Worker (client) to report all log posts of the execution result to the Server
	SendAllLogPostForExecution(context.Context, *TestInstructionExecutionRequestMessage) (*AckNackResponse, error)
	mustEmbedUnimplementedFenixExecutionWorkerGrpcServicesServer()
}

// UnimplementedFenixExecutionWorkerGrpcServicesServer must be embedded to have forward compatible implementations.
type UnimplementedFenixExecutionWorkerGrpcServicesServer struct {
}

func (UnimplementedFenixExecutionWorkerGrpcServicesServer) AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreYouAlive not implemented")
}
func (UnimplementedFenixExecutionWorkerGrpcServicesServer) ReportProcessingCapability(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportProcessingCapability not implemented")
}
func (UnimplementedFenixExecutionWorkerGrpcServicesServer) ProcessTestInstructionExecution(context.Context, *ProcessTestInstructionExecutionReveredRequest) (*ProcessTestInstructionExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTestInstructionExecution not implemented")
}
func (UnimplementedFenixExecutionWorkerGrpcServicesServer) ProcessTestInstructionExecutionPubSub(context.Context, *ProcessTestInstructionExecutionPubSubRequest) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTestInstructionExecutionPubSub not implemented")
}
func (UnimplementedFenixExecutionWorkerGrpcServicesServer) ReportCompleteTestInstructionExecutionResult(context.Context, *TestInstructionExecutionRequestMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCompleteTestInstructionExecutionResult not implemented")
}
func (UnimplementedFenixExecutionWorkerGrpcServicesServer) ReportCurrentTestInstructionExecutionResult(context.Context, *TestInstructionExecutionRequestMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCurrentTestInstructionExecutionResult not implemented")
}
func (UnimplementedFenixExecutionWorkerGrpcServicesServer) SendAllLogPostForExecution(context.Context, *TestInstructionExecutionRequestMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAllLogPostForExecution not implemented")
}
func (UnimplementedFenixExecutionWorkerGrpcServicesServer) mustEmbedUnimplementedFenixExecutionWorkerGrpcServicesServer() {
}

// UnsafeFenixExecutionWorkerGrpcServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FenixExecutionWorkerGrpcServicesServer will
// result in compilation errors.
type UnsafeFenixExecutionWorkerGrpcServicesServer interface {
	mustEmbedUnimplementedFenixExecutionWorkerGrpcServicesServer()
}

func RegisterFenixExecutionWorkerGrpcServicesServer(s grpc.ServiceRegistrar, srv FenixExecutionWorkerGrpcServicesServer) {
	s.RegisterService(&FenixExecutionWorkerGrpcServices_ServiceDesc, srv)
}

func _FenixExecutionWorkerGrpcServices_AreYouAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionWorkerGrpcServicesServer).AreYouAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionWorkerGrpcServices_AreYouAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionWorkerGrpcServicesServer).AreYouAlive(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionWorkerGrpcServices_ReportProcessingCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionWorkerGrpcServicesServer).ReportProcessingCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionWorkerGrpcServices_ReportProcessingCapability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionWorkerGrpcServicesServer).ReportProcessingCapability(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionWorkerGrpcServices_ProcessTestInstructionExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTestInstructionExecutionReveredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionWorkerGrpcServicesServer).ProcessTestInstructionExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionWorkerGrpcServices_ProcessTestInstructionExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionWorkerGrpcServicesServer).ProcessTestInstructionExecution(ctx, req.(*ProcessTestInstructionExecutionReveredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionWorkerGrpcServices_ProcessTestInstructionExecutionPubSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTestInstructionExecutionPubSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionWorkerGrpcServicesServer).ProcessTestInstructionExecutionPubSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionWorkerGrpcServices_ProcessTestInstructionExecutionPubSub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionWorkerGrpcServicesServer).ProcessTestInstructionExecutionPubSub(ctx, req.(*ProcessTestInstructionExecutionPubSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionWorkerGrpcServices_ReportCompleteTestInstructionExecutionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestInstructionExecutionRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionWorkerGrpcServicesServer).ReportCompleteTestInstructionExecutionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionWorkerGrpcServices_ReportCompleteTestInstructionExecutionResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionWorkerGrpcServicesServer).ReportCompleteTestInstructionExecutionResult(ctx, req.(*TestInstructionExecutionRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionWorkerGrpcServices_ReportCurrentTestInstructionExecutionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestInstructionExecutionRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionWorkerGrpcServicesServer).ReportCurrentTestInstructionExecutionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionWorkerGrpcServices_ReportCurrentTestInstructionExecutionResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionWorkerGrpcServicesServer).ReportCurrentTestInstructionExecutionResult(ctx, req.(*TestInstructionExecutionRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionWorkerGrpcServices_SendAllLogPostForExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestInstructionExecutionRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionWorkerGrpcServicesServer).SendAllLogPostForExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionWorkerGrpcServices_SendAllLogPostForExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionWorkerGrpcServicesServer).SendAllLogPostForExecution(ctx, req.(*TestInstructionExecutionRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// FenixExecutionWorkerGrpcServices_ServiceDesc is the grpc.ServiceDesc for FenixExecutionWorkerGrpcServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FenixExecutionWorkerGrpcServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fenixExecutionWorkerGrpcApi.FenixExecutionWorkerGrpcServices",
	HandlerType: (*FenixExecutionWorkerGrpcServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AreYouAlive",
			Handler:    _FenixExecutionWorkerGrpcServices_AreYouAlive_Handler,
		},
		{
			MethodName: "ReportProcessingCapability",
			Handler:    _FenixExecutionWorkerGrpcServices_ReportProcessingCapability_Handler,
		},
		{
			MethodName: "ProcessTestInstructionExecution",
			Handler:    _FenixExecutionWorkerGrpcServices_ProcessTestInstructionExecution_Handler,
		},
		{
			MethodName: "ProcessTestInstructionExecutionPubSub",
			Handler:    _FenixExecutionWorkerGrpcServices_ProcessTestInstructionExecutionPubSub_Handler,
		},
		{
			MethodName: "ReportCompleteTestInstructionExecutionResult",
			Handler:    _FenixExecutionWorkerGrpcServices_ReportCompleteTestInstructionExecutionResult_Handler,
		},
		{
			MethodName: "ReportCurrentTestInstructionExecutionResult",
			Handler:    _FenixExecutionWorkerGrpcServices_ReportCurrentTestInstructionExecutionResult_Handler,
		},
		{
			MethodName: "SendAllLogPostForExecution",
			Handler:    _FenixExecutionWorkerGrpcServices_SendAllLogPostForExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "FenixExecutionServer/fenixExecutionWorkerGrpcApi/fenixExecutionWorkerGrpcApi.proto",
}

const (
	FenixExecutionWorkerConnectorGrpcServices_ConnectorAreYouAlive_FullMethodName                                                                 = "/fenixExecutionWorkerGrpcApi.FenixExecutionWorkerConnectorGrpcServices/ConnectorAreYouAlive"
	FenixExecutionWorkerConnectorGrpcServices_ConnectorReportCompleteTestInstructionExecutionResult_FullMethodName                                = "/fenixExecutionWorkerGrpcApi.FenixExecutionWorkerConnectorGrpcServices/ConnectorReportCompleteTestInstructionExecutionResult"
	FenixExecutionWorkerConnectorGrpcServices_ConnectorRequestForProcessTestInstructionExecution_FullMethodName                                   = "/fenixExecutionWorkerGrpcApi.FenixExecutionWorkerConnectorGrpcServices/ConnectorRequestForProcessTestInstructionExecution"
	FenixExecutionWorkerConnectorGrpcServices_ConnectorProcessTestInstructionExecutionReversedResponse_FullMethodName                             = "/fenixExecutionWorkerGrpcApi.FenixExecutionWorkerConnectorGrpcServices/ConnectorProcessTestInstructionExecutionReversedResponse"
	FenixExecutionWorkerConnectorGrpcServices_ConnectorProcessTestInstructionExecutionResponse_FullMethodName                                     = "/fenixExecutionWorkerGrpcApi.FenixExecutionWorkerConnectorGrpcServices/ConnectorProcessTestInstructionExecutionResponse"
	FenixExecutionWorkerConnectorGrpcServices_ConnectorInformsItIsAlive_FullMethodName                                                            = "/fenixExecutionWorkerGrpcApi.FenixExecutionWorkerConnectorGrpcServices/ConnectorInformsItIsAlive"
	FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_FullMethodName = "/fenixExecutionWorkerGrpcApi.FenixExecutionWorkerConnectorGrpcServices/ConnectorPublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers"
	FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishTemplateRepositoryConnectionParameters_FullMethodName                               = "/fenixExecutionWorkerGrpcApi.FenixExecutionWorkerConnectorGrpcServices/ConnectorPublishTemplateRepositoryConnectionParameters"
	FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishTestDataFromSimpleTestDataAreaFile_FullMethodName                                   = "/fenixExecutionWorkerGrpcApi.FenixExecutionWorkerConnectorGrpcServices/ConnectorPublishTestDataFromSimpleTestDataAreaFile"
	FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishSupportedMetaData_FullMethodName                                                    = "/fenixExecutionWorkerGrpcApi.FenixExecutionWorkerConnectorGrpcServices/ConnectorPublishSupportedMetaData"
)

// FenixExecutionWorkerConnectorGrpcServicesClient is the client API for FenixExecutionWorkerConnectorGrpcServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FenixExecutionWorkerConnectorGrpcServicesClient interface {
	// Anyone can check if Fenix Execution Worker is alive with this service
	ConnectorAreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	// When a TestInstruction has been fully executed the Client use this to inform the results of the execution result to the Server
	ConnectorReportCompleteTestInstructionExecutionResult(ctx context.Context, in *FinalTestInstructionExecutionResultMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// This gPRC-methods is used when a Execution Connector needs to have its TestInstruction assignments using reverse streaming
	// Execution Connector opens the gPRC-channel and assignments are then streamed back to Connector from Worker
	ConnectorRequestForProcessTestInstructionExecution(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (FenixExecutionWorkerConnectorGrpcServices_ConnectorRequestForProcessTestInstructionExecutionClient, error)
	// Response from execution client to execution Worker using direct gRPC call instead of doing response
	ConnectorProcessTestInstructionExecutionReversedResponse(ctx context.Context, in *ProcessTestInstructionExecutionReversedResponse, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Response from execution client to execution Worker using direct gRPC call that Client(Connector) has taken care of TestInstructionExecution
	ConnectorProcessTestInstructionExecutionResponse(ctx context.Context, in *ProcessTestInstructionExecutionResponse, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Connector reports to Worker that it is alTestDataFromSimpleTestDataAreaStructive and can receive work or if Connector will shut down.
	// As response it gets the authorization token for PubSub-requests
	ConnectorInformsItIsAlive(ctx context.Context, in *ConnectorIsReadyMessage, opts ...grpc.CallOption) (*ConnectorIsReadyResponseMessage, error)
	// Connector publish supported TestInstructions, TestInstructionContainers and allowed Users
	ConnectorPublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers(ctx context.Context, in *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Connector publish Template Repository Connection Parameters
	ConnectorPublishTemplateRepositoryConnectionParameters(ctx context.Context, in *AllTemplateRepositoryConnectionParameters, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Connector Publish TestData From a Simple TestData-file for one TestData-area
	ConnectorPublishTestDataFromSimpleTestDataAreaFile(ctx context.Context, in *TestDataFromSimpleTestDataAreaFileMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Connector Publish Support MetaData for the Domain
	ConnectorPublishSupportedMetaData(ctx context.Context, in *SupportedTestCaseMetaData, opts ...grpc.CallOption) (*AckNackResponse, error)
}

type fenixExecutionWorkerConnectorGrpcServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewFenixExecutionWorkerConnectorGrpcServicesClient(cc grpc.ClientConnInterface) FenixExecutionWorkerConnectorGrpcServicesClient {
	return &fenixExecutionWorkerConnectorGrpcServicesClient{cc}
}

func (c *fenixExecutionWorkerConnectorGrpcServicesClient) ConnectorAreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionWorkerConnectorGrpcServices_ConnectorAreYouAlive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionWorkerConnectorGrpcServicesClient) ConnectorReportCompleteTestInstructionExecutionResult(ctx context.Context, in *FinalTestInstructionExecutionResultMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionWorkerConnectorGrpcServices_ConnectorReportCompleteTestInstructionExecutionResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionWorkerConnectorGrpcServicesClient) ConnectorRequestForProcessTestInstructionExecution(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (FenixExecutionWorkerConnectorGrpcServices_ConnectorRequestForProcessTestInstructionExecutionClient, error) {
	stream, err := c.cc.NewStream(ctx, &FenixExecutionWorkerConnectorGrpcServices_ServiceDesc.Streams[0], FenixExecutionWorkerConnectorGrpcServices_ConnectorRequestForProcessTestInstructionExecution_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fenixExecutionWorkerConnectorGrpcServicesConnectorRequestForProcessTestInstructionExecutionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FenixExecutionWorkerConnectorGrpcServices_ConnectorRequestForProcessTestInstructionExecutionClient interface {
	Recv() (*ProcessTestInstructionExecutionReveredRequest, error)
	grpc.ClientStream
}

type fenixExecutionWorkerConnectorGrpcServicesConnectorRequestForProcessTestInstructionExecutionClient struct {
	grpc.ClientStream
}

func (x *fenixExecutionWorkerConnectorGrpcServicesConnectorRequestForProcessTestInstructionExecutionClient) Recv() (*ProcessTestInstructionExecutionReveredRequest, error) {
	m := new(ProcessTestInstructionExecutionReveredRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fenixExecutionWorkerConnectorGrpcServicesClient) ConnectorProcessTestInstructionExecutionReversedResponse(ctx context.Context, in *ProcessTestInstructionExecutionReversedResponse, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionWorkerConnectorGrpcServices_ConnectorProcessTestInstructionExecutionReversedResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionWorkerConnectorGrpcServicesClient) ConnectorProcessTestInstructionExecutionResponse(ctx context.Context, in *ProcessTestInstructionExecutionResponse, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionWorkerConnectorGrpcServices_ConnectorProcessTestInstructionExecutionResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionWorkerConnectorGrpcServicesClient) ConnectorInformsItIsAlive(ctx context.Context, in *ConnectorIsReadyMessage, opts ...grpc.CallOption) (*ConnectorIsReadyResponseMessage, error) {
	out := new(ConnectorIsReadyResponseMessage)
	err := c.cc.Invoke(ctx, FenixExecutionWorkerConnectorGrpcServices_ConnectorInformsItIsAlive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionWorkerConnectorGrpcServicesClient) ConnectorPublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers(ctx context.Context, in *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionWorkerConnectorGrpcServicesClient) ConnectorPublishTemplateRepositoryConnectionParameters(ctx context.Context, in *AllTemplateRepositoryConnectionParameters, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishTemplateRepositoryConnectionParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionWorkerConnectorGrpcServicesClient) ConnectorPublishTestDataFromSimpleTestDataAreaFile(ctx context.Context, in *TestDataFromSimpleTestDataAreaFileMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishTestDataFromSimpleTestDataAreaFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionWorkerConnectorGrpcServicesClient) ConnectorPublishSupportedMetaData(ctx context.Context, in *SupportedTestCaseMetaData, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishSupportedMetaData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FenixExecutionWorkerConnectorGrpcServicesServer is the server API for FenixExecutionWorkerConnectorGrpcServices service.
// All implementations must embed UnimplementedFenixExecutionWorkerConnectorGrpcServicesServer
// for forward compatibility
type FenixExecutionWorkerConnectorGrpcServicesServer interface {
	// Anyone can check if Fenix Execution Worker is alive with this service
	ConnectorAreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error)
	// When a TestInstruction has been fully executed the Client use this to inform the results of the execution result to the Server
	ConnectorReportCompleteTestInstructionExecutionResult(context.Context, *FinalTestInstructionExecutionResultMessage) (*AckNackResponse, error)
	// This gPRC-methods is used when a Execution Connector needs to have its TestInstruction assignments using reverse streaming
	// Execution Connector opens the gPRC-channel and assignments are then streamed back to Connector from Worker
	ConnectorRequestForProcessTestInstructionExecution(*EmptyParameter, FenixExecutionWorkerConnectorGrpcServices_ConnectorRequestForProcessTestInstructionExecutionServer) error
	// Response from execution client to execution Worker using direct gRPC call instead of doing response
	ConnectorProcessTestInstructionExecutionReversedResponse(context.Context, *ProcessTestInstructionExecutionReversedResponse) (*AckNackResponse, error)
	// Response from execution client to execution Worker using direct gRPC call that Client(Connector) has taken care of TestInstructionExecution
	ConnectorProcessTestInstructionExecutionResponse(context.Context, *ProcessTestInstructionExecutionResponse) (*AckNackResponse, error)
	// Connector reports to Worker that it is alTestDataFromSimpleTestDataAreaStructive and can receive work or if Connector will shut down.
	// As response it gets the authorization token for PubSub-requests
	ConnectorInformsItIsAlive(context.Context, *ConnectorIsReadyMessage) (*ConnectorIsReadyResponseMessage, error)
	// Connector publish supported TestInstructions, TestInstructionContainers and allowed Users
	ConnectorPublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers(context.Context, *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) (*AckNackResponse, error)
	// Connector publish Template Repository Connection Parameters
	ConnectorPublishTemplateRepositoryConnectionParameters(context.Context, *AllTemplateRepositoryConnectionParameters) (*AckNackResponse, error)
	// Connector Publish TestData From a Simple TestData-file for one TestData-area
	ConnectorPublishTestDataFromSimpleTestDataAreaFile(context.Context, *TestDataFromSimpleTestDataAreaFileMessage) (*AckNackResponse, error)
	// Connector Publish Support MetaData for the Domain
	ConnectorPublishSupportedMetaData(context.Context, *SupportedTestCaseMetaData) (*AckNackResponse, error)
	mustEmbedUnimplementedFenixExecutionWorkerConnectorGrpcServicesServer()
}

// UnimplementedFenixExecutionWorkerConnectorGrpcServicesServer must be embedded to have forward compatible implementations.
type UnimplementedFenixExecutionWorkerConnectorGrpcServicesServer struct {
}

func (UnimplementedFenixExecutionWorkerConnectorGrpcServicesServer) ConnectorAreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectorAreYouAlive not implemented")
}
func (UnimplementedFenixExecutionWorkerConnectorGrpcServicesServer) ConnectorReportCompleteTestInstructionExecutionResult(context.Context, *FinalTestInstructionExecutionResultMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectorReportCompleteTestInstructionExecutionResult not implemented")
}
func (UnimplementedFenixExecutionWorkerConnectorGrpcServicesServer) ConnectorRequestForProcessTestInstructionExecution(*EmptyParameter, FenixExecutionWorkerConnectorGrpcServices_ConnectorRequestForProcessTestInstructionExecutionServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectorRequestForProcessTestInstructionExecution not implemented")
}
func (UnimplementedFenixExecutionWorkerConnectorGrpcServicesServer) ConnectorProcessTestInstructionExecutionReversedResponse(context.Context, *ProcessTestInstructionExecutionReversedResponse) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectorProcessTestInstructionExecutionReversedResponse not implemented")
}
func (UnimplementedFenixExecutionWorkerConnectorGrpcServicesServer) ConnectorProcessTestInstructionExecutionResponse(context.Context, *ProcessTestInstructionExecutionResponse) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectorProcessTestInstructionExecutionResponse not implemented")
}
func (UnimplementedFenixExecutionWorkerConnectorGrpcServicesServer) ConnectorInformsItIsAlive(context.Context, *ConnectorIsReadyMessage) (*ConnectorIsReadyResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectorInformsItIsAlive not implemented")
}
func (UnimplementedFenixExecutionWorkerConnectorGrpcServicesServer) ConnectorPublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers(context.Context, *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectorPublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers not implemented")
}
func (UnimplementedFenixExecutionWorkerConnectorGrpcServicesServer) ConnectorPublishTemplateRepositoryConnectionParameters(context.Context, *AllTemplateRepositoryConnectionParameters) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectorPublishTemplateRepositoryConnectionParameters not implemented")
}
func (UnimplementedFenixExecutionWorkerConnectorGrpcServicesServer) ConnectorPublishTestDataFromSimpleTestDataAreaFile(context.Context, *TestDataFromSimpleTestDataAreaFileMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectorPublishTestDataFromSimpleTestDataAreaFile not implemented")
}
func (UnimplementedFenixExecutionWorkerConnectorGrpcServicesServer) ConnectorPublishSupportedMetaData(context.Context, *SupportedTestCaseMetaData) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectorPublishSupportedMetaData not implemented")
}
func (UnimplementedFenixExecutionWorkerConnectorGrpcServicesServer) mustEmbedUnimplementedFenixExecutionWorkerConnectorGrpcServicesServer() {
}

// UnsafeFenixExecutionWorkerConnectorGrpcServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FenixExecutionWorkerConnectorGrpcServicesServer will
// result in compilation errors.
type UnsafeFenixExecutionWorkerConnectorGrpcServicesServer interface {
	mustEmbedUnimplementedFenixExecutionWorkerConnectorGrpcServicesServer()
}

func RegisterFenixExecutionWorkerConnectorGrpcServicesServer(s grpc.ServiceRegistrar, srv FenixExecutionWorkerConnectorGrpcServicesServer) {
	s.RegisterService(&FenixExecutionWorkerConnectorGrpcServices_ServiceDesc, srv)
}

func _FenixExecutionWorkerConnectorGrpcServices_ConnectorAreYouAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorAreYouAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionWorkerConnectorGrpcServices_ConnectorAreYouAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorAreYouAlive(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionWorkerConnectorGrpcServices_ConnectorReportCompleteTestInstructionExecutionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalTestInstructionExecutionResultMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorReportCompleteTestInstructionExecutionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionWorkerConnectorGrpcServices_ConnectorReportCompleteTestInstructionExecutionResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorReportCompleteTestInstructionExecutionResult(ctx, req.(*FinalTestInstructionExecutionResultMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionWorkerConnectorGrpcServices_ConnectorRequestForProcessTestInstructionExecution_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyParameter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorRequestForProcessTestInstructionExecution(m, &fenixExecutionWorkerConnectorGrpcServicesConnectorRequestForProcessTestInstructionExecutionServer{stream})
}

type FenixExecutionWorkerConnectorGrpcServices_ConnectorRequestForProcessTestInstructionExecutionServer interface {
	Send(*ProcessTestInstructionExecutionReveredRequest) error
	grpc.ServerStream
}

type fenixExecutionWorkerConnectorGrpcServicesConnectorRequestForProcessTestInstructionExecutionServer struct {
	grpc.ServerStream
}

func (x *fenixExecutionWorkerConnectorGrpcServicesConnectorRequestForProcessTestInstructionExecutionServer) Send(m *ProcessTestInstructionExecutionReveredRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _FenixExecutionWorkerConnectorGrpcServices_ConnectorProcessTestInstructionExecutionReversedResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTestInstructionExecutionReversedResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorProcessTestInstructionExecutionReversedResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionWorkerConnectorGrpcServices_ConnectorProcessTestInstructionExecutionReversedResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorProcessTestInstructionExecutionReversedResponse(ctx, req.(*ProcessTestInstructionExecutionReversedResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionWorkerConnectorGrpcServices_ConnectorProcessTestInstructionExecutionResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTestInstructionExecutionResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorProcessTestInstructionExecutionResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionWorkerConnectorGrpcServices_ConnectorProcessTestInstructionExecutionResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorProcessTestInstructionExecutionResponse(ctx, req.(*ProcessTestInstructionExecutionResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionWorkerConnectorGrpcServices_ConnectorInformsItIsAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectorIsReadyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorInformsItIsAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionWorkerConnectorGrpcServices_ConnectorInformsItIsAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorInformsItIsAlive(ctx, req.(*ConnectorIsReadyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorPublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorPublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers(ctx, req.(*SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishTemplateRepositoryConnectionParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllTemplateRepositoryConnectionParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorPublishTemplateRepositoryConnectionParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishTemplateRepositoryConnectionParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorPublishTemplateRepositoryConnectionParameters(ctx, req.(*AllTemplateRepositoryConnectionParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishTestDataFromSimpleTestDataAreaFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestDataFromSimpleTestDataAreaFileMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorPublishTestDataFromSimpleTestDataAreaFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishTestDataFromSimpleTestDataAreaFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorPublishTestDataFromSimpleTestDataAreaFile(ctx, req.(*TestDataFromSimpleTestDataAreaFileMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishSupportedMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportedTestCaseMetaData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorPublishSupportedMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishSupportedMetaData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionWorkerConnectorGrpcServicesServer).ConnectorPublishSupportedMetaData(ctx, req.(*SupportedTestCaseMetaData))
	}
	return interceptor(ctx, in, info, handler)
}

// FenixExecutionWorkerConnectorGrpcServices_ServiceDesc is the grpc.ServiceDesc for FenixExecutionWorkerConnectorGrpcServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FenixExecutionWorkerConnectorGrpcServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fenixExecutionWorkerGrpcApi.FenixExecutionWorkerConnectorGrpcServices",
	HandlerType: (*FenixExecutionWorkerConnectorGrpcServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectorAreYouAlive",
			Handler:    _FenixExecutionWorkerConnectorGrpcServices_ConnectorAreYouAlive_Handler,
		},
		{
			MethodName: "ConnectorReportCompleteTestInstructionExecutionResult",
			Handler:    _FenixExecutionWorkerConnectorGrpcServices_ConnectorReportCompleteTestInstructionExecutionResult_Handler,
		},
		{
			MethodName: "ConnectorProcessTestInstructionExecutionReversedResponse",
			Handler:    _FenixExecutionWorkerConnectorGrpcServices_ConnectorProcessTestInstructionExecutionReversedResponse_Handler,
		},
		{
			MethodName: "ConnectorProcessTestInstructionExecutionResponse",
			Handler:    _FenixExecutionWorkerConnectorGrpcServices_ConnectorProcessTestInstructionExecutionResponse_Handler,
		},
		{
			MethodName: "ConnectorInformsItIsAlive",
			Handler:    _FenixExecutionWorkerConnectorGrpcServices_ConnectorInformsItIsAlive_Handler,
		},
		{
			MethodName: "ConnectorPublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers",
			Handler:    _FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_Handler,
		},
		{
			MethodName: "ConnectorPublishTemplateRepositoryConnectionParameters",
			Handler:    _FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishTemplateRepositoryConnectionParameters_Handler,
		},
		{
			MethodName: "ConnectorPublishTestDataFromSimpleTestDataAreaFile",
			Handler:    _FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishTestDataFromSimpleTestDataAreaFile_Handler,
		},
		{
			MethodName: "ConnectorPublishSupportedMetaData",
			Handler:    _FenixExecutionWorkerConnectorGrpcServices_ConnectorPublishSupportedMetaData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectorRequestForProcessTestInstructionExecution",
			Handler:       _FenixExecutionWorkerConnectorGrpcServices_ConnectorRequestForProcessTestInstructionExecution_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "FenixExecutionServer/fenixExecutionWorkerGrpcApi/fenixExecutionWorkerGrpcApi.proto",
}

const (
	FenixBuilderGprcServices_BuilderServerAskWorkerToSignMessage_FullMethodName = "/fenixExecutionWorkerGrpcApi.FenixBuilderGprcServices/BuilderServerAskWorkerToSignMessage"
)

// FenixBuilderGprcServicesClient is the client API for FenixBuilderGprcServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FenixBuilderGprcServicesClient interface {
	BuilderServerAskWorkerToSignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageResponse, error)
}

type fenixBuilderGprcServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewFenixBuilderGprcServicesClient(cc grpc.ClientConnInterface) FenixBuilderGprcServicesClient {
	return &fenixBuilderGprcServicesClient{cc}
}

func (c *fenixBuilderGprcServicesClient) BuilderServerAskWorkerToSignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageResponse, error) {
	out := new(SignMessageResponse)
	err := c.cc.Invoke(ctx, FenixBuilderGprcServices_BuilderServerAskWorkerToSignMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FenixBuilderGprcServicesServer is the server API for FenixBuilderGprcServices service.
// All implementations must embed UnimplementedFenixBuilderGprcServicesServer
// for forward compatibility
type FenixBuilderGprcServicesServer interface {
	BuilderServerAskWorkerToSignMessage(context.Context, *SignMessageRequest) (*SignMessageResponse, error)
	mustEmbedUnimplementedFenixBuilderGprcServicesServer()
}

// UnimplementedFenixBuilderGprcServicesServer must be embedded to have forward compatible implementations.
type UnimplementedFenixBuilderGprcServicesServer struct {
}

func (UnimplementedFenixBuilderGprcServicesServer) BuilderServerAskWorkerToSignMessage(context.Context, *SignMessageRequest) (*SignMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuilderServerAskWorkerToSignMessage not implemented")
}
func (UnimplementedFenixBuilderGprcServicesServer) mustEmbedUnimplementedFenixBuilderGprcServicesServer() {
}

// UnsafeFenixBuilderGprcServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FenixBuilderGprcServicesServer will
// result in compilation errors.
type UnsafeFenixBuilderGprcServicesServer interface {
	mustEmbedUnimplementedFenixBuilderGprcServicesServer()
}

func RegisterFenixBuilderGprcServicesServer(s grpc.ServiceRegistrar, srv FenixBuilderGprcServicesServer) {
	s.RegisterService(&FenixBuilderGprcServices_ServiceDesc, srv)
}

func _FenixBuilderGprcServices_BuilderServerAskWorkerToSignMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixBuilderGprcServicesServer).BuilderServerAskWorkerToSignMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixBuilderGprcServices_BuilderServerAskWorkerToSignMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixBuilderGprcServicesServer).BuilderServerAskWorkerToSignMessage(ctx, req.(*SignMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FenixBuilderGprcServices_ServiceDesc is the grpc.ServiceDesc for FenixBuilderGprcServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FenixBuilderGprcServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fenixExecutionWorkerGrpcApi.FenixBuilderGprcServices",
	HandlerType: (*FenixBuilderGprcServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuilderServerAskWorkerToSignMessage",
			Handler:    _FenixBuilderGprcServices_BuilderServerAskWorkerToSignMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "FenixExecutionServer/fenixExecutionWorkerGrpcApi/fenixExecutionWorkerGrpcApi.proto",
}
