// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: FenixExecutionServer/fenixExecutionWorkerGrpcApi/fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers.proto

package go_grpc_api

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage
// Message for all TestInstructions, TestInstructionsContainers and Users for a specific "System", which will be sent to Fenix backend
type SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSystemIdentification                                      *ClientSystemIdentificationMessage         `protobuf:"bytes,1,opt,name=ClientSystemIdentification,proto3" json:"ClientSystemIdentification,omitempty"`                                                                            // Identifies Client System and Proto-file version used
	TestInstructions                                                *SupportedTestInstructionsMessage          `protobuf:"bytes,2,opt,name=TestInstructions,proto3" json:"TestInstructions,omitempty"`                                                                                                // All supported TestInstructions
	TestInstructionContainers                                       *SupportedTestInstructionContainersMessage `protobuf:"bytes,3,opt,name=TestInstructionContainers,proto3" json:"TestInstructionContainers,omitempty"`                                                                              //   All supported TestInstructionContainers
	AllowedUsers                                                    *SupportedAllowedUsersMessage              `protobuf:"bytes,4,opt,name=AllowedUsers,proto3" json:"AllowedUsers,omitempty"`                                                                                                        // All users that are allowed to use TestInstructions and TestInstructionContainers for this system
	MessageCreationTimeStamp                                        *timestamp.Timestamp                       `protobuf:"bytes,5,opt,name=MessageCreationTimeStamp,proto3" json:"MessageCreationTimeStamp,omitempty"`                                                                                // The TimeStamp for when the Message was created
	TestInstructionsAndTestInstructionsContainersMessageHash        string                                     `protobuf:"bytes,6,opt,name=TestInstructionsAndTestInstructionsContainersMessageHash,proto3" json:"TestInstructionsAndTestInstructionsContainersMessageHash,omitempty"`                // SHA256(TestInstructionsHash, TestInstructionContainersHash, AllowedUsersHash)
	ForceNewBaseLineForTestInstructionsAndTestInstructionContainers bool                                       `protobuf:"varint,7,opt,name=ForceNewBaseLineForTestInstructionsAndTestInstructionContainers,proto3" json:"ForceNewBaseLineForTestInstructionsAndTestInstructionContainers,omitempty"` // Should there be a new baseline for TestInstructions and TestInstructionContainers, ie scrap the everything in database
	ConnectorDomain                                                 *SupportedConnectorDomainMessage           `protobuf:"bytes,8,opt,name=ConnectorDomain,proto3" json:"ConnectorDomain,omitempty"`                                                                                                  // Holds information about what Domain the Connector belongs to
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) Reset() {
	*x = SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) ProtoMessage() {}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage.ProtoReflect.Descriptor instead.
func (*SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{0}
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) GetClientSystemIdentification() *ClientSystemIdentificationMessage {
	if x != nil {
		return x.ClientSystemIdentification
	}
	return nil
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) GetTestInstructions() *SupportedTestInstructionsMessage {
	if x != nil {
		return x.TestInstructions
	}
	return nil
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) GetTestInstructionContainers() *SupportedTestInstructionContainersMessage {
	if x != nil {
		return x.TestInstructionContainers
	}
	return nil
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) GetAllowedUsers() *SupportedAllowedUsersMessage {
	if x != nil {
		return x.AllowedUsers
	}
	return nil
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) GetMessageCreationTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.MessageCreationTimeStamp
	}
	return nil
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) GetTestInstructionsAndTestInstructionsContainersMessageHash() string {
	if x != nil {
		return x.TestInstructionsAndTestInstructionsContainersMessageHash
	}
	return ""
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) GetForceNewBaseLineForTestInstructionsAndTestInstructionContainers() bool {
	if x != nil {
		return x.ForceNewBaseLineForTestInstructionsAndTestInstructionContainers
	}
	return false
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) GetConnectorDomain() *SupportedConnectorDomainMessage {
	if x != nil {
		return x.ConnectorDomain
	}
	return nil
}

// **************** **************** **************** TestInstruction **************** **************** ****************
// SupportedTestInstructionsMessage
// Message for a TestInstructionsMap that hold all TestInstructions
type SupportedTestInstructionsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionsMap  map[string]*SupportedTestInstructionInstanceVersionsMessage `protobuf:"bytes,1,rep,name=TestInstructionsMap,proto3" json:"TestInstructionsMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // The Map holding all TestInstructions
	TestInstructionsHash string                                                      `protobuf:"bytes,2,opt,name=TestInstructionsHash,proto3" json:"TestInstructionsHash,omitempty"`                                                                                       // SHA256 of all TestInstructionsMap using Fenix standard way of hashing values together
}

func (x *SupportedTestInstructionsMessage) Reset() {
	*x = SupportedTestInstructionsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedTestInstructionsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedTestInstructionsMessage) ProtoMessage() {}

func (x *SupportedTestInstructionsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedTestInstructionsMessage.ProtoReflect.Descriptor instead.
func (*SupportedTestInstructionsMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{1}
}

func (x *SupportedTestInstructionsMessage) GetTestInstructionsMap() map[string]*SupportedTestInstructionInstanceVersionsMessage {
	if x != nil {
		return x.TestInstructionsMap
	}
	return nil
}

func (x *SupportedTestInstructionsMessage) GetTestInstructionsHash() string {
	if x != nil {
		return x.TestInstructionsHash
	}
	return ""
}

// SupportedTestInstructionInstanceVersionsMessage
//
//	Message for all versions of one TestInstruction, first position holds last version i.e. version x, second position holds the version before that i.e. version x-1...
type SupportedTestInstructionInstanceVersionsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionVersions     []*SupportedTestInstructionInstanceVersionMessage `protobuf:"bytes,1,rep,name=TestInstructionVersions,proto3" json:"TestInstructionVersions,omitempty"`         // Array with all versions of a TestInstructions. First position holds last version i.e. version x, second position holds the version before that i.e. version x-1...
	TestInstructionVersionsHash string                                            `protobuf:"bytes,2,opt,name=TestInstructionVersionsHash,proto3" json:"TestInstructionVersionsHash,omitempty"` // SHA256 of all TestInstructionInstanceVersions using Fenix standard way of hashing values together
}

func (x *SupportedTestInstructionInstanceVersionsMessage) Reset() {
	*x = SupportedTestInstructionInstanceVersionsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedTestInstructionInstanceVersionsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedTestInstructionInstanceVersionsMessage) ProtoMessage() {}

func (x *SupportedTestInstructionInstanceVersionsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedTestInstructionInstanceVersionsMessage.ProtoReflect.Descriptor instead.
func (*SupportedTestInstructionInstanceVersionsMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{2}
}

func (x *SupportedTestInstructionInstanceVersionsMessage) GetTestInstructionVersions() []*SupportedTestInstructionInstanceVersionMessage {
	if x != nil {
		return x.TestInstructionVersions
	}
	return nil
}

func (x *SupportedTestInstructionInstanceVersionsMessage) GetTestInstructionVersionsHash() string {
	if x != nil {
		return x.TestInstructionVersionsHash
	}
	return ""
}

// SupportedTestInstructionInstanceVersionMessage
// A Message holding one TestInstruction-version
type SupportedTestInstructionInstanceVersionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionInstance             *SupportedTestInstructionMessage               `protobuf:"bytes,1,opt,name=TestInstructionInstance,proto3" json:"TestInstructionInstance,omitempty"`                          // Holds one TestInstructionInstance
	TestInstructionInstanceMajorVersion int32                                          `protobuf:"varint,2,opt,name=TestInstructionInstanceMajorVersion,proto3" json:"TestInstructionInstanceMajorVersion,omitempty"` // The major version for the TestInstruction
	TestInstructionInstanceMinorVersion int32                                          `protobuf:"varint,3,opt,name=TestInstructionInstanceMinorVersion,proto3" json:"TestInstructionInstanceMinorVersion,omitempty"` // The minor version for the TestInstruction
	Deprecated                          bool                                           `protobuf:"varint,4,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`                                                   // Should the user stop using this TestInstructionInstance-version
	Enabled                             bool                                           `protobuf:"varint,5,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                                                         // Is this TestInstructionInstance-version enabled or disabled
	ResponseVariablesMapStructure       *SupportedResponseVariablesMapStructureMessage `protobuf:"bytes,6,opt,name=ResponseVariablesMapStructure,proto3" json:"ResponseVariablesMapStructure,omitempty"`              // Holds all Response variables expected for this
	TestInstructionInstanceVersionHash  string                                         `protobuf:"bytes,7,opt,name=TestInstructionInstanceVersionHash,proto3" json:"TestInstructionInstanceVersionHash,omitempty"`    // SHA256 of all TestInstructionMessage, and Hash for 'SupportedResponseVariablesMapStructureMessage', using Fenix standard way of hashing values together a
}

func (x *SupportedTestInstructionInstanceVersionMessage) Reset() {
	*x = SupportedTestInstructionInstanceVersionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedTestInstructionInstanceVersionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedTestInstructionInstanceVersionMessage) ProtoMessage() {}

func (x *SupportedTestInstructionInstanceVersionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedTestInstructionInstanceVersionMessage.ProtoReflect.Descriptor instead.
func (*SupportedTestInstructionInstanceVersionMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{3}
}

func (x *SupportedTestInstructionInstanceVersionMessage) GetTestInstructionInstance() *SupportedTestInstructionMessage {
	if x != nil {
		return x.TestInstructionInstance
	}
	return nil
}

func (x *SupportedTestInstructionInstanceVersionMessage) GetTestInstructionInstanceMajorVersion() int32 {
	if x != nil {
		return x.TestInstructionInstanceMajorVersion
	}
	return 0
}

func (x *SupportedTestInstructionInstanceVersionMessage) GetTestInstructionInstanceMinorVersion() int32 {
	if x != nil {
		return x.TestInstructionInstanceMinorVersion
	}
	return 0
}

func (x *SupportedTestInstructionInstanceVersionMessage) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *SupportedTestInstructionInstanceVersionMessage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SupportedTestInstructionInstanceVersionMessage) GetResponseVariablesMapStructure() *SupportedResponseVariablesMapStructureMessage {
	if x != nil {
		return x.ResponseVariablesMapStructure
	}
	return nil
}

func (x *SupportedTestInstructionInstanceVersionMessage) GetTestInstructionInstanceVersionHash() string {
	if x != nil {
		return x.TestInstructionInstanceVersionHash
	}
	return ""
}

// SupportedTestInstructionMessage
// A message holding one complete TestInstruction
type SupportedTestInstructionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstruction                    *SupportedTestInstructionBaseMessage                  `protobuf:"bytes,1,opt,name=TestInstruction,proto3" json:"TestInstruction,omitempty"`                                       //
	BasicTestInstructionInformation    *SupportedBasicTestInstructionInformationMessage      `protobuf:"bytes,2,opt,name=BasicTestInstructionInformation,proto3" json:"BasicTestInstructionInformation,omitempty"`       //
	ImmatureTestInstructionInformation []*SupportedImmatureTestInstructionInformationMessage `protobuf:"bytes,3,rep,name=ImmatureTestInstructionInformation,proto3" json:"ImmatureTestInstructionInformation,omitempty"` //
	TestInstructionAttributes          []*SupportedTestInstructionAttributeMessage           `protobuf:"bytes,4,rep,name=TestInstructionAttributes,proto3" json:"TestInstructionAttributes,omitempty"`                   //
	ImmatureElementModel               []*SupportedImmatureElementModelMessage               `protobuf:"bytes,5,rep,name=ImmatureElementModel,proto3" json:"ImmatureElementModel,omitempty"`                             //
}

func (x *SupportedTestInstructionMessage) Reset() {
	*x = SupportedTestInstructionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedTestInstructionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedTestInstructionMessage) ProtoMessage() {}

func (x *SupportedTestInstructionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedTestInstructionMessage.ProtoReflect.Descriptor instead.
func (*SupportedTestInstructionMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{4}
}

func (x *SupportedTestInstructionMessage) GetTestInstruction() *SupportedTestInstructionBaseMessage {
	if x != nil {
		return x.TestInstruction
	}
	return nil
}

func (x *SupportedTestInstructionMessage) GetBasicTestInstructionInformation() *SupportedBasicTestInstructionInformationMessage {
	if x != nil {
		return x.BasicTestInstructionInformation
	}
	return nil
}

func (x *SupportedTestInstructionMessage) GetImmatureTestInstructionInformation() []*SupportedImmatureTestInstructionInformationMessage {
	if x != nil {
		return x.ImmatureTestInstructionInformation
	}
	return nil
}

func (x *SupportedTestInstructionMessage) GetTestInstructionAttributes() []*SupportedTestInstructionAttributeMessage {
	if x != nil {
		return x.TestInstructionAttributes
	}
	return nil
}

func (x *SupportedTestInstructionMessage) GetImmatureElementModel() []*SupportedImmatureElementModelMessage {
	if x != nil {
		return x.ImmatureElementModel
	}
	return nil
}

// SupportedTestInstructionBaseMessage
// The base information for the TestInstruction
type SupportedTestInstructionBaseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID                   string `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                                      // The Domain UUID where the TestInstruction belong
	DomainName                   string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                      // The Domain Name where the TestInstruction belong
	ExecutionDomainUuid          string `protobuf:"bytes,3,opt,name=ExecutionDomainUuid,proto3" json:"ExecutionDomainUuid,omitempty"`                    // The SubDomain, UUID, that executes this TestInstruction
	ExecutionDomainName          string `protobuf:"bytes,4,opt,name=ExecutionDomainName,proto3" json:"ExecutionDomainName,omitempty"`                    // The SubDomain, Name, that executes this TestInstruction
	TestInstructionUUID          string `protobuf:"bytes,5,opt,name=TestInstructionUUID,proto3" json:"TestInstructionUUID,omitempty"`                    // The Unique TestInstruction UUID that identifies the specific TestInstruction to be executed
	TestInstructionName          string `protobuf:"bytes,6,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"`                    // The TestInstruction Name of the specific TestInstruction to be executed
	TestInstructionTypeUUID      string `protobuf:"bytes,7,opt,name=TestInstructionTypeUUID,proto3" json:"TestInstructionTypeUUID,omitempty"`            // The type UUID of the TestInstruction
	TestInstructionTypeName      string `protobuf:"bytes,8,opt,name=TestInstructionTypeName,proto3" json:"TestInstructionTypeName,omitempty"`            // The type Name of the TestInstruction
	TestInstructionDescription   string `protobuf:"bytes,9,opt,name=TestInstructionDescription,proto3" json:"TestInstructionDescription,omitempty"`      // The TestInstruction description for the TestInstruction
	TestInstructionMouseOverText string `protobuf:"bytes,10,opt,name=TestInstructionMouseOverText,proto3" json:"TestInstructionMouseOverText,omitempty"` // The TestInstruction MouseOver text for the TestInstruction
	Deprecated                   bool   `protobuf:"varint,11,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`                                    // Is the TestInstruction depreciated and shouldn't be used by the user
	Enabled                      bool   `protobuf:"varint,12,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                                          // Is the TestInstruction enabled or not
	MajorVersionNumber           int32  `protobuf:"varint,13,opt,name=MajorVersionNumber,proto3" json:"MajorVersionNumber,omitempty"`                    // The Major version number for the TestInstruction
	MinorVersionNumber           int32  `protobuf:"varint,14,opt,name=MinorVersionNumber,proto3" json:"MinorVersionNumber,omitempty"`                    // The Minor version number for the TestInstruction
	UpdatedTimeStamp             string `protobuf:"bytes,15,opt,name=UpdatedTimeStamp,proto3" json:"UpdatedTimeStamp,omitempty"`                         // When the TestInstruction was first created
}

func (x *SupportedTestInstructionBaseMessage) Reset() {
	*x = SupportedTestInstructionBaseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedTestInstructionBaseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedTestInstructionBaseMessage) ProtoMessage() {}

func (x *SupportedTestInstructionBaseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedTestInstructionBaseMessage.ProtoReflect.Descriptor instead.
func (*SupportedTestInstructionBaseMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{5}
}

func (x *SupportedTestInstructionBaseMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *SupportedTestInstructionBaseMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *SupportedTestInstructionBaseMessage) GetExecutionDomainUuid() string {
	if x != nil {
		return x.ExecutionDomainUuid
	}
	return ""
}

func (x *SupportedTestInstructionBaseMessage) GetExecutionDomainName() string {
	if x != nil {
		return x.ExecutionDomainName
	}
	return ""
}

func (x *SupportedTestInstructionBaseMessage) GetTestInstructionUUID() string {
	if x != nil {
		return x.TestInstructionUUID
	}
	return ""
}

func (x *SupportedTestInstructionBaseMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

func (x *SupportedTestInstructionBaseMessage) GetTestInstructionTypeUUID() string {
	if x != nil {
		return x.TestInstructionTypeUUID
	}
	return ""
}

func (x *SupportedTestInstructionBaseMessage) GetTestInstructionTypeName() string {
	if x != nil {
		return x.TestInstructionTypeName
	}
	return ""
}

func (x *SupportedTestInstructionBaseMessage) GetTestInstructionDescription() string {
	if x != nil {
		return x.TestInstructionDescription
	}
	return ""
}

func (x *SupportedTestInstructionBaseMessage) GetTestInstructionMouseOverText() string {
	if x != nil {
		return x.TestInstructionMouseOverText
	}
	return ""
}

func (x *SupportedTestInstructionBaseMessage) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *SupportedTestInstructionBaseMessage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SupportedTestInstructionBaseMessage) GetMajorVersionNumber() int32 {
	if x != nil {
		return x.MajorVersionNumber
	}
	return 0
}

func (x *SupportedTestInstructionBaseMessage) GetMinorVersionNumber() int32 {
	if x != nil {
		return x.MinorVersionNumber
	}
	return 0
}

func (x *SupportedTestInstructionBaseMessage) GetUpdatedTimeStamp() string {
	if x != nil {
		return x.UpdatedTimeStamp
	}
	return ""
}

// SupportedBasicTestInstructionInformationMessage
// The Basic information for the TestInstruction
type SupportedBasicTestInstructionInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID                   string `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                                      // The Domain UUID where the TestInstruction belong
	DomainName                   string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                      // The Domain Name where the TestInstruction belong
	ExecutionDomainUuid          string `protobuf:"bytes,3,opt,name=ExecutionDomainUuid,proto3" json:"ExecutionDomainUuid,omitempty"`                    // The SubDomain, UUID, that executes this TestInstruction
	ExecutionDomainName          string `protobuf:"bytes,4,opt,name=ExecutionDomainName,proto3" json:"ExecutionDomainName,omitempty"`                    // The SubDomain, Name, that executes this TestInstruction
	TestInstructionUUID          string `protobuf:"bytes,5,opt,name=TestInstructionUUID,proto3" json:"TestInstructionUUID,omitempty"`                    // The Unique TestInstruction UUID that identifies the specific TestInstruction to be executed
	TestInstructionName          string `protobuf:"bytes,6,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"`                    // The TestInstruction Name of the specific TestInstruction to be executed
	TestInstructionTypeUUID      string `protobuf:"bytes,7,opt,name=TestInstructionTypeUUID,proto3" json:"TestInstructionTypeUUID,omitempty"`            // The type UUID of the TestInstruction
	TestInstructionTypeName      string `protobuf:"bytes,8,opt,name=TestInstructionTypeName,proto3" json:"TestInstructionTypeName,omitempty"`            // The type Name of the TestInstruction
	Deprecated                   bool   `protobuf:"varint,9,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`                                     // Is the TestInstruction depreciated and shouldn't be used by the user
	MajorVersionNumber           int32  `protobuf:"varint,10,opt,name=MajorVersionNumber,proto3" json:"MajorVersionNumber,omitempty"`                    // The Major version number for the TestInstruction
	MinorVersionNumber           int32  `protobuf:"varint,11,opt,name=MinorVersionNumber,proto3" json:"MinorVersionNumber,omitempty"`                    // The Minor version number for the TestInstruction
	UpdatedTimeStamp             string `protobuf:"bytes,12,opt,name=UpdatedTimeStamp,proto3" json:"UpdatedTimeStamp,omitempty"`                         // When the TestInstruction was first created
	TestInstructionColor         string `protobuf:"bytes,13,opt,name=TestInstructionColor,proto3" json:"TestInstructionColor,omitempty"`                 // The color used in GUI when showing the TestInstruction
	TCRuleDeletion               string `protobuf:"bytes,14,opt,name=TCRuleDeletion,proto3" json:"TCRuleDeletion,omitempty"`                             // The Delete-rule defining how the TestInstruction can be deleted
	TCRuleSwap                   string `protobuf:"bytes,15,opt,name=TCRuleSwap,proto3" json:"TCRuleSwap,omitempty"`                                     // The Swap-rule defining how the TestInstruction can be swapped out
	TestInstructionDescription   string `protobuf:"bytes,16,opt,name=TestInstructionDescription,proto3" json:"TestInstructionDescription,omitempty"`     // The TestInstruction description for the TestInstruction
	TestInstructionMouseOverText string `protobuf:"bytes,17,opt,name=TestInstructionMouseOverText,proto3" json:"TestInstructionMouseOverText,omitempty"` // The TestInstruction MouseOver text for the TestInstruction
	Enabled                      bool   `protobuf:"varint,18,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                                          // Is the TestInstruction enabled or not
}

func (x *SupportedBasicTestInstructionInformationMessage) Reset() {
	*x = SupportedBasicTestInstructionInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedBasicTestInstructionInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedBasicTestInstructionInformationMessage) ProtoMessage() {}

func (x *SupportedBasicTestInstructionInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedBasicTestInstructionInformationMessage.ProtoReflect.Descriptor instead.
func (*SupportedBasicTestInstructionInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{6}
}

func (x *SupportedBasicTestInstructionInformationMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *SupportedBasicTestInstructionInformationMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *SupportedBasicTestInstructionInformationMessage) GetExecutionDomainUuid() string {
	if x != nil {
		return x.ExecutionDomainUuid
	}
	return ""
}

func (x *SupportedBasicTestInstructionInformationMessage) GetExecutionDomainName() string {
	if x != nil {
		return x.ExecutionDomainName
	}
	return ""
}

func (x *SupportedBasicTestInstructionInformationMessage) GetTestInstructionUUID() string {
	if x != nil {
		return x.TestInstructionUUID
	}
	return ""
}

func (x *SupportedBasicTestInstructionInformationMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

func (x *SupportedBasicTestInstructionInformationMessage) GetTestInstructionTypeUUID() string {
	if x != nil {
		return x.TestInstructionTypeUUID
	}
	return ""
}

func (x *SupportedBasicTestInstructionInformationMessage) GetTestInstructionTypeName() string {
	if x != nil {
		return x.TestInstructionTypeName
	}
	return ""
}

func (x *SupportedBasicTestInstructionInformationMessage) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *SupportedBasicTestInstructionInformationMessage) GetMajorVersionNumber() int32 {
	if x != nil {
		return x.MajorVersionNumber
	}
	return 0
}

func (x *SupportedBasicTestInstructionInformationMessage) GetMinorVersionNumber() int32 {
	if x != nil {
		return x.MinorVersionNumber
	}
	return 0
}

func (x *SupportedBasicTestInstructionInformationMessage) GetUpdatedTimeStamp() string {
	if x != nil {
		return x.UpdatedTimeStamp
	}
	return ""
}

func (x *SupportedBasicTestInstructionInformationMessage) GetTestInstructionColor() string {
	if x != nil {
		return x.TestInstructionColor
	}
	return ""
}

func (x *SupportedBasicTestInstructionInformationMessage) GetTCRuleDeletion() string {
	if x != nil {
		return x.TCRuleDeletion
	}
	return ""
}

func (x *SupportedBasicTestInstructionInformationMessage) GetTCRuleSwap() string {
	if x != nil {
		return x.TCRuleSwap
	}
	return ""
}

func (x *SupportedBasicTestInstructionInformationMessage) GetTestInstructionDescription() string {
	if x != nil {
		return x.TestInstructionDescription
	}
	return ""
}

func (x *SupportedBasicTestInstructionInformationMessage) GetTestInstructionMouseOverText() string {
	if x != nil {
		return x.TestInstructionMouseOverText
	}
	return ""
}

func (x *SupportedBasicTestInstructionInformationMessage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// SupportedImmatureTestInstructionInformationMessage
// A model holding one attribute and its value that will be set when user Drop TestInstruction on specific DropZone
type SupportedImmatureTestInstructionInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID                   string `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                                      // The Domain UUID where the TestInstruction belong
	DomainName                   string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                      // The Domain Name where the TestInstruction belong
	TestInstructionUUID          string `protobuf:"bytes,3,opt,name=TestInstructionUUID,proto3" json:"TestInstructionUUID,omitempty"`                    // The Unique TestInstruction UUID that identifies the specific TestInstruction to be executed
	TestInstructionName          string `protobuf:"bytes,4,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"`                    // The TestInstruction Name of the specific TestInstruction to be executed
	DropZoneUUID                 string `protobuf:"bytes,5,opt,name=DropZoneUUID,proto3" json:"DropZoneUUID,omitempty"`                                  // The immature TestInstruction used this DropZone UUID for the user to chose
	DropZoneName                 string `protobuf:"bytes,6,opt,name=DropZoneName,proto3" json:"DropZoneName,omitempty"`                                  // The immature TestInstruction used this DropZone Name for the user to chose
	DropZoneDescription          string `protobuf:"bytes,7,opt,name=DropZoneDescription,proto3" json:"DropZoneDescription,omitempty"`                    // The DropZone description
	DropZoneMouseOver            string `protobuf:"bytes,8,opt,name=DropZoneMouseOver,proto3" json:"DropZoneMouseOver,omitempty"`                        // The DropZone MouseOver text
	DropZoneColor                string `protobuf:"bytes,9,opt,name=DropZoneColor,proto3" json:"DropZoneColor,omitempty"`                                // The DropZone color when presented to the user
	TestInstructionAttributeType string `protobuf:"bytes,10,opt,name=TestInstructionAttributeType,proto3" json:"TestInstructionAttributeType,omitempty"` // The Attribute type for the Attribute to be set - TEXTBOX, COMBOBOX, FILE_SELECTOR, FileSelector, FUNCTION_SELECTOR
	TestInstructionAttributeUUID string `protobuf:"bytes,11,opt,name=TestInstructionAttributeUUID,proto3" json:"TestInstructionAttributeUUID,omitempty"` // The Attribute UUID to be set
	TestInstructionAttributeName string `protobuf:"bytes,12,opt,name=TestInstructionAttributeName,proto3" json:"TestInstructionAttributeName,omitempty"` // The Attribute Name for the Attribute to be set
	AttributeValueAsString       string `protobuf:"bytes,13,opt,name=AttributeValueAsString,proto3" json:"AttributeValueAsString,omitempty"`             // The Attribute Value for the Attribute
	AttributeValueUUID           string `protobuf:"bytes,14,opt,name=AttributeValueUUID,proto3" json:"AttributeValueUUID,omitempty"`                     // The Attribute Value UUID for the value to be set
	FirstImmatureElementUUID     string `protobuf:"bytes,15,opt,name=FirstImmatureElementUUID,proto3" json:"FirstImmatureElementUUID,omitempty"`         // The UUID to the first Element in the element model
	AttributeActionCommand       int32  `protobuf:"varint,16,opt,name=AttributeActionCommand,proto3" json:"AttributeActionCommand,omitempty"`            // Should the Attribute value be updated or should the attribute be removed 1("USE_DROPZONE_VALUE_FOR_ATTRIBUTE") or 2("REMOVE_ATTRIBUTE_FROM_TESTINSTRUCTION")
}

func (x *SupportedImmatureTestInstructionInformationMessage) Reset() {
	*x = SupportedImmatureTestInstructionInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedImmatureTestInstructionInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedImmatureTestInstructionInformationMessage) ProtoMessage() {}

func (x *SupportedImmatureTestInstructionInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedImmatureTestInstructionInformationMessage.ProtoReflect.Descriptor instead.
func (*SupportedImmatureTestInstructionInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{7}
}

func (x *SupportedImmatureTestInstructionInformationMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *SupportedImmatureTestInstructionInformationMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *SupportedImmatureTestInstructionInformationMessage) GetTestInstructionUUID() string {
	if x != nil {
		return x.TestInstructionUUID
	}
	return ""
}

func (x *SupportedImmatureTestInstructionInformationMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

func (x *SupportedImmatureTestInstructionInformationMessage) GetDropZoneUUID() string {
	if x != nil {
		return x.DropZoneUUID
	}
	return ""
}

func (x *SupportedImmatureTestInstructionInformationMessage) GetDropZoneName() string {
	if x != nil {
		return x.DropZoneName
	}
	return ""
}

func (x *SupportedImmatureTestInstructionInformationMessage) GetDropZoneDescription() string {
	if x != nil {
		return x.DropZoneDescription
	}
	return ""
}

func (x *SupportedImmatureTestInstructionInformationMessage) GetDropZoneMouseOver() string {
	if x != nil {
		return x.DropZoneMouseOver
	}
	return ""
}

func (x *SupportedImmatureTestInstructionInformationMessage) GetDropZoneColor() string {
	if x != nil {
		return x.DropZoneColor
	}
	return ""
}

func (x *SupportedImmatureTestInstructionInformationMessage) GetTestInstructionAttributeType() string {
	if x != nil {
		return x.TestInstructionAttributeType
	}
	return ""
}

func (x *SupportedImmatureTestInstructionInformationMessage) GetTestInstructionAttributeUUID() string {
	if x != nil {
		return x.TestInstructionAttributeUUID
	}
	return ""
}

func (x *SupportedImmatureTestInstructionInformationMessage) GetTestInstructionAttributeName() string {
	if x != nil {
		return x.TestInstructionAttributeName
	}
	return ""
}

func (x *SupportedImmatureTestInstructionInformationMessage) GetAttributeValueAsString() string {
	if x != nil {
		return x.AttributeValueAsString
	}
	return ""
}

func (x *SupportedImmatureTestInstructionInformationMessage) GetAttributeValueUUID() string {
	if x != nil {
		return x.AttributeValueUUID
	}
	return ""
}

func (x *SupportedImmatureTestInstructionInformationMessage) GetFirstImmatureElementUUID() string {
	if x != nil {
		return x.FirstImmatureElementUUID
	}
	return ""
}

func (x *SupportedImmatureTestInstructionInformationMessage) GetAttributeActionCommand() int32 {
	if x != nil {
		return x.AttributeActionCommand
	}
	return 0
}

// SupportedTestInstructionAttributeMessage
// Message holding one attribute for the TestInstruction
type SupportedTestInstructionAttributeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID                                    string `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                                                                         // The Domain UUID where the Attribute belong
	DomainName                                    string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                                                         // The Domain Name where the Attribute belong
	TestInstructionUUID                           string `protobuf:"bytes,3,opt,name=TestInstructionUUID,proto3" json:"TestInstructionUUID,omitempty"`                                                       // The Unique TestInstruction UUID that identifies which TestInstruction that owns the attribute
	TestInstructionName                           string `protobuf:"bytes,4,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"`                                                       // The TestInstruction Name of the specific TestInstruction that owns the attribute
	TestInstructionAttributeUUID                  string `protobuf:"bytes,5,opt,name=TestInstructionAttributeUUID,proto3" json:"TestInstructionAttributeUUID,omitempty"`                                     // The Unique UUID that identifies which TestInstructionAttribute
	TestInstructionAttributeName                  string `protobuf:"bytes,6,opt,name=TestInstructionAttributeName,proto3" json:"TestInstructionAttributeName,omitempty"`                                     // The Name of the TestInstructionAttribute
	TestInstructionAttributeDescription           string `protobuf:"bytes,7,opt,name=TestInstructionAttributeDescription,proto3" json:"TestInstructionAttributeDescription,omitempty"`                       // The Attribute description
	TestInstructionAttributeMouseOver             string `protobuf:"bytes,8,opt,name=TestInstructionAttributeMouseOver,proto3" json:"TestInstructionAttributeMouseOver,omitempty"`                           // The MouseOver text for the attribute
	TestInstructionAttributeTypeUUID              string `protobuf:"bytes,9,opt,name=TestInstructionAttributeTypeUUID,proto3" json:"TestInstructionAttributeTypeUUID,omitempty"`                             // The Type of Attribute, used for grouping in GUI
	TestInstructionAttributeTypeName              string `protobuf:"bytes,10,opt,name=TestInstructionAttributeTypeName,proto3" json:"TestInstructionAttributeTypeName,omitempty"`                            // The Name of the Type for the Attribute, shown in grouping in GUI
	TestInstructionAttributeValueAsString         string `protobuf:"bytes,11,opt,name=TestInstructionAttributeValueAsString,proto3" json:"TestInstructionAttributeValueAsString,omitempty"`                  // The string representation of the value for the attribute
	TestInstructionAttributeValueUUID             string `protobuf:"bytes,12,opt,name=TestInstructionAttributeValueUUID,proto3" json:"TestInstructionAttributeValueUUID,omitempty"`                          // The UUID for the value, when Combobox is used
	TestInstructionAttributeVisible               bool   `protobuf:"varint,13,opt,name=TestInstructionAttributeVisible,proto3" json:"TestInstructionAttributeVisible,omitempty"`                             // Should the attribute be visible for the user or not
	TestInstructionAttributeEnabled               bool   `protobuf:"varint,14,opt,name=TestInstructionAttributeEnabled,proto3" json:"TestInstructionAttributeEnabled,omitempty"`                             // Should the attribute be changeable by the user
	TestInstructionAttributeMandatory             bool   `protobuf:"varint,15,opt,name=TestInstructionAttributeMandatory,proto3" json:"TestInstructionAttributeMandatory,omitempty"`                         // Is the attribute mandatory for user to fill
	TestInstructionAttributeVisibleInTestCaseArea bool   `protobuf:"varint,16,opt,name=TestInstructionAttributeVisibleInTestCaseArea,proto3" json:"TestInstructionAttributeVisibleInTestCaseArea,omitempty"` // Should the attribute be visible in the TestCase-area in the GUI
	TestInstructionAttributeIsDeprecated          bool   `protobuf:"varint,17,opt,name=TestInstructionAttributeIsDeprecated,proto3" json:"TestInstructionAttributeIsDeprecated,omitempty"`                   // Is the attribute deprecated and shouldn't be used by the user
	TestInstructionAttributeInputMask             string `protobuf:"bytes,18,opt,name=TestInstructionAttributeInputMask,proto3" json:"TestInstructionAttributeInputMask,omitempty"`                          // And input mask for the attribute to secure that only valid values can be entered
	TestInstructionAttributeType                  string `protobuf:"bytes,19,opt,name=TestInstructionAttributeType,proto3" json:"TestInstructionAttributeType,omitempty"`                                    // What type of attribute this is - TEXTBOX, COMBOBOX, FILE_SELECTOR, FileSelector, FUNCTION_SELECTOR
}

func (x *SupportedTestInstructionAttributeMessage) Reset() {
	*x = SupportedTestInstructionAttributeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedTestInstructionAttributeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedTestInstructionAttributeMessage) ProtoMessage() {}

func (x *SupportedTestInstructionAttributeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedTestInstructionAttributeMessage.ProtoReflect.Descriptor instead.
func (*SupportedTestInstructionAttributeMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{8}
}

func (x *SupportedTestInstructionAttributeMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *SupportedTestInstructionAttributeMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *SupportedTestInstructionAttributeMessage) GetTestInstructionUUID() string {
	if x != nil {
		return x.TestInstructionUUID
	}
	return ""
}

func (x *SupportedTestInstructionAttributeMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

func (x *SupportedTestInstructionAttributeMessage) GetTestInstructionAttributeUUID() string {
	if x != nil {
		return x.TestInstructionAttributeUUID
	}
	return ""
}

func (x *SupportedTestInstructionAttributeMessage) GetTestInstructionAttributeName() string {
	if x != nil {
		return x.TestInstructionAttributeName
	}
	return ""
}

func (x *SupportedTestInstructionAttributeMessage) GetTestInstructionAttributeDescription() string {
	if x != nil {
		return x.TestInstructionAttributeDescription
	}
	return ""
}

func (x *SupportedTestInstructionAttributeMessage) GetTestInstructionAttributeMouseOver() string {
	if x != nil {
		return x.TestInstructionAttributeMouseOver
	}
	return ""
}

func (x *SupportedTestInstructionAttributeMessage) GetTestInstructionAttributeTypeUUID() string {
	if x != nil {
		return x.TestInstructionAttributeTypeUUID
	}
	return ""
}

func (x *SupportedTestInstructionAttributeMessage) GetTestInstructionAttributeTypeName() string {
	if x != nil {
		return x.TestInstructionAttributeTypeName
	}
	return ""
}

func (x *SupportedTestInstructionAttributeMessage) GetTestInstructionAttributeValueAsString() string {
	if x != nil {
		return x.TestInstructionAttributeValueAsString
	}
	return ""
}

func (x *SupportedTestInstructionAttributeMessage) GetTestInstructionAttributeValueUUID() string {
	if x != nil {
		return x.TestInstructionAttributeValueUUID
	}
	return ""
}

func (x *SupportedTestInstructionAttributeMessage) GetTestInstructionAttributeVisible() bool {
	if x != nil {
		return x.TestInstructionAttributeVisible
	}
	return false
}

func (x *SupportedTestInstructionAttributeMessage) GetTestInstructionAttributeEnabled() bool {
	if x != nil {
		return x.TestInstructionAttributeEnabled
	}
	return false
}

func (x *SupportedTestInstructionAttributeMessage) GetTestInstructionAttributeMandatory() bool {
	if x != nil {
		return x.TestInstructionAttributeMandatory
	}
	return false
}

func (x *SupportedTestInstructionAttributeMessage) GetTestInstructionAttributeVisibleInTestCaseArea() bool {
	if x != nil {
		return x.TestInstructionAttributeVisibleInTestCaseArea
	}
	return false
}

func (x *SupportedTestInstructionAttributeMessage) GetTestInstructionAttributeIsDeprecated() bool {
	if x != nil {
		return x.TestInstructionAttributeIsDeprecated
	}
	return false
}

func (x *SupportedTestInstructionAttributeMessage) GetTestInstructionAttributeInputMask() string {
	if x != nil {
		return x.TestInstructionAttributeInputMask
	}
	return ""
}

func (x *SupportedTestInstructionAttributeMessage) GetTestInstructionAttributeType() string {
	if x != nil {
		return x.TestInstructionAttributeType
	}
	return ""
}

// SupportedImmatureElementModelMessage
// A message holding one model element for the element
type SupportedImmatureElementModelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID               string `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                             // The Domain UUID where the Element belong
	DomainName               string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                             // The Domain Name where the Element belong
	ImmatureElementUUID      string `protobuf:"bytes,3,opt,name=ImmatureElementUUID,proto3" json:"ImmatureElementUUID,omitempty"`           // The OriginalElementUUID
	ImmatureElementName      string `protobuf:"bytes,4,opt,name=ImmatureElementName,proto3" json:"ImmatureElementName,omitempty"`           // The OriginalElementName
	PreviousElementUUID      string `protobuf:"bytes,5,opt,name=PreviousElementUUID,proto3" json:"PreviousElementUUID,omitempty"`           // The UUID of the previous element. When there are no previous element then this field is populated with 'ImmatureElementUUID'
	NextElementUUID          string `protobuf:"bytes,6,opt,name=NextElementUUID,proto3" json:"NextElementUUID,omitempty"`                   // The UUID of the next element. When there are no next element then this field is populated with 'ImmatureElementUUID'
	FirstChildElementUUID    string `protobuf:"bytes,7,opt,name=FirstChildElementUUID,proto3" json:"FirstChildElementUUID,omitempty"`       // The UUID of the first child element. When there are no child element then this field is populated with 'ImmatureElementUUID'
	ParentElementUUID        string `protobuf:"bytes,8,opt,name=ParentElementUUID,proto3" json:"ParentElementUUID,omitempty"`               // The UUID of the parent element. When there are no parent element then this field is populated with 'ImmatureElementUUID'
	TestCaseModelElementType string `protobuf:"bytes,9,opt,name=TestCaseModelElementType,proto3" json:"TestCaseModelElementType,omitempty"` // The Type of element, TI, TIC, Bond and so on
	OriginalElementUUID      string `protobuf:"bytes,10,opt,name=OriginalElementUUID,proto3" json:"OriginalElementUUID,omitempty"`          // The original elements UUID, e.g. a TestInstruction unique UUID set by client system
	TopImmatureElementUUID   string `protobuf:"bytes,11,opt,name=TopImmatureElementUUID,proto3" json:"TopImmatureElementUUID,omitempty"`    // The original elements Name, e.g. a TestInstruction Name set by client system
	IsTopElement             bool   `protobuf:"varint,12,opt,name=IsTopElement,proto3" json:"IsTopElement,omitempty"`                       // Is this the top element of the element model
}

func (x *SupportedImmatureElementModelMessage) Reset() {
	*x = SupportedImmatureElementModelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedImmatureElementModelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedImmatureElementModelMessage) ProtoMessage() {}

func (x *SupportedImmatureElementModelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedImmatureElementModelMessage.ProtoReflect.Descriptor instead.
func (*SupportedImmatureElementModelMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{9}
}

func (x *SupportedImmatureElementModelMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *SupportedImmatureElementModelMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *SupportedImmatureElementModelMessage) GetImmatureElementUUID() string {
	if x != nil {
		return x.ImmatureElementUUID
	}
	return ""
}

func (x *SupportedImmatureElementModelMessage) GetImmatureElementName() string {
	if x != nil {
		return x.ImmatureElementName
	}
	return ""
}

func (x *SupportedImmatureElementModelMessage) GetPreviousElementUUID() string {
	if x != nil {
		return x.PreviousElementUUID
	}
	return ""
}

func (x *SupportedImmatureElementModelMessage) GetNextElementUUID() string {
	if x != nil {
		return x.NextElementUUID
	}
	return ""
}

func (x *SupportedImmatureElementModelMessage) GetFirstChildElementUUID() string {
	if x != nil {
		return x.FirstChildElementUUID
	}
	return ""
}

func (x *SupportedImmatureElementModelMessage) GetParentElementUUID() string {
	if x != nil {
		return x.ParentElementUUID
	}
	return ""
}

func (x *SupportedImmatureElementModelMessage) GetTestCaseModelElementType() string {
	if x != nil {
		return x.TestCaseModelElementType
	}
	return ""
}

func (x *SupportedImmatureElementModelMessage) GetOriginalElementUUID() string {
	if x != nil {
		return x.OriginalElementUUID
	}
	return ""
}

func (x *SupportedImmatureElementModelMessage) GetTopImmatureElementUUID() string {
	if x != nil {
		return x.TopImmatureElementUUID
	}
	return ""
}

func (x *SupportedImmatureElementModelMessage) GetIsTopElement() bool {
	if x != nil {
		return x.IsTopElement
	}
	return false
}

// SupportedTestInstructionContainersMessage
// Message for a TestInstructionContainersMap that hold all TestInstructionContainers
type SupportedTestInstructionContainersMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionsMap           map[string]*SupportedTestInstructionContainerInstanceVersionsMessage `protobuf:"bytes,1,rep,name=TestInstructionsMap,proto3" json:"TestInstructionsMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // The Map holding all TestInstructions
	TestInstructionContainersHash string                                                               `protobuf:"bytes,2,opt,name=TestInstructionContainersHash,proto3" json:"TestInstructionContainersHash,omitempty"`                                                                     // SHA256 of all TestInstructionsMap using Fenix standard way of hashing values together
}

func (x *SupportedTestInstructionContainersMessage) Reset() {
	*x = SupportedTestInstructionContainersMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedTestInstructionContainersMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedTestInstructionContainersMessage) ProtoMessage() {}

func (x *SupportedTestInstructionContainersMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedTestInstructionContainersMessage.ProtoReflect.Descriptor instead.
func (*SupportedTestInstructionContainersMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{10}
}

func (x *SupportedTestInstructionContainersMessage) GetTestInstructionsMap() map[string]*SupportedTestInstructionContainerInstanceVersionsMessage {
	if x != nil {
		return x.TestInstructionsMap
	}
	return nil
}

func (x *SupportedTestInstructionContainersMessage) GetTestInstructionContainersHash() string {
	if x != nil {
		return x.TestInstructionContainersHash
	}
	return ""
}

// SupportedTestInstructionContainerInstanceVersionsMessage
//
//	Message for all versions of one TestInstructionContainer, first position holds last version i.e. version x, second position holds the version before that i.e. version x-1...
type SupportedTestInstructionContainerInstanceVersionsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionContainerVersions []*SupportedTestInstructionContainerInstanceVersionMessage `protobuf:"bytes,1,rep,name=TestInstructionContainerVersions,proto3" json:"TestInstructionContainerVersions,omitempty"` // Array with all versions of a TestInstructionContainers. First position holds last version i.e. version x, second position holds the version before that i.e. version x-1...
	TestInstructionVersionsHash      string                                                     `protobuf:"bytes,2,opt,name=TestInstructionVersionsHash,proto3" json:"TestInstructionVersionsHash,omitempty"`           // SHA256 of all TestInstructionInstanceVersions using Fenix standard way of hashing values together
}

func (x *SupportedTestInstructionContainerInstanceVersionsMessage) Reset() {
	*x = SupportedTestInstructionContainerInstanceVersionsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedTestInstructionContainerInstanceVersionsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedTestInstructionContainerInstanceVersionsMessage) ProtoMessage() {}

func (x *SupportedTestInstructionContainerInstanceVersionsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedTestInstructionContainerInstanceVersionsMessage.ProtoReflect.Descriptor instead.
func (*SupportedTestInstructionContainerInstanceVersionsMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{11}
}

func (x *SupportedTestInstructionContainerInstanceVersionsMessage) GetTestInstructionContainerVersions() []*SupportedTestInstructionContainerInstanceVersionMessage {
	if x != nil {
		return x.TestInstructionContainerVersions
	}
	return nil
}

func (x *SupportedTestInstructionContainerInstanceVersionsMessage) GetTestInstructionVersionsHash() string {
	if x != nil {
		return x.TestInstructionVersionsHash
	}
	return ""
}

// SupportedTestInstructionContainerInstanceVersionMessage
// A Message holding one TestInstructionContainer-version
type SupportedTestInstructionContainerInstanceVersionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionContainerInstance             *SupportedTestInstructionContainerMessage `protobuf:"bytes,1,opt,name=TestInstructionContainerInstance,proto3" json:"TestInstructionContainerInstance,omitempty"`                          // Holds one TestInstructionContainerInstance
	TestInstructionContainerInstanceMajorVersion int32                                     `protobuf:"varint,2,opt,name=TestInstructionContainerInstanceMajorVersion,proto3" json:"TestInstructionContainerInstanceMajorVersion,omitempty"` // The major version for the TestInstructionContainer
	TestInstructionContainerInstanceMinorVersion int32                                     `protobuf:"varint,3,opt,name=TestInstructionContainerInstanceMinorVersion,proto3" json:"TestInstructionContainerInstanceMinorVersion,omitempty"` // The minor version for the TestInstructionContainer
	Deprecated                                   bool                                      `protobuf:"varint,4,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`                                                                     // Should the user stop using this TestInstructionContainerInstance-version
	Enabled                                      bool                                      `protobuf:"varint,5,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                                                                           // Is this TestInstructionContainerInstance-version enabled or disabled
	TestInstructionContainerInstanceVersionHash  string                                    `protobuf:"bytes,6,opt,name=TestInstructionContainerInstanceVersionHash,proto3" json:"TestInstructionContainerInstanceVersionHash,omitempty"`    // SHA256 of all TestInstructionContainerMessage using Fenix standard way of hashing values together
}

func (x *SupportedTestInstructionContainerInstanceVersionMessage) Reset() {
	*x = SupportedTestInstructionContainerInstanceVersionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedTestInstructionContainerInstanceVersionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedTestInstructionContainerInstanceVersionMessage) ProtoMessage() {}

func (x *SupportedTestInstructionContainerInstanceVersionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedTestInstructionContainerInstanceVersionMessage.ProtoReflect.Descriptor instead.
func (*SupportedTestInstructionContainerInstanceVersionMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{12}
}

func (x *SupportedTestInstructionContainerInstanceVersionMessage) GetTestInstructionContainerInstance() *SupportedTestInstructionContainerMessage {
	if x != nil {
		return x.TestInstructionContainerInstance
	}
	return nil
}

func (x *SupportedTestInstructionContainerInstanceVersionMessage) GetTestInstructionContainerInstanceMajorVersion() int32 {
	if x != nil {
		return x.TestInstructionContainerInstanceMajorVersion
	}
	return 0
}

func (x *SupportedTestInstructionContainerInstanceVersionMessage) GetTestInstructionContainerInstanceMinorVersion() int32 {
	if x != nil {
		return x.TestInstructionContainerInstanceMinorVersion
	}
	return 0
}

func (x *SupportedTestInstructionContainerInstanceVersionMessage) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *SupportedTestInstructionContainerInstanceVersionMessage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SupportedTestInstructionContainerInstanceVersionMessage) GetTestInstructionContainerInstanceVersionHash() string {
	if x != nil {
		return x.TestInstructionContainerInstanceVersionHash
	}
	return ""
}

// SupportedTestInstructionContainerMessage
// A message holding one complete TestInstructionContainer
type SupportedTestInstructionContainerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionContainer                     *SupportedTestInstructionContainerBaseMessage                  `protobuf:"bytes,1,opt,name=TestInstructionContainer,proto3" json:"TestInstructionContainer,omitempty"`                                         //
	BasicTestInstructionContainerInformation     *SupportedBasicTestInstructionContainerInformationMessage      `protobuf:"bytes,2,opt,name=BasicTestInstructionContainerInformation,proto3" json:"BasicTestInstructionContainerInformation,omitempty"`         //
	ImmatureTestInstructionContainerInformations []*SupportedImmatureTestInstructionContainerInformationMessage `protobuf:"bytes,3,rep,name=ImmatureTestInstructionContainerInformations,proto3" json:"ImmatureTestInstructionContainerInformations,omitempty"` //
	ImmatureElementModel                         []*SupportedImmatureElementModelMessage                        `protobuf:"bytes,5,rep,name=ImmatureElementModel,proto3" json:"ImmatureElementModel,omitempty"`                                                 //
}

func (x *SupportedTestInstructionContainerMessage) Reset() {
	*x = SupportedTestInstructionContainerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedTestInstructionContainerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedTestInstructionContainerMessage) ProtoMessage() {}

func (x *SupportedTestInstructionContainerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedTestInstructionContainerMessage.ProtoReflect.Descriptor instead.
func (*SupportedTestInstructionContainerMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{13}
}

func (x *SupportedTestInstructionContainerMessage) GetTestInstructionContainer() *SupportedTestInstructionContainerBaseMessage {
	if x != nil {
		return x.TestInstructionContainer
	}
	return nil
}

func (x *SupportedTestInstructionContainerMessage) GetBasicTestInstructionContainerInformation() *SupportedBasicTestInstructionContainerInformationMessage {
	if x != nil {
		return x.BasicTestInstructionContainerInformation
	}
	return nil
}

func (x *SupportedTestInstructionContainerMessage) GetImmatureTestInstructionContainerInformations() []*SupportedImmatureTestInstructionContainerInformationMessage {
	if x != nil {
		return x.ImmatureTestInstructionContainerInformations
	}
	return nil
}

func (x *SupportedTestInstructionContainerMessage) GetImmatureElementModel() []*SupportedImmatureElementModelMessage {
	if x != nil {
		return x.ImmatureElementModel
	}
	return nil
}

// SupportedTestInstructionContainerBaseMessage
// The base information for the TestInstructionContainer
type SupportedTestInstructionContainerBaseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID                            string `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                                                       // The Domain UUID where the TestInstructionContainer belong
	DomainName                            string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                                       // The Domain Name where the TestInstructionContainer belong
	TestInstructionContainerUUID          string `protobuf:"bytes,3,opt,name=TestInstructionContainerUUID,proto3" json:"TestInstructionContainerUUID,omitempty"`                   // The Unique TestInstructionContainer UUID that identifies the specific TestInstructionContainer to be executed
	TestInstructionContainerName          string `protobuf:"bytes,4,opt,name=TestInstructionContainerName,proto3" json:"TestInstructionContainerName,omitempty"`                   // The TestInstructionContainer Name of the specific TestInstructionContainer to be executed
	TestInstructionContainerTypeUUID      string `protobuf:"bytes,5,opt,name=TestInstructionContainerTypeUUID,proto3" json:"TestInstructionContainerTypeUUID,omitempty"`           // The type UUID of the TestInstructionContainer
	TestInstructionContainerTypeName      string `protobuf:"bytes,6,opt,name=TestInstructionContainerTypeName,proto3" json:"TestInstructionContainerTypeName,omitempty"`           // The type Name of the TestInstructionContainer
	TestInstructionContainerDescription   string `protobuf:"bytes,7,opt,name=TestInstructionContainerDescription,proto3" json:"TestInstructionContainerDescription,omitempty"`     // The TestInstructionContainer description for the TestInstructionContainer
	TestInstructionContainerMouseOverText string `protobuf:"bytes,8,opt,name=TestInstructionContainerMouseOverText,proto3" json:"TestInstructionContainerMouseOverText,omitempty"` // The TestInstructionContainer MouseOver text for the TestInstructionContainer
	Deprecated                            bool   `protobuf:"varint,9,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`                                                      // Is the TestInstructionContainer depreciated and shouldn't be used by the user
	Enabled                               bool   `protobuf:"varint,10,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                                                           // Is the TestInstructionContainer enabled or not
	MajorVersionNumber                    int32  `protobuf:"varint,11,opt,name=MajorVersionNumber,proto3" json:"MajorVersionNumber,omitempty"`                                     // The Major version number for the TestInstructionContainer
	MinorVersionNumber                    int32  `protobuf:"varint,12,opt,name=MinorVersionNumber,proto3" json:"MinorVersionNumber,omitempty"`                                     // The Minor version number for the TestInstructionContainer
	UpdatedTimeStamp                      string `protobuf:"bytes,13,opt,name=UpdatedTimeStamp,proto3" json:"UpdatedTimeStamp,omitempty"`                                          // When the TestInstructionContainer was first created
	ChildrenIsParallelProcessed           bool   `protobuf:"varint,14,opt,name=ChildrenIsParallelProcessed,proto3" json:"ChildrenIsParallelProcessed,omitempty"`                   // Should children be executed in parallel
}

func (x *SupportedTestInstructionContainerBaseMessage) Reset() {
	*x = SupportedTestInstructionContainerBaseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedTestInstructionContainerBaseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedTestInstructionContainerBaseMessage) ProtoMessage() {}

func (x *SupportedTestInstructionContainerBaseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedTestInstructionContainerBaseMessage.ProtoReflect.Descriptor instead.
func (*SupportedTestInstructionContainerBaseMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{14}
}

func (x *SupportedTestInstructionContainerBaseMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *SupportedTestInstructionContainerBaseMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *SupportedTestInstructionContainerBaseMessage) GetTestInstructionContainerUUID() string {
	if x != nil {
		return x.TestInstructionContainerUUID
	}
	return ""
}

func (x *SupportedTestInstructionContainerBaseMessage) GetTestInstructionContainerName() string {
	if x != nil {
		return x.TestInstructionContainerName
	}
	return ""
}

func (x *SupportedTestInstructionContainerBaseMessage) GetTestInstructionContainerTypeUUID() string {
	if x != nil {
		return x.TestInstructionContainerTypeUUID
	}
	return ""
}

func (x *SupportedTestInstructionContainerBaseMessage) GetTestInstructionContainerTypeName() string {
	if x != nil {
		return x.TestInstructionContainerTypeName
	}
	return ""
}

func (x *SupportedTestInstructionContainerBaseMessage) GetTestInstructionContainerDescription() string {
	if x != nil {
		return x.TestInstructionContainerDescription
	}
	return ""
}

func (x *SupportedTestInstructionContainerBaseMessage) GetTestInstructionContainerMouseOverText() string {
	if x != nil {
		return x.TestInstructionContainerMouseOverText
	}
	return ""
}

func (x *SupportedTestInstructionContainerBaseMessage) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *SupportedTestInstructionContainerBaseMessage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SupportedTestInstructionContainerBaseMessage) GetMajorVersionNumber() int32 {
	if x != nil {
		return x.MajorVersionNumber
	}
	return 0
}

func (x *SupportedTestInstructionContainerBaseMessage) GetMinorVersionNumber() int32 {
	if x != nil {
		return x.MinorVersionNumber
	}
	return 0
}

func (x *SupportedTestInstructionContainerBaseMessage) GetUpdatedTimeStamp() string {
	if x != nil {
		return x.UpdatedTimeStamp
	}
	return ""
}

func (x *SupportedTestInstructionContainerBaseMessage) GetChildrenIsParallelProcessed() bool {
	if x != nil {
		return x.ChildrenIsParallelProcessed
	}
	return false
}

// SupportedBasicTestInstructionContainerInformationMessage
// The Basic information for the TestInstructionContainer
type SupportedBasicTestInstructionContainerInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID                            string `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                                                        // The Domain UUID where the TestInstructionContainer belong
	DomainName                            string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                                        // The Domain Name where the TestInstructionContainer belong
	TestInstructionContainerUUID          string `protobuf:"bytes,3,opt,name=TestInstructionContainerUUID,proto3" json:"TestInstructionContainerUUID,omitempty"`                    // The Unique TestInstructionContainer UUID that identifies the specific TestInstructionContainer to be executed
	TestInstructionContainerName          string `protobuf:"bytes,4,opt,name=TestInstructionContainerName,proto3" json:"TestInstructionContainerName,omitempty"`                    // The TestInstructionContainer Name of the specific TestInstructionContainer to be executed
	TestInstructionContainerTypeUUID      string `protobuf:"bytes,5,opt,name=TestInstructionContainerTypeUUID,proto3" json:"TestInstructionContainerTypeUUID,omitempty"`            // The type UUID of the TestInstructionContainer
	TestInstructionContainerTypeName      string `protobuf:"bytes,6,opt,name=TestInstructionContainerTypeName,proto3" json:"TestInstructionContainerTypeName,omitempty"`            // The type Name of the TestInstructionContainer
	Deprecated                            bool   `protobuf:"varint,7,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`                                                       // Is the TestInstructionContainer depreciated and shouldn't be used by the user
	MajorVersionNumber                    int32  `protobuf:"varint,8,opt,name=MajorVersionNumber,proto3" json:"MajorVersionNumber,omitempty"`                                       // The Major version number for the TestInstructionContainer
	MinorVersionNumber                    int32  `protobuf:"varint,9,opt,name=MinorVersionNumber,proto3" json:"MinorVersionNumber,omitempty"`                                       // The Minor version number for the TestInstructionContainer
	UpdatedTimeStamp                      string `protobuf:"bytes,10,opt,name=UpdatedTimeStamp,proto3" json:"UpdatedTimeStamp,omitempty"`                                           // When the TestInstructionContainer was first created
	TestInstructionContainerColor         string `protobuf:"bytes,11,opt,name=TestInstructionContainerColor,proto3" json:"TestInstructionContainerColor,omitempty"`                 // The color used in GUI when showing the TestInstructionContainer
	TCRuleDeletion                        string `protobuf:"bytes,12,opt,name=TCRuleDeletion,proto3" json:"TCRuleDeletion,omitempty"`                                               // The Delete-rule defining how the TestInstructionContainer can be deleted
	TCRuleSwap                            string `protobuf:"bytes,13,opt,name=TCRuleSwap,proto3" json:"TCRuleSwap,omitempty"`                                                       // The Swap-rule defining how the TestInstructionContainer can be swapped out
	TestInstructionContainerDescription   string `protobuf:"bytes,14,opt,name=TestInstructionContainerDescription,proto3" json:"TestInstructionContainerDescription,omitempty"`     // The TestInstructionContainer description for the TestInstructionContainer
	TestInstructionContainerMouseOverText string `protobuf:"bytes,15,opt,name=TestInstructionContainerMouseOverText,proto3" json:"TestInstructionContainerMouseOverText,omitempty"` // The TestInstructionContainer MouseOver text for the TestInstructionContainer
	Enabled                               bool   `protobuf:"varint,16,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                                                            // Is the TestInstructionContainer enabled or not
	TestInstructionContainerExecutionType string `protobuf:"bytes,17,opt,name=TestInstructionContainerExecutionType,proto3" json:"TestInstructionContainerExecutionType,omitempty"` // Should execution of children be executed in serial or in parallel
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) Reset() {
	*x = SupportedBasicTestInstructionContainerInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedBasicTestInstructionContainerInformationMessage) ProtoMessage() {}

func (x *SupportedBasicTestInstructionContainerInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedBasicTestInstructionContainerInformationMessage.ProtoReflect.Descriptor instead.
func (*SupportedBasicTestInstructionContainerInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{15}
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) GetTestInstructionContainerUUID() string {
	if x != nil {
		return x.TestInstructionContainerUUID
	}
	return ""
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) GetTestInstructionContainerName() string {
	if x != nil {
		return x.TestInstructionContainerName
	}
	return ""
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) GetTestInstructionContainerTypeUUID() string {
	if x != nil {
		return x.TestInstructionContainerTypeUUID
	}
	return ""
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) GetTestInstructionContainerTypeName() string {
	if x != nil {
		return x.TestInstructionContainerTypeName
	}
	return ""
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) GetMajorVersionNumber() int32 {
	if x != nil {
		return x.MajorVersionNumber
	}
	return 0
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) GetMinorVersionNumber() int32 {
	if x != nil {
		return x.MinorVersionNumber
	}
	return 0
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) GetUpdatedTimeStamp() string {
	if x != nil {
		return x.UpdatedTimeStamp
	}
	return ""
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) GetTestInstructionContainerColor() string {
	if x != nil {
		return x.TestInstructionContainerColor
	}
	return ""
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) GetTCRuleDeletion() string {
	if x != nil {
		return x.TCRuleDeletion
	}
	return ""
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) GetTCRuleSwap() string {
	if x != nil {
		return x.TCRuleSwap
	}
	return ""
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) GetTestInstructionContainerDescription() string {
	if x != nil {
		return x.TestInstructionContainerDescription
	}
	return ""
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) GetTestInstructionContainerMouseOverText() string {
	if x != nil {
		return x.TestInstructionContainerMouseOverText
	}
	return ""
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SupportedBasicTestInstructionContainerInformationMessage) GetTestInstructionContainerExecutionType() string {
	if x != nil {
		return x.TestInstructionContainerExecutionType
	}
	return ""
}

// SupportedImmatureTestInstructionContainerInformationMessage
// A model holding one attribute and its value that will be set when user Drop TestInstructionContainer on specific DropZone
type SupportedImmatureTestInstructionContainerInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID                            string `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                                                        // The Domain UUID where the TestInstructionContainer belong
	DomainName                            string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                                        // The Domain Name where the TestInstructionContainer belong
	TestInstructionContainerUUID          string `protobuf:"bytes,3,opt,name=TestInstructionContainerUUID,proto3" json:"TestInstructionContainerUUID,omitempty"`                    // The Unique TestInstructionContainer UUID that identifies the specific TestInstructionContainer to be executed
	TestInstructionContainerName          string `protobuf:"bytes,4,opt,name=TestInstructionContainerName,proto3" json:"TestInstructionContainerName,omitempty"`                    // The TestInstructionContainer Name of the specific TestInstructionContainer to be executed
	DropZoneUUID                          string `protobuf:"bytes,5,opt,name=DropZoneUUID,proto3" json:"DropZoneUUID,omitempty"`                                                    // The immature TestInstructionContainer used this DropZone UUID for the user to chose
	DropZoneName                          string `protobuf:"bytes,6,opt,name=DropZoneName,proto3" json:"DropZoneName,omitempty"`                                                    // The immature TestInstructionContainer used this DropZone Name for the user to chose
	DropZoneDescription                   string `protobuf:"bytes,7,opt,name=DropZoneDescription,proto3" json:"DropZoneDescription,omitempty"`                                      // The DropZone description
	DropZoneMouseOver                     string `protobuf:"bytes,8,opt,name=DropZoneMouseOver,proto3" json:"DropZoneMouseOver,omitempty"`                                          // The DropZone MouseOver text
	DropZoneColor                         string `protobuf:"bytes,9,opt,name=DropZoneColor,proto3" json:"DropZoneColor,omitempty"`                                                  // The DropZone color when presented to the user
	TestInstructionContainerAttributeType string `protobuf:"bytes,10,opt,name=TestInstructionContainerAttributeType,proto3" json:"TestInstructionContainerAttributeType,omitempty"` // The Attribute type for the Attribute to be set - TEXTBOX, COMBOBOX, FILE_SELECTOR, FileSelector, FUNCTION_SELECTOR
	TestInstructionContainerAttributeUUID string `protobuf:"bytes,11,opt,name=TestInstructionContainerAttributeUUID,proto3" json:"TestInstructionContainerAttributeUUID,omitempty"` // The Attribute UUID to be set
	TestInstructionContainerAttributeName string `protobuf:"bytes,12,opt,name=TestInstructionContainerAttributeName,proto3" json:"TestInstructionContainerAttributeName,omitempty"` // The Attribute Name for the Attribute to be set
	AttributeValueAsString                string `protobuf:"bytes,13,opt,name=AttributeValueAsString,proto3" json:"AttributeValueAsString,omitempty"`                               // The Attribute Value for the Attribute
	AttributeValueUUID                    string `protobuf:"bytes,14,opt,name=AttributeValueUUID,proto3" json:"AttributeValueUUID,omitempty"`                                       // The Attribute Value UUID for the value to be set
	FirstImmatureElementUUID              string `protobuf:"bytes,15,opt,name=FirstImmatureElementUUID,proto3" json:"FirstImmatureElementUUID,omitempty"`                           // The UUID to the first Element in the element model
	AttributeActionCommand                int32  `protobuf:"varint,16,opt,name=AttributeActionCommand,proto3" json:"AttributeActionCommand,omitempty"`                              // Should the Attribute value be updated or should the attribute be removed 1("USE_DROPZONE_VALUE_FOR_ATTRIBUTE") or 2("REMOVE_ATTRIBUTE_FROM_TestInstructionContainer")
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) Reset() {
	*x = SupportedImmatureTestInstructionContainerInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedImmatureTestInstructionContainerInformationMessage) ProtoMessage() {}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedImmatureTestInstructionContainerInformationMessage.ProtoReflect.Descriptor instead.
func (*SupportedImmatureTestInstructionContainerInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{16}
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) GetTestInstructionContainerUUID() string {
	if x != nil {
		return x.TestInstructionContainerUUID
	}
	return ""
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) GetTestInstructionContainerName() string {
	if x != nil {
		return x.TestInstructionContainerName
	}
	return ""
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) GetDropZoneUUID() string {
	if x != nil {
		return x.DropZoneUUID
	}
	return ""
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) GetDropZoneName() string {
	if x != nil {
		return x.DropZoneName
	}
	return ""
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) GetDropZoneDescription() string {
	if x != nil {
		return x.DropZoneDescription
	}
	return ""
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) GetDropZoneMouseOver() string {
	if x != nil {
		return x.DropZoneMouseOver
	}
	return ""
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) GetDropZoneColor() string {
	if x != nil {
		return x.DropZoneColor
	}
	return ""
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) GetTestInstructionContainerAttributeType() string {
	if x != nil {
		return x.TestInstructionContainerAttributeType
	}
	return ""
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) GetTestInstructionContainerAttributeUUID() string {
	if x != nil {
		return x.TestInstructionContainerAttributeUUID
	}
	return ""
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) GetTestInstructionContainerAttributeName() string {
	if x != nil {
		return x.TestInstructionContainerAttributeName
	}
	return ""
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) GetAttributeValueAsString() string {
	if x != nil {
		return x.AttributeValueAsString
	}
	return ""
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) GetAttributeValueUUID() string {
	if x != nil {
		return x.AttributeValueUUID
	}
	return ""
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) GetFirstImmatureElementUUID() string {
	if x != nil {
		return x.FirstImmatureElementUUID
	}
	return ""
}

func (x *SupportedImmatureTestInstructionContainerInformationMessage) GetAttributeActionCommand() int32 {
	if x != nil {
		return x.AttributeActionCommand
	}
	return 0
}

// SupportedAllowedUsersMessage
// Message containing all users that are allowed to access the connectors published TestInstructions and TestInstructionContainers
type SupportedAllowedUsersMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedUsers                []*SupportedAllowedUserMessage      `protobuf:"bytes,1,rep,name=AllowedUsers,proto3" json:"AllowedUsers,omitempty"`                               // Array with all allowed users for this Domain
	AllUsersAuthorizationRights *AllUsersAuthorizationRightsMessage `protobuf:"bytes,2,opt,name=AllUsersAuthorizationRights,proto3" json:"AllUsersAuthorizationRights,omitempty"` // Message defining right for all users regarding this domain
	AllowedUsersHash            string                              `protobuf:"bytes,3,opt,name=AllowedUsersHash,proto3" json:"AllowedUsersHash,omitempty"`                       // The Hash for all users-messages
}

func (x *SupportedAllowedUsersMessage) Reset() {
	*x = SupportedAllowedUsersMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedAllowedUsersMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedAllowedUsersMessage) ProtoMessage() {}

func (x *SupportedAllowedUsersMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedAllowedUsersMessage.ProtoReflect.Descriptor instead.
func (*SupportedAllowedUsersMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{17}
}

func (x *SupportedAllowedUsersMessage) GetAllowedUsers() []*SupportedAllowedUserMessage {
	if x != nil {
		return x.AllowedUsers
	}
	return nil
}

func (x *SupportedAllowedUsersMessage) GetAllUsersAuthorizationRights() *AllUsersAuthorizationRightsMessage {
	if x != nil {
		return x.AllUsersAuthorizationRights
	}
	return nil
}

func (x *SupportedAllowedUsersMessage) GetAllowedUsersHash() string {
	if x != nil {
		return x.AllowedUsersHash
	}
	return ""
}

// SupportedAllowedUserMessage
// Message containing a user that are allowed to access the connectors published TestInstructions and TestInstructionContainers
type SupportedAllowedUserMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdOnComputer        string                          `protobuf:"bytes,1,opt,name=UserIdOnComputer,proto3" json:"UserIdOnComputer,omitempty"`               // The user-id user use to login to computer with
	GCPAuthenticatedUser    string                          `protobuf:"bytes,2,opt,name=GCPAuthenticatedUser,proto3" json:"GCPAuthenticatedUser,omitempty"`       // The e-mail which user use to authenticate towards GCP
	UserEmail               string                          `protobuf:"bytes,3,opt,name=UserEmail,proto3" json:"UserEmail,omitempty"`                             // The users e-mail
	UserFirstName           string                          `protobuf:"bytes,4,opt,name=UserFirstName,proto3" json:"UserFirstName,omitempty"`                     // The users firs
	UserLastName            string                          `protobuf:"bytes,5,opt,name=UserLastName,proto3" json:"UserLastName,omitempty"`                       // The users last name`
	UserAuthorizationRights *UserAuthorizationRightsMessage `protobuf:"bytes,6,opt,name=UserAuthorizationRights,proto3" json:"UserAuthorizationRights,omitempty"` // The use rights for what to do on this Domain
}

func (x *SupportedAllowedUserMessage) Reset() {
	*x = SupportedAllowedUserMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedAllowedUserMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedAllowedUserMessage) ProtoMessage() {}

func (x *SupportedAllowedUserMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedAllowedUserMessage.ProtoReflect.Descriptor instead.
func (*SupportedAllowedUserMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{18}
}

func (x *SupportedAllowedUserMessage) GetUserIdOnComputer() string {
	if x != nil {
		return x.UserIdOnComputer
	}
	return ""
}

func (x *SupportedAllowedUserMessage) GetGCPAuthenticatedUser() string {
	if x != nil {
		return x.GCPAuthenticatedUser
	}
	return ""
}

func (x *SupportedAllowedUserMessage) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *SupportedAllowedUserMessage) GetUserFirstName() string {
	if x != nil {
		return x.UserFirstName
	}
	return ""
}

func (x *SupportedAllowedUserMessage) GetUserLastName() string {
	if x != nil {
		return x.UserLastName
	}
	return ""
}

func (x *SupportedAllowedUserMessage) GetUserAuthorizationRights() *UserAuthorizationRightsMessage {
	if x != nil {
		return x.UserAuthorizationRights
	}
	return nil
}

// UserAuthorizationRightsMessage
// Message defining the users right for this domain
type UserAuthorizationRightsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanListAndViewTestCaseOwnedByThisDomain                    bool `protobuf:"varint,1,opt,name=CanListAndViewTestCaseOwnedByThisDomain,proto3" json:"CanListAndViewTestCaseOwnedByThisDomain,omitempty"`                                       // Can List and View TestCases that belongs to this domain
	CanBuildAndSaveTestCaseOwnedByThisDomain                   bool `protobuf:"varint,2,opt,name=CanBuildAndSaveTestCaseOwnedByThisDomain,proto3" json:"CanBuildAndSaveTestCaseOwnedByThisDomain,omitempty"`                                     // Can Build, Edit and Save TestCases that belongs to this domain
	CanListAndViewTestCaseHavingTIandTICFromThisDomain         bool `protobuf:"varint,3,opt,name=CanListAndViewTestCaseHavingTIandTICFromThisDomain,proto3" json:"CanListAndViewTestCaseHavingTIandTICFromThisDomain,omitempty"`                 // Can List and View TestCases having TestInstruction and TestInstructionContainers from this domain
	CanListAndViewTestCaseHavingTIandTICFromThisDomainExtended bool `protobuf:"varint,4,opt,name=CanListAndViewTestCaseHavingTIandTICFromThisDomainExtended,proto3" json:"CanListAndViewTestCaseHavingTIandTICFromThisDomainExtended,omitempty"` // Can List and View TestCases even having TestInstruction and TestInstructionContainers from this domain even though there are other TI and TIC from other domains that the users doesn't have explicit access to
	CanBuildAndSaveTestCaseHavingTIandTICFromThisDomain        bool `protobuf:"varint,5,opt,name=CanBuildAndSaveTestCaseHavingTIandTICFromThisDomain,proto3" json:"CanBuildAndSaveTestCaseHavingTIandTICFromThisDomain,omitempty"`               // Can Build, Edit and Save TestCases that has TestInstruction and TestInstructionContainers from this domain
}

func (x *UserAuthorizationRightsMessage) Reset() {
	*x = UserAuthorizationRightsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthorizationRightsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthorizationRightsMessage) ProtoMessage() {}

func (x *UserAuthorizationRightsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthorizationRightsMessage.ProtoReflect.Descriptor instead.
func (*UserAuthorizationRightsMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{19}
}

func (x *UserAuthorizationRightsMessage) GetCanListAndViewTestCaseOwnedByThisDomain() bool {
	if x != nil {
		return x.CanListAndViewTestCaseOwnedByThisDomain
	}
	return false
}

func (x *UserAuthorizationRightsMessage) GetCanBuildAndSaveTestCaseOwnedByThisDomain() bool {
	if x != nil {
		return x.CanBuildAndSaveTestCaseOwnedByThisDomain
	}
	return false
}

func (x *UserAuthorizationRightsMessage) GetCanListAndViewTestCaseHavingTIandTICFromThisDomain() bool {
	if x != nil {
		return x.CanListAndViewTestCaseHavingTIandTICFromThisDomain
	}
	return false
}

func (x *UserAuthorizationRightsMessage) GetCanListAndViewTestCaseHavingTIandTICFromThisDomainExtended() bool {
	if x != nil {
		return x.CanListAndViewTestCaseHavingTIandTICFromThisDomainExtended
	}
	return false
}

func (x *UserAuthorizationRightsMessage) GetCanBuildAndSaveTestCaseHavingTIandTICFromThisDomain() bool {
	if x != nil {
		return x.CanBuildAndSaveTestCaseHavingTIandTICFromThisDomain
	}
	return false
}

// AllUsersAuthorizationRightsMessage
// Message defining rights for all users regarding this domain
type AllUsersAuthorizationRightsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllUsersCanListAndViewTestCaseHavingTIandTICFromThisDomain  bool `protobuf:"varint,1,opt,name=AllUsersCanListAndViewTestCaseHavingTIandTICFromThisDomain,proto3" json:"AllUsersCanListAndViewTestCaseHavingTIandTICFromThisDomain,omitempty"`   // Can List and View TestCases having TestInstruction and TestInstructionContainers from this domain
	AllUsersCanBuildAndSaveTestCaseHavingTIandTICFromThisDomain bool `protobuf:"varint,2,opt,name=AllUsersCanBuildAndSaveTestCaseHavingTIandTICFromThisDomain,proto3" json:"AllUsersCanBuildAndSaveTestCaseHavingTIandTICFromThisDomain,omitempty"` // Can Build, Edit and Save TestCases that has TestInstruction and TestInstructionContainers from this domain
}

func (x *AllUsersAuthorizationRightsMessage) Reset() {
	*x = AllUsersAuthorizationRightsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllUsersAuthorizationRightsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllUsersAuthorizationRightsMessage) ProtoMessage() {}

func (x *AllUsersAuthorizationRightsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllUsersAuthorizationRightsMessage.ProtoReflect.Descriptor instead.
func (*AllUsersAuthorizationRightsMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{20}
}

func (x *AllUsersAuthorizationRightsMessage) GetAllUsersCanListAndViewTestCaseHavingTIandTICFromThisDomain() bool {
	if x != nil {
		return x.AllUsersCanListAndViewTestCaseHavingTIandTICFromThisDomain
	}
	return false
}

func (x *AllUsersAuthorizationRightsMessage) GetAllUsersCanBuildAndSaveTestCaseHavingTIandTICFromThisDomain() bool {
	if x != nil {
		return x.AllUsersCanBuildAndSaveTestCaseHavingTIandTICFromThisDomain
	}
	return false
}

// SupportedConnectorDomainMessage
// Holds information about what Domain the Connector belongs to
type SupportedConnectorDomainMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorsDomainUUID string `protobuf:"bytes,1,opt,name=ConnectorsDomainUUID,proto3" json:"ConnectorsDomainUUID,omitempty"` // The UUID for the Domain that the Connector belongs to
	ConnectorsDomainName string `protobuf:"bytes,2,opt,name=ConnectorsDomainName,proto3" json:"ConnectorsDomainName,omitempty"` // The Name for the Domain that the Connector belongs to
	ConnectorsDomainHash string `protobuf:"bytes,3,opt,name=ConnectorsDomainHash,proto3" json:"ConnectorsDomainHash,omitempty"` // The Hash for this message
}

func (x *SupportedConnectorDomainMessage) Reset() {
	*x = SupportedConnectorDomainMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedConnectorDomainMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedConnectorDomainMessage) ProtoMessage() {}

func (x *SupportedConnectorDomainMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedConnectorDomainMessage.ProtoReflect.Descriptor instead.
func (*SupportedConnectorDomainMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{21}
}

func (x *SupportedConnectorDomainMessage) GetConnectorsDomainUUID() string {
	if x != nil {
		return x.ConnectorsDomainUUID
	}
	return ""
}

func (x *SupportedConnectorDomainMessage) GetConnectorsDomainName() string {
	if x != nil {
		return x.ConnectorsDomainName
	}
	return ""
}

func (x *SupportedConnectorDomainMessage) GetConnectorsDomainHash() string {
	if x != nil {
		return x.ConnectorsDomainHash
	}
	return ""
}

// ResponseVariablesMapStructureMessage
// This structures holds all Response variables and the over all hash
type SupportedResponseVariablesMapStructureMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseVariablesMap     map[string]*ResponseVariableStructureMessage `protobuf:"bytes,1,rep,name=ResponseVariablesMap,proto3" json:"ResponseVariablesMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // The Map holding all Response variables
	ResponseVariablesMapHash string                                       `protobuf:"bytes,2,opt,name=ResponseVariablesMapHash,proto3" json:"ResponseVariablesMapHash,omitempty"`                                                                                 // The Hash for all Response variables
}

func (x *SupportedResponseVariablesMapStructureMessage) Reset() {
	*x = SupportedResponseVariablesMapStructureMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedResponseVariablesMapStructureMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedResponseVariablesMapStructureMessage) ProtoMessage() {}

func (x *SupportedResponseVariablesMapStructureMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedResponseVariablesMapStructureMessage.ProtoReflect.Descriptor instead.
func (*SupportedResponseVariablesMapStructureMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{22}
}

func (x *SupportedResponseVariablesMapStructureMessage) GetResponseVariablesMap() map[string]*ResponseVariableStructureMessage {
	if x != nil {
		return x.ResponseVariablesMap
	}
	return nil
}

func (x *SupportedResponseVariablesMapStructureMessage) GetResponseVariablesMapHash() string {
	if x != nil {
		return x.ResponseVariablesMapHash
	}
	return ""
}

// ResponseVariableStructureMessage
// Keeps a Response variable and its Hash
type ResponseVariableStructureMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseVariable     *ResponseVariableMessage `protobuf:"bytes,1,opt,name=ResponseVariable,proto3" json:"ResponseVariable,omitempty"`         // Holds one Response Variable
	ResponseVariableHash string                   `protobuf:"bytes,2,opt,name=ResponseVariableHash,proto3" json:"ResponseVariableHash,omitempty"` // Holds the hash for the Response Variable
}

func (x *ResponseVariableStructureMessage) Reset() {
	*x = ResponseVariableStructureMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseVariableStructureMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseVariableStructureMessage) ProtoMessage() {}

func (x *ResponseVariableStructureMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseVariableStructureMessage.ProtoReflect.Descriptor instead.
func (*ResponseVariableStructureMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{23}
}

func (x *ResponseVariableStructureMessage) GetResponseVariable() *ResponseVariableMessage {
	if x != nil {
		return x.ResponseVariable
	}
	return nil
}

func (x *ResponseVariableStructureMessage) GetResponseVariableHash() string {
	if x != nil {
		return x.ResponseVariableHash
	}
	return ""
}

// ResponseVariableMessage
// Message holding information about a Response variable
type ResponseVariableMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseVariableUuid        string `protobuf:"bytes,1,opt,name=ResponseVariableUuid,proto3" json:"ResponseVariableUuid,omitempty"`               // The UUID for The Response variable
	ResponseVariableName        string `protobuf:"bytes,2,opt,name=ResponseVariableName,proto3" json:"ResponseVariableName,omitempty"`               // The Name of the Response variable
	ResponseVariableIsMandatory string `protobuf:"bytes,3,opt,name=ResponseVariableIsMandatory,proto3" json:"ResponseVariableIsMandatory,omitempty"` // Is Response variable mandatory or not
}

func (x *ResponseVariableMessage) Reset() {
	*x = ResponseVariableMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseVariableMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseVariableMessage) ProtoMessage() {}

func (x *ResponseVariableMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseVariableMessage.ProtoReflect.Descriptor instead.
func (*ResponseVariableMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{24}
}

func (x *ResponseVariableMessage) GetResponseVariableUuid() string {
	if x != nil {
		return x.ResponseVariableUuid
	}
	return ""
}

func (x *ResponseVariableMessage) GetResponseVariableName() string {
	if x != nil {
		return x.ResponseVariableName
	}
	return ""
}

func (x *ResponseVariableMessage) GetResponseVariableIsMandatory() string {
	if x != nil {
		return x.ResponseVariableIsMandatory
	}
	return ""
}

var File_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto protoreflect.FileDescriptor

var file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDesc = []byte{
	0x0a, 0x97, 0x01, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x6a, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x07, 0x0a, 0x4b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x41, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x7e, 0x0a, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x84, 0x01, 0x0a, 0x19, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x19, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x5d, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x7a, 0x0a,
	0x38, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x38, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x88, 0x01, 0x0a, 0x3f, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x46, 0x6f,
	0x72, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x3f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x73,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xf8, 0x02, 0x0a,
	0x20, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x56, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x14,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x1a, 0x94, 0x01, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x62, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfb, 0x01, 0x0a, 0x2f, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x17,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0xe9, 0x04, 0x0a, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x76, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x50, 0x0a, 0x23, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x6a, 0x6f, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x23, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x6e,
	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x23, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x90,
	0x01, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x1d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x4e, 0x0a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x22, 0xc5, 0x05, 0x0a, 0x1f, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6a, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x96, 0x01, 0x0a, 0x1f, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1f, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9f, 0x01, 0x0a, 0x22, 0x49,
	0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49,
	0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x22, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x83, 0x01, 0x0a,
	0x19, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x19, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x75, 0x0a, 0x14, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x14, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0xeb, 0x05, 0x0a, 0x23, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x1a, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4d,
	0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x4d,
	0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xf3, 0x06, 0x0a, 0x2f, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a,
	0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x38, 0x0a,
	0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x43, 0x52, 0x75, 0x6c,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x54, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x12,
	0x3e, 0x0a, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xce, 0x06,
	0x0a, 0x32, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x6d, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x72, 0x6f, 0x70,
	0x5a, 0x6f, 0x6e, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x44,
	0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x6f,
	0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44,
	0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x42,
	0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xe0,
	0x0a, 0x0a, 0x28, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x12, 0x30, 0x0a,
	0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x23, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x21, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x6f,
	0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x54, 0x0a, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x73, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x48, 0x0a,
	0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x64, 0x0a, 0x2d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2d, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x52, 0x0a, 0x24, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x49, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x4c, 0x0a, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4d, 0x61, 0x73, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x42, 0x0a,
	0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xd4, 0x04, 0x0a, 0x24, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49,
	0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x6d,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13,
	0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x49, 0x6d, 0x6d, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x65, 0x78, 0x74, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x3a,
	0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16,
	0x54, 0x6f, 0x70, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x54, 0x6f,
	0x70, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x54, 0x6f, 0x70, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x54, 0x6f,
	0x70, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa5, 0x03, 0x0a, 0x29, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x44, 0x0a, 0x1d, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x1a, 0x9d, 0x01, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x6b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x9f, 0x02, 0x0a, 0x38, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0xa0, 0x01,
	0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x20,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x40, 0x0a, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x22, 0xb1, 0x04, 0x0a, 0x37, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x91,
	0x01, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x62, 0x0a, 0x2c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x2c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2c, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x69,
	0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x2b, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2b, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x9c, 0x05, 0x0a, 0x28, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x18, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0xb1, 0x01, 0x0a, 0x28,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x28, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0xbc, 0x01, 0x0a, 0x2c, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6d,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x2c, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75,
	0x0a, 0x14, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x14, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0xbe, 0x06, 0x0a, 0x2c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a,
	0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x23, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x23, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x25, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x6a, 0x6f,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x6f,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x49, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x49, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0xec, 0x07, 0x0a, 0x38, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x44, 0x0a, 0x1d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54,
	0x43, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x54, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x12, 0x50, 0x0a,
	0x23, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x54, 0x0a, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x75, 0x73, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x54, 0x0a, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb1, 0x07, 0x0a, 0x3b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x72, 0x6f, 0x70, 0x5a,
	0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x75, 0x73,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x72,
	0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x25, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x54, 0x0a, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x54, 0x0a, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x73, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x46, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6d,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x46, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6d,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x36, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xac, 0x02, 0x0a, 0x1c, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x0c, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x1b, 0x41, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x1b, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0xdc, 0x02, 0x0a, 0x1b, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x47, 0x43, 0x50, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x47, 0x43, 0x50, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x75, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x17,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0xb8, 0x04, 0x0a, 0x1e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x27, 0x43, 0x61,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x56, 0x69, 0x65, 0x77, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x54, 0x68, 0x69, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x43, 0x61, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x56, 0x69, 0x65, 0x77, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x54, 0x68, 0x69, 0x73, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x5a, 0x0a, 0x28, 0x43, 0x61, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x41, 0x6e, 0x64, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x54, 0x68, 0x69, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x43, 0x61, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x41, 0x6e, 0x64, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x54, 0x68, 0x69, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x6e, 0x0a, 0x32, 0x43, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x56, 0x69,
	0x65, 0x77, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x54, 0x49, 0x61, 0x6e, 0x64, 0x54, 0x49, 0x43, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x69, 0x73,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x32, 0x43, 0x61,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x56, 0x69, 0x65, 0x77, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x54, 0x49, 0x61, 0x6e, 0x64, 0x54,
	0x49, 0x43, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x69, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x7e, 0x0a, 0x3a, 0x43, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x56, 0x69,
	0x65, 0x77, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x54, 0x49, 0x61, 0x6e, 0x64, 0x54, 0x49, 0x43, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x69, 0x73,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x3a, 0x43, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64,
	0x56, 0x69, 0x65, 0x77, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x48, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x54, 0x49, 0x61, 0x6e, 0x64, 0x54, 0x49, 0x43, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68,
	0x69, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x12, 0x70, 0x0a, 0x33, 0x43, 0x61, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x6e, 0x64, 0x53,
	0x61, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x48, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x54, 0x49, 0x61, 0x6e, 0x64, 0x54, 0x49, 0x43, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x69,
	0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x33, 0x43,
	0x61, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x54, 0x49, 0x61, 0x6e,
	0x64, 0x54, 0x49, 0x43, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x69, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x22, 0xa7, 0x02, 0x0a, 0x22, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7e, 0x0a, 0x3a, 0x41, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x56,
	0x69, 0x65, 0x77, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x48, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x54, 0x49, 0x61, 0x6e, 0x64, 0x54, 0x49, 0x43, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x69,
	0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x3a, 0x41,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e,
	0x64, 0x56, 0x69, 0x65, 0x77, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x48, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x54, 0x49, 0x61, 0x6e, 0x64, 0x54, 0x49, 0x43, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x68, 0x69, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x3b, 0x41, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x6e,
	0x64, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x48, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x54, 0x49, 0x61, 0x6e, 0x64, 0x54, 0x49, 0x43, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x68, 0x69, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x3b, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x54, 0x49, 0x61, 0x6e, 0x64, 0x54, 0x49, 0x43, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x68, 0x69, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xbd, 0x01, 0x0a,
	0x1f, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x8f, 0x03, 0x0a,
	0x2d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x98,
	0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x64, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x3a, 0x0a, 0x18, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4d, 0x61,
	0x70, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4d, 0x61,
	0x70, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x86, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb8,
	0x01, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x60, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0xc3, 0x01, 0x0a, 0x17, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x1b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x42,
	0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescOnce sync.Once
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescData = file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDesc
)

func file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP() []byte {
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescOnce.Do(func() {
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescData)
	})
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescData
}

var file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_goTypes = []interface{}{
	(*SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage)(nil), // 0: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage
	(*SupportedTestInstructionsMessage)(nil),                                            // 1: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsMessage
	(*SupportedTestInstructionInstanceVersionsMessage)(nil),                             // 2: fenixExecutionWorkerGrpcApi.SupportedTestInstructionInstanceVersionsMessage
	(*SupportedTestInstructionInstanceVersionMessage)(nil),                              // 3: fenixExecutionWorkerGrpcApi.SupportedTestInstructionInstanceVersionMessage
	(*SupportedTestInstructionMessage)(nil),                                             // 4: fenixExecutionWorkerGrpcApi.SupportedTestInstructionMessage
	(*SupportedTestInstructionBaseMessage)(nil),                                         // 5: fenixExecutionWorkerGrpcApi.SupportedTestInstructionBaseMessage
	(*SupportedBasicTestInstructionInformationMessage)(nil),                             // 6: fenixExecutionWorkerGrpcApi.SupportedBasicTestInstructionInformationMessage
	(*SupportedImmatureTestInstructionInformationMessage)(nil),                          // 7: fenixExecutionWorkerGrpcApi.SupportedImmatureTestInstructionInformationMessage
	(*SupportedTestInstructionAttributeMessage)(nil),                                    // 8: fenixExecutionWorkerGrpcApi.SupportedTestInstructionAttributeMessage
	(*SupportedImmatureElementModelMessage)(nil),                                        // 9: fenixExecutionWorkerGrpcApi.SupportedImmatureElementModelMessage
	(*SupportedTestInstructionContainersMessage)(nil),                                   // 10: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainersMessage
	(*SupportedTestInstructionContainerInstanceVersionsMessage)(nil),                    // 11: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainerInstanceVersionsMessage
	(*SupportedTestInstructionContainerInstanceVersionMessage)(nil),                     // 12: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainerInstanceVersionMessage
	(*SupportedTestInstructionContainerMessage)(nil),                                    // 13: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainerMessage
	(*SupportedTestInstructionContainerBaseMessage)(nil),                                // 14: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainerBaseMessage
	(*SupportedBasicTestInstructionContainerInformationMessage)(nil),                    // 15: fenixExecutionWorkerGrpcApi.SupportedBasicTestInstructionContainerInformationMessage
	(*SupportedImmatureTestInstructionContainerInformationMessage)(nil),                 // 16: fenixExecutionWorkerGrpcApi.SupportedImmatureTestInstructionContainerInformationMessage
	(*SupportedAllowedUsersMessage)(nil),                                                // 17: fenixExecutionWorkerGrpcApi.SupportedAllowedUsersMessage
	(*SupportedAllowedUserMessage)(nil),                                                 // 18: fenixExecutionWorkerGrpcApi.SupportedAllowedUserMessage
	(*UserAuthorizationRightsMessage)(nil),                                              // 19: fenixExecutionWorkerGrpcApi.UserAuthorizationRightsMessage
	(*AllUsersAuthorizationRightsMessage)(nil),                                          // 20: fenixExecutionWorkerGrpcApi.AllUsersAuthorizationRightsMessage
	(*SupportedConnectorDomainMessage)(nil),                                             // 21: fenixExecutionWorkerGrpcApi.SupportedConnectorDomainMessage
	(*SupportedResponseVariablesMapStructureMessage)(nil),                               // 22: fenixExecutionWorkerGrpcApi.SupportedResponseVariablesMapStructureMessage
	(*ResponseVariableStructureMessage)(nil),                                            // 23: fenixExecutionWorkerGrpcApi.ResponseVariableStructureMessage
	(*ResponseVariableMessage)(nil),                                                     // 24: fenixExecutionWorkerGrpcApi.ResponseVariableMessage
	nil,                                                                                 // 25: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsMessage.TestInstructionsMapEntry
	nil,                                                                                 // 26: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainersMessage.TestInstructionsMapEntry
	nil,                                                                                 // 27: fenixExecutionWorkerGrpcApi.SupportedResponseVariablesMapStructureMessage.ResponseVariablesMapEntry
	(*ClientSystemIdentificationMessage)(nil),                                           // 28: fenixExecutionWorkerGrpcApi.ClientSystemIdentificationMessage
	(*timestamp.Timestamp)(nil),                                                         // 29: google.protobuf.Timestamp
}
var file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_depIdxs = []int32{
	28, // 0: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage.ClientSystemIdentification:type_name -> fenixExecutionWorkerGrpcApi.ClientSystemIdentificationMessage
	1,  // 1: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage.TestInstructions:type_name -> fenixExecutionWorkerGrpcApi.SupportedTestInstructionsMessage
	10, // 2: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage.TestInstructionContainers:type_name -> fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainersMessage
	17, // 3: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage.AllowedUsers:type_name -> fenixExecutionWorkerGrpcApi.SupportedAllowedUsersMessage
	29, // 4: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage.MessageCreationTimeStamp:type_name -> google.protobuf.Timestamp
	21, // 5: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage.ConnectorDomain:type_name -> fenixExecutionWorkerGrpcApi.SupportedConnectorDomainMessage
	25, // 6: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsMessage.TestInstructionsMap:type_name -> fenixExecutionWorkerGrpcApi.SupportedTestInstructionsMessage.TestInstructionsMapEntry
	3,  // 7: fenixExecutionWorkerGrpcApi.SupportedTestInstructionInstanceVersionsMessage.TestInstructionVersions:type_name -> fenixExecutionWorkerGrpcApi.SupportedTestInstructionInstanceVersionMessage
	4,  // 8: fenixExecutionWorkerGrpcApi.SupportedTestInstructionInstanceVersionMessage.TestInstructionInstance:type_name -> fenixExecutionWorkerGrpcApi.SupportedTestInstructionMessage
	22, // 9: fenixExecutionWorkerGrpcApi.SupportedTestInstructionInstanceVersionMessage.ResponseVariablesMapStructure:type_name -> fenixExecutionWorkerGrpcApi.SupportedResponseVariablesMapStructureMessage
	5,  // 10: fenixExecutionWorkerGrpcApi.SupportedTestInstructionMessage.TestInstruction:type_name -> fenixExecutionWorkerGrpcApi.SupportedTestInstructionBaseMessage
	6,  // 11: fenixExecutionWorkerGrpcApi.SupportedTestInstructionMessage.BasicTestInstructionInformation:type_name -> fenixExecutionWorkerGrpcApi.SupportedBasicTestInstructionInformationMessage
	7,  // 12: fenixExecutionWorkerGrpcApi.SupportedTestInstructionMessage.ImmatureTestInstructionInformation:type_name -> fenixExecutionWorkerGrpcApi.SupportedImmatureTestInstructionInformationMessage
	8,  // 13: fenixExecutionWorkerGrpcApi.SupportedTestInstructionMessage.TestInstructionAttributes:type_name -> fenixExecutionWorkerGrpcApi.SupportedTestInstructionAttributeMessage
	9,  // 14: fenixExecutionWorkerGrpcApi.SupportedTestInstructionMessage.ImmatureElementModel:type_name -> fenixExecutionWorkerGrpcApi.SupportedImmatureElementModelMessage
	26, // 15: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainersMessage.TestInstructionsMap:type_name -> fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainersMessage.TestInstructionsMapEntry
	12, // 16: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainerInstanceVersionsMessage.TestInstructionContainerVersions:type_name -> fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainerInstanceVersionMessage
	13, // 17: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainerInstanceVersionMessage.TestInstructionContainerInstance:type_name -> fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainerMessage
	14, // 18: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainerMessage.TestInstructionContainer:type_name -> fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainerBaseMessage
	15, // 19: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainerMessage.BasicTestInstructionContainerInformation:type_name -> fenixExecutionWorkerGrpcApi.SupportedBasicTestInstructionContainerInformationMessage
	16, // 20: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainerMessage.ImmatureTestInstructionContainerInformations:type_name -> fenixExecutionWorkerGrpcApi.SupportedImmatureTestInstructionContainerInformationMessage
	9,  // 21: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainerMessage.ImmatureElementModel:type_name -> fenixExecutionWorkerGrpcApi.SupportedImmatureElementModelMessage
	18, // 22: fenixExecutionWorkerGrpcApi.SupportedAllowedUsersMessage.AllowedUsers:type_name -> fenixExecutionWorkerGrpcApi.SupportedAllowedUserMessage
	20, // 23: fenixExecutionWorkerGrpcApi.SupportedAllowedUsersMessage.AllUsersAuthorizationRights:type_name -> fenixExecutionWorkerGrpcApi.AllUsersAuthorizationRightsMessage
	19, // 24: fenixExecutionWorkerGrpcApi.SupportedAllowedUserMessage.UserAuthorizationRights:type_name -> fenixExecutionWorkerGrpcApi.UserAuthorizationRightsMessage
	27, // 25: fenixExecutionWorkerGrpcApi.SupportedResponseVariablesMapStructureMessage.ResponseVariablesMap:type_name -> fenixExecutionWorkerGrpcApi.SupportedResponseVariablesMapStructureMessage.ResponseVariablesMapEntry
	24, // 26: fenixExecutionWorkerGrpcApi.ResponseVariableStructureMessage.ResponseVariable:type_name -> fenixExecutionWorkerGrpcApi.ResponseVariableMessage
	2,  // 27: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsMessage.TestInstructionsMapEntry.value:type_name -> fenixExecutionWorkerGrpcApi.SupportedTestInstructionInstanceVersionsMessage
	11, // 28: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainersMessage.TestInstructionsMapEntry.value:type_name -> fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainerInstanceVersionsMessage
	23, // 29: fenixExecutionWorkerGrpcApi.SupportedResponseVariablesMapStructureMessage.ResponseVariablesMapEntry.value:type_name -> fenixExecutionWorkerGrpcApi.ResponseVariableStructureMessage
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() {
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_init()
}
func file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_init() {
	if File_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto != nil {
		return
	}
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_GeneralMessagesAndEnums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedTestInstructionsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedTestInstructionInstanceVersionsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedTestInstructionInstanceVersionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedTestInstructionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedTestInstructionBaseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedBasicTestInstructionInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedImmatureTestInstructionInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedTestInstructionAttributeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedImmatureElementModelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedTestInstructionContainersMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedTestInstructionContainerInstanceVersionsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedTestInstructionContainerInstanceVersionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedTestInstructionContainerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedTestInstructionContainerBaseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedBasicTestInstructionContainerInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedImmatureTestInstructionContainerInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedAllowedUsersMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedAllowedUserMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthorizationRightsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllUsersAuthorizationRightsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedConnectorDomainMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedResponseVariablesMapStructureMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseVariableStructureMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseVariableMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_goTypes,
		DependencyIndexes: file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_depIdxs,
		MessageInfos:      file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes,
	}.Build()
	File_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto = out.File
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDesc = nil
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_goTypes = nil
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_depIdxs = nil
}
