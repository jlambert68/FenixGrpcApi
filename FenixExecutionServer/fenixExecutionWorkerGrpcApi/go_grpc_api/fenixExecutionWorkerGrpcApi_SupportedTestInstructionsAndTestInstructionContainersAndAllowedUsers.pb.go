// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: FenixExecutionServer/fenixExecutionWorkerGrpcApi/fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers.proto

package go_grpc_api

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage
// Message for all TestInstructions, TestInstructionsContainers and Users for a specific "System", which will be sent to Fenix backend
type SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSystemIdentification                                      *ClientSystemIdentificationMessage         `protobuf:"bytes,1,opt,name=ClientSystemIdentification,proto3" json:"ClientSystemIdentification,omitempty"`                                                                            // Identifies Client System and Proto-file version used
	TestInstructions                                                *SupportedTestInstructionsMessage          `protobuf:"bytes,2,opt,name=TestInstructions,proto3" json:"TestInstructions,omitempty"`                                                                                                // All supported TestInstructions
	TestInstructionContainers                                       *SupportedTestInstructionContainersMessage `protobuf:"bytes,3,opt,name=TestInstructionContainers,proto3" json:"TestInstructionContainers,omitempty"`                                                                              //   All supported TestInstructionContainers
	AllowedUsers                                                    *SupportedAllowedUsersMessage              `protobuf:"bytes,4,opt,name=AllowedUsers,proto3" json:"AllowedUsers,omitempty"`                                                                                                        // All users that are allowed to use TestInstructions and TestInstructionContainers for this system
	MessageCreationTimeStamp                                        *timestamp.Timestamp                       `protobuf:"bytes,5,opt,name=MessageCreationTimeStamp,proto3" json:"MessageCreationTimeStamp,omitempty"`                                                                                // The TimeStamp for when the Message was created
	TestInstructionsAndTestInstructionsContainersMessageHash        string                                     `protobuf:"bytes,6,opt,name=TestInstructionsAndTestInstructionsContainersMessageHash,proto3" json:"TestInstructionsAndTestInstructionsContainersMessageHash,omitempty"`                // SHA256(TestInstructionsHash, TestInstructionContainersHash, AllowedUsersHash)
	ForceNewBaseLineForTestInstructionsAndTestInstructionContainers bool                                       `protobuf:"varint,7,opt,name=ForceNewBaseLineForTestInstructionsAndTestInstructionContainers,proto3" json:"ForceNewBaseLineForTestInstructionsAndTestInstructionContainers,omitempty"` // Should there be a new baseline for TestInstructions and TestInstructionContainers, ie scrap the everything in database
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) Reset() {
	*x = SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) ProtoMessage() {}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage.ProtoReflect.Descriptor instead.
func (*SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{0}
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) GetClientSystemIdentification() *ClientSystemIdentificationMessage {
	if x != nil {
		return x.ClientSystemIdentification
	}
	return nil
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) GetTestInstructions() *SupportedTestInstructionsMessage {
	if x != nil {
		return x.TestInstructions
	}
	return nil
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) GetTestInstructionContainers() *SupportedTestInstructionContainersMessage {
	if x != nil {
		return x.TestInstructionContainers
	}
	return nil
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) GetAllowedUsers() *SupportedAllowedUsersMessage {
	if x != nil {
		return x.AllowedUsers
	}
	return nil
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) GetMessageCreationTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.MessageCreationTimeStamp
	}
	return nil
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) GetTestInstructionsAndTestInstructionsContainersMessageHash() string {
	if x != nil {
		return x.TestInstructionsAndTestInstructionsContainersMessageHash
	}
	return ""
}

func (x *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) GetForceNewBaseLineForTestInstructionsAndTestInstructionContainers() bool {
	if x != nil {
		return x.ForceNewBaseLineForTestInstructionsAndTestInstructionContainers
	}
	return false
}

// **************** **************** **************** TestInstruction **************** **************** ****************
// SupportedTestInstructionsMessage
// Message for a TestInstructionsMap that hold all TestInstructions
type SupportedTestInstructionsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionsMap  map[string]*TestInstructionInstanceVersionsMessage `protobuf:"bytes,1,rep,name=TestInstructionsMap,proto3" json:"TestInstructionsMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // The Map holding all TestInstructions
	TestInstructionsHash string                                             `protobuf:"bytes,2,opt,name=TestInstructionsHash,proto3" json:"TestInstructionsHash,omitempty"`                                                                                       // SHA256 of all TestInstructionsMap using Fenix standard way of hashing values together
}

func (x *SupportedTestInstructionsMessage) Reset() {
	*x = SupportedTestInstructionsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedTestInstructionsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedTestInstructionsMessage) ProtoMessage() {}

func (x *SupportedTestInstructionsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedTestInstructionsMessage.ProtoReflect.Descriptor instead.
func (*SupportedTestInstructionsMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{1}
}

func (x *SupportedTestInstructionsMessage) GetTestInstructionsMap() map[string]*TestInstructionInstanceVersionsMessage {
	if x != nil {
		return x.TestInstructionsMap
	}
	return nil
}

func (x *SupportedTestInstructionsMessage) GetTestInstructionsHash() string {
	if x != nil {
		return x.TestInstructionsHash
	}
	return ""
}

// TestInstructionInstanceVersionsMessage
//
//	Message for all versions of one TestInstruction, first position holds last version i.e. version x, second position holds the version before that i.e. version x-1...
type TestInstructionInstanceVersionsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionVersions     []*TestInstructionInstanceVersionMessage `protobuf:"bytes,1,rep,name=TestInstructionVersions,proto3" json:"TestInstructionVersions,omitempty"`         // Array with all versions of a TestInstructions. First position holds last version i.e. version x, second position holds the version before that i.e. version x-1...
	TestInstructionVersionsHash string                                   `protobuf:"bytes,2,opt,name=TestInstructionVersionsHash,proto3" json:"TestInstructionVersionsHash,omitempty"` // SHA256 of all TestInstructionInstanceVersions using Fenix standard way of hashing values together
}

func (x *TestInstructionInstanceVersionsMessage) Reset() {
	*x = TestInstructionInstanceVersionsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionInstanceVersionsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionInstanceVersionsMessage) ProtoMessage() {}

func (x *TestInstructionInstanceVersionsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionInstanceVersionsMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionInstanceVersionsMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{2}
}

func (x *TestInstructionInstanceVersionsMessage) GetTestInstructionVersions() []*TestInstructionInstanceVersionMessage {
	if x != nil {
		return x.TestInstructionVersions
	}
	return nil
}

func (x *TestInstructionInstanceVersionsMessage) GetTestInstructionVersionsHash() string {
	if x != nil {
		return x.TestInstructionVersionsHash
	}
	return ""
}

// A Message holding one TestInstruction-version
type TestInstructionInstanceVersionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionInstance             *TestInstructionMessage `protobuf:"bytes,1,opt,name=TestInstructionInstance,proto3" json:"TestInstructionInstance,omitempty"`                          // Holds one TestInstructionInstance
	TestInstructionInstanceMajorVersion int32                   `protobuf:"varint,2,opt,name=TestInstructionInstanceMajorVersion,proto3" json:"TestInstructionInstanceMajorVersion,omitempty"` // The major version for the TestInstruction
	TestInstructionInstanceMinorVersion int32                   `protobuf:"varint,3,opt,name=TestInstructionInstanceMinorVersion,proto3" json:"TestInstructionInstanceMinorVersion,omitempty"` // The minor version for the TestInstruction
	Deprecated                          bool                    `protobuf:"varint,4,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`                                                   // Should the user stop using this TestInstructionInstance-version
	Enabled                             bool                    `protobuf:"varint,5,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                                                         // Is this TestInstructionInstance-version enabled or disabled
	TestInstructionInstanceVersionHash  string                  `protobuf:"bytes,6,opt,name=TestInstructionInstanceVersionHash,proto3" json:"TestInstructionInstanceVersionHash,omitempty"`    // SHA256 of all TestInstructionMessage using Fenix standard way of hashing values together
}

func (x *TestInstructionInstanceVersionMessage) Reset() {
	*x = TestInstructionInstanceVersionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionInstanceVersionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionInstanceVersionMessage) ProtoMessage() {}

func (x *TestInstructionInstanceVersionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionInstanceVersionMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionInstanceVersionMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{3}
}

func (x *TestInstructionInstanceVersionMessage) GetTestInstructionInstance() *TestInstructionMessage {
	if x != nil {
		return x.TestInstructionInstance
	}
	return nil
}

func (x *TestInstructionInstanceVersionMessage) GetTestInstructionInstanceMajorVersion() int32 {
	if x != nil {
		return x.TestInstructionInstanceMajorVersion
	}
	return 0
}

func (x *TestInstructionInstanceVersionMessage) GetTestInstructionInstanceMinorVersion() int32 {
	if x != nil {
		return x.TestInstructionInstanceMinorVersion
	}
	return 0
}

func (x *TestInstructionInstanceVersionMessage) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *TestInstructionInstanceVersionMessage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TestInstructionInstanceVersionMessage) GetTestInstructionInstanceVersionHash() string {
	if x != nil {
		return x.TestInstructionInstanceVersionHash
	}
	return ""
}

// TestInstructionMessage
// A message holding one complete TestInstruction
type TestInstructionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstruction                     *TestInstructionBaseMessage                  `protobuf:"bytes,1,opt,name=TestInstruction,proto3" json:"TestInstruction,omitempty"`                                         //
	BasicTestInstructionInformation     *BasicTestInstructionInformationMessage      `protobuf:"bytes,2,opt,name=BasicTestInstructionInformation,proto3" json:"BasicTestInstructionInformation,omitempty"`         //
	ImmatureTestInstructionInformations []*ImmatureTestInstructionInformationMessage `protobuf:"bytes,3,rep,name=ImmatureTestInstructionInformations,proto3" json:"ImmatureTestInstructionInformations,omitempty"` //
	TestInstructionAttributes           []*TestInstructionAttributeMessage           `protobuf:"bytes,4,rep,name=TestInstructionAttributes,proto3" json:"TestInstructionAttributes,omitempty"`                     //
	ImmatureElementModel                []*ImmatureElementModelMessage               `protobuf:"bytes,5,rep,name=ImmatureElementModel,proto3" json:"ImmatureElementModel,omitempty"`                               //
}

func (x *TestInstructionMessage) Reset() {
	*x = TestInstructionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionMessage) ProtoMessage() {}

func (x *TestInstructionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{4}
}

func (x *TestInstructionMessage) GetTestInstruction() *TestInstructionBaseMessage {
	if x != nil {
		return x.TestInstruction
	}
	return nil
}

func (x *TestInstructionMessage) GetBasicTestInstructionInformation() *BasicTestInstructionInformationMessage {
	if x != nil {
		return x.BasicTestInstructionInformation
	}
	return nil
}

func (x *TestInstructionMessage) GetImmatureTestInstructionInformations() []*ImmatureTestInstructionInformationMessage {
	if x != nil {
		return x.ImmatureTestInstructionInformations
	}
	return nil
}

func (x *TestInstructionMessage) GetTestInstructionAttributes() []*TestInstructionAttributeMessage {
	if x != nil {
		return x.TestInstructionAttributes
	}
	return nil
}

func (x *TestInstructionMessage) GetImmatureElementModel() []*ImmatureElementModelMessage {
	if x != nil {
		return x.ImmatureElementModel
	}
	return nil
}

// TestInstructionBaseMessage
// The base information for the TestInstruction
type TestInstructionBaseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID                   string `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                                     // The Domain UUID where the TestInstruction belong
	DomainName                   string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                     // The Domain Name where the TestInstruction belong
	TestInstructionUUID          string `protobuf:"bytes,3,opt,name=TestInstructionUUID,proto3" json:"TestInstructionUUID,omitempty"`                   // The Unique TestInstruction UUID that identifies the specific TestInstruction to be executed
	TestInstructionName          string `protobuf:"bytes,4,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"`                   // The TestInstruction Name of the specific TestInstruction to be executed
	TestInstructionTypeUUID      string `protobuf:"bytes,5,opt,name=TestInstructionTypeUUID,proto3" json:"TestInstructionTypeUUID,omitempty"`           // The type UUID of the TestInstruction
	TestInstructionTypeName      string `protobuf:"bytes,6,opt,name=TestInstructionTypeName,proto3" json:"TestInstructionTypeName,omitempty"`           // The type Name of the TestInstruction
	TestInstructionDescription   string `protobuf:"bytes,7,opt,name=TestInstructionDescription,proto3" json:"TestInstructionDescription,omitempty"`     // The TestInstruction description for the TestInstruction
	TestInstructionMouseOverText string `protobuf:"bytes,8,opt,name=TestInstructionMouseOverText,proto3" json:"TestInstructionMouseOverText,omitempty"` // The TestInstruction MouseOver text for the TestInstruction
	Deprecated                   bool   `protobuf:"varint,9,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`                                    // Is the TestInstruction depreciated and shouldn't be used by the user
	Enabled                      bool   `protobuf:"varint,10,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                                         // Is the TestInstruction enabled or not
	MajorVersionNumber           int32  `protobuf:"varint,11,opt,name=MajorVersionNumber,proto3" json:"MajorVersionNumber,omitempty"`                   // The Major version number for the TestInstruction
	MinorVersionNumber           int32  `protobuf:"varint,12,opt,name=MinorVersionNumber,proto3" json:"MinorVersionNumber,omitempty"`                   // The Minor version number for the TestInstruction
	UpdatedTimeStamp             string `protobuf:"bytes,13,opt,name=UpdatedTimeStamp,proto3" json:"UpdatedTimeStamp,omitempty"`                        // When the TestInstruction was first created
}

func (x *TestInstructionBaseMessage) Reset() {
	*x = TestInstructionBaseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionBaseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionBaseMessage) ProtoMessage() {}

func (x *TestInstructionBaseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionBaseMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionBaseMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{5}
}

func (x *TestInstructionBaseMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *TestInstructionBaseMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *TestInstructionBaseMessage) GetTestInstructionUUID() string {
	if x != nil {
		return x.TestInstructionUUID
	}
	return ""
}

func (x *TestInstructionBaseMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

func (x *TestInstructionBaseMessage) GetTestInstructionTypeUUID() string {
	if x != nil {
		return x.TestInstructionTypeUUID
	}
	return ""
}

func (x *TestInstructionBaseMessage) GetTestInstructionTypeName() string {
	if x != nil {
		return x.TestInstructionTypeName
	}
	return ""
}

func (x *TestInstructionBaseMessage) GetTestInstructionDescription() string {
	if x != nil {
		return x.TestInstructionDescription
	}
	return ""
}

func (x *TestInstructionBaseMessage) GetTestInstructionMouseOverText() string {
	if x != nil {
		return x.TestInstructionMouseOverText
	}
	return ""
}

func (x *TestInstructionBaseMessage) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *TestInstructionBaseMessage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TestInstructionBaseMessage) GetMajorVersionNumber() int32 {
	if x != nil {
		return x.MajorVersionNumber
	}
	return 0
}

func (x *TestInstructionBaseMessage) GetMinorVersionNumber() int32 {
	if x != nil {
		return x.MinorVersionNumber
	}
	return 0
}

func (x *TestInstructionBaseMessage) GetUpdatedTimeStamp() string {
	if x != nil {
		return x.UpdatedTimeStamp
	}
	return ""
}

// BasicTestInstructionInformationMessage
// The Basic information for the TestInstruction
type BasicTestInstructionInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID                   string `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                                      // The Domain UUID where the TestInstruction belong
	DomainName                   string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                      // The Domain Name where the TestInstruction belong
	TestInstructionUUID          string `protobuf:"bytes,3,opt,name=TestInstructionUUID,proto3" json:"TestInstructionUUID,omitempty"`                    // The Unique TestInstruction UUID that identifies the specific TestInstruction to be executed
	TestInstructionName          string `protobuf:"bytes,4,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"`                    // The TestInstruction Name of the specific TestInstruction to be executed
	TestInstructionTypeUUID      string `protobuf:"bytes,5,opt,name=TestInstructionTypeUUID,proto3" json:"TestInstructionTypeUUID,omitempty"`            // The type UUID of the TestInstruction
	TestInstructionTypeName      string `protobuf:"bytes,6,opt,name=TestInstructionTypeName,proto3" json:"TestInstructionTypeName,omitempty"`            // The type Name of the TestInstruction
	Deprecated                   bool   `protobuf:"varint,7,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`                                     // Is the TestInstruction depreciated and shouldn't be used by the user
	MajorVersionNumber           int32  `protobuf:"varint,8,opt,name=MajorVersionNumber,proto3" json:"MajorVersionNumber,omitempty"`                     // The Major version number for the TestInstruction
	MinorVersionNumber           int32  `protobuf:"varint,9,opt,name=MinorVersionNumber,proto3" json:"MinorVersionNumber,omitempty"`                     // The Minor version number for the TestInstruction
	UpdatedTimeStamp             string `protobuf:"bytes,10,opt,name=UpdatedTimeStamp,proto3" json:"UpdatedTimeStamp,omitempty"`                         // When the TestInstruction was first created
	TestInstructionColor         string `protobuf:"bytes,11,opt,name=TestInstructionColor,proto3" json:"TestInstructionColor,omitempty"`                 // The color used in GUI when showing the TestInstruction
	TCRuleDeletion               string `protobuf:"bytes,12,opt,name=TCRuleDeletion,proto3" json:"TCRuleDeletion,omitempty"`                             // The Delete-rule defining how the TestInstruction can be deleted
	TCRuleSwap                   string `protobuf:"bytes,13,opt,name=TCRuleSwap,proto3" json:"TCRuleSwap,omitempty"`                                     // The Swap-rule defining how the TestInstruction can be swapped out
	TestInstructionDescription   string `protobuf:"bytes,14,opt,name=TestInstructionDescription,proto3" json:"TestInstructionDescription,omitempty"`     // The TestInstruction description for the TestInstruction
	TestInstructionMouseOverText string `protobuf:"bytes,15,opt,name=TestInstructionMouseOverText,proto3" json:"TestInstructionMouseOverText,omitempty"` // The TestInstruction MouseOver text for the TestInstruction
	Enabled                      bool   `protobuf:"varint,16,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                                          // Is the TestInstruction enabled or not
}

func (x *BasicTestInstructionInformationMessage) Reset() {
	*x = BasicTestInstructionInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicTestInstructionInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicTestInstructionInformationMessage) ProtoMessage() {}

func (x *BasicTestInstructionInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicTestInstructionInformationMessage.ProtoReflect.Descriptor instead.
func (*BasicTestInstructionInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{6}
}

func (x *BasicTestInstructionInformationMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage) GetTestInstructionUUID() string {
	if x != nil {
		return x.TestInstructionUUID
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage) GetTestInstructionTypeUUID() string {
	if x != nil {
		return x.TestInstructionTypeUUID
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage) GetTestInstructionTypeName() string {
	if x != nil {
		return x.TestInstructionTypeName
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *BasicTestInstructionInformationMessage) GetMajorVersionNumber() int32 {
	if x != nil {
		return x.MajorVersionNumber
	}
	return 0
}

func (x *BasicTestInstructionInformationMessage) GetMinorVersionNumber() int32 {
	if x != nil {
		return x.MinorVersionNumber
	}
	return 0
}

func (x *BasicTestInstructionInformationMessage) GetUpdatedTimeStamp() string {
	if x != nil {
		return x.UpdatedTimeStamp
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage) GetTestInstructionColor() string {
	if x != nil {
		return x.TestInstructionColor
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage) GetTCRuleDeletion() string {
	if x != nil {
		return x.TCRuleDeletion
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage) GetTCRuleSwap() string {
	if x != nil {
		return x.TCRuleSwap
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage) GetTestInstructionDescription() string {
	if x != nil {
		return x.TestInstructionDescription
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage) GetTestInstructionMouseOverText() string {
	if x != nil {
		return x.TestInstructionMouseOverText
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// ImmatureTestInstructionInformationMessage
// A model holding one attribute and its value that will be set when user Drop TestInstruction on specific DropZone
type ImmatureTestInstructionInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID                   string `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                                      // The Domain UUID where the TestInstruction belong
	DomainName                   string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                      // The Domain Name where the TestInstruction belong
	TestInstructionUUID          string `protobuf:"bytes,3,opt,name=TestInstructionUUID,proto3" json:"TestInstructionUUID,omitempty"`                    // The Unique TestInstruction UUID that identifies the specific TestInstruction to be executed
	TestInstructionName          string `protobuf:"bytes,4,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"`                    // The TestInstruction Name of the specific TestInstruction to be executed
	DropZoneUUID                 string `protobuf:"bytes,5,opt,name=DropZoneUUID,proto3" json:"DropZoneUUID,omitempty"`                                  // The immature TestInstruction used this DropZone UUID for the user to chose
	DropZoneName                 string `protobuf:"bytes,6,opt,name=DropZoneName,proto3" json:"DropZoneName,omitempty"`                                  // The immature TestInstruction used this DropZone Name for the user to chose
	DropZoneDescription          string `protobuf:"bytes,7,opt,name=DropZoneDescription,proto3" json:"DropZoneDescription,omitempty"`                    // The DropZone description
	DropZoneMouseOver            string `protobuf:"bytes,8,opt,name=DropZoneMouseOver,proto3" json:"DropZoneMouseOver,omitempty"`                        // The DropZone MouseOver text
	DropZoneColor                string `protobuf:"bytes,9,opt,name=DropZoneColor,proto3" json:"DropZoneColor,omitempty"`                                // The DropZone color when presented to the user
	TestInstructionAttributeType string `protobuf:"bytes,10,opt,name=TestInstructionAttributeType,proto3" json:"TestInstructionAttributeType,omitempty"` // The Attribute type for the Attribute to be set - TEXTBOX, COMBOBOX, FILE_SELECTOR, FileSelector, FUNCTION_SELECTOR
	TestInstructionAttributeUUID string `protobuf:"bytes,11,opt,name=TestInstructionAttributeUUID,proto3" json:"TestInstructionAttributeUUID,omitempty"` // The Attribute UUID to be set
	TestInstructionAttributeName string `protobuf:"bytes,12,opt,name=TestInstructionAttributeName,proto3" json:"TestInstructionAttributeName,omitempty"` // The Attribute Name for the Attribute to be set
	AttributeValueAsString       string `protobuf:"bytes,13,opt,name=AttributeValueAsString,proto3" json:"AttributeValueAsString,omitempty"`             // The Attribute Value for the Attribute
	AttributeValueUUID           string `protobuf:"bytes,14,opt,name=AttributeValueUUID,proto3" json:"AttributeValueUUID,omitempty"`                     // The Attribute Value UUID for the value to be set
	FirstImmatureElementUUID     string `protobuf:"bytes,15,opt,name=FirstImmatureElementUUID,proto3" json:"FirstImmatureElementUUID,omitempty"`         // The UUID to the first Element in the element model
	AttributeActionCommand       int32  `protobuf:"varint,16,opt,name=AttributeActionCommand,proto3" json:"AttributeActionCommand,omitempty"`            // Should the Attribute value be updated or should the attribute be removed 1("USE_DROPZONE_VALUE_FOR_ATTRIBUTE") or 2("REMOVE_ATTRIBUTE_FROM_TESTINSTRUCTION")
}

func (x *ImmatureTestInstructionInformationMessage) Reset() {
	*x = ImmatureTestInstructionInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmatureTestInstructionInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmatureTestInstructionInformationMessage) ProtoMessage() {}

func (x *ImmatureTestInstructionInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmatureTestInstructionInformationMessage.ProtoReflect.Descriptor instead.
func (*ImmatureTestInstructionInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{7}
}

func (x *ImmatureTestInstructionInformationMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage) GetTestInstructionUUID() string {
	if x != nil {
		return x.TestInstructionUUID
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage) GetDropZoneUUID() string {
	if x != nil {
		return x.DropZoneUUID
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage) GetDropZoneName() string {
	if x != nil {
		return x.DropZoneName
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage) GetDropZoneDescription() string {
	if x != nil {
		return x.DropZoneDescription
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage) GetDropZoneMouseOver() string {
	if x != nil {
		return x.DropZoneMouseOver
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage) GetDropZoneColor() string {
	if x != nil {
		return x.DropZoneColor
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage) GetTestInstructionAttributeType() string {
	if x != nil {
		return x.TestInstructionAttributeType
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage) GetTestInstructionAttributeUUID() string {
	if x != nil {
		return x.TestInstructionAttributeUUID
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage) GetTestInstructionAttributeName() string {
	if x != nil {
		return x.TestInstructionAttributeName
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage) GetAttributeValueAsString() string {
	if x != nil {
		return x.AttributeValueAsString
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage) GetAttributeValueUUID() string {
	if x != nil {
		return x.AttributeValueUUID
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage) GetFirstImmatureElementUUID() string {
	if x != nil {
		return x.FirstImmatureElementUUID
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage) GetAttributeActionCommand() int32 {
	if x != nil {
		return x.AttributeActionCommand
	}
	return 0
}

// TestInstructionAttributeMessage
// Message holding one attribute for the TestInstruction
type TestInstructionAttributeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID                                    string `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                                                                         // The Domain UUID where the Attribute belong
	DomainName                                    string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                                                         // The Domain Name where the Attribute belong
	TestInstructionUUID                           string `protobuf:"bytes,3,opt,name=TestInstructionUUID,proto3" json:"TestInstructionUUID,omitempty"`                                                       // The Unique TestInstruction UUID that identifies which TestInstruction that owns the attribute
	TestInstructionName                           string `protobuf:"bytes,4,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"`                                                       // The TestInstruction Name of the specific TestInstruction that owns the attribute
	TestInstructionAttributeUUID                  string `protobuf:"bytes,5,opt,name=TestInstructionAttributeUUID,proto3" json:"TestInstructionAttributeUUID,omitempty"`                                     // The Unique UUID that identifies which TestInstructionAttribute
	TestInstructionAttributeName                  string `protobuf:"bytes,6,opt,name=TestInstructionAttributeName,proto3" json:"TestInstructionAttributeName,omitempty"`                                     // The Name of the TestInstructionAttribute
	TestInstructionAttributeDescription           string `protobuf:"bytes,7,opt,name=TestInstructionAttributeDescription,proto3" json:"TestInstructionAttributeDescription,omitempty"`                       // The Attribute description
	TestInstructionAttributeMouseOver             string `protobuf:"bytes,8,opt,name=TestInstructionAttributeMouseOver,proto3" json:"TestInstructionAttributeMouseOver,omitempty"`                           // The MouseOver text for the attribute
	TestInstructionAttributeTypeUUID              string `protobuf:"bytes,9,opt,name=TestInstructionAttributeTypeUUID,proto3" json:"TestInstructionAttributeTypeUUID,omitempty"`                             // The Type of Attribute, used for grouping in GUI
	TestInstructionAttributeTypeName              string `protobuf:"bytes,10,opt,name=TestInstructionAttributeTypeName,proto3" json:"TestInstructionAttributeTypeName,omitempty"`                            // The Name of the Type for the Attribute, shown in grouping in GUI
	TestInstructionAttributeValueAsString         string `protobuf:"bytes,11,opt,name=TestInstructionAttributeValueAsString,proto3" json:"TestInstructionAttributeValueAsString,omitempty"`                  // The string representation of the value for the attribute
	TestInstructionAttributeValueUUID             string `protobuf:"bytes,12,opt,name=TestInstructionAttributeValueUUID,proto3" json:"TestInstructionAttributeValueUUID,omitempty"`                          // The UUID for the value, when Combobox is used
	TestInstructionAttributeVisible               bool   `protobuf:"varint,13,opt,name=TestInstructionAttributeVisible,proto3" json:"TestInstructionAttributeVisible,omitempty"`                             // Should the attribute be visible for the user or not
	TestInstructionAttributeEnabled               bool   `protobuf:"varint,14,opt,name=TestInstructionAttributeEnabled,proto3" json:"TestInstructionAttributeEnabled,omitempty"`                             // Should the attribute be changeable by the user
	TestInstructionAttributeMandatory             bool   `protobuf:"varint,15,opt,name=TestInstructionAttributeMandatory,proto3" json:"TestInstructionAttributeMandatory,omitempty"`                         // Is the attribute mandatory for user to fill
	TestInstructionAttributeVisibleInTestCaseArea bool   `protobuf:"varint,16,opt,name=TestInstructionAttributeVisibleInTestCaseArea,proto3" json:"TestInstructionAttributeVisibleInTestCaseArea,omitempty"` // Should the attribute be visible in the TestCase-area in the GUI
	TestInstructionAttributeIsDeprecated          bool   `protobuf:"varint,17,opt,name=TestInstructionAttributeIsDeprecated,proto3" json:"TestInstructionAttributeIsDeprecated,omitempty"`                   // Is the attribute deprecated and shouldn't be used by the user
	TestInstructionAttributeInputMask             string `protobuf:"bytes,18,opt,name=TestInstructionAttributeInputMask,proto3" json:"TestInstructionAttributeInputMask,omitempty"`                          // And input mask for the attribute to secure that only valid values can be entered
	TestInstructionAttributeType                  string `protobuf:"bytes,19,opt,name=TestInstructionAttributeType,proto3" json:"TestInstructionAttributeType,omitempty"`                                    // What type of attribute this is - TEXTBOX, COMBOBOX, FILE_SELECTOR, FileSelector, FUNCTION_SELECTOR
}

func (x *TestInstructionAttributeMessage) Reset() {
	*x = TestInstructionAttributeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionAttributeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionAttributeMessage) ProtoMessage() {}

func (x *TestInstructionAttributeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionAttributeMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionAttributeMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{8}
}

func (x *TestInstructionAttributeMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *TestInstructionAttributeMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *TestInstructionAttributeMessage) GetTestInstructionUUID() string {
	if x != nil {
		return x.TestInstructionUUID
	}
	return ""
}

func (x *TestInstructionAttributeMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

func (x *TestInstructionAttributeMessage) GetTestInstructionAttributeUUID() string {
	if x != nil {
		return x.TestInstructionAttributeUUID
	}
	return ""
}

func (x *TestInstructionAttributeMessage) GetTestInstructionAttributeName() string {
	if x != nil {
		return x.TestInstructionAttributeName
	}
	return ""
}

func (x *TestInstructionAttributeMessage) GetTestInstructionAttributeDescription() string {
	if x != nil {
		return x.TestInstructionAttributeDescription
	}
	return ""
}

func (x *TestInstructionAttributeMessage) GetTestInstructionAttributeMouseOver() string {
	if x != nil {
		return x.TestInstructionAttributeMouseOver
	}
	return ""
}

func (x *TestInstructionAttributeMessage) GetTestInstructionAttributeTypeUUID() string {
	if x != nil {
		return x.TestInstructionAttributeTypeUUID
	}
	return ""
}

func (x *TestInstructionAttributeMessage) GetTestInstructionAttributeTypeName() string {
	if x != nil {
		return x.TestInstructionAttributeTypeName
	}
	return ""
}

func (x *TestInstructionAttributeMessage) GetTestInstructionAttributeValueAsString() string {
	if x != nil {
		return x.TestInstructionAttributeValueAsString
	}
	return ""
}

func (x *TestInstructionAttributeMessage) GetTestInstructionAttributeValueUUID() string {
	if x != nil {
		return x.TestInstructionAttributeValueUUID
	}
	return ""
}

func (x *TestInstructionAttributeMessage) GetTestInstructionAttributeVisible() bool {
	if x != nil {
		return x.TestInstructionAttributeVisible
	}
	return false
}

func (x *TestInstructionAttributeMessage) GetTestInstructionAttributeEnabled() bool {
	if x != nil {
		return x.TestInstructionAttributeEnabled
	}
	return false
}

func (x *TestInstructionAttributeMessage) GetTestInstructionAttributeMandatory() bool {
	if x != nil {
		return x.TestInstructionAttributeMandatory
	}
	return false
}

func (x *TestInstructionAttributeMessage) GetTestInstructionAttributeVisibleInTestCaseArea() bool {
	if x != nil {
		return x.TestInstructionAttributeVisibleInTestCaseArea
	}
	return false
}

func (x *TestInstructionAttributeMessage) GetTestInstructionAttributeIsDeprecated() bool {
	if x != nil {
		return x.TestInstructionAttributeIsDeprecated
	}
	return false
}

func (x *TestInstructionAttributeMessage) GetTestInstructionAttributeInputMask() string {
	if x != nil {
		return x.TestInstructionAttributeInputMask
	}
	return ""
}

func (x *TestInstructionAttributeMessage) GetTestInstructionAttributeType() string {
	if x != nil {
		return x.TestInstructionAttributeType
	}
	return ""
}

// ImmatureElementModelMessage
// A message holding one model element for the element
type ImmatureElementModelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID               string `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                             // The Domain UUID where the Element belong
	DomainName               string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                             // The Domain Name where the Element belong
	ImmatureElementUUID      string `protobuf:"bytes,3,opt,name=ImmatureElementUUID,proto3" json:"ImmatureElementUUID,omitempty"`           // The OriginalElementUUID
	ImmatureElementName      string `protobuf:"bytes,4,opt,name=ImmatureElementName,proto3" json:"ImmatureElementName,omitempty"`           // The OriginalElementName
	PreviousElementUUID      string `protobuf:"bytes,5,opt,name=PreviousElementUUID,proto3" json:"PreviousElementUUID,omitempty"`           // The UUID of the previous element. When there are no previous element then this field is populated with 'ImmatureElementUUID'
	NextElementUUID          string `protobuf:"bytes,6,opt,name=NextElementUUID,proto3" json:"NextElementUUID,omitempty"`                   // The UUID of the next element. When there are no next element then this field is populated with 'ImmatureElementUUID'
	FirstChildElementUUID    string `protobuf:"bytes,7,opt,name=FirstChildElementUUID,proto3" json:"FirstChildElementUUID,omitempty"`       // The UUID of the first child element. When there are no child element then this field is populated with 'ImmatureElementUUID'
	ParentElementUUID        string `protobuf:"bytes,8,opt,name=ParentElementUUID,proto3" json:"ParentElementUUID,omitempty"`               // The UUID of the parent element. When there are no parent element then this field is populated with 'ImmatureElementUUID'
	TestCaseModelElementType string `protobuf:"bytes,9,opt,name=TestCaseModelElementType,proto3" json:"TestCaseModelElementType,omitempty"` // The Type of element, TI, TIC, Bond and so on
	OriginalElementUUID      string `protobuf:"bytes,10,opt,name=OriginalElementUUID,proto3" json:"OriginalElementUUID,omitempty"`          // The original elements UUID, e.g. a TestInstruction unique UUID set by client system
	TopImmatureElementUUID   string `protobuf:"bytes,11,opt,name=TopImmatureElementUUID,proto3" json:"TopImmatureElementUUID,omitempty"`    // The original elements Name, e.g. a TestInstruction Name set by client system
	IsTopElement             bool   `protobuf:"varint,12,opt,name=IsTopElement,proto3" json:"IsTopElement,omitempty"`                       // Is this the top element of the element model
}

func (x *ImmatureElementModelMessage) Reset() {
	*x = ImmatureElementModelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmatureElementModelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmatureElementModelMessage) ProtoMessage() {}

func (x *ImmatureElementModelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmatureElementModelMessage.ProtoReflect.Descriptor instead.
func (*ImmatureElementModelMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{9}
}

func (x *ImmatureElementModelMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *ImmatureElementModelMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *ImmatureElementModelMessage) GetImmatureElementUUID() string {
	if x != nil {
		return x.ImmatureElementUUID
	}
	return ""
}

func (x *ImmatureElementModelMessage) GetImmatureElementName() string {
	if x != nil {
		return x.ImmatureElementName
	}
	return ""
}

func (x *ImmatureElementModelMessage) GetPreviousElementUUID() string {
	if x != nil {
		return x.PreviousElementUUID
	}
	return ""
}

func (x *ImmatureElementModelMessage) GetNextElementUUID() string {
	if x != nil {
		return x.NextElementUUID
	}
	return ""
}

func (x *ImmatureElementModelMessage) GetFirstChildElementUUID() string {
	if x != nil {
		return x.FirstChildElementUUID
	}
	return ""
}

func (x *ImmatureElementModelMessage) GetParentElementUUID() string {
	if x != nil {
		return x.ParentElementUUID
	}
	return ""
}

func (x *ImmatureElementModelMessage) GetTestCaseModelElementType() string {
	if x != nil {
		return x.TestCaseModelElementType
	}
	return ""
}

func (x *ImmatureElementModelMessage) GetOriginalElementUUID() string {
	if x != nil {
		return x.OriginalElementUUID
	}
	return ""
}

func (x *ImmatureElementModelMessage) GetTopImmatureElementUUID() string {
	if x != nil {
		return x.TopImmatureElementUUID
	}
	return ""
}

func (x *ImmatureElementModelMessage) GetIsTopElement() bool {
	if x != nil {
		return x.IsTopElement
	}
	return false
}

// SupportedTestInstructionContainersMessage
// Message for a TestInstructionContainersMap that hold all TestInstructionContainers
type SupportedTestInstructionContainersMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionsMap  map[string]*TestInstructionContainerInstanceVersionsMessage `protobuf:"bytes,1,rep,name=TestInstructionsMap,proto3" json:"TestInstructionsMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // The Map holding all TestInstructions
	TestInstructionsHash string                                                      `protobuf:"bytes,2,opt,name=TestInstructionsHash,proto3" json:"TestInstructionsHash,omitempty"`                                                                                       // SHA256 of all TestInstructionsMap using Fenix standard way of hashing values together
}

func (x *SupportedTestInstructionContainersMessage) Reset() {
	*x = SupportedTestInstructionContainersMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedTestInstructionContainersMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedTestInstructionContainersMessage) ProtoMessage() {}

func (x *SupportedTestInstructionContainersMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedTestInstructionContainersMessage.ProtoReflect.Descriptor instead.
func (*SupportedTestInstructionContainersMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{10}
}

func (x *SupportedTestInstructionContainersMessage) GetTestInstructionsMap() map[string]*TestInstructionContainerInstanceVersionsMessage {
	if x != nil {
		return x.TestInstructionsMap
	}
	return nil
}

func (x *SupportedTestInstructionContainersMessage) GetTestInstructionsHash() string {
	if x != nil {
		return x.TestInstructionsHash
	}
	return ""
}

// TestInstructionContainerInstanceVersionsMessage
//
//	Message for all versions of one TestInstructionContainer, first position holds last version i.e. version x, second position holds the version before that i.e. version x-1...
type TestInstructionContainerInstanceVersionsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionContainerVersions []*TestInstructionContainerInstanceVersionMessage `protobuf:"bytes,1,rep,name=TestInstructionContainerVersions,proto3" json:"TestInstructionContainerVersions,omitempty"` // Array with all versions of a TestInstructionContainers. First position holds last version i.e. version x, second position holds the version before that i.e. version x-1...
	TestInstructionVersionsHash      string                                            `protobuf:"bytes,2,opt,name=TestInstructionVersionsHash,proto3" json:"TestInstructionVersionsHash,omitempty"`           // SHA256 of all TestInstructionInstanceVersions using Fenix standard way of hashing values together
}

func (x *TestInstructionContainerInstanceVersionsMessage) Reset() {
	*x = TestInstructionContainerInstanceVersionsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionContainerInstanceVersionsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionContainerInstanceVersionsMessage) ProtoMessage() {}

func (x *TestInstructionContainerInstanceVersionsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionContainerInstanceVersionsMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionContainerInstanceVersionsMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{11}
}

func (x *TestInstructionContainerInstanceVersionsMessage) GetTestInstructionContainerVersions() []*TestInstructionContainerInstanceVersionMessage {
	if x != nil {
		return x.TestInstructionContainerVersions
	}
	return nil
}

func (x *TestInstructionContainerInstanceVersionsMessage) GetTestInstructionVersionsHash() string {
	if x != nil {
		return x.TestInstructionVersionsHash
	}
	return ""
}

// A Message holding one TestInstructionContainer-version
type TestInstructionContainerInstanceVersionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionContainerInstance             *TestInstructionContainerMessage `protobuf:"bytes,1,opt,name=TestInstructionContainerInstance,proto3" json:"TestInstructionContainerInstance,omitempty"`                          // Holds one TestInstructionContainerInstance
	TestInstructionContainerInstanceMajorVersion int32                            `protobuf:"varint,2,opt,name=TestInstructionContainerInstanceMajorVersion,proto3" json:"TestInstructionContainerInstanceMajorVersion,omitempty"` // The major version for the TestInstructionContainer
	TestInstructionContainerInstanceMinorVersion int32                            `protobuf:"varint,3,opt,name=TestInstructionContainerInstanceMinorVersion,proto3" json:"TestInstructionContainerInstanceMinorVersion,omitempty"` // The minor version for the TestInstructionContainer
	Deprecated                                   bool                             `protobuf:"varint,4,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`                                                                     // Should the user stop using this TestInstructionContainerInstance-version
	Enabled                                      bool                             `protobuf:"varint,5,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                                                                           // Is this TestInstructionContainerInstance-version enabled or disabled
	TestInstructionContainerInstanceVersionHash  string                           `protobuf:"bytes,6,opt,name=TestInstructionContainerInstanceVersionHash,proto3" json:"TestInstructionContainerInstanceVersionHash,omitempty"`    // SHA256 of all TestInstructionContainerMessage using Fenix standard way of hashing values together
}

func (x *TestInstructionContainerInstanceVersionMessage) Reset() {
	*x = TestInstructionContainerInstanceVersionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionContainerInstanceVersionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionContainerInstanceVersionMessage) ProtoMessage() {}

func (x *TestInstructionContainerInstanceVersionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionContainerInstanceVersionMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionContainerInstanceVersionMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{12}
}

func (x *TestInstructionContainerInstanceVersionMessage) GetTestInstructionContainerInstance() *TestInstructionContainerMessage {
	if x != nil {
		return x.TestInstructionContainerInstance
	}
	return nil
}

func (x *TestInstructionContainerInstanceVersionMessage) GetTestInstructionContainerInstanceMajorVersion() int32 {
	if x != nil {
		return x.TestInstructionContainerInstanceMajorVersion
	}
	return 0
}

func (x *TestInstructionContainerInstanceVersionMessage) GetTestInstructionContainerInstanceMinorVersion() int32 {
	if x != nil {
		return x.TestInstructionContainerInstanceMinorVersion
	}
	return 0
}

func (x *TestInstructionContainerInstanceVersionMessage) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *TestInstructionContainerInstanceVersionMessage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TestInstructionContainerInstanceVersionMessage) GetTestInstructionContainerInstanceVersionHash() string {
	if x != nil {
		return x.TestInstructionContainerInstanceVersionHash
	}
	return ""
}

// TestInstructionContainerMessage
// A message holding one complete TestInstructionContainer
type TestInstructionContainerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionContainer                     *TestInstructionContainerBaseMessage                  `protobuf:"bytes,1,opt,name=TestInstructionContainer,proto3" json:"TestInstructionContainer,omitempty"`                                         //
	BasicTestInstructionContainerInformation     *BasicTestInstructionContainerInformationMessage      `protobuf:"bytes,2,opt,name=BasicTestInstructionContainerInformation,proto3" json:"BasicTestInstructionContainerInformation,omitempty"`         //
	ImmatureTestInstructionContainerInformations []*ImmatureTestInstructionContainerInformationMessage `protobuf:"bytes,3,rep,name=ImmatureTestInstructionContainerInformations,proto3" json:"ImmatureTestInstructionContainerInformations,omitempty"` //
	ImmatureElementModel                         []*ImmatureElementModelMessage                        `protobuf:"bytes,5,rep,name=ImmatureElementModel,proto3" json:"ImmatureElementModel,omitempty"`                                                 //
}

func (x *TestInstructionContainerMessage) Reset() {
	*x = TestInstructionContainerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionContainerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionContainerMessage) ProtoMessage() {}

func (x *TestInstructionContainerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionContainerMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionContainerMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{13}
}

func (x *TestInstructionContainerMessage) GetTestInstructionContainer() *TestInstructionContainerBaseMessage {
	if x != nil {
		return x.TestInstructionContainer
	}
	return nil
}

func (x *TestInstructionContainerMessage) GetBasicTestInstructionContainerInformation() *BasicTestInstructionContainerInformationMessage {
	if x != nil {
		return x.BasicTestInstructionContainerInformation
	}
	return nil
}

func (x *TestInstructionContainerMessage) GetImmatureTestInstructionContainerInformations() []*ImmatureTestInstructionContainerInformationMessage {
	if x != nil {
		return x.ImmatureTestInstructionContainerInformations
	}
	return nil
}

func (x *TestInstructionContainerMessage) GetImmatureElementModel() []*ImmatureElementModelMessage {
	if x != nil {
		return x.ImmatureElementModel
	}
	return nil
}

// TestInstructionContainerBaseMessage
// The base information for the TestInstructionContainer
type TestInstructionContainerBaseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID                            string `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                                                       // The Domain UUID where the TestInstructionContainer belong
	DomainName                            string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                                       // The Domain Name where the TestInstructionContainer belong
	TestInstructionContainerUUID          string `protobuf:"bytes,3,opt,name=TestInstructionContainerUUID,proto3" json:"TestInstructionContainerUUID,omitempty"`                   // The Unique TestInstructionContainer UUID that identifies the specific TestInstructionContainer to be executed
	TestInstructionContainerName          string `protobuf:"bytes,4,opt,name=TestInstructionContainerName,proto3" json:"TestInstructionContainerName,omitempty"`                   // The TestInstructionContainer Name of the specific TestInstructionContainer to be executed
	TestInstructionContainerTypeUUID      string `protobuf:"bytes,5,opt,name=TestInstructionContainerTypeUUID,proto3" json:"TestInstructionContainerTypeUUID,omitempty"`           // The type UUID of the TestInstructionContainer
	TestInstructionContainerTypeName      string `protobuf:"bytes,6,opt,name=TestInstructionContainerTypeName,proto3" json:"TestInstructionContainerTypeName,omitempty"`           // The type Name of the TestInstructionContainer
	TestInstructionContainerDescription   string `protobuf:"bytes,7,opt,name=TestInstructionContainerDescription,proto3" json:"TestInstructionContainerDescription,omitempty"`     // The TestInstructionContainer description for the TestInstructionContainer
	TestInstructionContainerMouseOverText string `protobuf:"bytes,8,opt,name=TestInstructionContainerMouseOverText,proto3" json:"TestInstructionContainerMouseOverText,omitempty"` // The TestInstructionContainer MouseOver text for the TestInstructionContainer
	Deprecated                            bool   `protobuf:"varint,9,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`                                                      // Is the TestInstructionContainer depreciated and shouldn't be used by the user
	Enabled                               bool   `protobuf:"varint,10,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                                                           // Is the TestInstructionContainer enabled or not
	MajorVersionNumber                    int32  `protobuf:"varint,11,opt,name=MajorVersionNumber,proto3" json:"MajorVersionNumber,omitempty"`                                     // The Major version number for the TestInstructionContainer
	MinorVersionNumber                    int32  `protobuf:"varint,12,opt,name=MinorVersionNumber,proto3" json:"MinorVersionNumber,omitempty"`                                     // The Minor version number for the TestInstructionContainer
	UpdatedTimeStamp                      string `protobuf:"bytes,13,opt,name=UpdatedTimeStamp,proto3" json:"UpdatedTimeStamp,omitempty"`                                          // When the TestInstructionContainer was first created
	ChildrenIsParallelProcessed           bool   `protobuf:"varint,14,opt,name=ChildrenIsParallelProcessed,proto3" json:"ChildrenIsParallelProcessed,omitempty"`                   // Should children be executed in parallel
}

func (x *TestInstructionContainerBaseMessage) Reset() {
	*x = TestInstructionContainerBaseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionContainerBaseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionContainerBaseMessage) ProtoMessage() {}

func (x *TestInstructionContainerBaseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionContainerBaseMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionContainerBaseMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{14}
}

func (x *TestInstructionContainerBaseMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *TestInstructionContainerBaseMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *TestInstructionContainerBaseMessage) GetTestInstructionContainerUUID() string {
	if x != nil {
		return x.TestInstructionContainerUUID
	}
	return ""
}

func (x *TestInstructionContainerBaseMessage) GetTestInstructionContainerName() string {
	if x != nil {
		return x.TestInstructionContainerName
	}
	return ""
}

func (x *TestInstructionContainerBaseMessage) GetTestInstructionContainerTypeUUID() string {
	if x != nil {
		return x.TestInstructionContainerTypeUUID
	}
	return ""
}

func (x *TestInstructionContainerBaseMessage) GetTestInstructionContainerTypeName() string {
	if x != nil {
		return x.TestInstructionContainerTypeName
	}
	return ""
}

func (x *TestInstructionContainerBaseMessage) GetTestInstructionContainerDescription() string {
	if x != nil {
		return x.TestInstructionContainerDescription
	}
	return ""
}

func (x *TestInstructionContainerBaseMessage) GetTestInstructionContainerMouseOverText() string {
	if x != nil {
		return x.TestInstructionContainerMouseOverText
	}
	return ""
}

func (x *TestInstructionContainerBaseMessage) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *TestInstructionContainerBaseMessage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TestInstructionContainerBaseMessage) GetMajorVersionNumber() int32 {
	if x != nil {
		return x.MajorVersionNumber
	}
	return 0
}

func (x *TestInstructionContainerBaseMessage) GetMinorVersionNumber() int32 {
	if x != nil {
		return x.MinorVersionNumber
	}
	return 0
}

func (x *TestInstructionContainerBaseMessage) GetUpdatedTimeStamp() string {
	if x != nil {
		return x.UpdatedTimeStamp
	}
	return ""
}

func (x *TestInstructionContainerBaseMessage) GetChildrenIsParallelProcessed() bool {
	if x != nil {
		return x.ChildrenIsParallelProcessed
	}
	return false
}

// BasicTestInstructionContainerInformationMessage
// The Basic information for the TestInstructionContainer
type BasicTestInstructionContainerInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID                            string `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                                                        // The Domain UUID where the TestInstructionContainer belong
	DomainName                            string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                                        // The Domain Name where the TestInstructionContainer belong
	TestInstructionContainerUUID          string `protobuf:"bytes,3,opt,name=TestInstructionContainerUUID,proto3" json:"TestInstructionContainerUUID,omitempty"`                    // The Unique TestInstructionContainer UUID that identifies the specific TestInstructionContainer to be executed
	TestInstructionContainerName          string `protobuf:"bytes,4,opt,name=TestInstructionContainerName,proto3" json:"TestInstructionContainerName,omitempty"`                    // The TestInstructionContainer Name of the specific TestInstructionContainer to be executed
	TestInstructionContainerTypeUUID      string `protobuf:"bytes,5,opt,name=TestInstructionContainerTypeUUID,proto3" json:"TestInstructionContainerTypeUUID,omitempty"`            // The type UUID of the TestInstructionContainer
	TestInstructionContainerTypeName      string `protobuf:"bytes,6,opt,name=TestInstructionContainerTypeName,proto3" json:"TestInstructionContainerTypeName,omitempty"`            // The type Name of the TestInstructionContainer
	Deprecated                            bool   `protobuf:"varint,7,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`                                                       // Is the TestInstructionContainer depreciated and shouldn't be used by the user
	MajorVersionNumber                    int32  `protobuf:"varint,8,opt,name=MajorVersionNumber,proto3" json:"MajorVersionNumber,omitempty"`                                       // The Major version number for the TestInstructionContainer
	MinorVersionNumber                    int32  `protobuf:"varint,9,opt,name=MinorVersionNumber,proto3" json:"MinorVersionNumber,omitempty"`                                       // The Minor version number for the TestInstructionContainer
	UpdatedTimeStamp                      string `protobuf:"bytes,10,opt,name=UpdatedTimeStamp,proto3" json:"UpdatedTimeStamp,omitempty"`                                           // When the TestInstructionContainer was first created
	TestInstructionContainerColor         string `protobuf:"bytes,11,opt,name=TestInstructionContainerColor,proto3" json:"TestInstructionContainerColor,omitempty"`                 // The color used in GUI when showing the TestInstructionContainer
	TCRuleDeletion                        string `protobuf:"bytes,12,opt,name=TCRuleDeletion,proto3" json:"TCRuleDeletion,omitempty"`                                               // The Delete-rule defining how the TestInstructionContainer can be deleted
	TCRuleSwap                            string `protobuf:"bytes,13,opt,name=TCRuleSwap,proto3" json:"TCRuleSwap,omitempty"`                                                       // The Swap-rule defining how the TestInstructionContainer can be swapped out
	TestInstructionContainerDescription   string `protobuf:"bytes,14,opt,name=TestInstructionContainerDescription,proto3" json:"TestInstructionContainerDescription,omitempty"`     // The TestInstructionContainer description for the TestInstructionContainer
	TestInstructionContainerMouseOverText string `protobuf:"bytes,15,opt,name=TestInstructionContainerMouseOverText,proto3" json:"TestInstructionContainerMouseOverText,omitempty"` // The TestInstructionContainer MouseOver text for the TestInstructionContainer
	Enabled                               bool   `protobuf:"varint,16,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                                                            // Is the TestInstructionContainer enabled or not
	TestInstructionContainerExecutionType string `protobuf:"bytes,17,opt,name=TestInstructionContainerExecutionType,proto3" json:"TestInstructionContainerExecutionType,omitempty"` // Should execution of children be executed in serial or in parallel
}

func (x *BasicTestInstructionContainerInformationMessage) Reset() {
	*x = BasicTestInstructionContainerInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicTestInstructionContainerInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicTestInstructionContainerInformationMessage) ProtoMessage() {}

func (x *BasicTestInstructionContainerInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicTestInstructionContainerInformationMessage.ProtoReflect.Descriptor instead.
func (*BasicTestInstructionContainerInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{15}
}

func (x *BasicTestInstructionContainerInformationMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *BasicTestInstructionContainerInformationMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *BasicTestInstructionContainerInformationMessage) GetTestInstructionContainerUUID() string {
	if x != nil {
		return x.TestInstructionContainerUUID
	}
	return ""
}

func (x *BasicTestInstructionContainerInformationMessage) GetTestInstructionContainerName() string {
	if x != nil {
		return x.TestInstructionContainerName
	}
	return ""
}

func (x *BasicTestInstructionContainerInformationMessage) GetTestInstructionContainerTypeUUID() string {
	if x != nil {
		return x.TestInstructionContainerTypeUUID
	}
	return ""
}

func (x *BasicTestInstructionContainerInformationMessage) GetTestInstructionContainerTypeName() string {
	if x != nil {
		return x.TestInstructionContainerTypeName
	}
	return ""
}

func (x *BasicTestInstructionContainerInformationMessage) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *BasicTestInstructionContainerInformationMessage) GetMajorVersionNumber() int32 {
	if x != nil {
		return x.MajorVersionNumber
	}
	return 0
}

func (x *BasicTestInstructionContainerInformationMessage) GetMinorVersionNumber() int32 {
	if x != nil {
		return x.MinorVersionNumber
	}
	return 0
}

func (x *BasicTestInstructionContainerInformationMessage) GetUpdatedTimeStamp() string {
	if x != nil {
		return x.UpdatedTimeStamp
	}
	return ""
}

func (x *BasicTestInstructionContainerInformationMessage) GetTestInstructionContainerColor() string {
	if x != nil {
		return x.TestInstructionContainerColor
	}
	return ""
}

func (x *BasicTestInstructionContainerInformationMessage) GetTCRuleDeletion() string {
	if x != nil {
		return x.TCRuleDeletion
	}
	return ""
}

func (x *BasicTestInstructionContainerInformationMessage) GetTCRuleSwap() string {
	if x != nil {
		return x.TCRuleSwap
	}
	return ""
}

func (x *BasicTestInstructionContainerInformationMessage) GetTestInstructionContainerDescription() string {
	if x != nil {
		return x.TestInstructionContainerDescription
	}
	return ""
}

func (x *BasicTestInstructionContainerInformationMessage) GetTestInstructionContainerMouseOverText() string {
	if x != nil {
		return x.TestInstructionContainerMouseOverText
	}
	return ""
}

func (x *BasicTestInstructionContainerInformationMessage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *BasicTestInstructionContainerInformationMessage) GetTestInstructionContainerExecutionType() string {
	if x != nil {
		return x.TestInstructionContainerExecutionType
	}
	return ""
}

// ImmatureTestInstructionContainerInformationMessage
// A model holding one attribute and its value that will be set when user Drop TestInstructionContainer on specific DropZone
type ImmatureTestInstructionContainerInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID                            string `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                                                        // The Domain UUID where the TestInstructionContainer belong
	DomainName                            string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                                        // The Domain Name where the TestInstructionContainer belong
	TestInstructionContainerUUID          string `protobuf:"bytes,3,opt,name=TestInstructionContainerUUID,proto3" json:"TestInstructionContainerUUID,omitempty"`                    // The Unique TestInstructionContainer UUID that identifies the specific TestInstructionContainer to be executed
	TestInstructionContainerName          string `protobuf:"bytes,4,opt,name=TestInstructionContainerName,proto3" json:"TestInstructionContainerName,omitempty"`                    // The TestInstructionContainer Name of the specific TestInstructionContainer to be executed
	DropZoneUUID                          string `protobuf:"bytes,5,opt,name=DropZoneUUID,proto3" json:"DropZoneUUID,omitempty"`                                                    // The immature TestInstructionContainer used this DropZone UUID for the user to chose
	DropZoneName                          string `protobuf:"bytes,6,opt,name=DropZoneName,proto3" json:"DropZoneName,omitempty"`                                                    // The immature TestInstructionContainer used this DropZone Name for the user to chose
	DropZoneDescription                   string `protobuf:"bytes,7,opt,name=DropZoneDescription,proto3" json:"DropZoneDescription,omitempty"`                                      // The DropZone description
	DropZoneMouseOver                     string `protobuf:"bytes,8,opt,name=DropZoneMouseOver,proto3" json:"DropZoneMouseOver,omitempty"`                                          // The DropZone MouseOver text
	DropZoneColor                         string `protobuf:"bytes,9,opt,name=DropZoneColor,proto3" json:"DropZoneColor,omitempty"`                                                  // The DropZone color when presented to the user
	TestInstructionContainerAttributeType string `protobuf:"bytes,10,opt,name=TestInstructionContainerAttributeType,proto3" json:"TestInstructionContainerAttributeType,omitempty"` // The Attribute type for the Attribute to be set - TEXTBOX, COMBOBOX, FILE_SELECTOR, FileSelector, FUNCTION_SELECTOR
	TestInstructionContainerAttributeUUID string `protobuf:"bytes,11,opt,name=TestInstructionContainerAttributeUUID,proto3" json:"TestInstructionContainerAttributeUUID,omitempty"` // The Attribute UUID to be set
	TestInstructionContainerAttributeName string `protobuf:"bytes,12,opt,name=TestInstructionContainerAttributeName,proto3" json:"TestInstructionContainerAttributeName,omitempty"` // The Attribute Name for the Attribute to be set
	AttributeValueAsString                string `protobuf:"bytes,13,opt,name=AttributeValueAsString,proto3" json:"AttributeValueAsString,omitempty"`                               // The Attribute Value for the Attribute
	AttributeValueUUID                    string `protobuf:"bytes,14,opt,name=AttributeValueUUID,proto3" json:"AttributeValueUUID,omitempty"`                                       // The Attribute Value UUID for the value to be set
	FirstImmatureElementUUID              string `protobuf:"bytes,15,opt,name=FirstImmatureElementUUID,proto3" json:"FirstImmatureElementUUID,omitempty"`                           // The UUID to the first Element in the element model
	AttributeActionCommand                int32  `protobuf:"varint,16,opt,name=AttributeActionCommand,proto3" json:"AttributeActionCommand,omitempty"`                              // Should the Attribute value be updated or should the attribute be removed 1("USE_DROPZONE_VALUE_FOR_ATTRIBUTE") or 2("REMOVE_ATTRIBUTE_FROM_TestInstructionContainer")
}

func (x *ImmatureTestInstructionContainerInformationMessage) Reset() {
	*x = ImmatureTestInstructionContainerInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmatureTestInstructionContainerInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmatureTestInstructionContainerInformationMessage) ProtoMessage() {}

func (x *ImmatureTestInstructionContainerInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmatureTestInstructionContainerInformationMessage.ProtoReflect.Descriptor instead.
func (*ImmatureTestInstructionContainerInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{16}
}

func (x *ImmatureTestInstructionContainerInformationMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *ImmatureTestInstructionContainerInformationMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *ImmatureTestInstructionContainerInformationMessage) GetTestInstructionContainerUUID() string {
	if x != nil {
		return x.TestInstructionContainerUUID
	}
	return ""
}

func (x *ImmatureTestInstructionContainerInformationMessage) GetTestInstructionContainerName() string {
	if x != nil {
		return x.TestInstructionContainerName
	}
	return ""
}

func (x *ImmatureTestInstructionContainerInformationMessage) GetDropZoneUUID() string {
	if x != nil {
		return x.DropZoneUUID
	}
	return ""
}

func (x *ImmatureTestInstructionContainerInformationMessage) GetDropZoneName() string {
	if x != nil {
		return x.DropZoneName
	}
	return ""
}

func (x *ImmatureTestInstructionContainerInformationMessage) GetDropZoneDescription() string {
	if x != nil {
		return x.DropZoneDescription
	}
	return ""
}

func (x *ImmatureTestInstructionContainerInformationMessage) GetDropZoneMouseOver() string {
	if x != nil {
		return x.DropZoneMouseOver
	}
	return ""
}

func (x *ImmatureTestInstructionContainerInformationMessage) GetDropZoneColor() string {
	if x != nil {
		return x.DropZoneColor
	}
	return ""
}

func (x *ImmatureTestInstructionContainerInformationMessage) GetTestInstructionContainerAttributeType() string {
	if x != nil {
		return x.TestInstructionContainerAttributeType
	}
	return ""
}

func (x *ImmatureTestInstructionContainerInformationMessage) GetTestInstructionContainerAttributeUUID() string {
	if x != nil {
		return x.TestInstructionContainerAttributeUUID
	}
	return ""
}

func (x *ImmatureTestInstructionContainerInformationMessage) GetTestInstructionContainerAttributeName() string {
	if x != nil {
		return x.TestInstructionContainerAttributeName
	}
	return ""
}

func (x *ImmatureTestInstructionContainerInformationMessage) GetAttributeValueAsString() string {
	if x != nil {
		return x.AttributeValueAsString
	}
	return ""
}

func (x *ImmatureTestInstructionContainerInformationMessage) GetAttributeValueUUID() string {
	if x != nil {
		return x.AttributeValueUUID
	}
	return ""
}

func (x *ImmatureTestInstructionContainerInformationMessage) GetFirstImmatureElementUUID() string {
	if x != nil {
		return x.FirstImmatureElementUUID
	}
	return ""
}

func (x *ImmatureTestInstructionContainerInformationMessage) GetAttributeActionCommand() int32 {
	if x != nil {
		return x.AttributeActionCommand
	}
	return 0
}

// SupportedAllowedUsersMessage
// Message containing all users that are allowed to access the connectors published TestInstructions and TestInstructionContainers
type SupportedAllowedUsersMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedUsers     []*AllowedUserMessage `protobuf:"bytes,1,rep,name=AllowedUsers,proto3" json:"AllowedUsers,omitempty"`         // Array with all allowed users for this Domain
	AllowedUsersHash string                `protobuf:"bytes,2,opt,name=AllowedUsersHash,proto3" json:"AllowedUsersHash,omitempty"` // The Hash for all users-messages
}

func (x *SupportedAllowedUsersMessage) Reset() {
	*x = SupportedAllowedUsersMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedAllowedUsersMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedAllowedUsersMessage) ProtoMessage() {}

func (x *SupportedAllowedUsersMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedAllowedUsersMessage.ProtoReflect.Descriptor instead.
func (*SupportedAllowedUsersMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{17}
}

func (x *SupportedAllowedUsersMessage) GetAllowedUsers() []*AllowedUserMessage {
	if x != nil {
		return x.AllowedUsers
	}
	return nil
}

func (x *SupportedAllowedUsersMessage) GetAllowedUsersHash() string {
	if x != nil {
		return x.AllowedUsersHash
	}
	return ""
}

// AllowedUserMessage
// Message containing a user that are allowed to access the connectors published TestInstructions and TestInstructionContainers
type AllowedUserMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdOnComputer     string `protobuf:"bytes,1,opt,name=UserIdOnComputer,proto3" json:"UserIdOnComputer,omitempty"`         // The user-id user use to login to computer with
	GCPAuthenticatedUser string `protobuf:"bytes,2,opt,name=GCPAuthenticatedUser,proto3" json:"GCPAuthenticatedUser,omitempty"` // The e-mail which user use to authenticate towards GCP
	UserEmail            string `protobuf:"bytes,3,opt,name=UserEmail,proto3" json:"UserEmail,omitempty"`                       // The users e-mail
	UserFirstName        string `protobuf:"bytes,4,opt,name=UserFirstName,proto3" json:"UserFirstName,omitempty"`               // The users firs
	UserLastName         string `protobuf:"bytes,5,opt,name=UserLastName,proto3" json:"UserLastName,omitempty"`                 // The users last name`
}

func (x *AllowedUserMessage) Reset() {
	*x = AllowedUserMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllowedUserMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowedUserMessage) ProtoMessage() {}

func (x *AllowedUserMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowedUserMessage.ProtoReflect.Descriptor instead.
func (*AllowedUserMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP(), []int{18}
}

func (x *AllowedUserMessage) GetUserIdOnComputer() string {
	if x != nil {
		return x.UserIdOnComputer
	}
	return ""
}

func (x *AllowedUserMessage) GetGCPAuthenticatedUser() string {
	if x != nil {
		return x.GCPAuthenticatedUser
	}
	return ""
}

func (x *AllowedUserMessage) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *AllowedUserMessage) GetUserFirstName() string {
	if x != nil {
		return x.UserFirstName
	}
	return ""
}

func (x *AllowedUserMessage) GetUserLastName() string {
	if x != nil {
		return x.UserLastName
	}
	return ""
}

var File_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto protoreflect.FileDescriptor

var file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDesc = []byte{
	0x0a, 0x97, 0x01, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x6a, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x06, 0x0a, 0x4b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x41, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x7e, 0x0a, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x84, 0x01, 0x0a, 0x19, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x19, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x5d, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x7a, 0x0a,
	0x38, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x38, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x88, 0x01, 0x0a, 0x3f, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x46, 0x6f,
	0x72, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x3f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x73,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x22, 0xef, 0x02, 0x0a, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4d, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x8b, 0x01, 0x0a, 0x18, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x59, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe8, 0x01, 0x0a, 0x26, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x7c, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x40, 0x0a, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x22, 0xc4, 0x03, 0x0a, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6d, 0x0a, 0x17, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x23, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x23,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x22, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x90, 0x05, 0x0a, 0x16, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x61, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8d, 0x01, 0x0a, 0x1f, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1f, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x98, 0x01, 0x0a, 0x23, 0x49, 0x6d, 0x6d, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x23, 0x49, 0x6d,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x7a, 0x0a, 0x19, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x19, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x6c, 0x0a,
	0x14, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0xfe, 0x04, 0x0a, 0x1a,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65,
	0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x61,
	0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x69,
	0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x86, 0x06, 0x0a,
	0x26, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x61, 0x6a,
	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x69, 0x6e,
	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x54, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x43, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x77, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x43, 0x52,
	0x75, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x12, 0x3e, 0x0a, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xc5, 0x06, 0x0a, 0x29, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x55, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x5a,
	0x6f, 0x6e, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44,
	0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x44,
	0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x44, 0x72,
	0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x75,
	0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x72,
	0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x42, 0x0a,
	0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xd7, 0x0a,
	0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a,
	0x23, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4c, 0x0a, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x4a, 0x0a,
	0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x21, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x1f, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4c, 0x0a,
	0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x64, 0x0a, 0x2d, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x2d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x52, 0x0a, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x73, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xcb, 0x04, 0x0a, 0x1b, 0x49, 0x6d, 0x6d, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x6d, 0x6d, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x6d, 0x6d,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x0f, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x2c, 0x0a,
	0x11, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x54, 0x6f, 0x70,
	0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x54, 0x6f, 0x70, 0x49, 0x6d,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x54, 0x6f, 0x70, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x54, 0x6f, 0x70, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x03, 0x0a, 0x29, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x5f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x94, 0x01, 0x0a, 0x18,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x62, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x8d, 0x02, 0x0a, 0x2f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x20,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x40, 0x0a, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x9f, 0x04, 0x0a, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x20,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x62, 0x0a, 0x2c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x2c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2c, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x6f,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x60, 0x0a, 0x2b, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2b, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x22, 0xee, 0x04, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7c, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x18, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0xa8, 0x01, 0x0a, 0x28, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x28, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xb3, 0x01, 0x0a, 0x2c, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x2c, 0x49, 0x6d, 0x6d, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6c, 0x0a, 0x14, 0x49, 0x6d, 0x6d, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x14, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0xb5, 0x06, 0x0a, 0x23, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a,
	0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a,
	0x23, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x54, 0x0a, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x75, 0x73, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x61, 0x6a,
	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x69, 0x6e,
	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x1b, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x49, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1b, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x49, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0xe3, 0x07,
	0x0a, 0x2f, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d,
	0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d,
	0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a,
	0x1d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x43, 0x52,
	0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x43, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x54, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x12, 0x50, 0x0a, 0x23, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a,
	0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a,
	0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xa8, 0x07, 0x0a, 0x32, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x42,
	0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f,
	0x6e, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x72,
	0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x72,
	0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11,
	0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e,
	0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x72,
	0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x54, 0x0a, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x54, 0x0a, 0x25,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x9f,
	0x01, 0x0a, 0x1c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x53, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x22, 0xdc, 0x01, 0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x47, 0x43, 0x50, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x47, 0x43, 0x50, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescOnce sync.Once
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescData = file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDesc
)

func file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescGZIP() []byte {
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescOnce.Do(func() {
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescData)
	})
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDescData
}

var file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_goTypes = []interface{}{
	(*SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage)(nil), // 0: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage
	(*SupportedTestInstructionsMessage)(nil),                                            // 1: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsMessage
	(*TestInstructionInstanceVersionsMessage)(nil),                                      // 2: fenixExecutionWorkerGrpcApi.TestInstructionInstanceVersionsMessage
	(*TestInstructionInstanceVersionMessage)(nil),                                       // 3: fenixExecutionWorkerGrpcApi.TestInstructionInstanceVersionMessage
	(*TestInstructionMessage)(nil),                                                      // 4: fenixExecutionWorkerGrpcApi.TestInstructionMessage
	(*TestInstructionBaseMessage)(nil),                                                  // 5: fenixExecutionWorkerGrpcApi.TestInstructionBaseMessage
	(*BasicTestInstructionInformationMessage)(nil),                                      // 6: fenixExecutionWorkerGrpcApi.BasicTestInstructionInformationMessage
	(*ImmatureTestInstructionInformationMessage)(nil),                                   // 7: fenixExecutionWorkerGrpcApi.ImmatureTestInstructionInformationMessage
	(*TestInstructionAttributeMessage)(nil),                                             // 8: fenixExecutionWorkerGrpcApi.TestInstructionAttributeMessage
	(*ImmatureElementModelMessage)(nil),                                                 // 9: fenixExecutionWorkerGrpcApi.ImmatureElementModelMessage
	(*SupportedTestInstructionContainersMessage)(nil),                                   // 10: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainersMessage
	(*TestInstructionContainerInstanceVersionsMessage)(nil),                             // 11: fenixExecutionWorkerGrpcApi.TestInstructionContainerInstanceVersionsMessage
	(*TestInstructionContainerInstanceVersionMessage)(nil),                              // 12: fenixExecutionWorkerGrpcApi.TestInstructionContainerInstanceVersionMessage
	(*TestInstructionContainerMessage)(nil),                                             // 13: fenixExecutionWorkerGrpcApi.TestInstructionContainerMessage
	(*TestInstructionContainerBaseMessage)(nil),                                         // 14: fenixExecutionWorkerGrpcApi.TestInstructionContainerBaseMessage
	(*BasicTestInstructionContainerInformationMessage)(nil),                             // 15: fenixExecutionWorkerGrpcApi.BasicTestInstructionContainerInformationMessage
	(*ImmatureTestInstructionContainerInformationMessage)(nil),                          // 16: fenixExecutionWorkerGrpcApi.ImmatureTestInstructionContainerInformationMessage
	(*SupportedAllowedUsersMessage)(nil),                                                // 17: fenixExecutionWorkerGrpcApi.SupportedAllowedUsersMessage
	(*AllowedUserMessage)(nil),                                                          // 18: fenixExecutionWorkerGrpcApi.AllowedUserMessage
	nil,                                                                                 // 19: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsMessage.TestInstructionsMapEntry
	nil,                                                                                 // 20: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainersMessage.TestInstructionsMapEntry
	(*ClientSystemIdentificationMessage)(nil),                                           // 21: fenixExecutionWorkerGrpcApi.ClientSystemIdentificationMessage
	(*timestamp.Timestamp)(nil),                                                         // 22: google.protobuf.Timestamp
}
var file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_depIdxs = []int32{
	21, // 0: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage.ClientSystemIdentification:type_name -> fenixExecutionWorkerGrpcApi.ClientSystemIdentificationMessage
	1,  // 1: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage.TestInstructions:type_name -> fenixExecutionWorkerGrpcApi.SupportedTestInstructionsMessage
	10, // 2: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage.TestInstructionContainers:type_name -> fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainersMessage
	17, // 3: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage.AllowedUsers:type_name -> fenixExecutionWorkerGrpcApi.SupportedAllowedUsersMessage
	22, // 4: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage.MessageCreationTimeStamp:type_name -> google.protobuf.Timestamp
	19, // 5: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsMessage.TestInstructionsMap:type_name -> fenixExecutionWorkerGrpcApi.SupportedTestInstructionsMessage.TestInstructionsMapEntry
	3,  // 6: fenixExecutionWorkerGrpcApi.TestInstructionInstanceVersionsMessage.TestInstructionVersions:type_name -> fenixExecutionWorkerGrpcApi.TestInstructionInstanceVersionMessage
	4,  // 7: fenixExecutionWorkerGrpcApi.TestInstructionInstanceVersionMessage.TestInstructionInstance:type_name -> fenixExecutionWorkerGrpcApi.TestInstructionMessage
	5,  // 8: fenixExecutionWorkerGrpcApi.TestInstructionMessage.TestInstruction:type_name -> fenixExecutionWorkerGrpcApi.TestInstructionBaseMessage
	6,  // 9: fenixExecutionWorkerGrpcApi.TestInstructionMessage.BasicTestInstructionInformation:type_name -> fenixExecutionWorkerGrpcApi.BasicTestInstructionInformationMessage
	7,  // 10: fenixExecutionWorkerGrpcApi.TestInstructionMessage.ImmatureTestInstructionInformations:type_name -> fenixExecutionWorkerGrpcApi.ImmatureTestInstructionInformationMessage
	8,  // 11: fenixExecutionWorkerGrpcApi.TestInstructionMessage.TestInstructionAttributes:type_name -> fenixExecutionWorkerGrpcApi.TestInstructionAttributeMessage
	9,  // 12: fenixExecutionWorkerGrpcApi.TestInstructionMessage.ImmatureElementModel:type_name -> fenixExecutionWorkerGrpcApi.ImmatureElementModelMessage
	20, // 13: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainersMessage.TestInstructionsMap:type_name -> fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainersMessage.TestInstructionsMapEntry
	12, // 14: fenixExecutionWorkerGrpcApi.TestInstructionContainerInstanceVersionsMessage.TestInstructionContainerVersions:type_name -> fenixExecutionWorkerGrpcApi.TestInstructionContainerInstanceVersionMessage
	13, // 15: fenixExecutionWorkerGrpcApi.TestInstructionContainerInstanceVersionMessage.TestInstructionContainerInstance:type_name -> fenixExecutionWorkerGrpcApi.TestInstructionContainerMessage
	14, // 16: fenixExecutionWorkerGrpcApi.TestInstructionContainerMessage.TestInstructionContainer:type_name -> fenixExecutionWorkerGrpcApi.TestInstructionContainerBaseMessage
	15, // 17: fenixExecutionWorkerGrpcApi.TestInstructionContainerMessage.BasicTestInstructionContainerInformation:type_name -> fenixExecutionWorkerGrpcApi.BasicTestInstructionContainerInformationMessage
	16, // 18: fenixExecutionWorkerGrpcApi.TestInstructionContainerMessage.ImmatureTestInstructionContainerInformations:type_name -> fenixExecutionWorkerGrpcApi.ImmatureTestInstructionContainerInformationMessage
	9,  // 19: fenixExecutionWorkerGrpcApi.TestInstructionContainerMessage.ImmatureElementModel:type_name -> fenixExecutionWorkerGrpcApi.ImmatureElementModelMessage
	18, // 20: fenixExecutionWorkerGrpcApi.SupportedAllowedUsersMessage.AllowedUsers:type_name -> fenixExecutionWorkerGrpcApi.AllowedUserMessage
	2,  // 21: fenixExecutionWorkerGrpcApi.SupportedTestInstructionsMessage.TestInstructionsMapEntry.value:type_name -> fenixExecutionWorkerGrpcApi.TestInstructionInstanceVersionsMessage
	11, // 22: fenixExecutionWorkerGrpcApi.SupportedTestInstructionContainersMessage.TestInstructionsMapEntry.value:type_name -> fenixExecutionWorkerGrpcApi.TestInstructionContainerInstanceVersionsMessage
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() {
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_init()
}
func file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_init() {
	if File_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto != nil {
		return
	}
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_GeneralMessagesAndEnums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedTestInstructionsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionInstanceVersionsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionInstanceVersionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionBaseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicTestInstructionInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmatureTestInstructionInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionAttributeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmatureElementModelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedTestInstructionContainersMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionContainerInstanceVersionsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionContainerInstanceVersionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionContainerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionContainerBaseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicTestInstructionContainerInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmatureTestInstructionContainerInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedAllowedUsersMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllowedUserMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_goTypes,
		DependencyIndexes: file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_depIdxs,
		MessageInfos:      file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_msgTypes,
	}.Build()
	File_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto = out.File
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_rawDesc = nil
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_goTypes = nil
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_proto_depIdxs = nil
}
