// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: FenixExecutionServer/fenixExecutionWorkerGrpcApi/fenixExecutionWorkerGrpcApi_TestDataMessages.proto

package go_grpc_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The Message that Connector sends and holds TestData for one TestDataArea from a "simple" TestData-file.
type TestDataFromSimpleTestDataAreaFileMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSystemIdentification          *ClientSystemIdentificationMessage              `protobuf:"bytes,1,opt,name=ClientSystemIdentification,proto3" json:"ClientSystemIdentification,omitempty"`                   // Identifies Client System and Proto-file version used
	TestDataFromSimpleTestDataAreaFiles []*TestDataFromOneSimpleTestDataAreaFileMessage `protobuf:"bytes,2,rep,name=TestDataFromSimpleTestDataAreaFiles,proto3" json:"TestDataFromSimpleTestDataAreaFiles,omitempty"` // The message to be Signe
}

func (x *TestDataFromSimpleTestDataAreaFileMessage) Reset() {
	*x = TestDataFromSimpleTestDataAreaFileMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataFromSimpleTestDataAreaFileMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataFromSimpleTestDataAreaFileMessage) ProtoMessage() {}

func (x *TestDataFromSimpleTestDataAreaFileMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataFromSimpleTestDataAreaFileMessage.ProtoReflect.Descriptor instead.
func (*TestDataFromSimpleTestDataAreaFileMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_rawDescGZIP(), []int{0}
}

func (x *TestDataFromSimpleTestDataAreaFileMessage) GetClientSystemIdentification() *ClientSystemIdentificationMessage {
	if x != nil {
		return x.ClientSystemIdentification
	}
	return nil
}

func (x *TestDataFromSimpleTestDataAreaFileMessage) GetTestDataFromSimpleTestDataAreaFiles() []*TestDataFromOneSimpleTestDataAreaFileMessage {
	if x != nil {
		return x.TestDataFromSimpleTestDataAreaFiles
	}
	return nil
}

// TestData from a Simple-file for one TestDataArea
type TestDataFromOneSimpleTestDataAreaFileMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataDomainUuid                              string                                                   `protobuf:"bytes,1,opt,name=TestDataDomainUuid,proto3" json:"TestDataDomainUuid,omitempty"`                                                           // The UUID of the Domain that the TestData belongs to
	TestDataDomainName                              string                                                   `protobuf:"bytes,2,opt,name=TestDataDomainName,proto3" json:"TestDataDomainName,omitempty"`                                                           // The Name of the Domain that the TestData belongs to
	TestDataDomainTemplateName                      string                                                   `protobuf:"bytes,3,opt,name=TestDataDomainTemplateName,proto3" json:"TestDataDomainTemplateName,omitempty"`                                           // The name used in Template to reference correct Domain- This name can't have any spaces in it
	TestDataAreaUuid                                string                                                   `protobuf:"bytes,4,opt,name=TestDataAreaUuid,proto3" json:"TestDataAreaUuid,omitempty"`                                                               // The UUID of the TestData-area in Domain that the TestData belongs to
	TestDataAreaName                                string                                                   `protobuf:"bytes,5,opt,name=TestDataAreaName,proto3" json:"TestDataAreaName,omitempty"`                                                               // The Name of  the TestData-area in Domain that the TestData belongs to
	HeadersForTestDataFromOneSimpleTestDataAreaFile []*HeaderForTestDataFromOneSimpleTestDataAreaFileMessage `protobuf:"bytes,6,rep,name=HeadersForTestDataFromOneSimpleTestDataAreaFile,proto3" json:"HeadersForTestDataFromOneSimpleTestDataAreaFile,omitempty"` // All headers for the TestData
	SimpleTestDataRows                              []*SimpleTestDataRowMessage                              `protobuf:"bytes,7,rep,name=SimpleTestDataRows,proto3" json:"SimpleTestDataRows,omitempty"`                                                           // All TestDataRows belonging to a simple TestData-file
	TestDataFileSha256Hash                          string                                                   `protobuf:"bytes,8,opt,name=TestDataFileSha256Hash,proto3" json:"TestDataFileSha256Hash,omitempty"`                                                   // The sha256 file hash for the simple TestData-file
	ImportantDataInFileSha256Hash                   string                                                   `protobuf:"bytes,9,opt,name=ImportantDataInFileSha256Hash,proto3" json:"ImportantDataInFileSha256Hash,omitempty"`                                     // The sha256 of the following data in file;  TestDataDomainUuid, TestDataAreaUuid, SimpleTestDataRows
}

func (x *TestDataFromOneSimpleTestDataAreaFileMessage) Reset() {
	*x = TestDataFromOneSimpleTestDataAreaFileMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataFromOneSimpleTestDataAreaFileMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataFromOneSimpleTestDataAreaFileMessage) ProtoMessage() {}

func (x *TestDataFromOneSimpleTestDataAreaFileMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataFromOneSimpleTestDataAreaFileMessage.ProtoReflect.Descriptor instead.
func (*TestDataFromOneSimpleTestDataAreaFileMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_rawDescGZIP(), []int{1}
}

func (x *TestDataFromOneSimpleTestDataAreaFileMessage) GetTestDataDomainUuid() string {
	if x != nil {
		return x.TestDataDomainUuid
	}
	return ""
}

func (x *TestDataFromOneSimpleTestDataAreaFileMessage) GetTestDataDomainName() string {
	if x != nil {
		return x.TestDataDomainName
	}
	return ""
}

func (x *TestDataFromOneSimpleTestDataAreaFileMessage) GetTestDataDomainTemplateName() string {
	if x != nil {
		return x.TestDataDomainTemplateName
	}
	return ""
}

func (x *TestDataFromOneSimpleTestDataAreaFileMessage) GetTestDataAreaUuid() string {
	if x != nil {
		return x.TestDataAreaUuid
	}
	return ""
}

func (x *TestDataFromOneSimpleTestDataAreaFileMessage) GetTestDataAreaName() string {
	if x != nil {
		return x.TestDataAreaName
	}
	return ""
}

func (x *TestDataFromOneSimpleTestDataAreaFileMessage) GetHeadersForTestDataFromOneSimpleTestDataAreaFile() []*HeaderForTestDataFromOneSimpleTestDataAreaFileMessage {
	if x != nil {
		return x.HeadersForTestDataFromOneSimpleTestDataAreaFile
	}
	return nil
}

func (x *TestDataFromOneSimpleTestDataAreaFileMessage) GetSimpleTestDataRows() []*SimpleTestDataRowMessage {
	if x != nil {
		return x.SimpleTestDataRows
	}
	return nil
}

func (x *TestDataFromOneSimpleTestDataAreaFileMessage) GetTestDataFileSha256Hash() string {
	if x != nil {
		return x.TestDataFileSha256Hash
	}
	return ""
}

func (x *TestDataFromOneSimpleTestDataAreaFileMessage) GetImportantDataInFileSha256Hash() string {
	if x != nil {
		return x.ImportantDataInFileSha256Hash
	}
	return ""
}

// Message holding one header from a "Simple" TestDataArea-file
type HeaderForTestDataFromOneSimpleTestDataAreaFileMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldHeaderActAsFilter bool   `protobuf:"varint,1,opt,name=ShouldHeaderActAsFilter,proto3" json:"ShouldHeaderActAsFilter,omitempty"` // Will this 'header' be in the filter when user filters for correct TestData
	HeaderName              string `protobuf:"bytes,2,opt,name=HeaderName,proto3" json:"HeaderName,omitempty"`                            // The Name of the Column. This name can't have any spaces in it and is used in Templates
	HeaderUiName            string `protobuf:"bytes,3,opt,name=HeaderUiName,proto3" json:"HeaderUiName,omitempty"`                        // The Name that will be presented in the GUI. Can have spaces in it
}

func (x *HeaderForTestDataFromOneSimpleTestDataAreaFileMessage) Reset() {
	*x = HeaderForTestDataFromOneSimpleTestDataAreaFileMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderForTestDataFromOneSimpleTestDataAreaFileMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderForTestDataFromOneSimpleTestDataAreaFileMessage) ProtoMessage() {}

func (x *HeaderForTestDataFromOneSimpleTestDataAreaFileMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderForTestDataFromOneSimpleTestDataAreaFileMessage.ProtoReflect.Descriptor instead.
func (*HeaderForTestDataFromOneSimpleTestDataAreaFileMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_rawDescGZIP(), []int{2}
}

func (x *HeaderForTestDataFromOneSimpleTestDataAreaFileMessage) GetShouldHeaderActAsFilter() bool {
	if x != nil {
		return x.ShouldHeaderActAsFilter
	}
	return false
}

func (x *HeaderForTestDataFromOneSimpleTestDataAreaFileMessage) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

func (x *HeaderForTestDataFromOneSimpleTestDataAreaFileMessage) GetHeaderUiName() string {
	if x != nil {
		return x.HeaderUiName
	}
	return ""
}

// One TestDataRow for TestData from a "Simple" TestData-file
type SimpleTestDataRowMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataValue []string `protobuf:"bytes,1,rep,name=TestDataValue,proto3" json:"TestDataValue,omitempty"` // All values in a TestDataRow that belongs to a SimpleTestData-file
}

func (x *SimpleTestDataRowMessage) Reset() {
	*x = SimpleTestDataRowMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleTestDataRowMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleTestDataRowMessage) ProtoMessage() {}

func (x *SimpleTestDataRowMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleTestDataRowMessage.ProtoReflect.Descriptor instead.
func (*SimpleTestDataRowMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_rawDescGZIP(), []int{3}
}

func (x *SimpleTestDataRowMessage) GetTestDataValue() []string {
	if x != nil {
		return x.TestDataValue
	}
	return nil
}

var File_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto protoreflect.FileDescriptor

var file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_rawDesc = []byte{
	0x0a, 0x63, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x1a, 0x6a, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x41, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9,
	0x02, 0x0a, 0x29, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x65,
	0x61, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7e, 0x0a, 0x1a,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9b, 0x01, 0x0a,
	0x23, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x65, 0x61, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x6e, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x65, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x23, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x41, 0x72, 0x65, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xca, 0x05, 0x0a, 0x2c, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x6e, 0x65, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x65, 0x61,
	0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x65, 0x61, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x72, 0x65, 0x61, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x41, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x65, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0xbc, 0x01, 0x0a, 0x2f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x46,
	0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x6e,
	0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x72, 0x65, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f,
	0x6d, 0x4f, 0x6e, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x72, 0x65, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x2f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x6e, 0x65, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x65, 0x61, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x44, 0x0a, 0x1d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x48, 0x61, 0x73, 0x68, 0x22, 0xb5, 0x01, 0x0a, 0x35, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f,
	0x6d, 0x4f, 0x6e, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x72, 0x65, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x41, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x41, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x55, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x55, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x40, 0x0a, 0x18, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_rawDescOnce sync.Once
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_rawDescData = file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_rawDesc
)

func file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_rawDescGZIP() []byte {
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_rawDescOnce.Do(func() {
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_rawDescData)
	})
	return file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_rawDescData
}

var file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_goTypes = []interface{}{
	(*TestDataFromSimpleTestDataAreaFileMessage)(nil),             // 0: fenixExecutionWorkerGrpcApi.TestDataFromSimpleTestDataAreaFileMessage
	(*TestDataFromOneSimpleTestDataAreaFileMessage)(nil),          // 1: fenixExecutionWorkerGrpcApi.TestDataFromOneSimpleTestDataAreaFileMessage
	(*HeaderForTestDataFromOneSimpleTestDataAreaFileMessage)(nil), // 2: fenixExecutionWorkerGrpcApi.HeaderForTestDataFromOneSimpleTestDataAreaFileMessage
	(*SimpleTestDataRowMessage)(nil),                              // 3: fenixExecutionWorkerGrpcApi.SimpleTestDataRowMessage
	(*ClientSystemIdentificationMessage)(nil),                     // 4: fenixExecutionWorkerGrpcApi.ClientSystemIdentificationMessage
}
var file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_depIdxs = []int32{
	4, // 0: fenixExecutionWorkerGrpcApi.TestDataFromSimpleTestDataAreaFileMessage.ClientSystemIdentification:type_name -> fenixExecutionWorkerGrpcApi.ClientSystemIdentificationMessage
	1, // 1: fenixExecutionWorkerGrpcApi.TestDataFromSimpleTestDataAreaFileMessage.TestDataFromSimpleTestDataAreaFiles:type_name -> fenixExecutionWorkerGrpcApi.TestDataFromOneSimpleTestDataAreaFileMessage
	2, // 2: fenixExecutionWorkerGrpcApi.TestDataFromOneSimpleTestDataAreaFileMessage.HeadersForTestDataFromOneSimpleTestDataAreaFile:type_name -> fenixExecutionWorkerGrpcApi.HeaderForTestDataFromOneSimpleTestDataAreaFileMessage
	3, // 3: fenixExecutionWorkerGrpcApi.TestDataFromOneSimpleTestDataAreaFileMessage.SimpleTestDataRows:type_name -> fenixExecutionWorkerGrpcApi.SimpleTestDataRowMessage
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() {
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_init()
}
func file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_init() {
	if File_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto != nil {
		return
	}
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_GeneralMessagesAndEnums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataFromSimpleTestDataAreaFileMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataFromOneSimpleTestDataAreaFileMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderForTestDataFromOneSimpleTestDataAreaFileMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleTestDataRowMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_goTypes,
		DependencyIndexes: file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_depIdxs,
		MessageInfos:      file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_msgTypes,
	}.Build()
	File_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto = out.File
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_rawDesc = nil
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_goTypes = nil
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_TestDataMessages_proto_depIdxs = nil
}
