syntax = "proto3";
package fenixExecutionWorkerGrpcApi;
option go_package = "./go_grpc_api";

import "google/protobuf/timestamp.proto";
import "FenixExecutionServer/fenixExecutionWorkerGrpcApi/fenixExecutionWorkerGrpcApi_GeneralMessagesAndEnums.proto";


// Request used by Execution Server to initiate an TestInstruction Execution by Execution Client
message ProcessTestInstructionExecutionReveredRequest {
  CurrentFenixExecutionWorkerProtoFileVersionEnum ProtoFileVersionUsedByClient = 1; // The latest proto file version number to be used
  TestInstructionExecutionMessage TestInstruction = 2; // The TestInstruction itself an its attributes

  message TestInstructionExecutionMessage {
    string TestInstructionExecutionUuid = 1; // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
    string TestInstructionUuid = 2; // TestInstruction UUID, set by Client system
    string TestInstructionName = 3; // TestInstruction Name, set by Client system
    uint32 MajorVersionNumber = 4; // Major Version Number
    uint32 MinorVersionNumber = 5; // Minor Version Number
    repeated TestInstructionAttributeMessage TestInstructionAttributes = 6; // A list of all attributes for the TestInstruction
  }

  message TestInstructionAttributeMessage {
    TestInstructionAttributeTypeEnum TestInstructionAttributeType = 1; // Defines witch type attribute; TEXTBOX, COMBOBOX...
    string TestInstructionAttributeUuid = 2; // The unique uuid for the TestInstructionAttribute, set by client system
    string TestInstructionAttributeName = 3; // The name of the TestInstructionAttribute
    string AttributeValueAsString = 4; // The String-representation of the value
    string AttributeValueUuid = 5; // Combo-boxes can us a UUID as unique value behind the text visible in the combo-box
    string TestInstructionAttributeTypeUuid = 7; // The unique uuid for the TestInstructionAttribute-type, used to extract certain attributes types in Connector (CA)
    string TestInstructionAttributeTypeName = 8; // The name for the TestInstructionAttribute-type, used to group attributes in GUI
  }

  TestDataMessage TestData = 7; // TestData used in TestExecution

  message TestDataMessage {
    string TestDataSetUuid = 1; // Reference to TestDataSet held by client system to understand what testdata to use
    repeated ManualOverrideForTestDataMessage ManualOverrideForTestData = 2; // If the user has done manual changes to testdata then that is specified here

    message ManualOverrideForTestDataMessage {
      string TestDataSetAttributeUuid = 1; // A unique reference for the specified TestDataSetAttribute
      string TestDataSetAttributeName = 2; // The name of the TestDataSetAttribute
      string TestDataSetAttributeValue = 3; // The value for the TestDataSetAttribute to be used within the test
    }
  }

}

// Response from execution client to execution server that client can execute TestInstruction
message ProcessTestInstructionExecutionResponse {
  AckNackResponse AckNackResponse = 1;
  string TestInstructionExecutionUuid = 2; // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
  google.protobuf.Timestamp ExpectedExecutionDuration = 3; // The expected time during an execution result can be expected back to execution server
  bool TestInstructionCanBeReExecuted = 4; // Indicates if the TestInstruction can be resent to be re-executed. Good example is validations that can be don't as many times as needed
}

// This message is sent from Fenix Execution Server, to Client System, to request something for a specific TestInstruction-execution
message TestInstructionExecutionRequestMessage {
  CurrentFenixExecutionWorkerProtoFileVersionEnum ProtoFileVersionUsedByClient = 1; // The latest proto file version number to be used
  string TestInstructionExecutionUuid = 2; // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server

}
// This message is sent from Fenix Execution Server, stream LogPostsMessageto Client System, to request current execution result/status for a TestInstruction
message CurrentTestInstructionExecutionResultRequestMessage {
  CurrentFenixExecutionWorkerProtoFileVersionEnum ProtoFileVersionUsedByClient = 1; // The latest proto file version number to be used
  string TestInstructionExecutionUuid = 2; // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
}


// This message is sent from Client System, to Fenix Execution Server via a Execution Worker, when a TestExecution has stopped executed, and the result is final (OK or not OK result)
message FinalTestInstructionExecutionResultMessage {
  ClientSystemIdentificationMessage ClientSystemIdentification = 1; // Identifies Client System and Proto-file version used
  string TestInstructionExecutionUuid = 2; // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
  string TestInstructionExecutionVersion = 3; // The version number for the TestInstructionExecution, set by Fenix Execution Server
  TestInstructionExecutionStatusEnum TestInstructionExecutionStatus = 4; // The final status for the TestInstruction-execution
  google.protobuf.Timestamp TestInstructionExecutionStartTimeStamp = 5; // The TimeStamp for when the TestInstructionExecution started
  google.protobuf.Timestamp TestInstructionExecutionEndTimeStamp = 6; // The TimeStamp for when the TestInstructionExecution ended
  repeated ResponseVariableMessage ResponseVariables = 7; // Connector can send back variables to be used by later TestInstructionExecutions
  repeated LogPostMessage LogPosts = 8; // The container containing the actual log information

  message ResponseVariableMessage {
    string ResponseVariableUuid = 1; // The UUID of the Variable
    string ResponseVariableName = 2; // The Name of the Variable
    string ResponseVariableTypeUuid = 3; // The UUID for the type ResponseVariable. Used for matching as input to TestInstruction
    string ResponseVariableTypeName = 4; // The Name for the type ResponseVariable
    string ResponseVariableValueAsString = 5; // The string representation of the Variable
  }

  message LogPostMessage {
    string LogPostUuid = 1; // The unique uuid for this log post
    google.protobuf.Timestamp LogPostTimeStamp = 2; // The TimeStamp for the specific log post
    LogPostStatusEnum LogPostStatus = 3; // The status for the log post
    string LogPostText = 4; // Information text for log post
    repeated FoundVersusExpectedValueForVariableMessage FoundVersusExpectedValueForVariable = 5; // A list of variables with their found versus expected values, in string representations

    message FoundVersusExpectedValueForVariableMessage {
      string VariableName = 1; // The Name of the variable that is was validated
      string VariableDescription = 2; // A longer description of  the variable that is was validated
      FoundVersusExpectedValueMessage FoundVersusExpectedValue = 3; // Found values vs Expected value
    }

    message FoundVersusExpectedValueMessage {
      string FoundValue = 1; // The value that was found
      string ExpectedValue = 2; // The value that was expected
    }
  }
}

// This message is a log post message that can be sent any time from Client System to Fenix Execution Server
message LogPostsMessage {
  ClientSystemIdentificationMessage ClientSystemIdentification = 1; // Identifies Client System and Proto-file version used
  string LogPostUuid = 2; // A unique uuid for the log post
  repeated LogPostMessage LogPosts = 3; // The container containing the actual log information

  message LogPostMessage {
    google.protobuf.Timestamp LogPostTimeStamp = 1; // The TimeStamp for the specific log post
    LogPostStatusEnum LogPostStatus = 2; // The status for the log post
    string LogPostText = 3; // Information text for log post
    repeated FoundVersusExpectedValueMessage FoundVersusExpectedValue = 4; // A list with found versus expected values, in string representations

    message FoundVersusExpectedValueMessage {
      string FoundValue = 1; // The value that was found
      string ExpectedValue = 2; // The value that was expected
    }
  }
}

// Response from execution client to execution worker using direct gRPC call instead of doing response on call, due to it is not possible to call Worker from Connector
message ProcessTestInstructionExecutionReversedResponse {
  AckNackResponse AckNackResponse = 1;
  string TestInstructionExecutionUuid = 2; // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
  google.protobuf.Timestamp ExpectedExecutionDuration = 3; // The expected time during an execution result can be expected back to execution server
  bool TestInstructionCanBeReExecuted = 4; // Indicates if the TestInstruction can be resent to be re-executed. Good example is validations that can be don't as many times as needed
}

// Message from Connector to Worker says that it is alive and can receive work or if Connector will shut down
message ConnectorIsReadyMessage {
  ClientSystemIdentificationMessage ClientSystemIdentification = 1; // Identifies Client System and Proto-file version used
  ConnectorIsReadyEnum ConnectorIsReady = 2; // The values the Connector sends to the Worker to tell it's status
}

// Message from Worker to Connector when Connector says that it is alive and can receive work or if Connector will shut down
message ConnectorIsReadyResponseMessage {
  AckNackResponse AckNackResponse = 1;
}