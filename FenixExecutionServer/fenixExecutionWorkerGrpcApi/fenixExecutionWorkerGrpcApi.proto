syntax = "proto3";
package fenixExecutionWorkerGrpcApi;
option go_package = "./go_grpc_api";
option csharp_namespace = "FenixExecutionWorkerGrpcApi";

import "FenixExecutionServer/fenixExecutionWorkerGrpcApi/fenixExecutionWorkerGrpcApi_GeneralMessagesAndEnums.proto";
import "FenixExecutionServer/fenixExecutionWorkerGrpcApi/fenixExecutionWorkerGrpcApi_Messages.proto";


// ****************************************************************************************************
//

service FenixExecutionWorkerGrpcServices {

  // ************************ Admin ************************

  //Anyone can check if Fenix Execution Worker is alive with this service
  rpc AreYouAlive (EmptyParameter) returns (AckNackResponse) {
  }

  // Ask Client to inform Execution Server of Clients capability to execute requests in parallell, serial or no processing at all
  rpc ReportProcessingCapability (EmptyParameter) returns (AckNackResponse) {
  }

  // ************************ Execution Task ************************

  // Fenix Execution Server send a request to Execution Worker to initiate a execution of a TestInstruction
  rpc ProcessTestInstructionExecution(ProcessTestInstructionExecutionRequest) returns (ProcessTestInstructionExecutionResponse) {

  }

  // ************************ Ask for Execution Status ************************

  // Execution Server ask Worker (client) to report the final results of the execution result to the Server
  rpc ReportCompleteTestInstructionExecutionResult (TestInstructionExecutionRequestMessage) returns (AckNackResponse) {
  }

  // Execution Server ask Worker (client) to report the ongoing results of the execution result to the Server
  rpc ReportCurrentTestInstructionExecutionResult (TestInstructionExecutionRequestMessage) returns (AckNackResponse) {
  }

  // Execution Server ask Worker (client) to report all log posts of the execution result to the Server
  rpc SendAllLogPostForExecution(TestInstructionExecutionRequestMessage) returns (AckNackResponse) {
  }

}


//
service FenixExecutionWorkerConnectorGrpcServices {
  //Anyone can check if Fenix Execution Worker is alive with this service
  rpc AreYouAlive (EmptyParameter) returns (AckNackResponse) {
  }


  // When a TestInstruction has been fully executed the Client use this to inform the results of the execution result to the Server
  rpc ReportCompleteTestInstructionExecutionResult (FinalTestInstructionExecutionResultMessage) returns (AckNackResponse) {
  }


  // This gPRC-methods is used when a Execution Connector needs to have its TestInstruction assignments using reverse streaming
  // Execution Connector opens the gPRC-channel and assignments are then streamed back to Connector from Worker
  rpc ConnectorRequestForProcessTestInstructionExecution(EmptyParameter) returns (stream ProcessTestInstructionExecutionRequest) {

  }



}



