// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FenixExecutionConnectorGrpcServicesClient is the client API for FenixExecutionConnectorGrpcServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FenixExecutionConnectorGrpcServicesClient interface {
	//Check if Fenix Execution Connector is alive with this service
	AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	//Ask Connector to check if Fenix Execution Worker is alive with this service
	WorkerAreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Trigger Connector to inform Execution Worker of Clients capability to execute requests in parallell, serial or no processing at all(right now)
	TriggerReportProcessingCapability(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Trigger Connector to inform Worker of the final execution results for an execution
	TriggerReportCompleteTestInstructionExecutionResult(ctx context.Context, in *TriggerTestInstructionExecutionResultMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Trigger Connector to inform Worker of the current execution results for an execution
	TriggerReportCurrentTestInstructionExecutionResult(ctx context.Context, in *TriggerTestInstructionExecutionResultMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Trigger Connector to inform Worker of all log posts that have been produced for an execution
	TriggerSendAllLogPostForExecution(ctx context.Context, in *TriggerTestInstructionExecutionResultMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Trigger Execution Connector to set up gPRC-connection for sending TestInstructionsExecutions to Connector using streaming responses
	TriggerRequestForTestInstructionExecutionToProcess(ctx context.Context, in *TriggerTestInstructionExecutionResultMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
}

type fenixExecutionConnectorGrpcServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewFenixExecutionConnectorGrpcServicesClient(cc grpc.ClientConnInterface) FenixExecutionConnectorGrpcServicesClient {
	return &fenixExecutionConnectorGrpcServicesClient{cc}
}

func (c *fenixExecutionConnectorGrpcServicesClient) AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionConnectorGrpcApi.FenixExecutionConnectorGrpcServices/AreYouAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionConnectorGrpcServicesClient) WorkerAreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionConnectorGrpcApi.FenixExecutionConnectorGrpcServices/WorkerAreYouAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionConnectorGrpcServicesClient) TriggerReportProcessingCapability(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionConnectorGrpcApi.FenixExecutionConnectorGrpcServices/TriggerReportProcessingCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionConnectorGrpcServicesClient) TriggerReportCompleteTestInstructionExecutionResult(ctx context.Context, in *TriggerTestInstructionExecutionResultMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionConnectorGrpcApi.FenixExecutionConnectorGrpcServices/TriggerReportCompleteTestInstructionExecutionResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionConnectorGrpcServicesClient) TriggerReportCurrentTestInstructionExecutionResult(ctx context.Context, in *TriggerTestInstructionExecutionResultMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionConnectorGrpcApi.FenixExecutionConnectorGrpcServices/TriggerReportCurrentTestInstructionExecutionResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionConnectorGrpcServicesClient) TriggerSendAllLogPostForExecution(ctx context.Context, in *TriggerTestInstructionExecutionResultMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionConnectorGrpcApi.FenixExecutionConnectorGrpcServices/TriggerSendAllLogPostForExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionConnectorGrpcServicesClient) TriggerRequestForTestInstructionExecutionToProcess(ctx context.Context, in *TriggerTestInstructionExecutionResultMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionConnectorGrpcApi.FenixExecutionConnectorGrpcServices/TriggerRequestForTestInstructionExecutionToProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FenixExecutionConnectorGrpcServicesServer is the server API for FenixExecutionConnectorGrpcServices service.
// All implementations must embed UnimplementedFenixExecutionConnectorGrpcServicesServer
// for forward compatibility
type FenixExecutionConnectorGrpcServicesServer interface {
	//Check if Fenix Execution Connector is alive with this service
	AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error)
	//Ask Connector to check if Fenix Execution Worker is alive with this service
	WorkerAreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error)
	// Trigger Connector to inform Execution Worker of Clients capability to execute requests in parallell, serial or no processing at all(right now)
	TriggerReportProcessingCapability(context.Context, *EmptyParameter) (*AckNackResponse, error)
	// Trigger Connector to inform Worker of the final execution results for an execution
	TriggerReportCompleteTestInstructionExecutionResult(context.Context, *TriggerTestInstructionExecutionResultMessage) (*AckNackResponse, error)
	// Trigger Connector to inform Worker of the current execution results for an execution
	TriggerReportCurrentTestInstructionExecutionResult(context.Context, *TriggerTestInstructionExecutionResultMessage) (*AckNackResponse, error)
	// Trigger Connector to inform Worker of all log posts that have been produced for an execution
	TriggerSendAllLogPostForExecution(context.Context, *TriggerTestInstructionExecutionResultMessage) (*AckNackResponse, error)
	// Trigger Execution Connector to set up gPRC-connection for sending TestInstructionsExecutions to Connector using streaming responses
	TriggerRequestForTestInstructionExecutionToProcess(context.Context, *TriggerTestInstructionExecutionResultMessage) (*AckNackResponse, error)
	mustEmbedUnimplementedFenixExecutionConnectorGrpcServicesServer()
}

// UnimplementedFenixExecutionConnectorGrpcServicesServer must be embedded to have forward compatible implementations.
type UnimplementedFenixExecutionConnectorGrpcServicesServer struct {
}

func (UnimplementedFenixExecutionConnectorGrpcServicesServer) AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreYouAlive not implemented")
}
func (UnimplementedFenixExecutionConnectorGrpcServicesServer) WorkerAreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkerAreYouAlive not implemented")
}
func (UnimplementedFenixExecutionConnectorGrpcServicesServer) TriggerReportProcessingCapability(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerReportProcessingCapability not implemented")
}
func (UnimplementedFenixExecutionConnectorGrpcServicesServer) TriggerReportCompleteTestInstructionExecutionResult(context.Context, *TriggerTestInstructionExecutionResultMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerReportCompleteTestInstructionExecutionResult not implemented")
}
func (UnimplementedFenixExecutionConnectorGrpcServicesServer) TriggerReportCurrentTestInstructionExecutionResult(context.Context, *TriggerTestInstructionExecutionResultMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerReportCurrentTestInstructionExecutionResult not implemented")
}
func (UnimplementedFenixExecutionConnectorGrpcServicesServer) TriggerSendAllLogPostForExecution(context.Context, *TriggerTestInstructionExecutionResultMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerSendAllLogPostForExecution not implemented")
}
func (UnimplementedFenixExecutionConnectorGrpcServicesServer) TriggerRequestForTestInstructionExecutionToProcess(context.Context, *TriggerTestInstructionExecutionResultMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerRequestForTestInstructionExecutionToProcess not implemented")
}
func (UnimplementedFenixExecutionConnectorGrpcServicesServer) mustEmbedUnimplementedFenixExecutionConnectorGrpcServicesServer() {
}

// UnsafeFenixExecutionConnectorGrpcServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FenixExecutionConnectorGrpcServicesServer will
// result in compilation errors.
type UnsafeFenixExecutionConnectorGrpcServicesServer interface {
	mustEmbedUnimplementedFenixExecutionConnectorGrpcServicesServer()
}

func RegisterFenixExecutionConnectorGrpcServicesServer(s grpc.ServiceRegistrar, srv FenixExecutionConnectorGrpcServicesServer) {
	s.RegisterService(&FenixExecutionConnectorGrpcServices_ServiceDesc, srv)
}

func _FenixExecutionConnectorGrpcServices_AreYouAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionConnectorGrpcServicesServer).AreYouAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionConnectorGrpcApi.FenixExecutionConnectorGrpcServices/AreYouAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionConnectorGrpcServicesServer).AreYouAlive(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionConnectorGrpcServices_WorkerAreYouAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionConnectorGrpcServicesServer).WorkerAreYouAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionConnectorGrpcApi.FenixExecutionConnectorGrpcServices/WorkerAreYouAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionConnectorGrpcServicesServer).WorkerAreYouAlive(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionConnectorGrpcServices_TriggerReportProcessingCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionConnectorGrpcServicesServer).TriggerReportProcessingCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionConnectorGrpcApi.FenixExecutionConnectorGrpcServices/TriggerReportProcessingCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionConnectorGrpcServicesServer).TriggerReportProcessingCapability(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionConnectorGrpcServices_TriggerReportCompleteTestInstructionExecutionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerTestInstructionExecutionResultMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionConnectorGrpcServicesServer).TriggerReportCompleteTestInstructionExecutionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionConnectorGrpcApi.FenixExecutionConnectorGrpcServices/TriggerReportCompleteTestInstructionExecutionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionConnectorGrpcServicesServer).TriggerReportCompleteTestInstructionExecutionResult(ctx, req.(*TriggerTestInstructionExecutionResultMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionConnectorGrpcServices_TriggerReportCurrentTestInstructionExecutionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerTestInstructionExecutionResultMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionConnectorGrpcServicesServer).TriggerReportCurrentTestInstructionExecutionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionConnectorGrpcApi.FenixExecutionConnectorGrpcServices/TriggerReportCurrentTestInstructionExecutionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionConnectorGrpcServicesServer).TriggerReportCurrentTestInstructionExecutionResult(ctx, req.(*TriggerTestInstructionExecutionResultMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionConnectorGrpcServices_TriggerSendAllLogPostForExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerTestInstructionExecutionResultMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionConnectorGrpcServicesServer).TriggerSendAllLogPostForExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionConnectorGrpcApi.FenixExecutionConnectorGrpcServices/TriggerSendAllLogPostForExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionConnectorGrpcServicesServer).TriggerSendAllLogPostForExecution(ctx, req.(*TriggerTestInstructionExecutionResultMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionConnectorGrpcServices_TriggerRequestForTestInstructionExecutionToProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerTestInstructionExecutionResultMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionConnectorGrpcServicesServer).TriggerRequestForTestInstructionExecutionToProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionConnectorGrpcApi.FenixExecutionConnectorGrpcServices/TriggerRequestForTestInstructionExecutionToProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionConnectorGrpcServicesServer).TriggerRequestForTestInstructionExecutionToProcess(ctx, req.(*TriggerTestInstructionExecutionResultMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// FenixExecutionConnectorGrpcServices_ServiceDesc is the grpc.ServiceDesc for FenixExecutionConnectorGrpcServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FenixExecutionConnectorGrpcServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fenixExecutionConnectorGrpcApi.FenixExecutionConnectorGrpcServices",
	HandlerType: (*FenixExecutionConnectorGrpcServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AreYouAlive",
			Handler:    _FenixExecutionConnectorGrpcServices_AreYouAlive_Handler,
		},
		{
			MethodName: "WorkerAreYouAlive",
			Handler:    _FenixExecutionConnectorGrpcServices_WorkerAreYouAlive_Handler,
		},
		{
			MethodName: "TriggerReportProcessingCapability",
			Handler:    _FenixExecutionConnectorGrpcServices_TriggerReportProcessingCapability_Handler,
		},
		{
			MethodName: "TriggerReportCompleteTestInstructionExecutionResult",
			Handler:    _FenixExecutionConnectorGrpcServices_TriggerReportCompleteTestInstructionExecutionResult_Handler,
		},
		{
			MethodName: "TriggerReportCurrentTestInstructionExecutionResult",
			Handler:    _FenixExecutionConnectorGrpcServices_TriggerReportCurrentTestInstructionExecutionResult_Handler,
		},
		{
			MethodName: "TriggerSendAllLogPostForExecution",
			Handler:    _FenixExecutionConnectorGrpcServices_TriggerSendAllLogPostForExecution_Handler,
		},
		{
			MethodName: "TriggerRequestForTestInstructionExecutionToProcess",
			Handler:    _FenixExecutionConnectorGrpcServices_TriggerRequestForTestInstructionExecutionToProcess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "FenixExecutionServer/fenixExecutionConnectorGrpcApi/fenixExecutionConnectorGrpcApi.proto",
}
