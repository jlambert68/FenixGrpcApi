// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: FenixExecutionServer/fenixExecutionConnectorGrpcApi/fenixExecutionConnectorGrpcApi_Messages.proto

package go_grpc_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message used for Triggering messages from Connector to Worker
type TriggerTestInstructionExecutionResultMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoFileVersionUsedByCaller   CurrentFenixExecutionConnectorProtoFileVersionEnum `protobuf:"varint,1,opt,name=ProtoFileVersionUsedByCaller,proto3,enum=fenixExecutionConnectorGrpcApi.CurrentFenixExecutionConnectorProtoFileVersionEnum" json:"ProtoFileVersionUsedByCaller,omitempty"` // The latest proto file version number to be used
	TestInstructionExecutionUuid   string                                             `protobuf:"bytes,2,opt,name=TestInstructionExecutionUuid,proto3" json:"TestInstructionExecutionUuid,omitempty"`                                                                                         // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
	TestInstructionExecutionStatus TestInstructionExecutionStatusEnum                 `protobuf:"varint,3,opt,name=TestInstructionExecutionStatus,proto3,enum=fenixExecutionConnectorGrpcApi.TestInstructionExecutionStatusEnum" json:"TestInstructionExecutionStatus,omitempty"`             // The final status for the TestInstruction-execution
}

func (x *TriggerTestInstructionExecutionResultMessage) Reset() {
	*x = TriggerTestInstructionExecutionResultMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerTestInstructionExecutionResultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerTestInstructionExecutionResultMessage) ProtoMessage() {}

func (x *TriggerTestInstructionExecutionResultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerTestInstructionExecutionResultMessage.ProtoReflect.Descriptor instead.
func (*TriggerTestInstructionExecutionResultMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_rawDescGZIP(), []int{0}
}

func (x *TriggerTestInstructionExecutionResultMessage) GetProtoFileVersionUsedByCaller() CurrentFenixExecutionConnectorProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByCaller
	}
	return CurrentFenixExecutionConnectorProtoFileVersionEnum_VERSION_0_0
}

func (x *TriggerTestInstructionExecutionResultMessage) GetTestInstructionExecutionUuid() string {
	if x != nil {
		return x.TestInstructionExecutionUuid
	}
	return ""
}

func (x *TriggerTestInstructionExecutionResultMessage) GetTestInstructionExecutionStatus() TestInstructionExecutionStatusEnum {
	if x != nil {
		return x.TestInstructionExecutionStatus
	}
	return TestInstructionExecutionStatusEnum_TIE_INITIATED
}

// Message used for Triggering simulation that Connector received message from  Worker, used for testing
type TriggerPostRestCallForTestInstructionExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckNackResponse                                 *AckNackResponse                                 `protobuf:"bytes,1,opt,name=ackNackResponse,proto3" json:"ackNackResponse,omitempty"`                                                                 // Ack/Nack- Response message with comment
	ProcessTestInstructionExecutionReversedResponse *ProcessTestInstructionExecutionReversedResponse `protobuf:"bytes,2,opt,name=processTestInstructionExecutionReversedResponse,proto3" json:"processTestInstructionExecutionReversedResponse,omitempty"` // Response from execution client to execution worker using direct gRPC call instead of doing response on call, due to it is not possible to call Worker from Connector
	FinalTestInstructionExecutionResultMessage      *FinalTestInstructionExecutionResultMessage      `protobuf:"bytes,3,opt,name=finalTestInstructionExecutionResultMessage,proto3" json:"finalTestInstructionExecutionResultMessage,omitempty"`           // This message is sent from Client System, to Fenix Execution Server via a Execution Worker, when a TestExecution has stopped executed, and the result is final (OK or not OK result)
}

func (x *TriggerPostRestCallForTestInstructionExecutionResponse) Reset() {
	*x = TriggerPostRestCallForTestInstructionExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerPostRestCallForTestInstructionExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerPostRestCallForTestInstructionExecutionResponse) ProtoMessage() {}

func (x *TriggerPostRestCallForTestInstructionExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerPostRestCallForTestInstructionExecutionResponse.ProtoReflect.Descriptor instead.
func (*TriggerPostRestCallForTestInstructionExecutionResponse) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_rawDescGZIP(), []int{1}
}

func (x *TriggerPostRestCallForTestInstructionExecutionResponse) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

func (x *TriggerPostRestCallForTestInstructionExecutionResponse) GetProcessTestInstructionExecutionReversedResponse() *ProcessTestInstructionExecutionReversedResponse {
	if x != nil {
		return x.ProcessTestInstructionExecutionReversedResponse
	}
	return nil
}

func (x *TriggerPostRestCallForTestInstructionExecutionResponse) GetFinalTestInstructionExecutionResultMessage() *FinalTestInstructionExecutionResultMessage {
	if x != nil {
		return x.FinalTestInstructionExecutionResultMessage
	}
	return nil
}

// This message is sent from Client System, to Fenix Execution Server via a Execution Worker, when a TestExecution has stopped executed, and the result is final (OK or not OK result)
type FinalTestInstructionExecutionResultMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSystemIdentification           *ClientSystemIdentificationMessage `protobuf:"bytes,1,opt,name=ClientSystemIdentification,proto3" json:"ClientSystemIdentification,omitempty"`                                                                                 // Identifies Client System and Proto-file version used
	TestInstructionExecutionUuid         string                             `protobuf:"bytes,2,opt,name=TestInstructionExecutionUuid,proto3" json:"TestInstructionExecutionUuid,omitempty"`                                                                             // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
	TestInstructionExecutionStatus       TestInstructionExecutionStatusEnum `protobuf:"varint,3,opt,name=TestInstructionExecutionStatus,proto3,enum=fenixExecutionConnectorGrpcApi.TestInstructionExecutionStatusEnum" json:"TestInstructionExecutionStatus,omitempty"` // The final status for the TestInstruction-execution
	TestInstructionExecutionEndTimeStamp *timestamppb.Timestamp             `protobuf:"bytes,4,opt,name=TestInstructionExecutionEndTimeStamp,proto3" json:"TestInstructionExecutionEndTimeStamp,omitempty"`                                                             // The TimeStamp for when the TestInstructionExecution ended
}

func (x *FinalTestInstructionExecutionResultMessage) Reset() {
	*x = FinalTestInstructionExecutionResultMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalTestInstructionExecutionResultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalTestInstructionExecutionResultMessage) ProtoMessage() {}

func (x *FinalTestInstructionExecutionResultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalTestInstructionExecutionResultMessage.ProtoReflect.Descriptor instead.
func (*FinalTestInstructionExecutionResultMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_rawDescGZIP(), []int{2}
}

func (x *FinalTestInstructionExecutionResultMessage) GetClientSystemIdentification() *ClientSystemIdentificationMessage {
	if x != nil {
		return x.ClientSystemIdentification
	}
	return nil
}

func (x *FinalTestInstructionExecutionResultMessage) GetTestInstructionExecutionUuid() string {
	if x != nil {
		return x.TestInstructionExecutionUuid
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage) GetTestInstructionExecutionStatus() TestInstructionExecutionStatusEnum {
	if x != nil {
		return x.TestInstructionExecutionStatus
	}
	return TestInstructionExecutionStatusEnum_TIE_INITIATED
}

func (x *FinalTestInstructionExecutionResultMessage) GetTestInstructionExecutionEndTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TestInstructionExecutionEndTimeStamp
	}
	return nil
}

// Response from execution client to execution worker using direct gRPC call instead of doing response on call, due to it is not possible to call Worker from Connector
type ProcessTestInstructionExecutionReversedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckNackResponse                *AckNackResponse       `protobuf:"bytes,1,opt,name=AckNackResponse,proto3" json:"AckNackResponse,omitempty"`
	TestInstructionExecutionUuid   string                 `protobuf:"bytes,2,opt,name=TestInstructionExecutionUuid,proto3" json:"TestInstructionExecutionUuid,omitempty"`      // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
	ExpectedExecutionDuration      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ExpectedExecutionDuration,proto3" json:"ExpectedExecutionDuration,omitempty"`            // The expected time during an execution result can be expected back to execution server
	TestInstructionCanBeReExecuted bool                   `protobuf:"varint,4,opt,name=TestInstructionCanBeReExecuted,proto3" json:"TestInstructionCanBeReExecuted,omitempty"` // Indicates if the TestInstruction can be resent to be re-executed. Good example is validations that can be don't as many times as needed
}

func (x *ProcessTestInstructionExecutionReversedResponse) Reset() {
	*x = ProcessTestInstructionExecutionReversedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTestInstructionExecutionReversedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTestInstructionExecutionReversedResponse) ProtoMessage() {}

func (x *ProcessTestInstructionExecutionReversedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTestInstructionExecutionReversedResponse.ProtoReflect.Descriptor instead.
func (*ProcessTestInstructionExecutionReversedResponse) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_rawDescGZIP(), []int{3}
}

func (x *ProcessTestInstructionExecutionReversedResponse) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

func (x *ProcessTestInstructionExecutionReversedResponse) GetTestInstructionExecutionUuid() string {
	if x != nil {
		return x.TestInstructionExecutionUuid
	}
	return ""
}

func (x *ProcessTestInstructionExecutionReversedResponse) GetExpectedExecutionDuration() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpectedExecutionDuration
	}
	return nil
}

func (x *ProcessTestInstructionExecutionReversedResponse) GetTestInstructionCanBeReExecuted() bool {
	if x != nil {
		return x.TestInstructionCanBeReExecuted
	}
	return false
}

var File_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto protoreflect.FileDescriptor

var file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_rawDesc = []byte{
	0x0a, 0x61, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x1a, 0x70, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x6a, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x5b, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x98, 0x03, 0x0a, 0x2c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x96, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65,
	0x64, 0x42, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x8a, 0x01,
	0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1e, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf3, 0x03, 0x0a, 0x36, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b,
	0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x61, 0x63,
	0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb6, 0x01,
	0x0a, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x2a, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x2a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xf1, 0x03, 0x0a, 0x2a, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x81, 0x01, 0x0a, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x42, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x6e, 0x0a, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x24,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0xf2, 0x02, 0x0a, 0x2f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x41, 0x63, 0x6b, 0x4e,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0f, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x19, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x52, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x52,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x42, 0x30, 0x5a, 0x0d, 0x2e, 0x2f, 0x67,
	0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x1e, 0x46, 0x65, 0x6e,
	0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_rawDescOnce sync.Once
	file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_rawDescData = file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_rawDesc
)

func file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_rawDescGZIP() []byte {
	file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_rawDescOnce.Do(func() {
		file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_rawDescData)
	})
	return file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_rawDescData
}

var file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_goTypes = []interface{}{
	(*TriggerTestInstructionExecutionResultMessage)(nil),           // 0: fenixExecutionConnectorGrpcApi.TriggerTestInstructionExecutionResultMessage
	(*TriggerPostRestCallForTestInstructionExecutionResponse)(nil), // 1: fenixExecutionConnectorGrpcApi.TriggerPostRestCallForTestInstructionExecutionResponse
	(*FinalTestInstructionExecutionResultMessage)(nil),             // 2: fenixExecutionConnectorGrpcApi.FinalTestInstructionExecutionResultMessage
	(*ProcessTestInstructionExecutionReversedResponse)(nil),        // 3: fenixExecutionConnectorGrpcApi.ProcessTestInstructionExecutionReversedResponse
	(CurrentFenixExecutionConnectorProtoFileVersionEnum)(0),        // 4: fenixExecutionConnectorGrpcApi.CurrentFenixExecutionConnectorProtoFileVersionEnum
	(TestInstructionExecutionStatusEnum)(0),                        // 5: fenixExecutionConnectorGrpcApi.TestInstructionExecutionStatusEnum
	(*AckNackResponse)(nil),                                        // 6: fenixExecutionWorkerGrpcApi.AckNackResponse
	(*ProcessTestInstructionExecutionReversedResponse)(nil),        // 7: fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReversedResponse
	(*FinalTestInstructionExecutionResultMessage)(nil),             // 8: fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage
	(*ClientSystemIdentificationMessage)(nil),                      // 9: fenixExecutionConnectorGrpcApi.ClientSystemIdentificationMessage
	(*timestamppb.Timestamp)(nil),                                  // 10: google.protobuf.Timestamp
	(*AckNackResponse)(nil),                                        // 11: fenixExecutionConnectorGrpcApi.AckNackResponse
}
var file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_depIdxs = []int32{
	4,  // 0: fenixExecutionConnectorGrpcApi.TriggerTestInstructionExecutionResultMessage.ProtoFileVersionUsedByCaller:type_name -> fenixExecutionConnectorGrpcApi.CurrentFenixExecutionConnectorProtoFileVersionEnum
	5,  // 1: fenixExecutionConnectorGrpcApi.TriggerTestInstructionExecutionResultMessage.TestInstructionExecutionStatus:type_name -> fenixExecutionConnectorGrpcApi.TestInstructionExecutionStatusEnum
	6,  // 2: fenixExecutionConnectorGrpcApi.TriggerPostRestCallForTestInstructionExecutionResponse.ackNackResponse:type_name -> fenixExecutionWorkerGrpcApi.AckNackResponse
	7,  // 3: fenixExecutionConnectorGrpcApi.TriggerPostRestCallForTestInstructionExecutionResponse.processTestInstructionExecutionReversedResponse:type_name -> fenixExecutionWorkerGrpcApi.ProcessTestInstructionExecutionReversedResponse
	8,  // 4: fenixExecutionConnectorGrpcApi.TriggerPostRestCallForTestInstructionExecutionResponse.finalTestInstructionExecutionResultMessage:type_name -> fenixExecutionWorkerGrpcApi.FinalTestInstructionExecutionResultMessage
	9,  // 5: fenixExecutionConnectorGrpcApi.FinalTestInstructionExecutionResultMessage.ClientSystemIdentification:type_name -> fenixExecutionConnectorGrpcApi.ClientSystemIdentificationMessage
	5,  // 6: fenixExecutionConnectorGrpcApi.FinalTestInstructionExecutionResultMessage.TestInstructionExecutionStatus:type_name -> fenixExecutionConnectorGrpcApi.TestInstructionExecutionStatusEnum
	10, // 7: fenixExecutionConnectorGrpcApi.FinalTestInstructionExecutionResultMessage.TestInstructionExecutionEndTimeStamp:type_name -> google.protobuf.Timestamp
	11, // 8: fenixExecutionConnectorGrpcApi.ProcessTestInstructionExecutionReversedResponse.AckNackResponse:type_name -> fenixExecutionConnectorGrpcApi.AckNackResponse
	10, // 9: fenixExecutionConnectorGrpcApi.ProcessTestInstructionExecutionReversedResponse.ExpectedExecutionDuration:type_name -> google.protobuf.Timestamp
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() {
	file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_init()
}
func file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_init() {
	if File_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto != nil {
		return
	}
	file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_GeneralMessagesAndEnums_proto_init()
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_GeneralMessagesAndEnums_proto_init()
	file_FenixExecutionServer_fenixExecutionWorkerGrpcApi_fenixExecutionWorkerGrpcApi_Messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerTestInstructionExecutionResultMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerPostRestCallForTestInstructionExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalTestInstructionExecutionResultMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTestInstructionExecutionReversedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_goTypes,
		DependencyIndexes: file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_depIdxs,
		MessageInfos:      file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_msgTypes,
	}.Build()
	File_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto = out.File
	file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_rawDesc = nil
	file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_goTypes = nil
	file_FenixExecutionServer_fenixExecutionConnectorGrpcApi_fenixExecutionConnectorGrpcApi_Messages_proto_depIdxs = nil
}
