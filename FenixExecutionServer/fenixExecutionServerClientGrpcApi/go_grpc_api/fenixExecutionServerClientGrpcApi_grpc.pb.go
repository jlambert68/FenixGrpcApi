// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FenixExecutionServerClientGrpcServicesClient is the client API for FenixExecutionServerClientGrpcServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FenixExecutionServerClientGrpcServicesClient interface {
	//Anyone can check if Fenix Execution Server Client is alive with this service
	AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Ask Client to inform Execution Server of Clients capability to execute requests in parallell, serial or no processing at all
	ReportProcessingCapability(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Fenix Execution Server send a request to Execution Client to initiate a execution of a TestInstruction
	ProcessTestInstructionExecution(ctx context.Context, in *ProcessTestInstructionExecutionRequest, opts ...grpc.CallOption) (*ProcessTestInstructionExecutionResponse, error)
	// When a TestInstruction has been fully executed the Client use this to inform the results of the execution result to the Server
	ReportCompleteTestInstructionExecutionResult(ctx context.Context, in *TestInstructionExecutionRequestMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// During a TestInstruction execution the Client use this to inform the current of the execution result to the Server
	ReportCurrentTestInstructionExecutionResult(ctx context.Context, in *TestInstructionExecutionRequestMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// During the execution the Client can send log information that can be shown to the user
	SendAllLogPostForExecution(ctx context.Context, in *TestInstructionExecutionRequestMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
}

type fenixExecutionServerClientGrpcServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewFenixExecutionServerClientGrpcServicesClient(cc grpc.ClientConnInterface) FenixExecutionServerClientGrpcServicesClient {
	return &fenixExecutionServerClientGrpcServicesClient{cc}
}

func (c *fenixExecutionServerClientGrpcServicesClient) AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerClientGrpcApi.FenixExecutionServerClientGrpcServices/AreYouAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerClientGrpcServicesClient) ReportProcessingCapability(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerClientGrpcApi.FenixExecutionServerClientGrpcServices/ReportProcessingCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerClientGrpcServicesClient) ProcessTestInstructionExecution(ctx context.Context, in *ProcessTestInstructionExecutionRequest, opts ...grpc.CallOption) (*ProcessTestInstructionExecutionResponse, error) {
	out := new(ProcessTestInstructionExecutionResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerClientGrpcApi.FenixExecutionServerClientGrpcServices/ProcessTestInstructionExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerClientGrpcServicesClient) ReportCompleteTestInstructionExecutionResult(ctx context.Context, in *TestInstructionExecutionRequestMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerClientGrpcApi.FenixExecutionServerClientGrpcServices/ReportCompleteTestInstructionExecutionResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerClientGrpcServicesClient) ReportCurrentTestInstructionExecutionResult(ctx context.Context, in *TestInstructionExecutionRequestMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerClientGrpcApi.FenixExecutionServerClientGrpcServices/ReportCurrentTestInstructionExecutionResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerClientGrpcServicesClient) SendAllLogPostForExecution(ctx context.Context, in *TestInstructionExecutionRequestMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerClientGrpcApi.FenixExecutionServerClientGrpcServices/SendAllLogPostForExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FenixExecutionServerClientGrpcServicesServer is the server API for FenixExecutionServerClientGrpcServices service.
// All implementations must embed UnimplementedFenixExecutionServerClientGrpcServicesServer
// for forward compatibility
type FenixExecutionServerClientGrpcServicesServer interface {
	//Anyone can check if Fenix Execution Server Client is alive with this service
	AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error)
	// Ask Client to inform Execution Server of Clients capability to execute requests in parallell, serial or no processing at all
	ReportProcessingCapability(context.Context, *EmptyParameter) (*AckNackResponse, error)
	// Fenix Execution Server send a request to Execution Client to initiate a execution of a TestInstruction
	ProcessTestInstructionExecution(context.Context, *ProcessTestInstructionExecutionRequest) (*ProcessTestInstructionExecutionResponse, error)
	// When a TestInstruction has been fully executed the Client use this to inform the results of the execution result to the Server
	ReportCompleteTestInstructionExecutionResult(context.Context, *TestInstructionExecutionRequestMessage) (*AckNackResponse, error)
	// During a TestInstruction execution the Client use this to inform the current of the execution result to the Server
	ReportCurrentTestInstructionExecutionResult(context.Context, *TestInstructionExecutionRequestMessage) (*AckNackResponse, error)
	// During the execution the Client can send log information that can be shown to the user
	SendAllLogPostForExecution(context.Context, *TestInstructionExecutionRequestMessage) (*AckNackResponse, error)
	mustEmbedUnimplementedFenixExecutionServerClientGrpcServicesServer()
}

// UnimplementedFenixExecutionServerClientGrpcServicesServer must be embedded to have forward compatible implementations.
type UnimplementedFenixExecutionServerClientGrpcServicesServer struct {
}

func (UnimplementedFenixExecutionServerClientGrpcServicesServer) AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreYouAlive not implemented")
}
func (UnimplementedFenixExecutionServerClientGrpcServicesServer) ReportProcessingCapability(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportProcessingCapability not implemented")
}
func (UnimplementedFenixExecutionServerClientGrpcServicesServer) ProcessTestInstructionExecution(context.Context, *ProcessTestInstructionExecutionRequest) (*ProcessTestInstructionExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTestInstructionExecution not implemented")
}
func (UnimplementedFenixExecutionServerClientGrpcServicesServer) ReportCompleteTestInstructionExecutionResult(context.Context, *TestInstructionExecutionRequestMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCompleteTestInstructionExecutionResult not implemented")
}
func (UnimplementedFenixExecutionServerClientGrpcServicesServer) ReportCurrentTestInstructionExecutionResult(context.Context, *TestInstructionExecutionRequestMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCurrentTestInstructionExecutionResult not implemented")
}
func (UnimplementedFenixExecutionServerClientGrpcServicesServer) SendAllLogPostForExecution(context.Context, *TestInstructionExecutionRequestMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAllLogPostForExecution not implemented")
}
func (UnimplementedFenixExecutionServerClientGrpcServicesServer) mustEmbedUnimplementedFenixExecutionServerClientGrpcServicesServer() {
}

// UnsafeFenixExecutionServerClientGrpcServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FenixExecutionServerClientGrpcServicesServer will
// result in compilation errors.
type UnsafeFenixExecutionServerClientGrpcServicesServer interface {
	mustEmbedUnimplementedFenixExecutionServerClientGrpcServicesServer()
}

func RegisterFenixExecutionServerClientGrpcServicesServer(s grpc.ServiceRegistrar, srv FenixExecutionServerClientGrpcServicesServer) {
	s.RegisterService(&FenixExecutionServerClientGrpcServices_ServiceDesc, srv)
}

func _FenixExecutionServerClientGrpcServices_AreYouAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerClientGrpcServicesServer).AreYouAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerClientGrpcApi.FenixExecutionServerClientGrpcServices/AreYouAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerClientGrpcServicesServer).AreYouAlive(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerClientGrpcServices_ReportProcessingCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerClientGrpcServicesServer).ReportProcessingCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerClientGrpcApi.FenixExecutionServerClientGrpcServices/ReportProcessingCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerClientGrpcServicesServer).ReportProcessingCapability(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerClientGrpcServices_ProcessTestInstructionExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTestInstructionExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerClientGrpcServicesServer).ProcessTestInstructionExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerClientGrpcApi.FenixExecutionServerClientGrpcServices/ProcessTestInstructionExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerClientGrpcServicesServer).ProcessTestInstructionExecution(ctx, req.(*ProcessTestInstructionExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerClientGrpcServices_ReportCompleteTestInstructionExecutionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestInstructionExecutionRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerClientGrpcServicesServer).ReportCompleteTestInstructionExecutionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerClientGrpcApi.FenixExecutionServerClientGrpcServices/ReportCompleteTestInstructionExecutionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerClientGrpcServicesServer).ReportCompleteTestInstructionExecutionResult(ctx, req.(*TestInstructionExecutionRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerClientGrpcServices_ReportCurrentTestInstructionExecutionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestInstructionExecutionRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerClientGrpcServicesServer).ReportCurrentTestInstructionExecutionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerClientGrpcApi.FenixExecutionServerClientGrpcServices/ReportCurrentTestInstructionExecutionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerClientGrpcServicesServer).ReportCurrentTestInstructionExecutionResult(ctx, req.(*TestInstructionExecutionRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerClientGrpcServices_SendAllLogPostForExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestInstructionExecutionRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerClientGrpcServicesServer).SendAllLogPostForExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerClientGrpcApi.FenixExecutionServerClientGrpcServices/SendAllLogPostForExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerClientGrpcServicesServer).SendAllLogPostForExecution(ctx, req.(*TestInstructionExecutionRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// FenixExecutionServerClientGrpcServices_ServiceDesc is the grpc.ServiceDesc for FenixExecutionServerClientGrpcServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FenixExecutionServerClientGrpcServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fenixExecutionServerClientGrpcApi.FenixExecutionServerClientGrpcServices",
	HandlerType: (*FenixExecutionServerClientGrpcServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AreYouAlive",
			Handler:    _FenixExecutionServerClientGrpcServices_AreYouAlive_Handler,
		},
		{
			MethodName: "ReportProcessingCapability",
			Handler:    _FenixExecutionServerClientGrpcServices_ReportProcessingCapability_Handler,
		},
		{
			MethodName: "ProcessTestInstructionExecution",
			Handler:    _FenixExecutionServerClientGrpcServices_ProcessTestInstructionExecution_Handler,
		},
		{
			MethodName: "ReportCompleteTestInstructionExecutionResult",
			Handler:    _FenixExecutionServerClientGrpcServices_ReportCompleteTestInstructionExecutionResult_Handler,
		},
		{
			MethodName: "ReportCurrentTestInstructionExecutionResult",
			Handler:    _FenixExecutionServerClientGrpcServices_ReportCurrentTestInstructionExecutionResult_Handler,
		},
		{
			MethodName: "SendAllLogPostForExecution",
			Handler:    _FenixExecutionServerClientGrpcServices_SendAllLogPostForExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "FenixExecutionServer/fenixExecutionServerClientGrpcApi/fenixExecutionServerClientGrpcApi.proto",
}
