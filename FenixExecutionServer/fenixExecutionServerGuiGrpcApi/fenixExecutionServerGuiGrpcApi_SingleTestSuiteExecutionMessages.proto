syntax = "proto3";
package fenixExecutionServerGuiGrpcApi;
option go_package = "./go_grpc_api";

import "FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi_GeneralMessagesAndEnums.proto";
import "FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages.proto";

// Message used for initiating a single TestSuiteExecution, with a specific TestData-point
message InitiateTestSuiteExecutionWithOneTestDataSetRequestMessage {
  UserAndApplicationRunTimeIdentificationMessage UserAndApplicationRunTimeIdentification = 1; // Identifies User, Application Runt time instance and Proto-file version used
  string TestSuiteUuid = 2; // The UUID for the TestSuite to be Executed
  ExecutionStatusReportLevelEnum ExecutionStatusReportLevel = 3; // Used to tell ExecutionServer what level of ExecutionStatus should be reported back
  TestDataForTestCaseExecutionMessage TestDataForTestCaseExecution = 4; // The TestData used when doing one TestSuite execution
}

// Message used for initiating a single TestSuiteExecution, with all its TestData-points
message InitiateTestSuiteExecutionWithAllTestDataSetsRequestMessage {
  UserAndApplicationRunTimeIdentificationMessage UserAndApplicationRunTimeIdentification = 1; // Identifies User, Application Runt time instance and Proto-file version used
  string TestSuiteUuid = 2; // The UUID for the TestSuite to be Executed
  ExecutionStatusReportLevelEnum ExecutionStatusReportLevel = 3; // Used to tell ExecutionServer what level of ExecutionStatus should be reported back
}

// Message response from initiating a single TestSuiteExecution Execution
message InitiateSingleTestSuiteExecutionResponseMessage {
  AckNackResponse ackNackResponse = 1; // Hold all error messages, if there are any. Message also gives of everything was OK or not
  repeated TestCaseExecutionBasicInformationMessage TestCasesInExecutionQueue = 2; // The Basic information regarding the TestCase-Executions
}

// Message holding a request to get a Single TestSuite Execution
message GetSingleTestSuiteExecutionRequest {
  UserAndApplicationRunTimeIdentificationMessage UserAndApplicationRunTimeIdentification = 1; // Identifies User, Application Runt time instance and Proto-file version used
  TestSuiteExecutionKeyMessage TestSuiteExecutionKey = 2; // The key data to find one specific TestSuiteExecution
}

message TestSuiteExecutionKeyMessage {
  string TestSuiteExecutionUuid = 1; // The Unique UUID for the TestSuite Execution
  uint32 TestSuiteExecutionVersion = 2; // The Unique Version for the TestSuite Execution
}

// Message holding a full response for a Single TestSuite Execution
message GetSingleTestSuiteExecutionResponse {
  AckNackResponse ackNackResponse = 1; // Hold all error messages, if there are any. Message also gives of everything was OK or not
  //TestCaseExecutionResponseMessage TestCaseExecutionResponse = 2; // Holds one full TestSuiteExecution with all data belonging to that execution
}