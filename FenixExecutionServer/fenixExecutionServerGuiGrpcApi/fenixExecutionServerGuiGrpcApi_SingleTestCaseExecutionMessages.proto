syntax = "proto3";
package fenixExecutionServerGuiGrpcApi;
option go_package = "./go_grpc_api";

import "google/protobuf/timestamp.proto";
import "FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi_GeneralMessagesAndEnums.proto";

// Message used for initiating a single TestCase Execution, with a specific TestData-identification
message InitiateSingleTestCaseExecutionRequestMessage {
  UserAndApplicationRunTimeIdentificationMessage UserAndApplicationRunTimeIdentification = 1; // Identifies User, Application Runt time instance and Proto-file version used
  string TestCaseUuid = 2; // The UUID for the TestCase to be Executed
  string TestDataSetUuid = 3; // The UUID for the specific TestDataSet to be used for the Execution
  ExecutionStatusReportLevelEnum ExecutionStatusReportLevel = 4; // Used to tell ExecutionServer what level of ExecutionStatus should be reported back
  TestDataForTestCaseExecutionMessage TestDataForTestCaseExecution = 5; // The TestData used when doing one TestCase execution
}

// Message response from initiating a single TestCase Execution
message InitiateSingleTestCaseExecutionResponseMessage {
  TestCaseExecutionBasicInformationMessage TestCasesInExecutionQueue = 1; // The Basic information regarding the TestCase-Execution
  AckNackResponse ackNackResponse = 2; // Hold all error messages, if there are any. Message also gives of everything was OK or not
}

// Message to be used for requesting TestCases waiting to be executed, for specific Domains and DateTime-span
message ListTestCasesInExecutionQueueRequest {
  UserAndApplicationRunTimeIdentificationMessage UserAndApplicationRunTimeIdentification = 1; // Identifies User, Application Runt time instance and Proto-file version used
  repeated string DomainUuids = 2; // All Domains in request
  google.protobuf.Timestamp TestCaseExecutionFromTimeStamp = 3; // Execution From TimeStamp in Request
  google.protobuf.Timestamp TestCaseExecutionToTimeStamp = 4; // Execution To TimeStamp in Request

}

// Message holding the response for TestCases waiting to be executed, for specific Domains and DateTime-span
message ListTestCasesInExecutionQueueResponse{
  AckNackResponse ackNackResponse = 1; // Hold all error messages, if there are any. Message also gives of everything was OK or not
  repeated TestCaseExecutionBasicInformationMessage TestCasesInExecutionQueue = 2; // The Basic information regarding the TestCase-Execution
}

// Message to be used for requesting TestCases under execution, for specific Domains and DateTime-span
message ListTestCasesUnderExecutionRequest {
  UserAndApplicationRunTimeIdentificationMessage UserAndApplicationRunTimeIdentification = 1; // Identifies User, Application Runt time instance and Proto-file version used
  repeated string DomainUuids = 2; // All Domains in request
  google.protobuf.Timestamp TestCaseExecutionFromTimeStamp = 3; // Execution From TimeStamp in Request
  google.protobuf.Timestamp TestCaseExecutionToTimeStamp = 4; // Execution To TimeStamp in Request

}

// Message holding the response for TestCases under execution, for specific Domains and DateTime-span
message ListTestCasesUnderExecutionResponse{
  AckNackResponse ackNackResponse = 1; // Hold all error messages, if there are any. Message also gives of everything was OK or not
  repeated TestCaseUnderExecutionMessage TestCasesUnderExecution = 2; // The Basic information regarding the TestCase-Execution
}

// One single TestCase under Execution Summary
message TestCaseUnderExecutionMessage {
  TestCaseExecutionBasicInformationMessage TestCaseExecutionBasicInformation = 1; // The Basic information regarding the TestCase-Execution
  TestCaseExecutionDetailsMessage TestCaseExecutionDetails = 2; // Detailed information about the ExecutionTestInstructionExecutionMessageTestInstructionExecutionMessage
  //repeated TestInstructionExecutionMessage TestInstructionExecutions = 3;
}

// Message to be used for requesting TestCase Executions that has been finished , for specific Domains and DateTime-span
message ListTestCasesWithFinishedExecutionsRequest {
  UserAndApplicationRunTimeIdentificationMessage UserAndApplicationRunTimeIdentification = 1; // Identifies User, Application Runt time instance and Proto-file version used
  repeated string DomainUuids = 2; // All Domains in request
  google.protobuf.Timestamp TestCaseExecutionFromTimeStamp = 3; // Execution From TimeStamp in Request
  google.protobuf.Timestamp TestCaseExecutionToTimeStamp = 4; // Execution To TimeStamp in Request

}

// Message holding the response for TestCases under execution, for specific Domains and DateTime-span
message ListTestCasesWithFinishedExecutionsResponse{
  AckNackResponse ackNackResponse = 1; // Hold all error messages, if there are any. Message also gives of everything was OK or not
  repeated TestCaseWithFinishedExecutionMessage TestCaseWithFinishedExecution = 2; // The Basic information regarding the TestCase-Execution
}
// One single TestCase with finished Execution Summary
message TestCaseWithFinishedExecutionMessage {
  TestCaseExecutionBasicInformationMessage TestCaseExecutionBasicInformation = 1; // The Basic information regarding the TestCase-Execution
  TestCaseExecutionDetailsMessage TestCaseExecutionDetails = 2; // Detailed information about the Execution
}

// One single TestCase Execution Summary
message TestCaseExecutionBasicInformationMessage {
  string DomainUuid = 1; // The Domain, UUID, where the TestCase 'has its home'
  string DomainName = 2; // The Domain, Name, where the TestCase 'has its home'
  string TestSuiteUuid = 3; // The TestSuite, UUID, that the TestCase was executed from
  string TestSuiteName = 4; // The TestSuite, Name, that the TestCase was executed from
  uint32 TestSuiteVersion = 5; // The TestSuites version number
  string TestSuiteExecutionUuid = 6; // The Unique UUID for the TestSuite Execution
  uint32 TestSuiteExecutionVersion = 7; // The TestSuites execution version
  string TestCaseUuid = 8; // The TestCase, UUID, set by TestCase-builder
  string TestCaseName = 9; // The TestCase, Name, set in TestCase-builder
  uint32 TestCaseVersion = 10; // Each time a TestCase is saved then the 'TestCaseVersion' will be incremented by +1
  string TestCaseExecutionUuid = 11; // The Unique UUID for the TestCase Execution
  uint32 TestCaseExecutionVersion = 12; // The Unique Version for the TestCase Execution
  google.protobuf.Timestamp PlacedOnTestExecutionQueueTimeStamp = 13; // The timestamp when the TestCase was placed on queue for execution
  string TestDataSetUuid = 14; // The UUID for the specific TestDataSet that was used for the Execution
  ExecutionPriorityEnum ExecutionPriority = 15; // The priority for the execution. Depends on who started it and if it belongs to a suite, scheduled or not
 ExecutionStatusReportLevelEnum ExecutionStatusReportLevel = 16; // What level of real time reporting, regarding ExecutionStatus-changes, should ExecutionServer do

}

message TestCaseExecutionDetailsMessage {
  google.protobuf.Timestamp ExecutionStartTimeStamp = 1; // The timestamp when the execution was put for execution, not on queue for execution
  google.protobuf.Timestamp ExecutionStopTimeStamp = 2; // The timestamp when the execution was ended, in anyway
  TestCaseExecutionStatusEnum TestCaseExecutionStatus = 3; // The status of the ongoing  TestCase execution
  bool ExecutionHasFinished = 4; // A simple status telling if the execution has ended or not
  google.protobuf.Timestamp  ExecutionStatusUpdateTimeStamp = 5; // The timestamp when the status was last updated
  uint64 UniqueDatabaseRowCounter = 6; // A unique counter for every database row
}

// Message holding a request to get a Single TestCase Execution
message GetSingleTestCaseExecutionRequest {
  UserAndApplicationRunTimeIdentificationMessage UserAndApplicationRunTimeIdentification = 1; // Identifies User, Application Runt time instance and Proto-file version used
  TestCaseExecutionKeyMessage TestCaseExecutionKey = 2; // The key data to find one specific TestCaseExecution
}

message TestCaseExecutionKeyMessage {
  string TestCaseExecutionUuid = 1; // The Unique UUID for the TestCase Execution
  uint32 TestCaseExecutionVersion = 2; // The Unique Version for the TestCase Execution
}

// Message holding a full response for a Single TestCase Execution
message GetSingleTestCaseExecutionResponse {
  AckNackResponse ackNackResponse = 1; // Hold all error messages, if there are any. Message also gives of everything was OK or not
  TestCaseExecutionResponseMessage TestCaseExecutionResponse = 2; // Holds one full TestCaseExecution with all data belonging to that execution
}

//  Message holding a full response for a one TestCase Execution
message TestCaseExecutionResponseMessage {
  TestCaseExecutionBasicInformationMessage TestCaseExecutionBasicInformation = 1; // The Basic information regarding the TestCase-Execution
  repeated TestCaseExecutionDetailsMessage TestCaseExecutionDetails = 2; // The execution information for The Detailed information about the Execution
  repeated TestInstructionExecutionsMessage TestInstructionExecutions = 3; // All TestInstructionExecutions for the TestCaseExecution
}

// All TestInstructionExecution for a specific TestCaseExecution
message TestInstructionExecutionsMessage {
  TestInstructionExecutionBasicInformationMessage TestInstructionExecutionBasicInformation = 1; // The Base information for the TestInstructionExecution
  repeated TestInstructionExecutionsInformationMessage TestInstructionExecutionsInformation = 2; // The execution information for the TestInstructionExecution
  repeated LogPostAndValuesMessage ExecutionLogPostsAndValues = 3; // All log post rows for the TestInstructionExecution
  repeated RunTimeUpdatedAttributeMessage RunTimeUpdatedAttributes = 4; // All Attributes that were updated
}

// The basic information for one TestInstructionExecution
message TestInstructionExecutionBasicInformationMessage {
  string DomainUuid = 1; // The Domain, UUID, that owns this TestInstruction
  string DomainName = 2; // The Domain, Name, that owns this TestInstruction
  string ExecutionDomainUuid = 3; // The SubDomain, UUID, that executes this TestInstruction
  string ExecutionDomainName = 4; // The SubDomain, Name, that executes this TestInstruction
  string TestInstructionExecutionUuid = 5; // The UUID for the TestInstructionExecution
  string TestInstructionUuid = 6; // TestInstruction UUID, set by Client system
  string TestInstructionName = 7; // TestInstruction Name, set by Client system
  uint32 TestInstructionMajorVersionNumber = 8; // Major Version Number for the TestInstruction
  uint32 TestInstructionMinorVersionNumber = 9; // Minor Version Number for the TestInstruction
  google.protobuf.Timestamp QueueTimeStamp = 10; // The timestamp when the TestInstruction was put on the ExecutionQueue
  ExecutionPriorityEnum ExecutionPriority = 11; // The Execution priority for the TestInstructions
  string TestCaseExecutionUuid = 12; // The UUID of the TestCaseExecution
  string TestDataSetUuid = 13; // The UUID of the TestDataSet used by the TestCaseExecution
  uint32 TestCaseExecutionVersion = 14; // The version number of the TestCaseExecution
  uint32 TestInstructionExecutionVersion = 15; // The version number for the TestInstructionExecution
  uint32 TestInstructionExecutionOrder = 16; // The execution order for this TestInstructionExecution within the TestCaseExecution
  string TestInstructionOriginalUuid = 17; // The original UUID for the TestInstruction

}
// The executions information for one TestInstruction-execution for when it is under execution or has finished executing
message TestInstructionExecutionsInformationMessage {
  google.protobuf.Timestamp SentTimeStamp = 1; // The Time that the TestInstruction was sent towards worker
  google.protobuf.Timestamp ExpectedExecutionEndTimeStamp = 2; // The maximum expected EndTimeStamp for the TestInstructionExecution
  TestInstructionExecutionStatusEnum TestInstructionExecutionStatus = 3; // The current Execution status for the TestInstructionExecution
  google.protobuf.Timestamp TestInstructionExecutionEndTimeStamp = 4; // The  EndTimeStamp for the TestInstructionExecution
  bool TestInstructionExecutionHasFinished = 5; // Indicates if TestInstructionExecution has finished or not
  uint64 UniqueDatabaseRowCounter = 6; // A unique counter for every database row
  bool TestInstructionCanBeReExecuted = 7; // Depending of both type of TestInstruction and how execution ends the TestInstruction could be rerun
  google.protobuf.Timestamp  ExecutionStatusUpdateTimeStamp = 8; // When TestInstructionExecution was last updated
}

// This message holds one log post row from Client System
message LogPostAndValuesMessage {
  string TestInstructionExecutionUuid = 1; // The UUID for the TestInstructionExecution that log post is associate to
  int32 TestInstructionExecutionVersion = 2; // The Version Number for the TestInstructionExecution
  google.protobuf.Timestamp LogPostTimeStamp = 3; // The TimeStamp for the specific log post
  LogPostStatusEnum LogPostStatus = 4; // the status for the log post
  repeated FoundVersusExpectedValueMessage FoundVersusExpectedValue = 5; // A list with found versus expected values, in string representations
  uint64 UniqueDatabaseRowCounter = 6; // A unique counter for every database row

  message FoundVersusExpectedValueMessage {
    string FoundValue = 1; // The value that was found
    string ExpectedValue = 2; // The value that was expected
    uint64 UniqueDatabaseRowCounter = 3; // A unique counter for every database row
  }
}

// Message holding one Attribute with its updated value
message RunTimeUpdatedAttributeMessage {
  string TestCaseExecutionUuid = 1; // The TestCaseExecutionUuid that the attribute belongs to
  string TestCaseExecutionVersion = 2; // The TestCaseExecutionVersion that the Attribute was changed under.
  string TestInstructionExecutionUuid = 3; // The TestInstructionExecutions Uuid
  int32 TestInstructionExecutionVersion = 4; //The TestInstructionExecutions version
  int32 TestInstructionAttributeType =  5; // The Type in the GUI. TEXTBOX, COMBOBOX, FILE_SELECTOR, FUNCTION_SELECTOR ...
  string  TestInstructionAttributeUuid = 6; // The unique UUID for the Attribute
  string TestInstructionAttributeTypeUuid = 7; // The type for the Attribute. Used in GUI to handle sorting and grouping of attributes
  string TestInstructionAttributeTypeName = 8; // The Name for type in previous row
  string AttributeValueUuid = 9; // If the Attribute value can be define as a specific UUID, then it can be found here
   string TestInstructionAttributeName = 10; // The name of the Attribute
  string AttributeValueAsString = 11; // The RunTime updated value for the attribute
  google.protobuf.Timestamp UpdateTimeStamp = 12; // The timestamp when the attribute was updated
}

// The request message from 'TesterGui' to receive 'stream' of messages from GuiExecutionServer
message SubscribeToMessagesRequest {
  ApplicationRunTimeIdentificationMessage ApplicationRunTimeIdentification = 1; // Identifies Application Run time instance and Proto-file version used
  repeated TestCaseExecutionStatusSubscriptionMessage TestCaseExecutionsStatusSubscriptions = 2; // An array of all TestCaseExecutions that the TesterGui want to receive updates on TestCaseExecutions and TestInstructionExecutions
}

// The request message from 'TesterGui' to unsubscribe from GuiExecutionServer
message UnSubscribeToMessagesRequest {
  ApplicationRunTimeIdentificationMessage ApplicationRunTimeIdentification = 1; // Identifies Application Run time instance and Proto-file version used
  repeated TestCaseExecutionStatusUnSubscriptionMessage TestCaseExecutionsStatusUnSubscriptions = 2; // An array of all TestCaseExecutions that the TesterGui want to unsubscribe to regarding status on TestCaseExecutions and TestInstructionExecutions
}

// Holds one TestCaseExecution that the TesterGui want to subscribe to
message TestCaseExecutionStatusSubscriptionMessage {
  string TestCaseExecutionUuid = 2; // The UUID for the TestCaseExecution that is requested
  int32 TestCaseExecutionVersion = 3; // The VersionNumber for the TestCaseExecution that is request
}

// Holds one TestCaseExecution that the TesterGui want to un-subscribe to
message TestCaseExecutionStatusUnSubscriptionMessage {
  string TestCaseExecutionUuid = 2; // The UUID for the TestCaseExecution that is requested
  int32 TestCaseExecutionVersion = 3; // The VersionNumber for the TestCaseExecution that is request
}

// The response message from 'GuiExecutionServer' to sent by stream of status-messages to 'TesterGui'
message SubscribeToMessagesStreamResponse {
  CurrentFenixExecutionGuiProtoFileVersionEnum ProtoFileVersionUsedByClient = 1; // The latest proto file version number to be used
  google.protobuf.Timestamp  OriginalMessageCreationTimeStamp = 2; // The timestamp from when the original message was created in ExecutionServer
  bool IsKeepAliveMessage = 5; //Indicate if this is a 'Keep Alive Message' for TestGui to be aware that there is an active connection GUIExecutionServer
  TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage ExecutionsStatus = 6; // An array of TestCaseExecutions and TestInstructionExecutions and their statuses
  // More messages will be added to be stream to 'TestGui'
}

// Message holding status for TestCaseExecutions and TestInstructionExecutions
message TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage {
  CurrentFenixExecutionGuiProtoFileVersionEnum ProtoFileVersionUsedByClient = 1; // The latest proto file version number to be used
  repeated TestCaseExecutionStatusMessage TestCaseExecutionsStatus = 2; // An array of TestCaseExecutions and their statuses
  repeated TestInstructionExecutionStatusMessage TestInstructionExecutionsStatus = 3; // An array of TestInstructionExecutions and their statuses
}

// Message holding status for one TestCaseExecution
message TestCaseExecutionStatusMessage {
  string TestCaseExecutionUuid = 1; // The UUID for the TestCaseExecution
  int32 TestCaseExecutionVersion = 2; // The Version Number for the TestCaseExecution
  google.protobuf.Timestamp BroadcastTimeStamp = 3; // The timestamp message was broadcasted from the ExecutionServer, regarding this TestCaseExecution
  google.protobuf.Timestamp PreviousBroadcastTimeStamp = 4; //  The timestamp for the previously broadcasted message form the ExecutionServer, regarding this TestCaseExecution
  TestCaseExecutionDetailsMessage TestCaseExecutionDetails = 5; // The TestCaseExecution-status for this TestCaseExecution
}

// Message holding status for one TestInstructionExecution
message TestInstructionExecutionStatusMessage {
  string TestCaseExecutionUuid = 1; // The UUID for the TestCaseExecution to which this TestInstructionExecution belongs
  int32 TestCaseExecutionVersion = 2; // The Version Number for the TestCaseExecution to which this TestInstructionExecution belongs
  string TestInstructionExecutionUuid = 3; // The UUID for the TestInstructionExecution
  int32 TestInstructionExecutionVersion = 4; // The Version Number for the TestInstructionExecution
  TestInstructionExecutionStatusEnum TestInstructionExecutionStatus = 5; // The TestInstructionExecution-status for this TestInstructionExecution
  google.protobuf.Timestamp BroadcastTimeStamp = 6; // The timestamp message was broadcasted from the ExecutionServer, regarding this TestCaseExecution
  google.protobuf.Timestamp PreviousBroadcastTimeStamp = 7; //  The timestamp for the previously broadcasted message form the ExecutionServer, regarding this TestCaseExecution
  TestInstructionExecutionsInformationMessage TestInstructionExecutionsStatusInformation = 8; // The executions information for one TestInstruction-execution for when it is under execution or has finished executing
}

// The TestData used when doing one TestCase execution
 message TestDataForTestCaseExecutionMessage {
   string TestDataDomainUuid = 1; // The UUID of the Domain that the TestData belongs to
   string TestDataDomainName = 2; // The Name of the Domain that the TestData belongs to
   string TestDataDomainTemplateName = 3; // The name used in Template to reference correct Domain- This name can't have any spaces in it
   string  TestDataAreaUuid = 4; // The UUID of the TestData-area in Domain that the TestData belongs to
   string TestDataAreaName = 5; // The Name of  the TestData-area in Domain that the TestData belongs to
   map<string, TestDataValueMapValueMessage> TestDataValueMap = 6; // The 'Map[HeaderDataName]TestDataValueMapValueMessage' is map holding the relation between Column and the value
   string TestDataRowIdentifier = 7; // The identifier for the row, should be the first column in data set
   string TestDataFileSha256Hash = 8; // The sha256 file hash for the simple TestData-file that is where the data comes from
}

// Hold one TestData value to corresponding Column(HeaderDataName)
message TestDataValueMapValueMessage {
  string HeaderDataName = 1; // The column for the TestData
  string TestDataValue = 2; // The TestData value to be used
  bool TestDataValueIsReplaced = 3; // Has the user manually replaced the data in the TesterGui
  string TestDataOriginalValueWhenReplaced = 4; // If TestData value was replaced by the user then this shows the origiinal value
}

