syntax = "proto3";
package fenixExecutionServerGuiGrpcApi;
option go_package = "./go_grpc_api";

import "google/protobuf/timestamp.proto";
import "FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi_GeneralMessagesAndEnums.proto";

// Message used for initiating a single TestCase Execution, with a specific TestData-identification
message InitiateSingleTestCaseExecutionRequestMessage {
  UserIdentificationMessage UserIdentification = 1; // Identifies User and Proto-file version used
  string TestCaseUuid = 2; // The UUID for the TestCase to be Executed
  string TestDataSetUuid = 3; // The UUID for the specific TestDataSet to be used for the Execution
}

// Message response from initiating a single TestCase Execution
message InitiateSingleTestCaseExecutionResponseMessage {
  string TestCaseExecutionUuid = 1; // The UUID for the TestCase Execution
  AckNackResponse ackNackResponse = 2; // Hold all error messages, if there are any. Message also gives of everything was OK or not
}


// Message to be used for requesting TestCases waiting to be executed, for specific Domains and DateTime-span
message ListTestCasesInExecutionQueueRequest {
  UserIdentificationMessage UserIdentification = 1; // Identifies User and Proto-file version used
  repeated string DomainUuids = 2; // All Domains in request
  google.protobuf.Timestamp TestCaseExecutionFromTimeStamp = 3; // Execution From TimeStamp in Request
  google.protobuf.Timestamp TestCaseExecutionToTimeStamp = 4; // Execution To TimeStamp in Request

}

// Message holding the response for TestCases waiting to be executed, for specific Domains and DateTime-span
message ListTestCasesInExecutionQueueResponse{
  AckNackResponse ackNackResponse = 1; // Hold all error messages, if there are any. Message also gives of everything was OK or not
  repeated TestCaseExecutionBasicInformationMessage TestCasesInExecutionQueue = 2; // The Basic information regarding the TestCase-Execution
}

// Message to be used for requesting TestCases under execution, for specific Domains and DateTime-span
message ListTestCasesUnderExecutionRequest {
  UserIdentificationMessage UserIdentification = 1; // Identifies User and Proto-file version used
  repeated string DomainUuids = 2; // All Domains in request
  google.protobuf.Timestamp TestCaseExecutionFromTimeStamp = 3; // Execution From TimeStamp in Request
  google.protobuf.Timestamp TestCaseExecutionToTimeStamp = 4; // Execution To TimeStamp in Request

}

// Message holding the response for TestCases under execution, for specific Domains and DateTime-span
message ListTestCasesUnderExecutionResponse{
  AckNackResponse ackNackResponse = 1; // Hold all error messages, if there are any. Message also gives of everything was OK or not
  repeated TestCaseUnderExecutionMessage TestCasesUnderExecution = 2; // The Basic information regarding the TestCase-Execution
}
// One single TestCase under Execution Summary
message TestCaseUnderExecutionMessage {
  TestCaseExecutionBasicInformationMessage TestCaseExecutionBasicInformation = 1; // The Basic information regarding the TestCase-Execution
  TestCaseExecutionDetailsMessage TestCaseExecutionDetails = 2; // Detailed information about the Execution
}

// Message to be used for requesting TestCase Executions that has been finished , for specific Domains and DateTime-span
message ListTestCasesWithFinishedExecutionsRequest {
  UserIdentificationMessage UserIdentification = 1; // Identifies User and Proto-file version used
  repeated string DomainUuids = 2; // All Domains in request
  google.protobuf.Timestamp TestCaseExecutionFromTimeStamp = 3; // Execution From TimeStamp in Request
  google.protobuf.Timestamp TestCaseExecutionToTimeStamp = 4; // Execution To TimeStamp in Request

}

// Message holding the response for TestCases under execution, for specific Domains and DateTime-span
message ListTestCasesWithFinishedExecutionsResponse{
  AckNackResponse ackNackResponse = 1; // Hold all error messages, if there are any. Message also gives of everything was OK or not
  repeated TestCaseWithFinishedExecutionMessage TestCaseWithFinishedExecution = 2; // The Basic information regarding the TestCase-Execution
}
// One single TestCase with finished Execution Summary
message TestCaseWithFinishedExecutionMessage {
  TestCaseExecutionBasicInformationMessage TestCaseExecutionBasicInformation = 1; // The Basic information regarding the TestCase-Execution
  TestCaseExecutionDetailsMessage TestCaseExecutionDetails = 2; // Detailed information about the Execution
}

// One single TestCase Execution Summary
message TestCaseExecutionBasicInformationMessage {
  string DomainUuid = 1; // The Domain, UUID, where the TestCase 'has its home'
  string DomainName = 2; // The Domain, Name, where the TestCase 'has its home'
  string TestSuiteUuid = 3; // The TestSuite, UUID, that the TestCase was executed from
  string TestSuiteName = 4; // The TestSuite, Name, that the TestCase was executed from
  uint32 TestSuiteVersion = 5; // The TestSuites version number
  string TestSuiteExecutionUuid = 6; // The Unique UUID for the TestSuite Execution
  uint32 TestSuiteExecutionVersion = 7; // The TestSuites execution version
  string TestCaseUuid = 8; // The TestCase, UUID, set by TestCase-builder
  string TestCaseName = 9; // The TestCase, Name, set in TestCase-builder
  uint32 TestCaseVersion = 10; // Each time a TestCase is saved then the 'TestCaseVersion' will be incremented by +1
  string TestCaseExecutionUuid = 11; // The Unique UUID for the TestCase Execution
  uint32 TestCaseExecutionVersion = 12; // The Unique UUID for the TestCase Execution
  google.protobuf.Timestamp PlacedOnTestExecutionQueueTimeStamp = 13; // The timestamp when the TestCase was placed on queue for execution
  string TestDataSetUuid = 14; // The UUID for the specific TestDataSet that was used for the Execution
  ExecutionPriorityEnum ExecutionPriority = 15; // The priority for the execution. Depends on who started it and if it belongs to a suite, scheduled or not

}

message TestCaseExecutionDetailsMessage {
  google.protobuf.Timestamp ExecutionStartTimeStamp = 16; // The timestamp when the execution was put for execution, not on queue for execution
  google.protobuf.Timestamp ExecutionStopTimeStamp = 17; // The timestamp when the execution was ended, in anyway
  TestCaseExecutionStatusEnum TestCaseExecutionStatus = 18; // The status of the ongoing  TestCase execution
  bool ExecutionHasFinished = 19; // A simple status telling if the execution has ended or not
}



// Message holding a request to get a Single TestCase Execution
message GetSingleTestCaseExecutionRequest {
  UserIdentificationMessage UserIdentification = 1; // Identifies User and Proto-file version used
  string TestCaseExecutionUuid = 2; // The Unique UUID for the TestCase Execution wanted
}

// Message holding a response for a Single TestCase Execution
message GetSingleTestCaseExecutionResponse {
  //SingleTestCaseExecutionSummaryMessage SingleTestCaseExecutionSummary = 1; // A list of Single TestCase Execution summaries
  repeated TestInstructionExecutionMessage TestInstructionsExecution = 2; // A list of all TestInstructions and their Execution result

  message TestInstructionExecutionMessage{
    TestInstructionExecutionSummaryMessage TestInstructionExecutionSummary = 1; // Basic information regarding the TestInstruction-Execution
    TestInstructionExecutionDetailsMessage TestInstructionExecutionDetails = 2; // Basic information regarding the TestInstruction-Execution

  }

  // The Summary information for TestExecution for one TestInstruction-execution
  message TestInstructionExecutionSummaryMessage {
    string DomainUuid = 1; // The Domain, UUID, to be tested with this TestInstruction
    string DomainName = 2; // The Domain, Name, to be tested with this TestInstruction
    string TestInstructionUuid = 3; // TestInstruction UUID, set by Client system
    string TestInstructionName = 4; // TestInstruction Name, set by Client system
    uint32 MajorVersionNumber = 5; // Major Version Number
    uint32 MinorVersionNumber = 6; // Minor Version Number
    google.protobuf.Timestamp TestCaseExecutionFromTimeStamp = 7; // Execution From TimeStamp in Request
    google.protobuf.Timestamp TestCaseExecutionToTimeStamp = 8; // Execution To TimeStamp in Request
    TestInstructionExecutionStatusEnum TestInstructionExecutionStatus = 9; // The execution status for the TestInstruction
    string ExecutionErrorMessage = 10; // Any Error message for the TestInstruction execution
  }

  // All log post for the TestInstruction-execution
  message TestInstructionExecutionDetailsMessage {
    repeated LogPostMessage ExecutionLogPosts = 1; // All log post rows for the TestInstruction-execution
  }

  // This message holds one log post row from Client System
  message LogPostMessage {
    google.protobuf.Timestamp LogPostTimeStamp = 1; // The TimeStamp for the specific log post
    LogPostStatusEnum LogPostStatus = 2; // the status for the log post
    repeated FoundVersusExpectedValueMessage FoundVersusExpectedValue = 3; // A list with found versus expected values, in string representations

    message FoundVersusExpectedValueMessage {
      string FoundValue = 1; // The value that was found
      string ExpectedValue = 2; // The value that was expected
    }
  }
}

// The request message from 'TesterGui' to receive 'stream' of messages from GuiExecutionServer
message SubscribeToMessagesRequest {
  UserIdentificationMessage UserIdentification = 1; // Identifies User and Proto-file version used
   repeated TestCaseExecutionStatusSubscriptionMessage TestCaseExecutionsStatusSubscriptions = 2; // An array of all TestCaseExecutions that the TesterGui want to receive updates on TestCaseExecutions and TestInstructionExecutions
}

// Holds one TestCaseExecution that the TesterGui want to subribe to
message TestCaseExecutionStatusSubscriptionMessage {
  string TestCaseExecutionUuid = 2; // The UUID for the TestCaseExecution that is requested
  int32 TestCaseExecutionVersion = 3; // The VersionNumber for the TestCaseExecution that is request
}

// The response message from 'GuiExecutionServer' to sent by stream of status-messages to 'TesterGui'
message SubscribeToMessagesStreamResponse {
  CurrentFenixExecutionGuiProtoFileVersionEnum ProtoFileVersionUsedByClient = 1; // The latest proto file version number to be used
  TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage ExecutionsStatus = 2; // An array of TestCaseExecutions and TestInstructionExecutions and their statuses
  // More messages will be added to be stream to 'TestGui'
}


// Message holding status for TestCaseExecutions and TestInstructionExecutions
message TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage {
  CurrentFenixExecutionGuiProtoFileVersionEnum ProtoFileVersionUsedByClient = 1; // The latest proto file version number to be used
  repeated TestCaseExecutionStatusMessage TestCaseExecutionsStatus = 2; // An array of TestCaseExecutions and their statuses
  repeated TestInstructionExecutionStatusMessage TestInstructionExecutionsStatus = 3; // An array of TestInstructionExecutions and their statuses
}

// Message holding status for one TestCaseExecution
message TestCaseExecutionStatusMessage {
  string TestCaseExecutionUuid = 1; // The UUID for the TestCaseExecution
  int32 TestCaseExecutionVersion = 2; // The Version Number for the TestCaseExecution
  TestCaseExecutionStatusEnum TestCaseExecutionStatus = 3; // The TestCaseExecution-status for this TestCaseExecution
}

// Message holding status for one TestInstructionExecution
message TestInstructionExecutionStatusMessage {
  string TestCaseExecutionUuid = 1; // The UUID for the TestCaseExecution to which this TestInstructionExecution belongs
  int32 TestCaseExecutionVersion = 2; // The Version Number for the TestCaseExecution to which this TestInstructionExecution belongs
  string TestInstructionExecutionUuid = 3; // The UUID for the TestInstructionExecution
  int32 TestInstructionExecutionVersion = 4; // The Version Number for the TestInstructionExecution
  TestInstructionExecutionStatusEnum TestInstructionExecutionStatus = 5; // The TestInstructionExecution-status for this TestInstructionExecution
}
