// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub.proto

package go_grpc_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Used to have client and server in sync with using the same proto file version
type ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum int32

const (
	ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum_DEFAULT_NOT_SET ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum = 0 //Value used for when the variable is not actively set
	// Deprecated: Marked as deprecated in FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub.proto.
	ExecutionStatusMessagesPubSubSchema_VERSION_0_0 ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum = 1
	// Deprecated: Marked as deprecated in FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub.proto.
	ExecutionStatusMessagesPubSubSchema_VERSION_0_1 ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum = 2
	// Deprecated: Marked as deprecated in FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub.proto.
	ExecutionStatusMessagesPubSubSchema_VERSION_0_2 ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum = 3
	ExecutionStatusMessagesPubSubSchema_VERSION_0_3 ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum = 4 // Current version
)

// Enum value maps for ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum.
var (
	ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum_name = map[int32]string{
		0: "CurrentFenixExecutionGuiProtoFileVersionEnum_DEFAULT_NOT_SET",
		1: "VERSION_0_0",
		2: "VERSION_0_1",
		3: "VERSION_0_2",
		4: "VERSION_0_3",
	}
	ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum_value = map[string]int32{
		"CurrentFenixExecutionGuiProtoFileVersionEnum_DEFAULT_NOT_SET": 0,
		"VERSION_0_0": 1,
		"VERSION_0_1": 2,
		"VERSION_0_2": 3,
		"VERSION_0_3": 4,
	}
)

func (x ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum) Enum() *ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum {
	p := new(ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum)
	*p = x
	return p
}

func (x ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_enumTypes[0].Descriptor()
}

func (ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum) Type() protoreflect.EnumType {
	return &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_enumTypes[0]
}

func (x ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum.Descriptor instead.
func (ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum) EnumDescriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDescGZIP(), []int{0, 0}
}

// Execution Enum for a TestInstruction Execution
type ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum int32

const (
	ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum_DEFAULT_NOT_SET ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum = 0  //Value used for when the variable is not actively set
	ExecutionStatusMessagesPubSubSchema_TIE_INITIATED                                      ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum = 1  // All set up for execution, but has not been triggered to start execution
	ExecutionStatusMessagesPubSubSchema_TIE_EXECUTING                                      ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum = 2  // TestInstruction is execution
	ExecutionStatusMessagesPubSubSchema_TIE_CONTROLLED_INTERRUPTION                        ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum = 3  // Interrupted by in a controlled way
	ExecutionStatusMessagesPubSubSchema_TIE_CONTROLLED_INTERRUPTION_CAN_BE_RERUN           ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum = 4  // Interrupted by in a controlled way, but can be rerun
	ExecutionStatusMessagesPubSubSchema_TIE_FINISHED_OK                                    ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum = 5  // Finish as expected to TestInstruction definition
	ExecutionStatusMessagesPubSubSchema_TIE_FINISHED_OK_CAN_BE_RERUN                       ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum = 6  // Finish as expected to TestInstruction definition, but can be rerun
	ExecutionStatusMessagesPubSubSchema_TIE_FINISHED_NOT_OK                                ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum = 7  // Finish with errors in validations
	ExecutionStatusMessagesPubSubSchema_TIE_FINISHED_NOT_OK_CAN_BE_RERUN                   ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum = 8  // Finish with errors in validations, but can be rerun
	ExecutionStatusMessagesPubSubSchema_TIE_UNEXPECTED_INTERRUPTION                        ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum = 9  // The TestInstruction stopped executed in an unexpected way
	ExecutionStatusMessagesPubSubSchema_TIE_UNEXPECTED_INTERRUPTION_CAN_BE_RERUN           ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum = 10 // The TestInstruction stopped executed in an unexpected way, but can be rerun
	ExecutionStatusMessagesPubSubSchema_TIE_TIMEOUT_INTERRUPTION                           ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum = 11 // The TestInstruction had a forced stop because of timeout due to {time.Now() > 'ExpectedExecutionEndTimeStamp'}
	ExecutionStatusMessagesPubSubSchema_TIE_TIMEOUT_INTERRUPTION_CAN_BE_RERUN              ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum = 12 // The TestInstruction had a forced stop because of timeout due to {time.Now() > 'ExpectedExecutionEndTimeStamp'}, but can be rerun
)

// Enum value maps for ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum.
var (
	ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum_name = map[int32]string{
		0:  "TestInstructionExecutionStatusEnum_DEFAULT_NOT_SET",
		1:  "TIE_INITIATED",
		2:  "TIE_EXECUTING",
		3:  "TIE_CONTROLLED_INTERRUPTION",
		4:  "TIE_CONTROLLED_INTERRUPTION_CAN_BE_RERUN",
		5:  "TIE_FINISHED_OK",
		6:  "TIE_FINISHED_OK_CAN_BE_RERUN",
		7:  "TIE_FINISHED_NOT_OK",
		8:  "TIE_FINISHED_NOT_OK_CAN_BE_RERUN",
		9:  "TIE_UNEXPECTED_INTERRUPTION",
		10: "TIE_UNEXPECTED_INTERRUPTION_CAN_BE_RERUN",
		11: "TIE_TIMEOUT_INTERRUPTION",
		12: "TIE_TIMEOUT_INTERRUPTION_CAN_BE_RERUN",
	}
	ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum_value = map[string]int32{
		"TestInstructionExecutionStatusEnum_DEFAULT_NOT_SET": 0,
		"TIE_INITIATED":                            1,
		"TIE_EXECUTING":                            2,
		"TIE_CONTROLLED_INTERRUPTION":              3,
		"TIE_CONTROLLED_INTERRUPTION_CAN_BE_RERUN": 4,
		"TIE_FINISHED_OK":                          5,
		"TIE_FINISHED_OK_CAN_BE_RERUN":             6,
		"TIE_FINISHED_NOT_OK":                      7,
		"TIE_FINISHED_NOT_OK_CAN_BE_RERUN":         8,
		"TIE_UNEXPECTED_INTERRUPTION":              9,
		"TIE_UNEXPECTED_INTERRUPTION_CAN_BE_RERUN": 10,
		"TIE_TIMEOUT_INTERRUPTION":                 11,
		"TIE_TIMEOUT_INTERRUPTION_CAN_BE_RERUN":    12,
	}
)

func (x ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum) Enum() *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum {
	p := new(ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum)
	*p = x
	return p
}

func (x ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_enumTypes[1].Descriptor()
}

func (ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum) Type() protoreflect.EnumType {
	return &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_enumTypes[1]
}

func (x ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum.Descriptor instead.
func (ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDescGZIP(), []int{0, 1}
}

// Execution Enum for a TestCase Execution
type ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum int32

const (
	ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum_DEFAULT_NOT_SET ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum = 0  //Value used for when the variable is not actively set
	ExecutionStatusMessagesPubSubSchema_TCE_INITIATED                               ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum = 1  // All set up for execution, but has not been triggered to start execution
	ExecutionStatusMessagesPubSubSchema_TCE_EXECUTING                               ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum = 2  // TestCase is execution
	ExecutionStatusMessagesPubSubSchema_TCE_CONTROLLED_INTERRUPTION                 ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum = 3  // Interrupted by in a controlled way
	ExecutionStatusMessagesPubSubSchema_TCE_CONTROLLED_INTERRUPTION_CAN_BE_RERUN    ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum = 4  // Interrupted by in a controlled way, but can be rerun
	ExecutionStatusMessagesPubSubSchema_TCE_FINISHED_OK                             ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum = 5  // Finish as expected to TestCase definition
	ExecutionStatusMessagesPubSubSchema_TCE_FINISHED_OK_CAN_BE_RERUN                ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum = 6  // Finish as expected to TestCase definition, but can be rerun
	ExecutionStatusMessagesPubSubSchema_TCE_FINISHED_NOT_OK                         ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum = 7  // Finish with errors in validations
	ExecutionStatusMessagesPubSubSchema_TCE_FINISHED_NOT_OK_CAN_BE_RERUN            ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum = 8  // Finish with errors in validations, but can be rerun
	ExecutionStatusMessagesPubSubSchema_TCE_UNEXPECTED_INTERRUPTION                 ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum = 9  // The TestCase stopped executed in an unexpected way
	ExecutionStatusMessagesPubSubSchema_TCE_UNEXPECTED_INTERRUPTION_CAN_BE_RERUN    ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum = 10 // The TestCase stopped executed in an unexpected way, but can be rerun
	ExecutionStatusMessagesPubSubSchema_TCE_TIMEOUT_INTERRUPTION                    ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum = 11 // The TestCase had a forced stop because of timeout due to {time.Now() > 'ExpectedExecutionEndTimeStamp'} for a TIE
	ExecutionStatusMessagesPubSubSchema_TCE_TIMEOUT_INTERRUPTION_CAN_BE_RERUN       ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum = 12 // The TestCase had a forced stop because of timeout due to {time.Now() > 'ExpectedExecutionEndTimeStamp'} for a TIE, but can be rerun
)

// Enum value maps for ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum.
var (
	ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum_name = map[int32]string{
		0:  "TestCaseExecutionStatusEnum_DEFAULT_NOT_SET",
		1:  "TCE_INITIATED",
		2:  "TCE_EXECUTING",
		3:  "TCE_CONTROLLED_INTERRUPTION",
		4:  "TCE_CONTROLLED_INTERRUPTION_CAN_BE_RERUN",
		5:  "TCE_FINISHED_OK",
		6:  "TCE_FINISHED_OK_CAN_BE_RERUN",
		7:  "TCE_FINISHED_NOT_OK",
		8:  "TCE_FINISHED_NOT_OK_CAN_BE_RERUN",
		9:  "TCE_UNEXPECTED_INTERRUPTION",
		10: "TCE_UNEXPECTED_INTERRUPTION_CAN_BE_RERUN",
		11: "TCE_TIMEOUT_INTERRUPTION",
		12: "TCE_TIMEOUT_INTERRUPTION_CAN_BE_RERUN",
	}
	ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum_value = map[string]int32{
		"TestCaseExecutionStatusEnum_DEFAULT_NOT_SET": 0,
		"TCE_INITIATED":                            1,
		"TCE_EXECUTING":                            2,
		"TCE_CONTROLLED_INTERRUPTION":              3,
		"TCE_CONTROLLED_INTERRUPTION_CAN_BE_RERUN": 4,
		"TCE_FINISHED_OK":                          5,
		"TCE_FINISHED_OK_CAN_BE_RERUN":             6,
		"TCE_FINISHED_NOT_OK":                      7,
		"TCE_FINISHED_NOT_OK_CAN_BE_RERUN":         8,
		"TCE_UNEXPECTED_INTERRUPTION":              9,
		"TCE_UNEXPECTED_INTERRUPTION_CAN_BE_RERUN": 10,
		"TCE_TIMEOUT_INTERRUPTION":                 11,
		"TCE_TIMEOUT_INTERRUPTION_CAN_BE_RERUN":    12,
	}
)

func (x ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum) Enum() *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum {
	p := new(ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum)
	*p = x
	return p
}

func (x ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_enumTypes[2].Descriptor()
}

func (ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum) Type() protoreflect.EnumType {
	return &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_enumTypes[2]
}

func (x ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum.Descriptor instead.
func (ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDescGZIP(), []int{0, 2}
}

// The response message from 'GuiExecutionServer' to sent by PubSub to 'TesterGui'
type ExecutionStatusMessagesPubSubSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoFileVersionUsedByClient     ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum                       `protobuf:"varint,1,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
	OriginalMessageCreationTimeStamp *ExecutionStatusMessagesPubSubSchema_Timestamp                                                         `protobuf:"bytes,2,opt,name=OriginalMessageCreationTimeStamp,proto3" json:"OriginalMessageCreationTimeStamp,omitempty"`                                                                                                               // The timestamp from when the original message was created in ExecutionServer
	IsKeepAliveMessage               bool                                                                                                   `protobuf:"varint,5,opt,name=IsKeepAliveMessage,proto3" json:"IsKeepAliveMessage,omitempty"`                                                                                                                                          //Indicate if this is a 'Keep Alive Message' for TestGui to be aware that there is an active connection GUIExecutionServer
	ExecutionsStatus                 *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage `protobuf:"bytes,6,opt,name=ExecutionsStatus,proto3" json:"ExecutionsStatus,omitempty"`                                                                                                                                               // An array of TestCaseExecutions and TestInstructionExecutions and their statuses
}

func (x *ExecutionStatusMessagesPubSubSchema) Reset() {
	*x = ExecutionStatusMessagesPubSubSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStatusMessagesPubSubSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatusMessagesPubSubSchema) ProtoMessage() {}

func (x *ExecutionStatusMessagesPubSubSchema) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatusMessagesPubSubSchema.ProtoReflect.Descriptor instead.
func (*ExecutionStatusMessagesPubSubSchema) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDescGZIP(), []int{0}
}

func (x *ExecutionStatusMessagesPubSubSchema) GetProtoFileVersionUsedByClient() ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum_DEFAULT_NOT_SET
}

func (x *ExecutionStatusMessagesPubSubSchema) GetOriginalMessageCreationTimeStamp() *ExecutionStatusMessagesPubSubSchema_Timestamp {
	if x != nil {
		return x.OriginalMessageCreationTimeStamp
	}
	return nil
}

func (x *ExecutionStatusMessagesPubSubSchema) GetIsKeepAliveMessage() bool {
	if x != nil {
		return x.IsKeepAliveMessage
	}
	return false
}

func (x *ExecutionStatusMessagesPubSubSchema) GetExecutionsStatus() *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage {
	if x != nil {
		return x.ExecutionsStatus
	}
	return nil
}

type ExecutionStatusMessagesPubSubSchema_Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Represents seconds of UTC time since Unix epoch
	// 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
	// 9999-12-31T23:59:59Z inclusive.
	Seconds int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Non-negative fractions of a second at nanosecond resolution. Negative
	// second values with fractions must still have non-negative nanos values
	// that count forward in time. Must be from 0 to 999,999,999
	// inclusive.
	Nanos int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (x *ExecutionStatusMessagesPubSubSchema_Timestamp) Reset() {
	*x = ExecutionStatusMessagesPubSubSchema_Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStatusMessagesPubSubSchema_Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatusMessagesPubSubSchema_Timestamp) ProtoMessage() {}

func (x *ExecutionStatusMessagesPubSubSchema_Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatusMessagesPubSubSchema_Timestamp.ProtoReflect.Descriptor instead.
func (*ExecutionStatusMessagesPubSubSchema_Timestamp) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ExecutionStatusMessagesPubSubSchema_Timestamp) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *ExecutionStatusMessagesPubSubSchema_Timestamp) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

// Message holding status for TestCaseExecutions and TestInstructionExecutions
type ExecutionStatusMessagesPubSubSchema_TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoFileVersionUsedByClient    ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum `protobuf:"varint,1,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
	TestCaseExecutionsStatus        []*ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusMessage            `protobuf:"bytes,2,rep,name=TestCaseExecutionsStatus,proto3" json:"TestCaseExecutionsStatus,omitempty"`                                                                                                                               // An array of TestCaseExecutions and their statuses
	TestInstructionExecutionsStatus []*ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage     `protobuf:"bytes,3,rep,name=TestInstructionExecutionsStatus,proto3" json:"TestInstructionExecutionsStatus,omitempty"`                                                                                                                 // An array of TestInstructionExecutions and their statuses
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage) Reset() {
	*x = ExecutionStatusMessagesPubSubSchema_TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatusMessagesPubSubSchema_TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage) ProtoMessage() {
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatusMessagesPubSubSchema_TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage.ProtoReflect.Descriptor instead.
func (*ExecutionStatusMessagesPubSubSchema_TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage) GetProtoFileVersionUsedByClient() ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum_DEFAULT_NOT_SET
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage) GetTestCaseExecutionsStatus() []*ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusMessage {
	if x != nil {
		return x.TestCaseExecutionsStatus
	}
	return nil
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage) GetTestInstructionExecutionsStatus() []*ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage {
	if x != nil {
		return x.TestInstructionExecutionsStatus
	}
	return nil
}

// Message holding status for one TestCaseExecution
type ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseExecutionUuid      string                                                               `protobuf:"bytes,1,opt,name=TestCaseExecutionUuid,proto3" json:"TestCaseExecutionUuid,omitempty"`           // The UUID for the TestCaseExecution
	TestCaseExecutionVersion   int32                                                                `protobuf:"varint,2,opt,name=TestCaseExecutionVersion,proto3" json:"TestCaseExecutionVersion,omitempty"`    // The Version Number for the TestCaseExecution
	BroadcastTimeStamp         *ExecutionStatusMessagesPubSubSchema_Timestamp                       `protobuf:"bytes,3,opt,name=BroadcastTimeStamp,proto3" json:"BroadcastTimeStamp,omitempty"`                 // The timestamp message was broadcasted from the ExecutionServer, regarding this TestCaseExecution
	PreviousBroadcastTimeStamp *ExecutionStatusMessagesPubSubSchema_Timestamp                       `protobuf:"bytes,4,opt,name=PreviousBroadcastTimeStamp,proto3" json:"PreviousBroadcastTimeStamp,omitempty"` //  The timestamp for the previously broadcasted message form the ExecutionServer, regarding this TestCaseExecution
	TestCaseExecutionDetails   *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage `protobuf:"bytes,5,opt,name=TestCaseExecutionDetails,proto3" json:"TestCaseExecutionDetails,omitempty"`     // The TestCaseExecution-status for this TestCaseExecution
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusMessage) Reset() {
	*x = ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusMessage) ProtoMessage() {}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusMessage.ProtoReflect.Descriptor instead.
func (*ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusMessage) GetTestCaseExecutionUuid() string {
	if x != nil {
		return x.TestCaseExecutionUuid
	}
	return ""
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusMessage) GetTestCaseExecutionVersion() int32 {
	if x != nil {
		return x.TestCaseExecutionVersion
	}
	return 0
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusMessage) GetBroadcastTimeStamp() *ExecutionStatusMessagesPubSubSchema_Timestamp {
	if x != nil {
		return x.BroadcastTimeStamp
	}
	return nil
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusMessage) GetPreviousBroadcastTimeStamp() *ExecutionStatusMessagesPubSubSchema_Timestamp {
	if x != nil {
		return x.PreviousBroadcastTimeStamp
	}
	return nil
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusMessage) GetTestCaseExecutionDetails() *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage {
	if x != nil {
		return x.TestCaseExecutionDetails
	}
	return nil
}

// Message holding status for one TestInstructionExecution
type ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseExecutionUuid                      string                                                                           `protobuf:"bytes,1,opt,name=TestCaseExecutionUuid,proto3" json:"TestCaseExecutionUuid,omitempty"`                                                                                                                               // The UUID for the TestCaseExecution to which this TestInstructionExecution belongs
	TestCaseExecutionVersion                   int32                                                                            `protobuf:"varint,2,opt,name=TestCaseExecutionVersion,proto3" json:"TestCaseExecutionVersion,omitempty"`                                                                                                                        // The Version Number for the TestCaseExecution to which this TestInstructionExecution belongs
	TestInstructionExecutionUuid               string                                                                           `protobuf:"bytes,3,opt,name=TestInstructionExecutionUuid,proto3" json:"TestInstructionExecutionUuid,omitempty"`                                                                                                                 // The UUID for the TestInstructionExecution
	TestInstructionExecutionVersion            int32                                                                            `protobuf:"varint,4,opt,name=TestInstructionExecutionVersion,proto3" json:"TestInstructionExecutionVersion,omitempty"`                                                                                                          // The Version Number for the TestInstructionExecution
	TestInstructionExecutionStatus             ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum           `protobuf:"varint,5,opt,name=TestInstructionExecutionStatus,proto3,enum=fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum" json:"TestInstructionExecutionStatus,omitempty"` // The TestInstructionExecution-status for this TestInstructionExecution
	BroadcastTimeStamp                         *ExecutionStatusMessagesPubSubSchema_Timestamp                                   `protobuf:"bytes,6,opt,name=BroadcastTimeStamp,proto3" json:"BroadcastTimeStamp,omitempty"`                                                                                                                                     // The timestamp message was broadcasted from the ExecutionServer, regarding this TestCaseExecution
	PreviousBroadcastTimeStamp                 *ExecutionStatusMessagesPubSubSchema_Timestamp                                   `protobuf:"bytes,7,opt,name=PreviousBroadcastTimeStamp,proto3" json:"PreviousBroadcastTimeStamp,omitempty"`                                                                                                                     //  The timestamp for the previously broadcasted message form the ExecutionServer, regarding this TestCaseExecution
	TestInstructionExecutionsStatusInformation *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage `protobuf:"bytes,8,opt,name=TestInstructionExecutionsStatusInformation,proto3" json:"TestInstructionExecutionsStatusInformation,omitempty"`                                                                                     // The executions information for one TestInstruction-execution for when it is under execution or has finished executing
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage) Reset() {
	*x = ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage) ProtoMessage() {}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage.ProtoReflect.Descriptor instead.
func (*ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage) GetTestCaseExecutionUuid() string {
	if x != nil {
		return x.TestCaseExecutionUuid
	}
	return ""
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage) GetTestCaseExecutionVersion() int32 {
	if x != nil {
		return x.TestCaseExecutionVersion
	}
	return 0
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage) GetTestInstructionExecutionUuid() string {
	if x != nil {
		return x.TestInstructionExecutionUuid
	}
	return ""
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage) GetTestInstructionExecutionVersion() int32 {
	if x != nil {
		return x.TestInstructionExecutionVersion
	}
	return 0
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage) GetTestInstructionExecutionStatus() ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum {
	if x != nil {
		return x.TestInstructionExecutionStatus
	}
	return ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum_DEFAULT_NOT_SET
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage) GetBroadcastTimeStamp() *ExecutionStatusMessagesPubSubSchema_Timestamp {
	if x != nil {
		return x.BroadcastTimeStamp
	}
	return nil
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage) GetPreviousBroadcastTimeStamp() *ExecutionStatusMessagesPubSubSchema_Timestamp {
	if x != nil {
		return x.PreviousBroadcastTimeStamp
	}
	return nil
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage) GetTestInstructionExecutionsStatusInformation() *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage {
	if x != nil {
		return x.TestInstructionExecutionsStatusInformation
	}
	return nil
}

// The executions information for one TestInstruction-execution for when it is under execution or has finished executing
type ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SentTimeStamp                        *ExecutionStatusMessagesPubSubSchema_Timestamp                         `protobuf:"bytes,1,opt,name=SentTimeStamp,proto3" json:"SentTimeStamp,omitempty"`                                                                                                                                               // The Time that the TestInstruction was sent towards worker
	ExpectedExecutionEndTimeStamp        *ExecutionStatusMessagesPubSubSchema_Timestamp                         `protobuf:"bytes,2,opt,name=ExpectedExecutionEndTimeStamp,proto3" json:"ExpectedExecutionEndTimeStamp,omitempty"`                                                                                                               // The maximum expected EndTimeStamp for the TestInstructionExecution
	TestInstructionExecutionStatus       ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum `protobuf:"varint,3,opt,name=TestInstructionExecutionStatus,proto3,enum=fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum" json:"TestInstructionExecutionStatus,omitempty"` // The current Execution status for the TestInstructionExecution
	TestInstructionExecutionEndTimeStamp *ExecutionStatusMessagesPubSubSchema_Timestamp                         `protobuf:"bytes,4,opt,name=TestInstructionExecutionEndTimeStamp,proto3" json:"TestInstructionExecutionEndTimeStamp,omitempty"`                                                                                                 // The  EndTimeStamp for the TestInstructionExecution
	TestInstructionExecutionHasFinished  bool                                                                   `protobuf:"varint,5,opt,name=TestInstructionExecutionHasFinished,proto3" json:"TestInstructionExecutionHasFinished,omitempty"`                                                                                                  // Indicates if TestInstructionExecution has finished or not
	UniqueDatabaseRowCounter             uint64                                                                 `protobuf:"varint,6,opt,name=UniqueDatabaseRowCounter,proto3" json:"UniqueDatabaseRowCounter,omitempty"`                                                                                                                        // A unique counter for every database row
	TestInstructionCanBeReExecuted       bool                                                                   `protobuf:"varint,7,opt,name=TestInstructionCanBeReExecuted,proto3" json:"TestInstructionCanBeReExecuted,omitempty"`                                                                                                            // Depending of both type of TestInstruction and how execution ends the TestInstruction could be rerun
	ExecutionStatusUpdateTimeStamp       *ExecutionStatusMessagesPubSubSchema_Timestamp                         `protobuf:"bytes,8,opt,name=ExecutionStatusUpdateTimeStamp,proto3" json:"ExecutionStatusUpdateTimeStamp,omitempty"`                                                                                                             // When TestInstructionExecution was last updated
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage) Reset() {
	*x = ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage) ProtoMessage() {
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage.ProtoReflect.Descriptor instead.
func (*ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage) GetSentTimeStamp() *ExecutionStatusMessagesPubSubSchema_Timestamp {
	if x != nil {
		return x.SentTimeStamp
	}
	return nil
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage) GetExpectedExecutionEndTimeStamp() *ExecutionStatusMessagesPubSubSchema_Timestamp {
	if x != nil {
		return x.ExpectedExecutionEndTimeStamp
	}
	return nil
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage) GetTestInstructionExecutionStatus() ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum {
	if x != nil {
		return x.TestInstructionExecutionStatus
	}
	return ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum_DEFAULT_NOT_SET
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage) GetTestInstructionExecutionEndTimeStamp() *ExecutionStatusMessagesPubSubSchema_Timestamp {
	if x != nil {
		return x.TestInstructionExecutionEndTimeStamp
	}
	return nil
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage) GetTestInstructionExecutionHasFinished() bool {
	if x != nil {
		return x.TestInstructionExecutionHasFinished
	}
	return false
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage) GetUniqueDatabaseRowCounter() uint64 {
	if x != nil {
		return x.UniqueDatabaseRowCounter
	}
	return 0
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage) GetTestInstructionCanBeReExecuted() bool {
	if x != nil {
		return x.TestInstructionCanBeReExecuted
	}
	return false
}

func (x *ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage) GetExecutionStatusUpdateTimeStamp() *ExecutionStatusMessagesPubSubSchema_Timestamp {
	if x != nil {
		return x.ExecutionStatusUpdateTimeStamp
	}
	return nil
}

type ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionStartTimeStamp        *ExecutionStatusMessagesPubSubSchema_Timestamp                  `protobuf:"bytes,1,opt,name=ExecutionStartTimeStamp,proto3" json:"ExecutionStartTimeStamp,omitempty"`                                                                                                      // The timestamp when the execution was put for execution, not on queue for execution
	ExecutionStopTimeStamp         *ExecutionStatusMessagesPubSubSchema_Timestamp                  `protobuf:"bytes,2,opt,name=ExecutionStopTimeStamp,proto3" json:"ExecutionStopTimeStamp,omitempty"`                                                                                                        // The timestamp when the execution was ended, in anyway
	TestCaseExecutionStatus        ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum `protobuf:"varint,3,opt,name=TestCaseExecutionStatus,proto3,enum=fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum" json:"TestCaseExecutionStatus,omitempty"` // The status of the ongoing  TestCase execution
	ExecutionHasFinished           bool                                                            `protobuf:"varint,4,opt,name=ExecutionHasFinished,proto3" json:"ExecutionHasFinished,omitempty"`                                                                                                           // A simple status telling if the execution has ended or not
	ExecutionStatusUpdateTimeStamp *ExecutionStatusMessagesPubSubSchema_Timestamp                  `protobuf:"bytes,5,opt,name=ExecutionStatusUpdateTimeStamp,proto3" json:"ExecutionStatusUpdateTimeStamp,omitempty"`                                                                                        // The timestamp when the status was last updated
	UniqueDatabaseRowCounter       uint64                                                          `protobuf:"varint,6,opt,name=UniqueDatabaseRowCounter,proto3" json:"UniqueDatabaseRowCounter,omitempty"`                                                                                                   // A unique counter for every database row
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage) Reset() {
	*x = ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage) ProtoMessage() {}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage.ProtoReflect.Descriptor instead.
func (*ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDescGZIP(), []int{0, 5}
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage) GetExecutionStartTimeStamp() *ExecutionStatusMessagesPubSubSchema_Timestamp {
	if x != nil {
		return x.ExecutionStartTimeStamp
	}
	return nil
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage) GetExecutionStopTimeStamp() *ExecutionStatusMessagesPubSubSchema_Timestamp {
	if x != nil {
		return x.ExecutionStopTimeStamp
	}
	return nil
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage) GetTestCaseExecutionStatus() ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum {
	if x != nil {
		return x.TestCaseExecutionStatus
	}
	return ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum_DEFAULT_NOT_SET
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage) GetExecutionHasFinished() bool {
	if x != nil {
		return x.ExecutionHasFinished
	}
	return false
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage) GetExecutionStatusUpdateTimeStamp() *ExecutionStatusMessagesPubSubSchema_Timestamp {
	if x != nil {
		return x.ExecutionStatusUpdateTimeStamp
	}
	return nil
}

func (x *ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage) GetUniqueDatabaseRowCounter() uint64 {
	if x != nil {
		return x.UniqueDatabaseRowCounter
	}
	return 0
}

var File_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto protoreflect.FileDescriptor

var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDesc = []byte{
	0x0a, 0x77, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x55, 0x73, 0x65,
	0x64, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x50, 0x75, 0x62,
	0x53, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x22, 0xc1, 0x2c, 0x0a, 0x23, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0xb4, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x70, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64,
	0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x20, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x75, 0x62, 0x53,
	0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x20, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x73, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x49, 0x73, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x85, 0x01, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x3b, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x1a, 0xd1, 0x04, 0x0a, 0x41, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0xb4, 0x01, 0x0a,
	0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x70, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x75, 0x62, 0x53,
	0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50,
	0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x18, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x69,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xc3, 0x04, 0x0a, 0x1e, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x7d, 0x0a, 0x12, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x8d,
	0x01, 0x0a, 0x1a, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x75, 0x62, 0x53,
	0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x1a, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x9f,
	0x01, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x63, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x1a, 0xb9, 0x07, 0x0a, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x3a, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x48, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xae, 0x01, 0x0a, 0x1e, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x66, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x75, 0x62, 0x53,
	0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1e, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7d, 0x0a, 0x12, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75,
	0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x8d, 0x01, 0x0a, 0x1a, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4d, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1a,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0xcf, 0x01, 0x0a, 0x2a, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x6f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x2a, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xfb, 0x07, 0x0a,
	0x2b, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x73, 0x0a, 0x0d,
	0x53, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x75, 0x62, 0x53,
	0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x93, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1d, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0xae, 0x01, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x66, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x24, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75,
	0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x50, 0x0a, 0x23,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x18, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x18, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x1e, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e,
	0x42, 0x65, 0x52, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x52, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x12, 0x95, 0x01, 0x0a, 0x1e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xd7, 0x05, 0x0a, 0x1f, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x87,
	0x01, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4d, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x99, 0x01, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75,
	0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x14,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x12, 0x95, 0x01, 0x0a, 0x1e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x18, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x22, 0xc0, 0x01, 0x0a, 0x2c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x40, 0x0a, 0x3c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x30, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x13, 0x0a, 0x0b,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x31, 0x10, 0x02, 0x1a, 0x02, 0x08,
	0x01, 0x12, 0x13, 0x0a, 0x0b, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x32,
	0x10, 0x03, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x30, 0x5f, 0x33, 0x10, 0x04, 0x22, 0xdf, 0x03, 0x0a, 0x22, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x36,
	0x0a, 0x32, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x45, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x45,
	0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x54, 0x49, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x2c, 0x0a,
	0x28, 0x54, 0x49, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e,
	0x5f, 0x42, 0x45, 0x5f, 0x52, 0x45, 0x52, 0x55, 0x4e, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x49, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x4f, 0x4b, 0x10, 0x05,
	0x12, 0x20, 0x0a, 0x1c, 0x54, 0x49, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x5f, 0x4f, 0x4b, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x42, 0x45, 0x5f, 0x52, 0x45, 0x52, 0x55, 0x4e,
	0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x49, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48,
	0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x4b, 0x10, 0x07, 0x12, 0x24, 0x0a, 0x20, 0x54,
	0x49, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x4f, 0x4b, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x42, 0x45, 0x5f, 0x52, 0x45, 0x52, 0x55, 0x4e, 0x10,
	0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x49, 0x45, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x09, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x49, 0x45, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x42, 0x45, 0x5f, 0x52, 0x45, 0x52, 0x55, 0x4e, 0x10, 0x0a,
	0x12, 0x1c, 0x0a, 0x18, 0x54, 0x49, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x29,
	0x0a, 0x25, 0x54, 0x49, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x42,
	0x45, 0x5f, 0x52, 0x45, 0x52, 0x55, 0x4e, 0x10, 0x0c, 0x22, 0xd1, 0x03, 0x0a, 0x1b, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x2b, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x43,
	0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x54, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x42, 0x45, 0x5f, 0x52, 0x45, 0x52, 0x55, 0x4e, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f,
	0x4f, 0x4b, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x45, 0x44, 0x5f, 0x4f, 0x4b, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x42, 0x45, 0x5f, 0x52,
	0x45, 0x52, 0x55, 0x4e, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x43, 0x45, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x4b, 0x10, 0x07, 0x12,
	0x24, 0x0a, 0x20, 0x54, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x4b, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x42, 0x45, 0x5f, 0x52, 0x45,
	0x52, 0x55, 0x4e, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x45,
	0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x43, 0x45, 0x5f, 0x55, 0x4e,
	0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x42, 0x45, 0x5f, 0x52, 0x45, 0x52,
	0x55, 0x4e, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x43, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x43, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x41, 0x4e, 0x5f, 0x42, 0x45, 0x5f, 0x52, 0x45, 0x52, 0x55, 0x4e, 0x10, 0x0c, 0x42, 0x0f, 0x5a,
	0x0d, 0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDescOnce sync.Once
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDescData = file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDesc
)

func file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDescGZIP() []byte {
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDescOnce.Do(func() {
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDescData)
	})
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDescData
}

var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_goTypes = []interface{}{
	(ExecutionStatusMessagesPubSubSchema_CurrentFenixExecutionGuiProtoFileVersionEnum)(0),                         // 0: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.CurrentFenixExecutionGuiProtoFileVersionEnum
	(ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusEnum)(0),                                   // 1: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestInstructionExecutionStatusEnum
	(ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusEnum)(0),                                          // 2: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionStatusEnum
	(*ExecutionStatusMessagesPubSubSchema)(nil),                                                                   // 3: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema
	(*ExecutionStatusMessagesPubSubSchema_Timestamp)(nil),                                                         // 4: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.Timestamp
	(*ExecutionStatusMessagesPubSubSchema_TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage)(nil), // 5: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage
	(*ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusMessage)(nil),                                    // 6: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionStatusMessage
	(*ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage)(nil),                             // 7: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestInstructionExecutionStatusMessage
	(*ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage)(nil),                       // 8: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestInstructionExecutionsInformationMessage
	(*ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage)(nil),                                   // 9: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionDetailsMessage
}
var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_depIdxs = []int32{
	0,  // 0: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.ProtoFileVersionUsedByClient:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.CurrentFenixExecutionGuiProtoFileVersionEnum
	4,  // 1: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.OriginalMessageCreationTimeStamp:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.Timestamp
	5,  // 2: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.ExecutionsStatus:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage
	0,  // 3: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage.ProtoFileVersionUsedByClient:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.CurrentFenixExecutionGuiProtoFileVersionEnum
	6,  // 4: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage.TestCaseExecutionsStatus:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionStatusMessage
	7,  // 5: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage.TestInstructionExecutionsStatus:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestInstructionExecutionStatusMessage
	4,  // 6: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionStatusMessage.BroadcastTimeStamp:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.Timestamp
	4,  // 7: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionStatusMessage.PreviousBroadcastTimeStamp:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.Timestamp
	9,  // 8: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionStatusMessage.TestCaseExecutionDetails:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionDetailsMessage
	1,  // 9: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestInstructionExecutionStatusMessage.TestInstructionExecutionStatus:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestInstructionExecutionStatusEnum
	4,  // 10: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestInstructionExecutionStatusMessage.BroadcastTimeStamp:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.Timestamp
	4,  // 11: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestInstructionExecutionStatusMessage.PreviousBroadcastTimeStamp:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.Timestamp
	8,  // 12: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestInstructionExecutionStatusMessage.TestInstructionExecutionsStatusInformation:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestInstructionExecutionsInformationMessage
	4,  // 13: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestInstructionExecutionsInformationMessage.SentTimeStamp:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.Timestamp
	4,  // 14: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestInstructionExecutionsInformationMessage.ExpectedExecutionEndTimeStamp:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.Timestamp
	1,  // 15: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestInstructionExecutionsInformationMessage.TestInstructionExecutionStatus:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestInstructionExecutionStatusEnum
	4,  // 16: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestInstructionExecutionsInformationMessage.TestInstructionExecutionEndTimeStamp:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.Timestamp
	4,  // 17: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestInstructionExecutionsInformationMessage.ExecutionStatusUpdateTimeStamp:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.Timestamp
	4,  // 18: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionDetailsMessage.ExecutionStartTimeStamp:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.Timestamp
	4,  // 19: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionDetailsMessage.ExecutionStopTimeStamp:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.Timestamp
	2,  // 20: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionDetailsMessage.TestCaseExecutionStatus:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionStatusEnum
	4,  // 21: fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.TestCaseExecutionDetailsMessage.ExecutionStatusUpdateTimeStamp:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusMessagesPubSubSchema.Timestamp
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() {
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_init()
}
func file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_init() {
	if File_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionStatusMessagesPubSubSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionStatusMessagesPubSubSchema_Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionStatusMessagesPubSubSchema_TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionStatusMessagesPubSubSchema_TestCaseExecutionStatusMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionStatusMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionStatusMessagesPubSubSchema_TestInstructionExecutionsInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionStatusMessagesPubSubSchema_TestCaseExecutionDetailsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_goTypes,
		DependencyIndexes: file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_depIdxs,
		EnumInfos:         file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_enumTypes,
		MessageInfos:      file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_msgTypes,
	}.Build()
	File_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto = out.File
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_rawDesc = nil
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_goTypes = nil
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_MessagesUsedTogetherWithPubSub_proto_depIdxs = nil
}
