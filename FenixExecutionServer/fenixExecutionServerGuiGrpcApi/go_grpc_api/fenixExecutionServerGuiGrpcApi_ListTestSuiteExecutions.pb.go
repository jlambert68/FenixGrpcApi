// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions.proto

package go_grpc_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum int32

const (
	TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteType_NotDefined TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum = 0 // The TestSuite-type was never properly defined
	TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteType_Standard   TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum = 1 // A 'Standard' TestSuite
	TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteType_Pig        TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum = 2 // A TestSuite that is used for controlling environments. Is often run like every 10 minutes
)

// Enum value maps for TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum.
var (
	TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum_name = map[int32]string{
		0: "TestSuiteType_NotDefined",
		1: "TestSuiteType_Standard",
		2: "TestSuiteType_Pig",
	}
	TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum_value = map[string]int32{
		"TestSuiteType_NotDefined": 0,
		"TestSuiteType_Standard":   1,
		"TestSuiteType_Pig":        2,
	}
)

func (x TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum) Enum() *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum {
	p := new(TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum)
	*p = x
	return p
}

func (x TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_enumTypes[0].Descriptor()
}

func (TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum) Type() protoreflect.EnumType {
	return &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_enumTypes[0]
}

func (x TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum.Descriptor instead.
func (TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescGZIP(), []int{4, 0, 0}
}

// MetaDataSelectTypeEnum
// The type used for SelectType
type TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum int32

const (
	TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectType_NotSelected  TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum = 0
	TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectType_SingleSelect TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum = 1
	TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectType_MultiSelect  TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum = 2
)

// Enum value maps for TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum.
var (
	TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum_name = map[int32]string{
		0: "MetaDataSelectType_NotSelected",
		1: "MetaDataSelectType_SingleSelect",
		2: "MetaDataSelectType_MultiSelect",
	}
	TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum_value = map[string]int32{
		"MetaDataSelectType_NotSelected":  0,
		"MetaDataSelectType_SingleSelect": 1,
		"MetaDataSelectType_MultiSelect":  2,
	}
)

func (x TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum) Enum() *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum {
	p := new(TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum)
	*p = x
	return p
}

func (x TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_enumTypes[1].Descriptor()
}

func (TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum) Type() protoreflect.EnumType {
	return &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_enumTypes[1]
}

func (x TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum.Descriptor instead.
func (TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescGZIP(), []int{4, 0, 1}
}

// Message to be used for requesting a list of all TestSuiteExecutions with their current execution status
type ListTestSuiteExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAndApplicationRunTimeIdentification       *UserAndApplicationRunTimeIdentificationMessage `protobuf:"bytes,1,opt,name=UserAndApplicationRunTimeIdentification,proto3" json:"UserAndApplicationRunTimeIdentification,omitempty"`              // Identifies User, Application Runt time instance and Proto-file version used
	LatestUniqueTestSuiteExecutionDatabaseRowId   int32                                           `protobuf:"varint,2,opt,name=LatestUniqueTestSuiteExecutionDatabaseRowId,proto3" json:"LatestUniqueTestSuiteExecutionDatabaseRowId,omitempty"`     //  Specifies the latest database row id for executions that the TesterGui has  in its memory, if zero then TesterGui has no Executions
	OnlyRetrieveLimitedSizedBatch                 bool                                            `protobuf:"varint,3,opt,name=OnlyRetrieveLimitedSizedBatch,proto3" json:"OnlyRetrieveLimitedSizedBatch,omitempty"`                                 // Inform that only a limited number of rows should be retrieved. Used to give a fast response for the user
	BatchSize                                     int32                                           `protobuf:"varint,4,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`                                                                         // If limited batch is wanted by caller then use this batch size
	RetrieveAllExecutionsForSpecificTestSuiteUuid bool                                            `protobuf:"varint,5,opt,name=RetrieveAllExecutionsForSpecificTestSuiteUuid,proto3" json:"RetrieveAllExecutionsForSpecificTestSuiteUuid,omitempty"` // Should all TestSuiteExecutions be retrieved for attached TestSuiteUuid?
	SpecificTestSuiteUuid                         string                                          `protobuf:"bytes,6,opt,name=SpecificTestSuiteUuid,proto3" json:"SpecificTestSuiteUuid,omitempty"`                                                  // TestSuiteUuid for which all  all TestSuiteExecutions should be retrieved
	TestSuiteExecutionFromTimeStamp               *timestamppb.Timestamp                          `protobuf:"bytes,7,opt,name=TestSuiteExecutionFromTimeStamp,proto3" json:"TestSuiteExecutionFromTimeStamp,omitempty"`                              // Execution From TimeStamp in Request. Filter to be able to select a narrow date span
	TestSuiteExecutionToTimeStamp                 *timestamppb.Timestamp                          `protobuf:"bytes,8,opt,name=TestSuiteExecutionToTimeStamp,proto3" json:"TestSuiteExecutionToTimeStamp,omitempty"`                                  // Execution To TimeStamp in Request. Filter to be able to select a narrow date span
}

func (x *ListTestSuiteExecutionsRequest) Reset() {
	*x = ListTestSuiteExecutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestSuiteExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestSuiteExecutionsRequest) ProtoMessage() {}

func (x *ListTestSuiteExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestSuiteExecutionsRequest.ProtoReflect.Descriptor instead.
func (*ListTestSuiteExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescGZIP(), []int{0}
}

func (x *ListTestSuiteExecutionsRequest) GetUserAndApplicationRunTimeIdentification() *UserAndApplicationRunTimeIdentificationMessage {
	if x != nil {
		return x.UserAndApplicationRunTimeIdentification
	}
	return nil
}

func (x *ListTestSuiteExecutionsRequest) GetLatestUniqueTestSuiteExecutionDatabaseRowId() int32 {
	if x != nil {
		return x.LatestUniqueTestSuiteExecutionDatabaseRowId
	}
	return 0
}

func (x *ListTestSuiteExecutionsRequest) GetOnlyRetrieveLimitedSizedBatch() bool {
	if x != nil {
		return x.OnlyRetrieveLimitedSizedBatch
	}
	return false
}

func (x *ListTestSuiteExecutionsRequest) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *ListTestSuiteExecutionsRequest) GetRetrieveAllExecutionsForSpecificTestSuiteUuid() bool {
	if x != nil {
		return x.RetrieveAllExecutionsForSpecificTestSuiteUuid
	}
	return false
}

func (x *ListTestSuiteExecutionsRequest) GetSpecificTestSuiteUuid() string {
	if x != nil {
		return x.SpecificTestSuiteUuid
	}
	return ""
}

func (x *ListTestSuiteExecutionsRequest) GetTestSuiteExecutionFromTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TestSuiteExecutionFromTimeStamp
	}
	return nil
}

func (x *ListTestSuiteExecutionsRequest) GetTestSuiteExecutionToTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TestSuiteExecutionToTimeStamp
	}
	return nil
}

// Message to be used in the response when requesting a list of all TestSuiteExecutions with their current execution status
type ListTestSuiteExecutionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckNackResponse                             *AckNackResponse                  `protobuf:"bytes,1,opt,name=ackNackResponse,proto3" json:"ackNackResponse,omitempty"`                                                          // Hold all error messages, if there are any. Message also gives of everything was OK or not
	TestSuiteExecutionsList                     []*TestSuiteExecutionsListMessage `protobuf:"bytes,2,rep,name=TestSuiteExecutionsList,proto3" json:"TestSuiteExecutionsList,omitempty"`                                          // A list with all requested TestSuiteExecutions
	LatestUniqueTestSuiteExecutionDatabaseRowId int32                             `protobuf:"varint,3,opt,name=LatestUniqueTestSuiteExecutionDatabaseRowId,proto3" json:"LatestUniqueTestSuiteExecutionDatabaseRowId,omitempty"` // Tha last unique row id for the response
	MoreRowsExists                              bool                              `protobuf:"varint,4,opt,name=MoreRowsExists,proto3" json:"MoreRowsExists,omitempty"`                                                           // An indicator what tells if there are more rows that can be retrieve. Is used to quickly get the latest rows and present to the user and the in the background retrieve the rest.
}

func (x *ListTestSuiteExecutionsResponse) Reset() {
	*x = ListTestSuiteExecutionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestSuiteExecutionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestSuiteExecutionsResponse) ProtoMessage() {}

func (x *ListTestSuiteExecutionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestSuiteExecutionsResponse.ProtoReflect.Descriptor instead.
func (*ListTestSuiteExecutionsResponse) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescGZIP(), []int{1}
}

func (x *ListTestSuiteExecutionsResponse) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

func (x *ListTestSuiteExecutionsResponse) GetTestSuiteExecutionsList() []*TestSuiteExecutionsListMessage {
	if x != nil {
		return x.TestSuiteExecutionsList
	}
	return nil
}

func (x *ListTestSuiteExecutionsResponse) GetLatestUniqueTestSuiteExecutionDatabaseRowId() int32 {
	if x != nil {
		return x.LatestUniqueTestSuiteExecutionDatabaseRowId
	}
	return 0
}

func (x *ListTestSuiteExecutionsResponse) GetMoreRowsExists() bool {
	if x != nil {
		return x.MoreRowsExists
	}
	return false
}

// Message holding one TestSuiteExecution
// Owner is ExecutionServer due to it's that server that store the information in the database
// Sync with parent 'TestSuiteExecutionsListMessage'
type TestSuiteExecutionsListMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID                                   string                                                 `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                                                                                                      // The DomainUUID where the TestSuite belongs
	DomainName                                   string                                                 `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                                                                                      // The DomainName where the TestSuite belongs
	TestSuiteUuid                                string                                                 `protobuf:"bytes,3,opt,name=TestSuiteUuid,proto3" json:"TestSuiteUuid,omitempty"`                                                                                                // The SuiteUuid when the TestSuite was executed in  suite
	TestSuiteName                                string                                                 `protobuf:"bytes,4,opt,name=TestSuiteName,proto3" json:"TestSuiteName,omitempty"`                                                                                                // The SuiteName when the TestSuite was executed in  suite
	TestSuiteVersion                             int32                                                  `protobuf:"varint,5,opt,name=TestSuiteVersion,proto3" json:"TestSuiteVersion,omitempty"`                                                                                         // The SuiteVersion when the TestSuite was executed in  suite
	TestSuiteExecutionUuid                       string                                                 `protobuf:"bytes,6,opt,name=TestSuiteExecutionUuid,proto3" json:"TestSuiteExecutionUuid,omitempty"`                                                                              // The SuiteExecution Uuid when the TestSuite was executed in  suite
	TestSuiteExecutionVersion                    int32                                                  `protobuf:"varint,7,opt,name=TestSuiteExecutionVersion,proto3" json:"TestSuiteExecutionVersion,omitempty"`                                                                       // The SuiteExecutionVersion when the TestSuite was executed in  suite
	UpdatingTestCaseUuid                         string                                                 `protobuf:"bytes,8,opt,name=UpdatingTestCaseUuid,proto3" json:"UpdatingTestCaseUuid,omitempty"`                                                                                  // The Updating TestCaseUuid
	UpdatingTestCaseName                         string                                                 `protobuf:"bytes,9,opt,name=UpdatingTestCaseName,proto3" json:"UpdatingTestCaseName,omitempty"`                                                                                  // The Updating TestCaseName
	UpdatingTestCaseVersion                      int32                                                  `protobuf:"varint,10,opt,name=UpdatingTestCaseVersion,proto3" json:"UpdatingTestCaseVersion,omitempty"`                                                                          // The Updating TestCaseVersion
	UpdatingTestCaseExecutionUuid                string                                                 `protobuf:"bytes,11,opt,name=UpdatingTestCaseExecutionUuid,proto3" json:"UpdatingTestCaseExecutionUuid,omitempty"`                                                               // The Updating TestCaseExecutionUuid
	UpdatingTestCaseExecutionVersion             int32                                                  `protobuf:"varint,12,opt,name=UpdatingTestCaseExecutionVersion,proto3" json:"UpdatingTestCaseExecutionVersion,omitempty"`                                                        // The Updating TestCaseExecutionVersion
	QueueTimeStamp                               *timestamppb.Timestamp                                 `protobuf:"bytes,13,opt,name=QueueTimeStamp,proto3" json:"QueueTimeStamp,omitempty"`                                                                                             // The TimeStamp when the Updating TestCaseExecution was put on the Execution-queue
	TestDataSetUuid                              string                                                 `protobuf:"bytes,14,opt,name=TestDataSetUuid,proto3" json:"TestDataSetUuid,omitempty"`                                                                                           // TestDataSet Uuid - Not used
	ExecutionPriority                            ExecutionPriorityEnum                                  `protobuf:"varint,15,opt,name=ExecutionPriority,proto3,enum=fenixExecutionServerGuiGrpcApi.ExecutionPriorityEnum" json:"ExecutionPriority,omitempty"`                            // The execution priority. Helps the execution engine to prioritize the executions between different TestCaseExecutions
	ExecutionStartTimeStamp                      *timestamppb.Timestamp                                 `protobuf:"bytes,16,opt,name=ExecutionStartTimeStamp,proto3" json:"ExecutionStartTimeStamp,omitempty"`                                                                           // The Start TimeStamp of the execution
	ExecutionStopTimeStamp                       *timestamppb.Timestamp                                 `protobuf:"bytes,17,opt,name=ExecutionStopTimeStamp,proto3" json:"ExecutionStopTimeStamp,omitempty"`                                                                             // The Stop TimeStamp of the execution
	TestSuiteExecutionStatus                     TestSuiteExecutionStatusEnum                           `protobuf:"varint,18,opt,name=TestSuiteExecutionStatus,proto3,enum=fenixExecutionServerGuiGrpcApi.TestSuiteExecutionStatusEnum" json:"TestSuiteExecutionStatus,omitempty"`       // Execution Status for the TestSuiteExecution
	ExecutionHasFinished                         bool                                                   `protobuf:"varint,19,opt,name=ExecutionHasFinished,proto3" json:"ExecutionHasFinished,omitempty"`                                                                                // Boolean telling if the TestSuite is finished its execution
	UniqueCounter                                int32                                                  `protobuf:"varint,20,opt,name=UniqueCounter,proto3" json:"UniqueCounter,omitempty"`                                                                                              // A unique counter coming from the database table for ongoing executions
	ExecutionStatusUpdateTimeStamp               *timestamppb.Timestamp                                 `protobuf:"bytes,21,opt,name=ExecutionStatusUpdateTimeStamp,proto3" json:"ExecutionStatusUpdateTimeStamp,omitempty"`                                                             // The timeStamo when the executions status was last updated
	ExecutionStatusReportLevel                   ExecutionStatusReportLevelEnum                         `protobuf:"varint,22,opt,name=ExecutionStatusReportLevel,proto3,enum=fenixExecutionServerGuiGrpcApi.ExecutionStatusReportLevelEnum" json:"ExecutionStatusReportLevel,omitempty"` // Helps the execution engine to decide if real time execution status updates should be sent using the postgres broadcast system
	TestSuitePreview                             *TestSuitePreviewMessage                               `protobuf:"bytes,23,opt,name=TestSuitePreview,proto3" json:"TestSuitePreview,omitempty"`                                                                                         // The Preview message of the TestSuite
	TestCasesPreviews                            *TestCasePreviews                                      `protobuf:"bytes,24,opt,name=TestCasesPreviews,proto3" json:"TestCasesPreviews,omitempty"`                                                                                       // All TestCase-preview structures from the TestCase-data. Used in TestSuiteExecutions.list to create a preview of execution status for TestSuite.
	TestInstructionsExecutionStatusPreviewValues []*TestInstructionsExecutionStatusPreviewValuesMessage `protobuf:"bytes,25,rep,name=TestInstructionsExecutionStatusPreviewValues,proto3" json:"TestInstructionsExecutionStatusPreviewValues,omitempty"`                                 // All TestInstructionExecutions and their execution status.
	UniqueExecutionCounter                       int32                                                  `protobuf:"varint,26,opt,name=UniqueExecutionCounter,proto3" json:"UniqueExecutionCounter,omitempty"`                                                                            // The unique database row indicator. Used to be able for TesterGui to only retrieve the latest and updated rows from the database
	TestSuitePreviewHash                         string                                                 `protobuf:"bytes,27,opt,name=TestSuitePreviewHash,proto3" json:"TestSuitePreviewHash,omitempty"`                                                                                 // Comes from TestSuitePreview in Database, but is not used here. But is need due to Unmarshal into Proto-message
	NumberOfTestSuiteExecutionForTestSuite       int32                                                  `protobuf:"varint,28,opt,name=NumberOfTestSuiteExecutionForTestSuite,proto3" json:"NumberOfTestSuiteExecutionForTestSuite,omitempty"`                                            // The number of TestSuiteExecutions this specific TestSuiteUuid has produced
}

func (x *TestSuiteExecutionsListMessage) Reset() {
	*x = TestSuiteExecutionsListMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuiteExecutionsListMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuiteExecutionsListMessage) ProtoMessage() {}

func (x *TestSuiteExecutionsListMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuiteExecutionsListMessage.ProtoReflect.Descriptor instead.
func (*TestSuiteExecutionsListMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescGZIP(), []int{2}
}

func (x *TestSuiteExecutionsListMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *TestSuiteExecutionsListMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *TestSuiteExecutionsListMessage) GetTestSuiteUuid() string {
	if x != nil {
		return x.TestSuiteUuid
	}
	return ""
}

func (x *TestSuiteExecutionsListMessage) GetTestSuiteName() string {
	if x != nil {
		return x.TestSuiteName
	}
	return ""
}

func (x *TestSuiteExecutionsListMessage) GetTestSuiteVersion() int32 {
	if x != nil {
		return x.TestSuiteVersion
	}
	return 0
}

func (x *TestSuiteExecutionsListMessage) GetTestSuiteExecutionUuid() string {
	if x != nil {
		return x.TestSuiteExecutionUuid
	}
	return ""
}

func (x *TestSuiteExecutionsListMessage) GetTestSuiteExecutionVersion() int32 {
	if x != nil {
		return x.TestSuiteExecutionVersion
	}
	return 0
}

func (x *TestSuiteExecutionsListMessage) GetUpdatingTestCaseUuid() string {
	if x != nil {
		return x.UpdatingTestCaseUuid
	}
	return ""
}

func (x *TestSuiteExecutionsListMessage) GetUpdatingTestCaseName() string {
	if x != nil {
		return x.UpdatingTestCaseName
	}
	return ""
}

func (x *TestSuiteExecutionsListMessage) GetUpdatingTestCaseVersion() int32 {
	if x != nil {
		return x.UpdatingTestCaseVersion
	}
	return 0
}

func (x *TestSuiteExecutionsListMessage) GetUpdatingTestCaseExecutionUuid() string {
	if x != nil {
		return x.UpdatingTestCaseExecutionUuid
	}
	return ""
}

func (x *TestSuiteExecutionsListMessage) GetUpdatingTestCaseExecutionVersion() int32 {
	if x != nil {
		return x.UpdatingTestCaseExecutionVersion
	}
	return 0
}

func (x *TestSuiteExecutionsListMessage) GetQueueTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.QueueTimeStamp
	}
	return nil
}

func (x *TestSuiteExecutionsListMessage) GetTestDataSetUuid() string {
	if x != nil {
		return x.TestDataSetUuid
	}
	return ""
}

func (x *TestSuiteExecutionsListMessage) GetExecutionPriority() ExecutionPriorityEnum {
	if x != nil {
		return x.ExecutionPriority
	}
	return ExecutionPriorityEnum_ExecutionPriorityEnum_DEFAULT_NOT_SET
}

func (x *TestSuiteExecutionsListMessage) GetExecutionStartTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionStartTimeStamp
	}
	return nil
}

func (x *TestSuiteExecutionsListMessage) GetExecutionStopTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionStopTimeStamp
	}
	return nil
}

func (x *TestSuiteExecutionsListMessage) GetTestSuiteExecutionStatus() TestSuiteExecutionStatusEnum {
	if x != nil {
		return x.TestSuiteExecutionStatus
	}
	return TestSuiteExecutionStatusEnum_TestSuiteExecutionStatusEnum_DEFAULT_NOT_SET
}

func (x *TestSuiteExecutionsListMessage) GetExecutionHasFinished() bool {
	if x != nil {
		return x.ExecutionHasFinished
	}
	return false
}

func (x *TestSuiteExecutionsListMessage) GetUniqueCounter() int32 {
	if x != nil {
		return x.UniqueCounter
	}
	return 0
}

func (x *TestSuiteExecutionsListMessage) GetExecutionStatusUpdateTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionStatusUpdateTimeStamp
	}
	return nil
}

func (x *TestSuiteExecutionsListMessage) GetExecutionStatusReportLevel() ExecutionStatusReportLevelEnum {
	if x != nil {
		return x.ExecutionStatusReportLevel
	}
	return ExecutionStatusReportLevelEnum_ExecutionStatusReportLevelEnum_DEFAULT_NOT_SET
}

func (x *TestSuiteExecutionsListMessage) GetTestSuitePreview() *TestSuitePreviewMessage {
	if x != nil {
		return x.TestSuitePreview
	}
	return nil
}

func (x *TestSuiteExecutionsListMessage) GetTestCasesPreviews() *TestCasePreviews {
	if x != nil {
		return x.TestCasesPreviews
	}
	return nil
}

func (x *TestSuiteExecutionsListMessage) GetTestInstructionsExecutionStatusPreviewValues() []*TestInstructionsExecutionStatusPreviewValuesMessage {
	if x != nil {
		return x.TestInstructionsExecutionStatusPreviewValues
	}
	return nil
}

func (x *TestSuiteExecutionsListMessage) GetUniqueExecutionCounter() int32 {
	if x != nil {
		return x.UniqueExecutionCounter
	}
	return 0
}

func (x *TestSuiteExecutionsListMessage) GetTestSuitePreviewHash() string {
	if x != nil {
		return x.TestSuitePreviewHash
	}
	return ""
}

func (x *TestSuiteExecutionsListMessage) GetNumberOfTestSuiteExecutionForTestSuite() int32 {
	if x != nil {
		return x.NumberOfTestSuiteExecutionForTestSuite
	}
	return 0
}

// Message holding all TestCasePreView-messages for the TestSuite
type TestCasePreviews struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCasePreviews []*TestCasePreviewStructureMessage `protobuf:"bytes,1,rep,name=TestCasePreviews,proto3" json:"TestCasePreviews,omitempty"` //  All TestCase-preview structures from the TestCase-data. Used in TestSuiteExecutions.list to create a preview of execution status for TestSuite.
}

func (x *TestCasePreviews) Reset() {
	*x = TestCasePreviews{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCasePreviews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCasePreviews) ProtoMessage() {}

func (x *TestCasePreviews) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCasePreviews.ProtoReflect.Descriptor instead.
func (*TestCasePreviews) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescGZIP(), []int{3}
}

func (x *TestCasePreviews) GetTestCasePreviews() []*TestCasePreviewStructureMessage {
	if x != nil {
		return x.TestCasePreviews
	}
	return nil
}

// Message holden a preview and the hash of the preview  of the TestSuite. Only used for looking at and no editing
type TestSuitePreviewMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestSuitePreview     *TestSuitePreviewMessage_TestSuitePreviewStructureMessage `protobuf:"bytes,1,opt,name=TestSuitePreview,proto3" json:"TestSuitePreview,omitempty"`         // The Preview message of the TestCase
	TestSuitePreviewHash string                                                    `protobuf:"bytes,2,opt,name=TestSuitePreviewHash,proto3" json:"TestSuitePreviewHash,omitempty"` // The hash of the Preview message
}

func (x *TestSuitePreviewMessage) Reset() {
	*x = TestSuitePreviewMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuitePreviewMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuitePreviewMessage) ProtoMessage() {}

func (x *TestSuitePreviewMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuitePreviewMessage.ProtoReflect.Descriptor instead.
func (*TestSuitePreviewMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescGZIP(), []int{4}
}

func (x *TestSuitePreviewMessage) GetTestSuitePreview() *TestSuitePreviewMessage_TestSuitePreviewStructureMessage {
	if x != nil {
		return x.TestSuitePreview
	}
	return nil
}

func (x *TestSuitePreviewMessage) GetTestSuitePreviewHash() string {
	if x != nil {
		return x.TestSuitePreviewHash
	}
	return ""
}

// Message holding the full preview of the TestSuite and its TestCases
// Update and sync with 'fenixExecutionServerGrpcApi_Messages.proto'
type TestSuitePreviewMessage_TestSuitePreviewStructureMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestSuiteUuid                      string                                                                                                     `protobuf:"bytes,1,opt,name=TestSuiteUuid,proto3" json:"TestSuiteUuid,omitempty"`                                                                                                                                    // The TestSuiteUuid
	TestSuiteName                      string                                                                                                     `protobuf:"bytes,2,opt,name=TestSuiteName,proto3" json:"TestSuiteName,omitempty"`                                                                                                                                    // The name of the Suite
	TestSuiteVersion                   string                                                                                                     `protobuf:"bytes,3,opt,name=TestSuiteVersion,proto3" json:"TestSuiteVersion,omitempty"`                                                                                                                              // The version of the Suite
	DomainUuidThatOwnTheTestSuite      string                                                                                                     `protobuf:"bytes,4,opt,name=DomainUuidThatOwnTheTestSuite,proto3" json:"DomainUuidThatOwnTheTestSuite,omitempty"`                                                                                                    // The Domain that owns the Suite
	DomainNameThatOwnTheTestSuite      string                                                                                                     `protobuf:"bytes,5,opt,name=DomainNameThatOwnTheTestSuite,proto3" json:"DomainNameThatOwnTheTestSuite,omitempty"`                                                                                                    // The Domain that owns the Suite
	TestSuiteDescription               string                                                                                                     `protobuf:"bytes,6,opt,name=TestSuiteDescription,proto3" json:"TestSuiteDescription,omitempty"`                                                                                                                      // The Description of the TestCase
	TestCasesInTestSuite               *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage                      `protobuf:"bytes,7,opt,name=TestCasesInTestSuite,proto3" json:"TestCasesInTestSuite,omitempty"`                                                                                                                      // A list of the different TestCases used in the TestSuite
	CreatedByGcpLoginUser              string                                                                                                     `protobuf:"bytes,8,opt,name=CreatedByGcpLoginUser,proto3" json:"CreatedByGcpLoginUser,omitempty"`                                                                                                                    // The person that did log in towards GCP
	CreatedByComputerLoginUser         string                                                                                                     `protobuf:"bytes,9,opt,name=CreatedByComputerLoginUser,proto3" json:"CreatedByComputerLoginUser,omitempty"`                                                                                                          // The person that is logged into the computer
	CreatedDate                        string                                                                                                     `protobuf:"bytes,10,opt,name=CreatedDate,proto3" json:"CreatedDate,omitempty"`                                                                                                                                       // The date when the TestSuite was first created
	LastSavedByUserOnComputer          string                                                                                                     `protobuf:"bytes,11,opt,name=LastSavedByUserOnComputer,proto3" json:"LastSavedByUserOnComputer,omitempty"`                                                                                                           // The logged in user on the computer that last saved the TestSuite
	LastSavedByUserGCPAuthorization    string                                                                                                     `protobuf:"bytes,12,opt,name=LastSavedByUserGCPAuthorization,proto3" json:"LastSavedByUserGCPAuthorization,omitempty"`                                                                                               // The authorized user towards GCP that last saved the TestSuite
	LastSavedTimeStamp                 string                                                                                                     `protobuf:"bytes,13,opt,name=LastSavedTimeStamp,proto3" json:"LastSavedTimeStamp,omitempty"`                                                                                                                         // The Timestamp when the TestSuite was last saved
	TestSuiteType                      *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeMessage                             `protobuf:"bytes,14,opt,name=TestSuiteType,proto3" json:"TestSuiteType,omitempty"`                                                                                                                                   // The type of TestSuite; Standard, Pig....
	SelectedTestSuiteMetaDataValuesMap map[string]*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage `protobuf:"bytes,15,rep,name=SelectedTestSuiteMetaDataValuesMap,proto3" json:"SelectedTestSuiteMetaDataValuesMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Map containing all selected MetaDataValues. For MultiSelect each values is added.  The Map key = 'OwnerDomainUuid.MetaDataGroupName.MetaDataName.MetaDataNameValue'
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) Reset() {
	*x = TestSuitePreviewMessage_TestSuitePreviewStructureMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuitePreviewMessage_TestSuitePreviewStructureMessage) ProtoMessage() {}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuitePreviewMessage_TestSuitePreviewStructureMessage.ProtoReflect.Descriptor instead.
func (*TestSuitePreviewMessage_TestSuitePreviewStructureMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescGZIP(), []int{4, 0}
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) GetTestSuiteUuid() string {
	if x != nil {
		return x.TestSuiteUuid
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) GetTestSuiteName() string {
	if x != nil {
		return x.TestSuiteName
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) GetTestSuiteVersion() string {
	if x != nil {
		return x.TestSuiteVersion
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) GetDomainUuidThatOwnTheTestSuite() string {
	if x != nil {
		return x.DomainUuidThatOwnTheTestSuite
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) GetDomainNameThatOwnTheTestSuite() string {
	if x != nil {
		return x.DomainNameThatOwnTheTestSuite
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) GetTestSuiteDescription() string {
	if x != nil {
		return x.TestSuiteDescription
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) GetTestCasesInTestSuite() *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage {
	if x != nil {
		return x.TestCasesInTestSuite
	}
	return nil
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) GetCreatedByGcpLoginUser() string {
	if x != nil {
		return x.CreatedByGcpLoginUser
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) GetCreatedByComputerLoginUser() string {
	if x != nil {
		return x.CreatedByComputerLoginUser
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) GetCreatedDate() string {
	if x != nil {
		return x.CreatedDate
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) GetLastSavedByUserOnComputer() string {
	if x != nil {
		return x.LastSavedByUserOnComputer
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) GetLastSavedByUserGCPAuthorization() string {
	if x != nil {
		return x.LastSavedByUserGCPAuthorization
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) GetLastSavedTimeStamp() string {
	if x != nil {
		return x.LastSavedTimeStamp
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) GetTestSuiteType() *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeMessage {
	if x != nil {
		return x.TestSuiteType
	}
	return nil
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage) GetSelectedTestSuiteMetaDataValuesMap() map[string]*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage {
	if x != nil {
		return x.SelectedTestSuiteMetaDataValuesMap
	}
	return nil
}

// Message holding all TestCases that is added to a TestSuite
type TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCasesInTestSuite []*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage `protobuf:"bytes,1,rep,name=TestCasesInTestSuite,proto3" json:"TestCasesInTestSuite,omitempty"` // All the TestCases in the TestSuite
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage) Reset() {
	*x = TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage) ProtoMessage() {
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage.ProtoReflect.Descriptor instead.
func (*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescGZIP(), []int{4, 0, 1}
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage) GetTestCasesInTestSuite() []*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage {
	if x != nil {
		return x.TestCasesInTestSuite
	}
	return nil
}

// Message holding one TestCase that is added to a TestSuite
type TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUuid   string `protobuf:"bytes,1,opt,name=DomainUuid,proto3" json:"DomainUuid,omitempty"`     // The Domain, UUID, where the TestCase 'has its home'
	DomainName   string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`     // The Domain, Name, where the TestCase 'has its home'
	TestCaseUuid string `protobuf:"bytes,3,opt,name=TestCaseUuid,proto3" json:"TestCaseUuid,omitempty"` // The TestCase, UUID, set by TestCase-builder
	TestCaseName string `protobuf:"bytes,4,opt,name=TestCaseName,proto3" json:"TestCaseName,omitempty"` // The TestCase, Name, set in TestCase-builder
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) Reset() {
	*x = TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) ProtoMessage() {
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage.ProtoReflect.Descriptor instead.
func (*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescGZIP(), []int{4, 0, 2}
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) GetDomainUuid() string {
	if x != nil {
		return x.DomainUuid
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) GetTestCaseUuid() string {
	if x != nil {
		return x.TestCaseUuid
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) GetTestCaseName() string {
	if x != nil {
		return x.TestCaseName
	}
	return ""
}

// TestSuiteTypeMessage
// The type of TestSuite; Standard, Pig....
type TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestSuiteType     TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum `protobuf:"varint,1,opt,name=TestSuiteType,proto3,enum=fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum" json:"TestSuiteType,omitempty"` // The underlay type definition
	TestSuiteTypeName string                                                                     `protobuf:"bytes,2,opt,name=TestSuiteTypeName,proto3" json:"TestSuiteTypeName,omitempty"`                                                                                                         // Textual name for the type
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeMessage) Reset() {
	*x = TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeMessage) ProtoMessage() {
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeMessage.ProtoReflect.Descriptor instead.
func (*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescGZIP(), []int{4, 0, 3}
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeMessage) GetTestSuiteType() TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum {
	if x != nil {
		return x.TestSuiteType
	}
	return TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteType_NotDefined
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeMessage) GetTestSuiteTypeName() string {
	if x != nil {
		return x.TestSuiteTypeName
	}
	return ""
}

// The Selected MetaData with all its values
type TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerDomainUuid   string                                                                          `protobuf:"bytes,1,opt,name=OwnerDomainUuid,proto3" json:"OwnerDomainUuid,omitempty"`                                                                                                            // The Domain, Uuid, that owns the TestCase
	OwnerDomainName   string                                                                          `protobuf:"bytes,2,opt,name=OwnerDomainName,proto3" json:"OwnerDomainName,omitempty"`                                                                                                            // The Domain, Name, that owns the TestCase
	MetaDataGroupName string                                                                          `protobuf:"bytes,3,opt,name=MetaDataGroupName,proto3" json:"MetaDataGroupName,omitempty"`                                                                                                        // The name of the MetaData-Group
	MetaDataName      string                                                                          `protobuf:"bytes,4,opt,name=MetaDataName,proto3" json:"MetaDataName,omitempty"`                                                                                                                  // The name of the MetaData-post
	MetaDataNameValue string                                                                          `protobuf:"bytes,5,opt,name=MetaDataNameValue,proto3" json:"MetaDataNameValue,omitempty"`                                                                                                        // The MetaDataValue
	SelectType        TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum `protobuf:"varint,6,opt,name=SelectType,proto3,enum=fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum" json:"SelectType,omitempty"` // Is the MetaData-post single- or multi-select
	IsMandatory       bool                                                                            `protobuf:"varint,7,opt,name=IsMandatory,proto3" json:"IsMandatory,omitempty"`
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) Reset() {
	*x = TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) ProtoMessage() {
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage.ProtoReflect.Descriptor instead.
func (*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescGZIP(), []int{4, 0, 4}
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) GetOwnerDomainUuid() string {
	if x != nil {
		return x.OwnerDomainUuid
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) GetOwnerDomainName() string {
	if x != nil {
		return x.OwnerDomainName
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) GetMetaDataGroupName() string {
	if x != nil {
		return x.MetaDataGroupName
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) GetMetaDataName() string {
	if x != nil {
		return x.MetaDataName
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) GetMetaDataNameValue() string {
	if x != nil {
		return x.MetaDataNameValue
	}
	return ""
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) GetSelectType() TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum {
	if x != nil {
		return x.SelectType
	}
	return TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectType_NotSelected
}

func (x *TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) GetIsMandatory() bool {
	if x != nil {
		return x.IsMandatory
	}
	return false
}

var File_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto protoreflect.FileDescriptor

var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDesc = []byte{
	0x0a, 0x70, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x70, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75,
	0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x6f, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf5, 0x05, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xa8, 0x01, 0x0a, 0x27, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x27, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x2b, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x6f,
	0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2b, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x53, 0x69, 0x7a,
	0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x4f,
	0x6e, 0x6c, 0x79, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x64, 0x0a, 0x2d, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x2d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x75, 0x69, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x64, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1f, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x60, 0x0a, 0x1d,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x1d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x80,
	0x03, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b,
	0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x61, 0x63,
	0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a,
	0x17, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x17,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x2b, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2b, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x6f, 0x72,
	0x65, 0x52, 0x6f, 0x77, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x4d, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x22, 0xfa, 0x0f, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x75, 0x69, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x20, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x63, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x35, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x17, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x52, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x78, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x18, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x1e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x7e, 0x0a, 0x1a, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x1a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x63, 0x0a, 0x10, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x5e, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x52, 0x11, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x12, 0xb7, 0x01, 0x0a, 0x2c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75,
	0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x2c, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x12, 0x56, 0x0a, 0x26, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x22, 0x7f,
	0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x12, 0x6b, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22,
	0xda, 0x16, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x10,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x10, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x83, 0x15, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x75, 0x69, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x1d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x54, 0x68, 0x61, 0x74, 0x4f, 0x77, 0x6e, 0x54, 0x68, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x75, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x54, 0x68, 0x61, 0x74, 0x4f, 0x77, 0x6e, 0x54, 0x68, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x68, 0x61, 0x74, 0x4f, 0x77, 0x6e, 0x54, 0x68,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x68, 0x61, 0x74,
	0x4f, 0x77, 0x6e, 0x54, 0x68, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xa8, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x73, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x74, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x73, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x47, 0x63, 0x70, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x47, 0x63, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x4c, 0x61, 0x73, 0x74, 0x53,
	0x61, 0x76, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x1f, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x47, 0x43, 0x50, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x4c,
	0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x47, 0x43,
	0x50, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4c, 0x61, 0x73, 0x74,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x93,
	0x01, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0xd1, 0x01, 0x0a, 0x22, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x80, 0x01, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x22, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0xd6, 0x01, 0x0a, 0x27, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x94, 0x01, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0xc7, 0x01, 0x0a, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x49,
	0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0xa7, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x49,
	0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x73, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73,
	0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x1a, 0xa4, 0x01, 0x0a, 0x1a,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0xd7, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x0d,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x6a, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xaf, 0x03, 0x0a,
	0x25, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x0a, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x6f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x49, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x49, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x64,
	0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50,
	0x69, 0x67, 0x10, 0x02, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x22, 0x0a, 0x1e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x02, 0x42, 0x0f, 0x5a, 0x0d,
	0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescOnce sync.Once
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescData = file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDesc
)

func file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescGZIP() []byte {
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescOnce.Do(func() {
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescData)
	})
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDescData
}

var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_goTypes = []interface{}{
	(TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeEnum)(0),      // 0: fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.TestSuiteTypeEnum
	(TestSuitePreviewMessage_TestSuitePreviewStructureMessage_MetaDataSelectTypeEnum)(0), // 1: fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.MetaDataSelectTypeEnum
	(*ListTestSuiteExecutionsRequest)(nil),                                               // 2: fenixExecutionServerGuiGrpcApi.ListTestSuiteExecutionsRequest
	(*ListTestSuiteExecutionsResponse)(nil),                                              // 3: fenixExecutionServerGuiGrpcApi.ListTestSuiteExecutionsResponse
	(*TestSuiteExecutionsListMessage)(nil),                                               // 4: fenixExecutionServerGuiGrpcApi.TestSuiteExecutionsListMessage
	(*TestCasePreviews)(nil),                                                             // 5: fenixExecutionServerGuiGrpcApi.TestCasePreviews
	(*TestSuitePreviewMessage)(nil),                                                      // 6: fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage
	(*TestSuitePreviewMessage_TestSuitePreviewStructureMessage)(nil),                     // 7: fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage
	nil, // 8: fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.SelectedTestSuiteMetaDataValuesMapEntry
	(*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage)(nil),           // 9: fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.TestCasesInTestSuiteMessage
	(*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage)(nil),            // 10: fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.TestCaseInTestSuiteMessage
	(*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeMessage)(nil),                  // 11: fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.TestSuiteTypeMessage
	(*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage)(nil), // 12: fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.SelectedTestSuiteMetaDataValueMessage
	(*UserAndApplicationRunTimeIdentificationMessage)(nil),                                                 // 13: fenixExecutionServerGuiGrpcApi.UserAndApplicationRunTimeIdentificationMessage
	(*timestamppb.Timestamp)(nil),                               // 14: google.protobuf.Timestamp
	(*AckNackResponse)(nil),                                     // 15: fenixExecutionServerGuiGrpcApi.AckNackResponse
	(ExecutionPriorityEnum)(0),                                  // 16: fenixExecutionServerGuiGrpcApi.ExecutionPriorityEnum
	(TestSuiteExecutionStatusEnum)(0),                           // 17: fenixExecutionServerGuiGrpcApi.TestSuiteExecutionStatusEnum
	(ExecutionStatusReportLevelEnum)(0),                         // 18: fenixExecutionServerGuiGrpcApi.ExecutionStatusReportLevelEnum
	(*TestInstructionsExecutionStatusPreviewValuesMessage)(nil), // 19: fenixExecutionServerGuiGrpcApi.TestInstructionsExecutionStatusPreviewValuesMessage
	(*TestCasePreviewStructureMessage)(nil),                     // 20: fenixExecutionServerGuiGrpcApi.TestCasePreviewStructureMessage
}
var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_depIdxs = []int32{
	13, // 0: fenixExecutionServerGuiGrpcApi.ListTestSuiteExecutionsRequest.UserAndApplicationRunTimeIdentification:type_name -> fenixExecutionServerGuiGrpcApi.UserAndApplicationRunTimeIdentificationMessage
	14, // 1: fenixExecutionServerGuiGrpcApi.ListTestSuiteExecutionsRequest.TestSuiteExecutionFromTimeStamp:type_name -> google.protobuf.Timestamp
	14, // 2: fenixExecutionServerGuiGrpcApi.ListTestSuiteExecutionsRequest.TestSuiteExecutionToTimeStamp:type_name -> google.protobuf.Timestamp
	15, // 3: fenixExecutionServerGuiGrpcApi.ListTestSuiteExecutionsResponse.ackNackResponse:type_name -> fenixExecutionServerGuiGrpcApi.AckNackResponse
	4,  // 4: fenixExecutionServerGuiGrpcApi.ListTestSuiteExecutionsResponse.TestSuiteExecutionsList:type_name -> fenixExecutionServerGuiGrpcApi.TestSuiteExecutionsListMessage
	14, // 5: fenixExecutionServerGuiGrpcApi.TestSuiteExecutionsListMessage.QueueTimeStamp:type_name -> google.protobuf.Timestamp
	16, // 6: fenixExecutionServerGuiGrpcApi.TestSuiteExecutionsListMessage.ExecutionPriority:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionPriorityEnum
	14, // 7: fenixExecutionServerGuiGrpcApi.TestSuiteExecutionsListMessage.ExecutionStartTimeStamp:type_name -> google.protobuf.Timestamp
	14, // 8: fenixExecutionServerGuiGrpcApi.TestSuiteExecutionsListMessage.ExecutionStopTimeStamp:type_name -> google.protobuf.Timestamp
	17, // 9: fenixExecutionServerGuiGrpcApi.TestSuiteExecutionsListMessage.TestSuiteExecutionStatus:type_name -> fenixExecutionServerGuiGrpcApi.TestSuiteExecutionStatusEnum
	14, // 10: fenixExecutionServerGuiGrpcApi.TestSuiteExecutionsListMessage.ExecutionStatusUpdateTimeStamp:type_name -> google.protobuf.Timestamp
	18, // 11: fenixExecutionServerGuiGrpcApi.TestSuiteExecutionsListMessage.ExecutionStatusReportLevel:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusReportLevelEnum
	6,  // 12: fenixExecutionServerGuiGrpcApi.TestSuiteExecutionsListMessage.TestSuitePreview:type_name -> fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage
	5,  // 13: fenixExecutionServerGuiGrpcApi.TestSuiteExecutionsListMessage.TestCasesPreviews:type_name -> fenixExecutionServerGuiGrpcApi.TestCasePreviews
	19, // 14: fenixExecutionServerGuiGrpcApi.TestSuiteExecutionsListMessage.TestInstructionsExecutionStatusPreviewValues:type_name -> fenixExecutionServerGuiGrpcApi.TestInstructionsExecutionStatusPreviewValuesMessage
	20, // 15: fenixExecutionServerGuiGrpcApi.TestCasePreviews.TestCasePreviews:type_name -> fenixExecutionServerGuiGrpcApi.TestCasePreviewStructureMessage
	7,  // 16: fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreview:type_name -> fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage
	9,  // 17: fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.TestCasesInTestSuite:type_name -> fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.TestCasesInTestSuiteMessage
	11, // 18: fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.TestSuiteType:type_name -> fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.TestSuiteTypeMessage
	8,  // 19: fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.SelectedTestSuiteMetaDataValuesMap:type_name -> fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.SelectedTestSuiteMetaDataValuesMapEntry
	12, // 20: fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.SelectedTestSuiteMetaDataValuesMapEntry.value:type_name -> fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.SelectedTestSuiteMetaDataValueMessage
	10, // 21: fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.TestCasesInTestSuiteMessage.TestCasesInTestSuite:type_name -> fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.TestCaseInTestSuiteMessage
	0,  // 22: fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.TestSuiteTypeMessage.TestSuiteType:type_name -> fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.TestSuiteTypeEnum
	1,  // 23: fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.SelectedTestSuiteMetaDataValueMessage.SelectType:type_name -> fenixExecutionServerGuiGrpcApi.TestSuitePreviewMessage.TestSuitePreviewStructureMessage.MetaDataSelectTypeEnum
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() {
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_init()
}
func file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_init() {
	if File_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto != nil {
		return
	}
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_GeneralMessagesAndEnums_proto_init()
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestSuiteExecutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestSuiteExecutionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSuiteExecutionsListMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCasePreviews); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSuitePreviewMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSuitePreviewMessage_TestSuitePreviewStructureMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_TestSuiteTypeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSuitePreviewMessage_TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_goTypes,
		DependencyIndexes: file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_depIdxs,
		EnumInfos:         file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_enumTypes,
		MessageInfos:      file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_msgTypes,
	}.Build()
	File_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto = out.File
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_rawDesc = nil
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_goTypes = nil
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestSuiteExecutions_proto_depIdxs = nil
}
