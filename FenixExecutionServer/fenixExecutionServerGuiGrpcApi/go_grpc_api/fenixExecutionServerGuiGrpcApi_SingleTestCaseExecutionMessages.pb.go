// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages.proto

package go_grpc_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message used for initiating a single TestCase Execution, with a specific TestData-identification
type InitiateSingleTestCaseExecutionRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdentification *UserIdentificationMessage `protobuf:"bytes,1,opt,name=UserIdentification,proto3" json:"UserIdentification,omitempty"` // Identifies User and Proto-file version used
	TestCaseUuid       string                     `protobuf:"bytes,2,opt,name=TestCaseUuid,proto3" json:"TestCaseUuid,omitempty"`             // The UUID for the TestCase to be Executed
	TestDataSetUuid    string                     `protobuf:"bytes,3,opt,name=TestDataSetUuid,proto3" json:"TestDataSetUuid,omitempty"`       // The UUID for the specific TestDataSet to be used for the Execution
}

func (x *InitiateSingleTestCaseExecutionRequestMessage) Reset() {
	*x = InitiateSingleTestCaseExecutionRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiateSingleTestCaseExecutionRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateSingleTestCaseExecutionRequestMessage) ProtoMessage() {}

func (x *InitiateSingleTestCaseExecutionRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateSingleTestCaseExecutionRequestMessage.ProtoReflect.Descriptor instead.
func (*InitiateSingleTestCaseExecutionRequestMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{0}
}

func (x *InitiateSingleTestCaseExecutionRequestMessage) GetUserIdentification() *UserIdentificationMessage {
	if x != nil {
		return x.UserIdentification
	}
	return nil
}

func (x *InitiateSingleTestCaseExecutionRequestMessage) GetTestCaseUuid() string {
	if x != nil {
		return x.TestCaseUuid
	}
	return ""
}

func (x *InitiateSingleTestCaseExecutionRequestMessage) GetTestDataSetUuid() string {
	if x != nil {
		return x.TestDataSetUuid
	}
	return ""
}

// Message response from initiating a single TestCase Execution
type InitiateSingleTestCaseExecutionResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseExecutionUuid string           `protobuf:"bytes,1,opt,name=TestCaseExecutionUuid,proto3" json:"TestCaseExecutionUuid,omitempty"` // The UUID for the TestCase Execution
	AckNackResponse       *AckNackResponse `protobuf:"bytes,2,opt,name=ackNackResponse,proto3" json:"ackNackResponse,omitempty"`             // Hold all error messages, if there are any. Message also gives of everything was OK or not
}

func (x *InitiateSingleTestCaseExecutionResponseMessage) Reset() {
	*x = InitiateSingleTestCaseExecutionResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiateSingleTestCaseExecutionResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateSingleTestCaseExecutionResponseMessage) ProtoMessage() {}

func (x *InitiateSingleTestCaseExecutionResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateSingleTestCaseExecutionResponseMessage.ProtoReflect.Descriptor instead.
func (*InitiateSingleTestCaseExecutionResponseMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{1}
}

func (x *InitiateSingleTestCaseExecutionResponseMessage) GetTestCaseExecutionUuid() string {
	if x != nil {
		return x.TestCaseExecutionUuid
	}
	return ""
}

func (x *InitiateSingleTestCaseExecutionResponseMessage) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

// Message to be used for requesting TestCases waiting to be executed, for specific Domains and DateTime-span
type ListTestCasesInExecutionQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdentification             *UserIdentificationMessage `protobuf:"bytes,1,opt,name=UserIdentification,proto3" json:"UserIdentification,omitempty"`                         // Identifies User and Proto-file version used
	DomainUuids                    []string                   `protobuf:"bytes,2,rep,name=DomainUuids,proto3" json:"DomainUuids,omitempty"`                                       // All Domains in request
	TestCaseExecutionFromTimeStamp *timestamppb.Timestamp     `protobuf:"bytes,3,opt,name=TestCaseExecutionFromTimeStamp,proto3" json:"TestCaseExecutionFromTimeStamp,omitempty"` // Execution From TimeStamp in Request
	TestCaseExecutionToTimeStamp   *timestamppb.Timestamp     `protobuf:"bytes,4,opt,name=TestCaseExecutionToTimeStamp,proto3" json:"TestCaseExecutionToTimeStamp,omitempty"`     // Execution To TimeStamp in Request
}

func (x *ListTestCasesInExecutionQueueRequest) Reset() {
	*x = ListTestCasesInExecutionQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestCasesInExecutionQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestCasesInExecutionQueueRequest) ProtoMessage() {}

func (x *ListTestCasesInExecutionQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestCasesInExecutionQueueRequest.ProtoReflect.Descriptor instead.
func (*ListTestCasesInExecutionQueueRequest) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{2}
}

func (x *ListTestCasesInExecutionQueueRequest) GetUserIdentification() *UserIdentificationMessage {
	if x != nil {
		return x.UserIdentification
	}
	return nil
}

func (x *ListTestCasesInExecutionQueueRequest) GetDomainUuids() []string {
	if x != nil {
		return x.DomainUuids
	}
	return nil
}

func (x *ListTestCasesInExecutionQueueRequest) GetTestCaseExecutionFromTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TestCaseExecutionFromTimeStamp
	}
	return nil
}

func (x *ListTestCasesInExecutionQueueRequest) GetTestCaseExecutionToTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TestCaseExecutionToTimeStamp
	}
	return nil
}

// Message holding the response for TestCases waiting to be executed, for specific Domains and DateTime-span
type ListTestCasesInExecutionQueueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckNackResponse           *AckNackResponse                            `protobuf:"bytes,1,opt,name=ackNackResponse,proto3" json:"ackNackResponse,omitempty"`                     // Hold all error messages, if there are any. Message also gives of everything was OK or not
	TestCasesInExecutionQueue []*TestCaseExecutionBasicInformationMessage `protobuf:"bytes,2,rep,name=TestCasesInExecutionQueue,proto3" json:"TestCasesInExecutionQueue,omitempty"` // The Basic information regarding the TestCase-Execution
}

func (x *ListTestCasesInExecutionQueueResponse) Reset() {
	*x = ListTestCasesInExecutionQueueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestCasesInExecutionQueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestCasesInExecutionQueueResponse) ProtoMessage() {}

func (x *ListTestCasesInExecutionQueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestCasesInExecutionQueueResponse.ProtoReflect.Descriptor instead.
func (*ListTestCasesInExecutionQueueResponse) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{3}
}

func (x *ListTestCasesInExecutionQueueResponse) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

func (x *ListTestCasesInExecutionQueueResponse) GetTestCasesInExecutionQueue() []*TestCaseExecutionBasicInformationMessage {
	if x != nil {
		return x.TestCasesInExecutionQueue
	}
	return nil
}

// Message to be used for requesting TestCases under execution, for specific Domains and DateTime-span
type ListTestCasesUnderExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdentification             *UserIdentificationMessage `protobuf:"bytes,1,opt,name=UserIdentification,proto3" json:"UserIdentification,omitempty"`                         // Identifies User and Proto-file version used
	DomainUuids                    []string                   `protobuf:"bytes,2,rep,name=DomainUuids,proto3" json:"DomainUuids,omitempty"`                                       // All Domains in request
	TestCaseExecutionFromTimeStamp *timestamppb.Timestamp     `protobuf:"bytes,3,opt,name=TestCaseExecutionFromTimeStamp,proto3" json:"TestCaseExecutionFromTimeStamp,omitempty"` // Execution From TimeStamp in Request
	TestCaseExecutionToTimeStamp   *timestamppb.Timestamp     `protobuf:"bytes,4,opt,name=TestCaseExecutionToTimeStamp,proto3" json:"TestCaseExecutionToTimeStamp,omitempty"`     // Execution To TimeStamp in Request
}

func (x *ListTestCasesUnderExecutionRequest) Reset() {
	*x = ListTestCasesUnderExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestCasesUnderExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestCasesUnderExecutionRequest) ProtoMessage() {}

func (x *ListTestCasesUnderExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestCasesUnderExecutionRequest.ProtoReflect.Descriptor instead.
func (*ListTestCasesUnderExecutionRequest) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{4}
}

func (x *ListTestCasesUnderExecutionRequest) GetUserIdentification() *UserIdentificationMessage {
	if x != nil {
		return x.UserIdentification
	}
	return nil
}

func (x *ListTestCasesUnderExecutionRequest) GetDomainUuids() []string {
	if x != nil {
		return x.DomainUuids
	}
	return nil
}

func (x *ListTestCasesUnderExecutionRequest) GetTestCaseExecutionFromTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TestCaseExecutionFromTimeStamp
	}
	return nil
}

func (x *ListTestCasesUnderExecutionRequest) GetTestCaseExecutionToTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TestCaseExecutionToTimeStamp
	}
	return nil
}

// Message holding the response for TestCases under execution, for specific Domains and DateTime-span
type ListTestCasesUnderExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckNackResponse         *AckNackResponse                 `protobuf:"bytes,1,opt,name=ackNackResponse,proto3" json:"ackNackResponse,omitempty"`                 // Hold all error messages, if there are any. Message also gives of everything was OK or not
	TestCasesUnderExecution []*TestCaseUnderExecutionMessage `protobuf:"bytes,2,rep,name=TestCasesUnderExecution,proto3" json:"TestCasesUnderExecution,omitempty"` // The Basic information regarding the TestCase-Execution
}

func (x *ListTestCasesUnderExecutionResponse) Reset() {
	*x = ListTestCasesUnderExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestCasesUnderExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestCasesUnderExecutionResponse) ProtoMessage() {}

func (x *ListTestCasesUnderExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestCasesUnderExecutionResponse.ProtoReflect.Descriptor instead.
func (*ListTestCasesUnderExecutionResponse) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{5}
}

func (x *ListTestCasesUnderExecutionResponse) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

func (x *ListTestCasesUnderExecutionResponse) GetTestCasesUnderExecution() []*TestCaseUnderExecutionMessage {
	if x != nil {
		return x.TestCasesUnderExecution
	}
	return nil
}

// One single TestCase under Execution Summary
type TestCaseUnderExecutionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseExecutionBasicInformation *TestCaseExecutionBasicInformationMessage `protobuf:"bytes,1,opt,name=TestCaseExecutionBasicInformation,proto3" json:"TestCaseExecutionBasicInformation,omitempty"` // The Basic information regarding the TestCase-Execution
	TestCaseExecutionDetails          *TestCaseExecutionDetailsMessage          `protobuf:"bytes,2,opt,name=TestCaseExecutionDetails,proto3" json:"TestCaseExecutionDetails,omitempty"`                   // Detailed information about the Execution
}

func (x *TestCaseUnderExecutionMessage) Reset() {
	*x = TestCaseUnderExecutionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseUnderExecutionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseUnderExecutionMessage) ProtoMessage() {}

func (x *TestCaseUnderExecutionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseUnderExecutionMessage.ProtoReflect.Descriptor instead.
func (*TestCaseUnderExecutionMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{6}
}

func (x *TestCaseUnderExecutionMessage) GetTestCaseExecutionBasicInformation() *TestCaseExecutionBasicInformationMessage {
	if x != nil {
		return x.TestCaseExecutionBasicInformation
	}
	return nil
}

func (x *TestCaseUnderExecutionMessage) GetTestCaseExecutionDetails() *TestCaseExecutionDetailsMessage {
	if x != nil {
		return x.TestCaseExecutionDetails
	}
	return nil
}

// Message to be used for requesting TestCase Executions that has been finished , for specific Domains and DateTime-span
type ListTestCasesWithFinishedExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdentification             *UserIdentificationMessage `protobuf:"bytes,1,opt,name=UserIdentification,proto3" json:"UserIdentification,omitempty"`                         // Identifies User and Proto-file version used
	DomainUuids                    []string                   `protobuf:"bytes,2,rep,name=DomainUuids,proto3" json:"DomainUuids,omitempty"`                                       // All Domains in request
	TestCaseExecutionFromTimeStamp *timestamppb.Timestamp     `protobuf:"bytes,3,opt,name=TestCaseExecutionFromTimeStamp,proto3" json:"TestCaseExecutionFromTimeStamp,omitempty"` // Execution From TimeStamp in Request
	TestCaseExecutionToTimeStamp   *timestamppb.Timestamp     `protobuf:"bytes,4,opt,name=TestCaseExecutionToTimeStamp,proto3" json:"TestCaseExecutionToTimeStamp,omitempty"`     // Execution To TimeStamp in Request
}

func (x *ListTestCasesWithFinishedExecutionsRequest) Reset() {
	*x = ListTestCasesWithFinishedExecutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestCasesWithFinishedExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestCasesWithFinishedExecutionsRequest) ProtoMessage() {}

func (x *ListTestCasesWithFinishedExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestCasesWithFinishedExecutionsRequest.ProtoReflect.Descriptor instead.
func (*ListTestCasesWithFinishedExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{7}
}

func (x *ListTestCasesWithFinishedExecutionsRequest) GetUserIdentification() *UserIdentificationMessage {
	if x != nil {
		return x.UserIdentification
	}
	return nil
}

func (x *ListTestCasesWithFinishedExecutionsRequest) GetDomainUuids() []string {
	if x != nil {
		return x.DomainUuids
	}
	return nil
}

func (x *ListTestCasesWithFinishedExecutionsRequest) GetTestCaseExecutionFromTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TestCaseExecutionFromTimeStamp
	}
	return nil
}

func (x *ListTestCasesWithFinishedExecutionsRequest) GetTestCaseExecutionToTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TestCaseExecutionToTimeStamp
	}
	return nil
}

// Message holding the response for TestCases under execution, for specific Domains and DateTime-span
type ListTestCasesWithFinishedExecutionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckNackResponse               *AckNackResponse                        `protobuf:"bytes,1,opt,name=ackNackResponse,proto3" json:"ackNackResponse,omitempty"`                             // Hold all error messages, if there are any. Message also gives of everything was OK or not
	TestCaseWithFinishedExecution []*TestCaseWithFinishedExecutionMessage `protobuf:"bytes,2,rep,name=TestCaseWithFinishedExecution,proto3" json:"TestCaseWithFinishedExecution,omitempty"` // The Basic information regarding the TestCase-Execution
}

func (x *ListTestCasesWithFinishedExecutionsResponse) Reset() {
	*x = ListTestCasesWithFinishedExecutionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestCasesWithFinishedExecutionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestCasesWithFinishedExecutionsResponse) ProtoMessage() {}

func (x *ListTestCasesWithFinishedExecutionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestCasesWithFinishedExecutionsResponse.ProtoReflect.Descriptor instead.
func (*ListTestCasesWithFinishedExecutionsResponse) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{8}
}

func (x *ListTestCasesWithFinishedExecutionsResponse) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

func (x *ListTestCasesWithFinishedExecutionsResponse) GetTestCaseWithFinishedExecution() []*TestCaseWithFinishedExecutionMessage {
	if x != nil {
		return x.TestCaseWithFinishedExecution
	}
	return nil
}

// One single TestCase with finished Execution Summary
type TestCaseWithFinishedExecutionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseExecutionBasicInformation *TestCaseExecutionBasicInformationMessage `protobuf:"bytes,1,opt,name=TestCaseExecutionBasicInformation,proto3" json:"TestCaseExecutionBasicInformation,omitempty"` // The Basic information regarding the TestCase-Execution
	TestCaseExecutionDetails          *TestCaseExecutionDetailsMessage          `protobuf:"bytes,2,opt,name=TestCaseExecutionDetails,proto3" json:"TestCaseExecutionDetails,omitempty"`                   // Detailed information about the Execution
}

func (x *TestCaseWithFinishedExecutionMessage) Reset() {
	*x = TestCaseWithFinishedExecutionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseWithFinishedExecutionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseWithFinishedExecutionMessage) ProtoMessage() {}

func (x *TestCaseWithFinishedExecutionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseWithFinishedExecutionMessage.ProtoReflect.Descriptor instead.
func (*TestCaseWithFinishedExecutionMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{9}
}

func (x *TestCaseWithFinishedExecutionMessage) GetTestCaseExecutionBasicInformation() *TestCaseExecutionBasicInformationMessage {
	if x != nil {
		return x.TestCaseExecutionBasicInformation
	}
	return nil
}

func (x *TestCaseWithFinishedExecutionMessage) GetTestCaseExecutionDetails() *TestCaseExecutionDetailsMessage {
	if x != nil {
		return x.TestCaseExecutionDetails
	}
	return nil
}

// One single TestCase Execution Summary
type TestCaseExecutionBasicInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUuid                          string                 `protobuf:"bytes,1,opt,name=DomainUuid,proto3" json:"DomainUuid,omitempty"`                                                                           // The Domain, UUID, where the TestCase 'has its home'
	DomainName                          string                 `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                                                           // The Domain, Name, where the TestCase 'has its home'
	TestSuiteUuid                       string                 `protobuf:"bytes,3,opt,name=TestSuiteUuid,proto3" json:"TestSuiteUuid,omitempty"`                                                                     // The TestSuite, UUID, that the TestCase was executed from
	TestSuiteName                       string                 `protobuf:"bytes,4,opt,name=TestSuiteName,proto3" json:"TestSuiteName,omitempty"`                                                                     // The TestSuite, Name, that the TestCase was executed from
	TestSuiteVersion                    uint32                 `protobuf:"varint,5,opt,name=TestSuiteVersion,proto3" json:"TestSuiteVersion,omitempty"`                                                              // The TestSuites version number
	TestSuiteExecutionUuid              string                 `protobuf:"bytes,6,opt,name=TestSuiteExecutionUuid,proto3" json:"TestSuiteExecutionUuid,omitempty"`                                                   // The Unique UUID for the TestSuite Execution
	TestSuiteExecutionVersion           uint32                 `protobuf:"varint,7,opt,name=TestSuiteExecutionVersion,proto3" json:"TestSuiteExecutionVersion,omitempty"`                                            // The TestSuites execution version
	TestCaseUuid                        string                 `protobuf:"bytes,8,opt,name=TestCaseUuid,proto3" json:"TestCaseUuid,omitempty"`                                                                       // The TestCase, UUID, set by TestCase-builder
	TestCaseName                        string                 `protobuf:"bytes,9,opt,name=TestCaseName,proto3" json:"TestCaseName,omitempty"`                                                                       // The TestCase, Name, set in TestCase-builder
	TestCaseVersion                     uint32                 `protobuf:"varint,10,opt,name=TestCaseVersion,proto3" json:"TestCaseVersion,omitempty"`                                                               // Each time a TestCase is saved then the 'TestCaseVersion' will be incremented by +1
	TestCaseExecutionUuid               string                 `protobuf:"bytes,11,opt,name=TestCaseExecutionUuid,proto3" json:"TestCaseExecutionUuid,omitempty"`                                                    // The Unique UUID for the TestCase Execution
	TestCaseExecutionVersion            string                 `protobuf:"bytes,12,opt,name=TestCaseExecutionVersion,proto3" json:"TestCaseExecutionVersion,omitempty"`                                              // The Unique UUID for the TestCase Execution
	PlacedOnTestExecutionQueueTimeStamp *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=PlacedOnTestExecutionQueueTimeStamp,proto3" json:"PlacedOnTestExecutionQueueTimeStamp,omitempty"`                        // The timestamp when the TestCase was placed on queue for execution
	TestDataSetUuid                     string                 `protobuf:"bytes,14,opt,name=TestDataSetUuid,proto3" json:"TestDataSetUuid,omitempty"`                                                                // The UUID for the specific TestDataSet that was used for the Execution
	ExecutionPriority                   ExecutionPriorityEnum  `protobuf:"varint,15,opt,name=ExecutionPriority,proto3,enum=fenixExecutionServerGuiGrpcApi.ExecutionPriorityEnum" json:"ExecutionPriority,omitempty"` // The priority for the execution. Depends on who started it and if it belongs to a suite, scheduled or not
}

func (x *TestCaseExecutionBasicInformationMessage) Reset() {
	*x = TestCaseExecutionBasicInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseExecutionBasicInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseExecutionBasicInformationMessage) ProtoMessage() {}

func (x *TestCaseExecutionBasicInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseExecutionBasicInformationMessage.ProtoReflect.Descriptor instead.
func (*TestCaseExecutionBasicInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{10}
}

func (x *TestCaseExecutionBasicInformationMessage) GetDomainUuid() string {
	if x != nil {
		return x.DomainUuid
	}
	return ""
}

func (x *TestCaseExecutionBasicInformationMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *TestCaseExecutionBasicInformationMessage) GetTestSuiteUuid() string {
	if x != nil {
		return x.TestSuiteUuid
	}
	return ""
}

func (x *TestCaseExecutionBasicInformationMessage) GetTestSuiteName() string {
	if x != nil {
		return x.TestSuiteName
	}
	return ""
}

func (x *TestCaseExecutionBasicInformationMessage) GetTestSuiteVersion() uint32 {
	if x != nil {
		return x.TestSuiteVersion
	}
	return 0
}

func (x *TestCaseExecutionBasicInformationMessage) GetTestSuiteExecutionUuid() string {
	if x != nil {
		return x.TestSuiteExecutionUuid
	}
	return ""
}

func (x *TestCaseExecutionBasicInformationMessage) GetTestSuiteExecutionVersion() uint32 {
	if x != nil {
		return x.TestSuiteExecutionVersion
	}
	return 0
}

func (x *TestCaseExecutionBasicInformationMessage) GetTestCaseUuid() string {
	if x != nil {
		return x.TestCaseUuid
	}
	return ""
}

func (x *TestCaseExecutionBasicInformationMessage) GetTestCaseName() string {
	if x != nil {
		return x.TestCaseName
	}
	return ""
}

func (x *TestCaseExecutionBasicInformationMessage) GetTestCaseVersion() uint32 {
	if x != nil {
		return x.TestCaseVersion
	}
	return 0
}

func (x *TestCaseExecutionBasicInformationMessage) GetTestCaseExecutionUuid() string {
	if x != nil {
		return x.TestCaseExecutionUuid
	}
	return ""
}

func (x *TestCaseExecutionBasicInformationMessage) GetTestCaseExecutionVersion() string {
	if x != nil {
		return x.TestCaseExecutionVersion
	}
	return ""
}

func (x *TestCaseExecutionBasicInformationMessage) GetPlacedOnTestExecutionQueueTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.PlacedOnTestExecutionQueueTimeStamp
	}
	return nil
}

func (x *TestCaseExecutionBasicInformationMessage) GetTestDataSetUuid() string {
	if x != nil {
		return x.TestDataSetUuid
	}
	return ""
}

func (x *TestCaseExecutionBasicInformationMessage) GetExecutionPriority() ExecutionPriorityEnum {
	if x != nil {
		return x.ExecutionPriority
	}
	return ExecutionPriorityEnum_HIGHEST_PROBES
}

type TestCaseExecutionDetailsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionStartTimeStamp *timestamppb.Timestamp      `protobuf:"bytes,16,opt,name=ExecutionStartTimeStamp,proto3" json:"ExecutionStartTimeStamp,omitempty"`                                                                  // The timestamp when the execution was put for execution, not on queue for execution
	ExecutionStopTimeStamp  *timestamppb.Timestamp      `protobuf:"bytes,17,opt,name=ExecutionStopTimeStamp,proto3" json:"ExecutionStopTimeStamp,omitempty"`                                                                    // The timestamp when the execution was ended, in anyway
	TestCaseExecutionStatus TestCaseExecutionStatusEnum `protobuf:"varint,18,opt,name=TestCaseExecutionStatus,proto3,enum=fenixExecutionServerGuiGrpcApi.TestCaseExecutionStatusEnum" json:"TestCaseExecutionStatus,omitempty"` // The status of the ongoing  TestCase execution
	ExecutionHasFinished    bool                        `protobuf:"varint,19,opt,name=ExecutionHasFinished,proto3" json:"ExecutionHasFinished,omitempty"`                                                                       // A simple status telling if the execution has ended or not
}

func (x *TestCaseExecutionDetailsMessage) Reset() {
	*x = TestCaseExecutionDetailsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseExecutionDetailsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseExecutionDetailsMessage) ProtoMessage() {}

func (x *TestCaseExecutionDetailsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseExecutionDetailsMessage.ProtoReflect.Descriptor instead.
func (*TestCaseExecutionDetailsMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{11}
}

func (x *TestCaseExecutionDetailsMessage) GetExecutionStartTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionStartTimeStamp
	}
	return nil
}

func (x *TestCaseExecutionDetailsMessage) GetExecutionStopTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionStopTimeStamp
	}
	return nil
}

func (x *TestCaseExecutionDetailsMessage) GetTestCaseExecutionStatus() TestCaseExecutionStatusEnum {
	if x != nil {
		return x.TestCaseExecutionStatus
	}
	return TestCaseExecutionStatusEnum_TCE_INITIATED
}

func (x *TestCaseExecutionDetailsMessage) GetExecutionHasFinished() bool {
	if x != nil {
		return x.ExecutionHasFinished
	}
	return false
}

// Message holding a request to get a Single TestCase Execution
type GetSingleTestCaseExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdentification    *UserIdentificationMessage `protobuf:"bytes,1,opt,name=UserIdentification,proto3" json:"UserIdentification,omitempty"`       // Identifies User and Proto-file version used
	TestCaseExecutionUuid string                     `protobuf:"bytes,2,opt,name=TestCaseExecutionUuid,proto3" json:"TestCaseExecutionUuid,omitempty"` // The Unique UUID for the TestCase Execution wanted
}

func (x *GetSingleTestCaseExecutionRequest) Reset() {
	*x = GetSingleTestCaseExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingleTestCaseExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleTestCaseExecutionRequest) ProtoMessage() {}

func (x *GetSingleTestCaseExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleTestCaseExecutionRequest.ProtoReflect.Descriptor instead.
func (*GetSingleTestCaseExecutionRequest) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{12}
}

func (x *GetSingleTestCaseExecutionRequest) GetUserIdentification() *UserIdentificationMessage {
	if x != nil {
		return x.UserIdentification
	}
	return nil
}

func (x *GetSingleTestCaseExecutionRequest) GetTestCaseExecutionUuid() string {
	if x != nil {
		return x.TestCaseExecutionUuid
	}
	return ""
}

// Message holding a response for a Single TestCase Execution
type GetSingleTestCaseExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//SingleTestCaseExecutionSummaryMessage SingleTestCaseExecutionSummary = 1; // A list of Single TestCase Execution summaries
	TestInstructionsExecution []*GetSingleTestCaseExecutionResponse_TestInstructionExecutionMessage `protobuf:"bytes,2,rep,name=TestInstructionsExecution,proto3" json:"TestInstructionsExecution,omitempty"` // A list of all TestInstructions and their Execution result
}

func (x *GetSingleTestCaseExecutionResponse) Reset() {
	*x = GetSingleTestCaseExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingleTestCaseExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleTestCaseExecutionResponse) ProtoMessage() {}

func (x *GetSingleTestCaseExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleTestCaseExecutionResponse.ProtoReflect.Descriptor instead.
func (*GetSingleTestCaseExecutionResponse) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{13}
}

func (x *GetSingleTestCaseExecutionResponse) GetTestInstructionsExecution() []*GetSingleTestCaseExecutionResponse_TestInstructionExecutionMessage {
	if x != nil {
		return x.TestInstructionsExecution
	}
	return nil
}

type GetSingleTestCaseExecutionResponse_TestInstructionExecutionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionExecutionSummary *GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage `protobuf:"bytes,1,opt,name=TestInstructionExecutionSummary,proto3" json:"TestInstructionExecutionSummary,omitempty"` // Basic information regarding the TestInstruction-Execution
	TestInstructionExecutionDetails *GetSingleTestCaseExecutionResponse_TestInstructionExecutionDetailsMessage `protobuf:"bytes,2,opt,name=TestInstructionExecutionDetails,proto3" json:"TestInstructionExecutionDetails,omitempty"` // Basic information regarding the TestInstruction-Execution
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionMessage) Reset() {
	*x = GetSingleTestCaseExecutionResponse_TestInstructionExecutionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleTestCaseExecutionResponse_TestInstructionExecutionMessage) ProtoMessage() {}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleTestCaseExecutionResponse_TestInstructionExecutionMessage.ProtoReflect.Descriptor instead.
func (*GetSingleTestCaseExecutionResponse_TestInstructionExecutionMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{13, 0}
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionMessage) GetTestInstructionExecutionSummary() *GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage {
	if x != nil {
		return x.TestInstructionExecutionSummary
	}
	return nil
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionMessage) GetTestInstructionExecutionDetails() *GetSingleTestCaseExecutionResponse_TestInstructionExecutionDetailsMessage {
	if x != nil {
		return x.TestInstructionExecutionDetails
	}
	return nil
}

// The Summary information for TestExecution for one TestInstruction-execution
type GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUuid                     string                             `protobuf:"bytes,1,opt,name=DomainUuid,proto3" json:"DomainUuid,omitempty"`                                                                                                                 // The Domain, UUID, to be tested with this TestInstruction
	DomainName                     string                             `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                                                                                                 // The Domain, Name, to be tested with this TestInstruction
	TestInstructionUuid            string                             `protobuf:"bytes,3,opt,name=TestInstructionUuid,proto3" json:"TestInstructionUuid,omitempty"`                                                                                               // TestInstruction UUID, set by Client system
	TestInstructionName            string                             `protobuf:"bytes,4,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"`                                                                                               // TestInstruction Name, set by Client system
	MajorVersionNumber             uint32                             `protobuf:"varint,5,opt,name=MajorVersionNumber,proto3" json:"MajorVersionNumber,omitempty"`                                                                                                // Major Version Number
	MinorVersionNumber             uint32                             `protobuf:"varint,6,opt,name=MinorVersionNumber,proto3" json:"MinorVersionNumber,omitempty"`                                                                                                // Minor Version Number
	TestCaseExecutionFromTimeStamp *timestamppb.Timestamp             `protobuf:"bytes,7,opt,name=TestCaseExecutionFromTimeStamp,proto3" json:"TestCaseExecutionFromTimeStamp,omitempty"`                                                                         // Execution From TimeStamp in Request
	TestCaseExecutionToTimeStamp   *timestamppb.Timestamp             `protobuf:"bytes,8,opt,name=TestCaseExecutionToTimeStamp,proto3" json:"TestCaseExecutionToTimeStamp,omitempty"`                                                                             // Execution To TimeStamp in Request
	TestInstructionExecutionStatus TestInstructionExecutionStatusEnum `protobuf:"varint,9,opt,name=TestInstructionExecutionStatus,proto3,enum=fenixExecutionServerGuiGrpcApi.TestInstructionExecutionStatusEnum" json:"TestInstructionExecutionStatus,omitempty"` // The execution status for the TestInstruction
	ExecutionErrorMessage          string                             `protobuf:"bytes,10,opt,name=ExecutionErrorMessage,proto3" json:"ExecutionErrorMessage,omitempty"`                                                                                          // Any Error message for the TestInstruction execution
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage) Reset() {
	*x = GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage) ProtoMessage() {}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage.ProtoReflect.Descriptor instead.
func (*GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{13, 1}
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage) GetDomainUuid() string {
	if x != nil {
		return x.DomainUuid
	}
	return ""
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage) GetTestInstructionUuid() string {
	if x != nil {
		return x.TestInstructionUuid
	}
	return ""
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage) GetMajorVersionNumber() uint32 {
	if x != nil {
		return x.MajorVersionNumber
	}
	return 0
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage) GetMinorVersionNumber() uint32 {
	if x != nil {
		return x.MinorVersionNumber
	}
	return 0
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage) GetTestCaseExecutionFromTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TestCaseExecutionFromTimeStamp
	}
	return nil
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage) GetTestCaseExecutionToTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TestCaseExecutionToTimeStamp
	}
	return nil
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage) GetTestInstructionExecutionStatus() TestInstructionExecutionStatusEnum {
	if x != nil {
		return x.TestInstructionExecutionStatus
	}
	return TestInstructionExecutionStatusEnum_TIE_INITIATED
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage) GetExecutionErrorMessage() string {
	if x != nil {
		return x.ExecutionErrorMessage
	}
	return ""
}

// All log post for the TestInstruction-execution
type GetSingleTestCaseExecutionResponse_TestInstructionExecutionDetailsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionLogPosts []*GetSingleTestCaseExecutionResponse_LogPostMessage `protobuf:"bytes,1,rep,name=ExecutionLogPosts,proto3" json:"ExecutionLogPosts,omitempty"` // All log post rows for the TestInstruction-execution
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionDetailsMessage) Reset() {
	*x = GetSingleTestCaseExecutionResponse_TestInstructionExecutionDetailsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionDetailsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleTestCaseExecutionResponse_TestInstructionExecutionDetailsMessage) ProtoMessage() {}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionDetailsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleTestCaseExecutionResponse_TestInstructionExecutionDetailsMessage.ProtoReflect.Descriptor instead.
func (*GetSingleTestCaseExecutionResponse_TestInstructionExecutionDetailsMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{13, 2}
}

func (x *GetSingleTestCaseExecutionResponse_TestInstructionExecutionDetailsMessage) GetExecutionLogPosts() []*GetSingleTestCaseExecutionResponse_LogPostMessage {
	if x != nil {
		return x.ExecutionLogPosts
	}
	return nil
}

// This message holds one log post row from Client System
type GetSingleTestCaseExecutionResponse_LogPostMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogPostTimeStamp         *timestamppb.Timestamp                                                               `protobuf:"bytes,1,opt,name=LogPostTimeStamp,proto3" json:"LogPostTimeStamp,omitempty"`                                                  // The TimeStamp for the specific log post
	LogPostStatus            LogPostStatusEnum                                                                    `protobuf:"varint,2,opt,name=LogPostStatus,proto3,enum=fenixExecutionServerGuiGrpcApi.LogPostStatusEnum" json:"LogPostStatus,omitempty"` // the status for the log post
	FoundVersusExpectedValue []*GetSingleTestCaseExecutionResponse_LogPostMessage_FoundVersusExpectedValueMessage `protobuf:"bytes,3,rep,name=FoundVersusExpectedValue,proto3" json:"FoundVersusExpectedValue,omitempty"`                                  // A list with found versus expected values, in string representations
}

func (x *GetSingleTestCaseExecutionResponse_LogPostMessage) Reset() {
	*x = GetSingleTestCaseExecutionResponse_LogPostMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingleTestCaseExecutionResponse_LogPostMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleTestCaseExecutionResponse_LogPostMessage) ProtoMessage() {}

func (x *GetSingleTestCaseExecutionResponse_LogPostMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleTestCaseExecutionResponse_LogPostMessage.ProtoReflect.Descriptor instead.
func (*GetSingleTestCaseExecutionResponse_LogPostMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{13, 3}
}

func (x *GetSingleTestCaseExecutionResponse_LogPostMessage) GetLogPostTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LogPostTimeStamp
	}
	return nil
}

func (x *GetSingleTestCaseExecutionResponse_LogPostMessage) GetLogPostStatus() LogPostStatusEnum {
	if x != nil {
		return x.LogPostStatus
	}
	return LogPostStatusEnum_INFO
}

func (x *GetSingleTestCaseExecutionResponse_LogPostMessage) GetFoundVersusExpectedValue() []*GetSingleTestCaseExecutionResponse_LogPostMessage_FoundVersusExpectedValueMessage {
	if x != nil {
		return x.FoundVersusExpectedValue
	}
	return nil
}

type GetSingleTestCaseExecutionResponse_LogPostMessage_FoundVersusExpectedValueMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FoundValue    string `protobuf:"bytes,1,opt,name=FoundValue,proto3" json:"FoundValue,omitempty"`       // The value that was found
	ExpectedValue string `protobuf:"bytes,2,opt,name=ExpectedValue,proto3" json:"ExpectedValue,omitempty"` // The value that was expected
}

func (x *GetSingleTestCaseExecutionResponse_LogPostMessage_FoundVersusExpectedValueMessage) Reset() {
	*x = GetSingleTestCaseExecutionResponse_LogPostMessage_FoundVersusExpectedValueMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingleTestCaseExecutionResponse_LogPostMessage_FoundVersusExpectedValueMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleTestCaseExecutionResponse_LogPostMessage_FoundVersusExpectedValueMessage) ProtoMessage() {
}

func (x *GetSingleTestCaseExecutionResponse_LogPostMessage_FoundVersusExpectedValueMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleTestCaseExecutionResponse_LogPostMessage_FoundVersusExpectedValueMessage.ProtoReflect.Descriptor instead.
func (*GetSingleTestCaseExecutionResponse_LogPostMessage_FoundVersusExpectedValueMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP(), []int{13, 3, 0}
}

func (x *GetSingleTestCaseExecutionResponse_LogPostMessage_FoundVersusExpectedValueMessage) GetFoundValue() string {
	if x != nil {
		return x.FoundValue
	}
	return ""
}

func (x *GetSingleTestCaseExecutionResponse_LogPostMessage_FoundVersusExpectedValueMessage) GetExpectedValue() string {
	if x != nil {
		return x.ExpectedValue
	}
	return ""
}

var File_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto protoreflect.FileDescriptor

var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDesc = []byte{
	0x0a, 0x78, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x5f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x70, 0x46, 0x65, 0x6e,
	0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x41,
	0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x01,
	0x0a, 0x2d, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x69, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x2e, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x59, 0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x6b,
	0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf7, 0x02, 0x0a,
	0x24, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x73, 0x12, 0x62, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x5e, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x8b, 0x02, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x59, 0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x6b, 0x4e,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x19,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x19, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x22, 0xf5, 0x02, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x12, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75,
	0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x12, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x55, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x62, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x5e, 0x0a, 0x1c,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1c,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xf9, 0x01, 0x0a,
	0x23, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41,
	0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f,
	0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x77, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x17, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x02, 0x0a, 0x1d, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x21, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x21, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0xfd, 0x02, 0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x69, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x62, 0x0a, 0x1e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x5e, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x95, 0x02, 0x0a, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x59, 0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x6b, 0x4e,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x1d,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1d, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbc, 0x02, 0x0a, 0x24, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x96, 0x01, 0x0a, 0x21, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x21, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x18, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x18, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xb9, 0x06, 0x0a, 0x28, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x75, 0x69, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x23, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64,
	0x4f, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x23, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x4f, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x63,
	0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x22, 0xf6, 0x02, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x52, 0x0a,
	0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x75, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x17, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0xc4, 0x01, 0x0a,
	0x21, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x69, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x15, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x75, 0x69, 0x64, 0x22, 0x86, 0x0f, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x19, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x62,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x19, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x8d, 0x03,
	0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0xb3, 0x01, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0xb3, 0x01, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x69, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1f, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xb3, 0x05,
	0x0a, 0x26, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12,
	0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x1e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x5e, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x8a, 0x01, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1e, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a,
	0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0xa9, 0x01, 0x0a, 0x26, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7f,
	0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x50, 0x6f,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x11, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x1a,
	0xca, 0x03, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x57, 0x0a, 0x0d, 0x4c, 0x6f,
	0x67, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x18, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x6f,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56,
	0x65, 0x72, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x18, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x67, 0x0a, 0x1f, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x5a, 0x0d,
	0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescOnce sync.Once
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescData = file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDesc
)

func file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescGZIP() []byte {
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescOnce.Do(func() {
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescData)
	})
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDescData
}

var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_goTypes = []interface{}{
	(*InitiateSingleTestCaseExecutionRequestMessage)(nil),                                     // 0: fenixExecutionServerGuiGrpcApi.InitiateSingleTestCaseExecutionRequestMessage
	(*InitiateSingleTestCaseExecutionResponseMessage)(nil),                                    // 1: fenixExecutionServerGuiGrpcApi.InitiateSingleTestCaseExecutionResponseMessage
	(*ListTestCasesInExecutionQueueRequest)(nil),                                              // 2: fenixExecutionServerGuiGrpcApi.ListTestCasesInExecutionQueueRequest
	(*ListTestCasesInExecutionQueueResponse)(nil),                                             // 3: fenixExecutionServerGuiGrpcApi.ListTestCasesInExecutionQueueResponse
	(*ListTestCasesUnderExecutionRequest)(nil),                                                // 4: fenixExecutionServerGuiGrpcApi.ListTestCasesUnderExecutionRequest
	(*ListTestCasesUnderExecutionResponse)(nil),                                               // 5: fenixExecutionServerGuiGrpcApi.ListTestCasesUnderExecutionResponse
	(*TestCaseUnderExecutionMessage)(nil),                                                     // 6: fenixExecutionServerGuiGrpcApi.TestCaseUnderExecutionMessage
	(*ListTestCasesWithFinishedExecutionsRequest)(nil),                                        // 7: fenixExecutionServerGuiGrpcApi.ListTestCasesWithFinishedExecutionsRequest
	(*ListTestCasesWithFinishedExecutionsResponse)(nil),                                       // 8: fenixExecutionServerGuiGrpcApi.ListTestCasesWithFinishedExecutionsResponse
	(*TestCaseWithFinishedExecutionMessage)(nil),                                              // 9: fenixExecutionServerGuiGrpcApi.TestCaseWithFinishedExecutionMessage
	(*TestCaseExecutionBasicInformationMessage)(nil),                                          // 10: fenixExecutionServerGuiGrpcApi.TestCaseExecutionBasicInformationMessage
	(*TestCaseExecutionDetailsMessage)(nil),                                                   // 11: fenixExecutionServerGuiGrpcApi.TestCaseExecutionDetailsMessage
	(*GetSingleTestCaseExecutionRequest)(nil),                                                 // 12: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionRequest
	(*GetSingleTestCaseExecutionResponse)(nil),                                                // 13: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse
	(*GetSingleTestCaseExecutionResponse_TestInstructionExecutionMessage)(nil),                // 14: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.TestInstructionExecutionMessage
	(*GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage)(nil),         // 15: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.TestInstructionExecutionSummaryMessage
	(*GetSingleTestCaseExecutionResponse_TestInstructionExecutionDetailsMessage)(nil),         // 16: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.TestInstructionExecutionDetailsMessage
	(*GetSingleTestCaseExecutionResponse_LogPostMessage)(nil),                                 // 17: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.LogPostMessage
	(*GetSingleTestCaseExecutionResponse_LogPostMessage_FoundVersusExpectedValueMessage)(nil), // 18: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.LogPostMessage.FoundVersusExpectedValueMessage
	(*UserIdentificationMessage)(nil),                                                         // 19: fenixExecutionServerGuiGrpcApi.UserIdentificationMessage
	(*AckNackResponse)(nil),                                                                   // 20: fenixExecutionServerGuiGrpcApi.AckNackResponse
	(*timestamppb.Timestamp)(nil),                                                             // 21: google.protobuf.Timestamp
	(ExecutionPriorityEnum)(0),                                                                // 22: fenixExecutionServerGuiGrpcApi.ExecutionPriorityEnum
	(TestCaseExecutionStatusEnum)(0),                                                          // 23: fenixExecutionServerGuiGrpcApi.TestCaseExecutionStatusEnum
	(TestInstructionExecutionStatusEnum)(0),                                                   // 24: fenixExecutionServerGuiGrpcApi.TestInstructionExecutionStatusEnum
	(LogPostStatusEnum)(0),                                                                    // 25: fenixExecutionServerGuiGrpcApi.LogPostStatusEnum
}
var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_depIdxs = []int32{
	19, // 0: fenixExecutionServerGuiGrpcApi.InitiateSingleTestCaseExecutionRequestMessage.UserIdentification:type_name -> fenixExecutionServerGuiGrpcApi.UserIdentificationMessage
	20, // 1: fenixExecutionServerGuiGrpcApi.InitiateSingleTestCaseExecutionResponseMessage.ackNackResponse:type_name -> fenixExecutionServerGuiGrpcApi.AckNackResponse
	19, // 2: fenixExecutionServerGuiGrpcApi.ListTestCasesInExecutionQueueRequest.UserIdentification:type_name -> fenixExecutionServerGuiGrpcApi.UserIdentificationMessage
	21, // 3: fenixExecutionServerGuiGrpcApi.ListTestCasesInExecutionQueueRequest.TestCaseExecutionFromTimeStamp:type_name -> google.protobuf.Timestamp
	21, // 4: fenixExecutionServerGuiGrpcApi.ListTestCasesInExecutionQueueRequest.TestCaseExecutionToTimeStamp:type_name -> google.protobuf.Timestamp
	20, // 5: fenixExecutionServerGuiGrpcApi.ListTestCasesInExecutionQueueResponse.ackNackResponse:type_name -> fenixExecutionServerGuiGrpcApi.AckNackResponse
	10, // 6: fenixExecutionServerGuiGrpcApi.ListTestCasesInExecutionQueueResponse.TestCasesInExecutionQueue:type_name -> fenixExecutionServerGuiGrpcApi.TestCaseExecutionBasicInformationMessage
	19, // 7: fenixExecutionServerGuiGrpcApi.ListTestCasesUnderExecutionRequest.UserIdentification:type_name -> fenixExecutionServerGuiGrpcApi.UserIdentificationMessage
	21, // 8: fenixExecutionServerGuiGrpcApi.ListTestCasesUnderExecutionRequest.TestCaseExecutionFromTimeStamp:type_name -> google.protobuf.Timestamp
	21, // 9: fenixExecutionServerGuiGrpcApi.ListTestCasesUnderExecutionRequest.TestCaseExecutionToTimeStamp:type_name -> google.protobuf.Timestamp
	20, // 10: fenixExecutionServerGuiGrpcApi.ListTestCasesUnderExecutionResponse.ackNackResponse:type_name -> fenixExecutionServerGuiGrpcApi.AckNackResponse
	6,  // 11: fenixExecutionServerGuiGrpcApi.ListTestCasesUnderExecutionResponse.TestCasesUnderExecution:type_name -> fenixExecutionServerGuiGrpcApi.TestCaseUnderExecutionMessage
	10, // 12: fenixExecutionServerGuiGrpcApi.TestCaseUnderExecutionMessage.TestCaseExecutionBasicInformation:type_name -> fenixExecutionServerGuiGrpcApi.TestCaseExecutionBasicInformationMessage
	11, // 13: fenixExecutionServerGuiGrpcApi.TestCaseUnderExecutionMessage.TestCaseExecutionDetails:type_name -> fenixExecutionServerGuiGrpcApi.TestCaseExecutionDetailsMessage
	19, // 14: fenixExecutionServerGuiGrpcApi.ListTestCasesWithFinishedExecutionsRequest.UserIdentification:type_name -> fenixExecutionServerGuiGrpcApi.UserIdentificationMessage
	21, // 15: fenixExecutionServerGuiGrpcApi.ListTestCasesWithFinishedExecutionsRequest.TestCaseExecutionFromTimeStamp:type_name -> google.protobuf.Timestamp
	21, // 16: fenixExecutionServerGuiGrpcApi.ListTestCasesWithFinishedExecutionsRequest.TestCaseExecutionToTimeStamp:type_name -> google.protobuf.Timestamp
	20, // 17: fenixExecutionServerGuiGrpcApi.ListTestCasesWithFinishedExecutionsResponse.ackNackResponse:type_name -> fenixExecutionServerGuiGrpcApi.AckNackResponse
	9,  // 18: fenixExecutionServerGuiGrpcApi.ListTestCasesWithFinishedExecutionsResponse.TestCaseWithFinishedExecution:type_name -> fenixExecutionServerGuiGrpcApi.TestCaseWithFinishedExecutionMessage
	10, // 19: fenixExecutionServerGuiGrpcApi.TestCaseWithFinishedExecutionMessage.TestCaseExecutionBasicInformation:type_name -> fenixExecutionServerGuiGrpcApi.TestCaseExecutionBasicInformationMessage
	11, // 20: fenixExecutionServerGuiGrpcApi.TestCaseWithFinishedExecutionMessage.TestCaseExecutionDetails:type_name -> fenixExecutionServerGuiGrpcApi.TestCaseExecutionDetailsMessage
	21, // 21: fenixExecutionServerGuiGrpcApi.TestCaseExecutionBasicInformationMessage.PlacedOnTestExecutionQueueTimeStamp:type_name -> google.protobuf.Timestamp
	22, // 22: fenixExecutionServerGuiGrpcApi.TestCaseExecutionBasicInformationMessage.ExecutionPriority:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionPriorityEnum
	21, // 23: fenixExecutionServerGuiGrpcApi.TestCaseExecutionDetailsMessage.ExecutionStartTimeStamp:type_name -> google.protobuf.Timestamp
	21, // 24: fenixExecutionServerGuiGrpcApi.TestCaseExecutionDetailsMessage.ExecutionStopTimeStamp:type_name -> google.protobuf.Timestamp
	23, // 25: fenixExecutionServerGuiGrpcApi.TestCaseExecutionDetailsMessage.TestCaseExecutionStatus:type_name -> fenixExecutionServerGuiGrpcApi.TestCaseExecutionStatusEnum
	19, // 26: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionRequest.UserIdentification:type_name -> fenixExecutionServerGuiGrpcApi.UserIdentificationMessage
	14, // 27: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.TestInstructionsExecution:type_name -> fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.TestInstructionExecutionMessage
	15, // 28: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.TestInstructionExecutionMessage.TestInstructionExecutionSummary:type_name -> fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.TestInstructionExecutionSummaryMessage
	16, // 29: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.TestInstructionExecutionMessage.TestInstructionExecutionDetails:type_name -> fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.TestInstructionExecutionDetailsMessage
	21, // 30: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.TestInstructionExecutionSummaryMessage.TestCaseExecutionFromTimeStamp:type_name -> google.protobuf.Timestamp
	21, // 31: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.TestInstructionExecutionSummaryMessage.TestCaseExecutionToTimeStamp:type_name -> google.protobuf.Timestamp
	24, // 32: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.TestInstructionExecutionSummaryMessage.TestInstructionExecutionStatus:type_name -> fenixExecutionServerGuiGrpcApi.TestInstructionExecutionStatusEnum
	17, // 33: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.TestInstructionExecutionDetailsMessage.ExecutionLogPosts:type_name -> fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.LogPostMessage
	21, // 34: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.LogPostMessage.LogPostTimeStamp:type_name -> google.protobuf.Timestamp
	25, // 35: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.LogPostMessage.LogPostStatus:type_name -> fenixExecutionServerGuiGrpcApi.LogPostStatusEnum
	18, // 36: fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.LogPostMessage.FoundVersusExpectedValue:type_name -> fenixExecutionServerGuiGrpcApi.GetSingleTestCaseExecutionResponse.LogPostMessage.FoundVersusExpectedValueMessage
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() {
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_init()
}
func file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_init() {
	if File_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto != nil {
		return
	}
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_GeneralMessagesAndEnums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiateSingleTestCaseExecutionRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiateSingleTestCaseExecutionResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestCasesInExecutionQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestCasesInExecutionQueueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestCasesUnderExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestCasesUnderExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseUnderExecutionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestCasesWithFinishedExecutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestCasesWithFinishedExecutionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseWithFinishedExecutionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseExecutionBasicInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseExecutionDetailsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSingleTestCaseExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSingleTestCaseExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSingleTestCaseExecutionResponse_TestInstructionExecutionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSingleTestCaseExecutionResponse_TestInstructionExecutionSummaryMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSingleTestCaseExecutionResponse_TestInstructionExecutionDetailsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSingleTestCaseExecutionResponse_LogPostMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSingleTestCaseExecutionResponse_LogPostMessage_FoundVersusExpectedValueMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_goTypes,
		DependencyIndexes: file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_depIdxs,
		MessageInfos:      file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_msgTypes,
	}.Build()
	File_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto = out.File
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_rawDesc = nil
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_goTypes = nil
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages_proto_depIdxs = nil
}
