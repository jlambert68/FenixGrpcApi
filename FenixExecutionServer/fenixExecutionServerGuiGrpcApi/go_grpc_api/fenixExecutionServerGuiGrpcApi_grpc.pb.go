// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi.proto

package go_grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FenixExecutionServerGuiGrpcServicesForGuiClient_AreYouAlive_FullMethodName                                   = "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForGuiClient/AreYouAlive"
	FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCasesOnExecutionQueue_FullMethodName                 = "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForGuiClient/ListTestCasesOnExecutionQueue"
	FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCasesUnderExecution_FullMethodName                   = "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForGuiClient/ListTestCasesUnderExecution"
	FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCasesWithFinishedExecutions_FullMethodName           = "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForGuiClient/ListTestCasesWithFinishedExecutions"
	FenixExecutionServerGuiGrpcServicesForGuiClient_GetSingleTestCaseExecution_FullMethodName                    = "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForGuiClient/GetSingleTestCaseExecution"
	FenixExecutionServerGuiGrpcServicesForGuiClient_InitiateTestCaseExecution_FullMethodName                     = "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForGuiClient/InitiateTestCaseExecution"
	FenixExecutionServerGuiGrpcServicesForGuiClient_InitiateTestSuiteExecutionWithOneTestDataSet_FullMethodName  = "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForGuiClient/InitiateTestSuiteExecutionWithOneTestDataSet"
	FenixExecutionServerGuiGrpcServicesForGuiClient_InitiateTestSuiteExecutionWithAllTestDataSets_FullMethodName = "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForGuiClient/InitiateTestSuiteExecutionWithAllTestDataSets"
	FenixExecutionServerGuiGrpcServicesForGuiClient_SubscribeToMessageStream_FullMethodName                      = "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForGuiClient/SubscribeToMessageStream"
	FenixExecutionServerGuiGrpcServicesForGuiClient_SubscribeToMessages_FullMethodName                           = "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForGuiClient/SubscribeToMessages"
	FenixExecutionServerGuiGrpcServicesForGuiClient_UnSubscribeToMessages_FullMethodName                         = "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForGuiClient/UnSubscribeToMessages"
	FenixExecutionServerGuiGrpcServicesForGuiClient_TesterGuiIsClosingDown_FullMethodName                        = "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForGuiClient/TesterGuiIsClosingDown"
	FenixExecutionServerGuiGrpcServicesForGuiClient_TesterGuiIsStartingUp_FullMethodName                         = "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForGuiClient/TesterGuiIsStartingUp"
	FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCaseExecutions_FullMethodName                        = "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForGuiClient/ListTestCaseExecutions"
	FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestSuiteExecutions_FullMethodName                       = "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForGuiClient/ListTestSuiteExecutions"
)

// FenixExecutionServerGuiGrpcServicesForGuiClientClient is the client API for FenixExecutionServerGuiGrpcServicesForGuiClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FenixExecutionServerGuiGrpcServicesForGuiClientClient interface {
	// Anyone can check if Fenix Execution server is alive with this service
	AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	// List TestCases that exists on Execution Queue, for specific Domains and DateTimes-span
	ListTestCasesOnExecutionQueue(ctx context.Context, in *ListTestCasesInExecutionQueueRequest, opts ...grpc.CallOption) (*ListTestCasesInExecutionQueueResponse, error)
	// List TestCases that is under execution , for specific Domains and DateTimes-span
	ListTestCasesUnderExecution(ctx context.Context, in *ListTestCasesUnderExecutionRequest, opts ...grpc.CallOption) (*ListTestCasesUnderExecutionResponse, error)
	// List TestCases that ire finished execution , for specific Domains and DateTimes-span
	ListTestCasesWithFinishedExecutions(ctx context.Context, in *ListTestCasesWithFinishedExecutionsRequest, opts ...grpc.CallOption) (*ListTestCasesWithFinishedExecutionsResponse, error)
	// Get a single TestCase Execution
	GetSingleTestCaseExecution(ctx context.Context, in *GetSingleTestCaseExecutionRequest, opts ...grpc.CallOption) (*GetSingleTestCaseExecutionResponse, error)
	// Initiate a single TestCase Execution with one specific TestDataSet
	InitiateTestCaseExecution(ctx context.Context, in *InitiateSingleTestCaseExecutionRequestMessage, opts ...grpc.CallOption) (*InitiateSingleTestCaseExecutionResponseMessage, error)
	// Initiate a single TestSuite Execution with one TestDataSet
	InitiateTestSuiteExecutionWithOneTestDataSet(ctx context.Context, in *InitiateTestSuiteExecutionWithOneTestDataSetRequestMessage, opts ...grpc.CallOption) (*InitiateSingleTestSuiteExecutionResponseMessage, error)
	// Initiate a single TestSuite Execution with all its TestDataSets
	InitiateTestSuiteExecutionWithAllTestDataSets(ctx context.Context, in *InitiateTestSuiteExecutionWithAllTestDataSetsRequestMessage, opts ...grpc.CallOption) (*InitiateSingleTestSuiteExecutionResponseMessage, error)
	// Execution TesterGui opens the gPRC-channel and messages are then streamed back to TestGui from GuiExecutionServer
	// Messages can be everything from execution status, information messages or Environment status
	SubscribeToMessageStream(ctx context.Context, in *UserAndApplicationRunTimeIdentificationMessage, opts ...grpc.CallOption) (FenixExecutionServerGuiGrpcServicesForGuiClient_SubscribeToMessageStreamClient, error)
	// Call from TesterGui to GuiExecution regarding which messages to subscribe to
	SubscribeToMessages(ctx context.Context, in *SubscribeToMessagesRequest, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Call from TesterGui to GuiExecution regarding which messages to unsubscribe to
	UnSubscribeToMessages(ctx context.Context, in *UnSubscribeToMessagesRequest, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Call from TesterGui to GuiExecution telling that the TesterGui is closing down
	TesterGuiIsClosingDown(ctx context.Context, in *UserAndApplicationRunTimeIdentificationMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Call from TesterGui to GuiExecution telling that the TesterGui is starting up
	TesterGuiIsStartingUp(ctx context.Context, in *UserAndApplicationRunTimeIdentificationMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Call from TesterGui to GuiExecution to get a list of all TestCaseExecutions with their current execution status
	ListTestCaseExecutions(ctx context.Context, in *ListTestCaseExecutionsRequest, opts ...grpc.CallOption) (*ListTestCaseExecutionsResponse, error)
	// Call from TesterGui to GuiExecution to get a list of all TestSuiteExecutions with their current execution status
	ListTestSuiteExecutions(ctx context.Context, in *ListTestSuiteExecutionsRequest, opts ...grpc.CallOption) (*ListTestSuiteExecutionsResponse, error)
}

type fenixExecutionServerGuiGrpcServicesForGuiClientClient struct {
	cc grpc.ClientConnInterface
}

func NewFenixExecutionServerGuiGrpcServicesForGuiClientClient(cc grpc.ClientConnInterface) FenixExecutionServerGuiGrpcServicesForGuiClientClient {
	return &fenixExecutionServerGuiGrpcServicesForGuiClientClient{cc}
}

func (c *fenixExecutionServerGuiGrpcServicesForGuiClientClient) AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionServerGuiGrpcServicesForGuiClient_AreYouAlive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesForGuiClientClient) ListTestCasesOnExecutionQueue(ctx context.Context, in *ListTestCasesInExecutionQueueRequest, opts ...grpc.CallOption) (*ListTestCasesInExecutionQueueResponse, error) {
	out := new(ListTestCasesInExecutionQueueResponse)
	err := c.cc.Invoke(ctx, FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCasesOnExecutionQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesForGuiClientClient) ListTestCasesUnderExecution(ctx context.Context, in *ListTestCasesUnderExecutionRequest, opts ...grpc.CallOption) (*ListTestCasesUnderExecutionResponse, error) {
	out := new(ListTestCasesUnderExecutionResponse)
	err := c.cc.Invoke(ctx, FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCasesUnderExecution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesForGuiClientClient) ListTestCasesWithFinishedExecutions(ctx context.Context, in *ListTestCasesWithFinishedExecutionsRequest, opts ...grpc.CallOption) (*ListTestCasesWithFinishedExecutionsResponse, error) {
	out := new(ListTestCasesWithFinishedExecutionsResponse)
	err := c.cc.Invoke(ctx, FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCasesWithFinishedExecutions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesForGuiClientClient) GetSingleTestCaseExecution(ctx context.Context, in *GetSingleTestCaseExecutionRequest, opts ...grpc.CallOption) (*GetSingleTestCaseExecutionResponse, error) {
	out := new(GetSingleTestCaseExecutionResponse)
	err := c.cc.Invoke(ctx, FenixExecutionServerGuiGrpcServicesForGuiClient_GetSingleTestCaseExecution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesForGuiClientClient) InitiateTestCaseExecution(ctx context.Context, in *InitiateSingleTestCaseExecutionRequestMessage, opts ...grpc.CallOption) (*InitiateSingleTestCaseExecutionResponseMessage, error) {
	out := new(InitiateSingleTestCaseExecutionResponseMessage)
	err := c.cc.Invoke(ctx, FenixExecutionServerGuiGrpcServicesForGuiClient_InitiateTestCaseExecution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesForGuiClientClient) InitiateTestSuiteExecutionWithOneTestDataSet(ctx context.Context, in *InitiateTestSuiteExecutionWithOneTestDataSetRequestMessage, opts ...grpc.CallOption) (*InitiateSingleTestSuiteExecutionResponseMessage, error) {
	out := new(InitiateSingleTestSuiteExecutionResponseMessage)
	err := c.cc.Invoke(ctx, FenixExecutionServerGuiGrpcServicesForGuiClient_InitiateTestSuiteExecutionWithOneTestDataSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesForGuiClientClient) InitiateTestSuiteExecutionWithAllTestDataSets(ctx context.Context, in *InitiateTestSuiteExecutionWithAllTestDataSetsRequestMessage, opts ...grpc.CallOption) (*InitiateSingleTestSuiteExecutionResponseMessage, error) {
	out := new(InitiateSingleTestSuiteExecutionResponseMessage)
	err := c.cc.Invoke(ctx, FenixExecutionServerGuiGrpcServicesForGuiClient_InitiateTestSuiteExecutionWithAllTestDataSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesForGuiClientClient) SubscribeToMessageStream(ctx context.Context, in *UserAndApplicationRunTimeIdentificationMessage, opts ...grpc.CallOption) (FenixExecutionServerGuiGrpcServicesForGuiClient_SubscribeToMessageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FenixExecutionServerGuiGrpcServicesForGuiClient_ServiceDesc.Streams[0], FenixExecutionServerGuiGrpcServicesForGuiClient_SubscribeToMessageStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fenixExecutionServerGuiGrpcServicesForGuiClientSubscribeToMessageStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FenixExecutionServerGuiGrpcServicesForGuiClient_SubscribeToMessageStreamClient interface {
	Recv() (*SubscribeToMessagesStreamResponse, error)
	grpc.ClientStream
}

type fenixExecutionServerGuiGrpcServicesForGuiClientSubscribeToMessageStreamClient struct {
	grpc.ClientStream
}

func (x *fenixExecutionServerGuiGrpcServicesForGuiClientSubscribeToMessageStreamClient) Recv() (*SubscribeToMessagesStreamResponse, error) {
	m := new(SubscribeToMessagesStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fenixExecutionServerGuiGrpcServicesForGuiClientClient) SubscribeToMessages(ctx context.Context, in *SubscribeToMessagesRequest, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionServerGuiGrpcServicesForGuiClient_SubscribeToMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesForGuiClientClient) UnSubscribeToMessages(ctx context.Context, in *UnSubscribeToMessagesRequest, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionServerGuiGrpcServicesForGuiClient_UnSubscribeToMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesForGuiClientClient) TesterGuiIsClosingDown(ctx context.Context, in *UserAndApplicationRunTimeIdentificationMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionServerGuiGrpcServicesForGuiClient_TesterGuiIsClosingDown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesForGuiClientClient) TesterGuiIsStartingUp(ctx context.Context, in *UserAndApplicationRunTimeIdentificationMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionServerGuiGrpcServicesForGuiClient_TesterGuiIsStartingUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesForGuiClientClient) ListTestCaseExecutions(ctx context.Context, in *ListTestCaseExecutionsRequest, opts ...grpc.CallOption) (*ListTestCaseExecutionsResponse, error) {
	out := new(ListTestCaseExecutionsResponse)
	err := c.cc.Invoke(ctx, FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCaseExecutions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesForGuiClientClient) ListTestSuiteExecutions(ctx context.Context, in *ListTestSuiteExecutionsRequest, opts ...grpc.CallOption) (*ListTestSuiteExecutionsResponse, error) {
	out := new(ListTestSuiteExecutionsResponse)
	err := c.cc.Invoke(ctx, FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestSuiteExecutions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FenixExecutionServerGuiGrpcServicesForGuiClientServer is the server API for FenixExecutionServerGuiGrpcServicesForGuiClient service.
// All implementations must embed UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer
// for forward compatibility
type FenixExecutionServerGuiGrpcServicesForGuiClientServer interface {
	// Anyone can check if Fenix Execution server is alive with this service
	AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error)
	// List TestCases that exists on Execution Queue, for specific Domains and DateTimes-span
	ListTestCasesOnExecutionQueue(context.Context, *ListTestCasesInExecutionQueueRequest) (*ListTestCasesInExecutionQueueResponse, error)
	// List TestCases that is under execution , for specific Domains and DateTimes-span
	ListTestCasesUnderExecution(context.Context, *ListTestCasesUnderExecutionRequest) (*ListTestCasesUnderExecutionResponse, error)
	// List TestCases that ire finished execution , for specific Domains and DateTimes-span
	ListTestCasesWithFinishedExecutions(context.Context, *ListTestCasesWithFinishedExecutionsRequest) (*ListTestCasesWithFinishedExecutionsResponse, error)
	// Get a single TestCase Execution
	GetSingleTestCaseExecution(context.Context, *GetSingleTestCaseExecutionRequest) (*GetSingleTestCaseExecutionResponse, error)
	// Initiate a single TestCase Execution with one specific TestDataSet
	InitiateTestCaseExecution(context.Context, *InitiateSingleTestCaseExecutionRequestMessage) (*InitiateSingleTestCaseExecutionResponseMessage, error)
	// Initiate a single TestSuite Execution with one TestDataSet
	InitiateTestSuiteExecutionWithOneTestDataSet(context.Context, *InitiateTestSuiteExecutionWithOneTestDataSetRequestMessage) (*InitiateSingleTestSuiteExecutionResponseMessage, error)
	// Initiate a single TestSuite Execution with all its TestDataSets
	InitiateTestSuiteExecutionWithAllTestDataSets(context.Context, *InitiateTestSuiteExecutionWithAllTestDataSetsRequestMessage) (*InitiateSingleTestSuiteExecutionResponseMessage, error)
	// Execution TesterGui opens the gPRC-channel and messages are then streamed back to TestGui from GuiExecutionServer
	// Messages can be everything from execution status, information messages or Environment status
	SubscribeToMessageStream(*UserAndApplicationRunTimeIdentificationMessage, FenixExecutionServerGuiGrpcServicesForGuiClient_SubscribeToMessageStreamServer) error
	// Call from TesterGui to GuiExecution regarding which messages to subscribe to
	SubscribeToMessages(context.Context, *SubscribeToMessagesRequest) (*AckNackResponse, error)
	// Call from TesterGui to GuiExecution regarding which messages to unsubscribe to
	UnSubscribeToMessages(context.Context, *UnSubscribeToMessagesRequest) (*AckNackResponse, error)
	// Call from TesterGui to GuiExecution telling that the TesterGui is closing down
	TesterGuiIsClosingDown(context.Context, *UserAndApplicationRunTimeIdentificationMessage) (*AckNackResponse, error)
	// Call from TesterGui to GuiExecution telling that the TesterGui is starting up
	TesterGuiIsStartingUp(context.Context, *UserAndApplicationRunTimeIdentificationMessage) (*AckNackResponse, error)
	// Call from TesterGui to GuiExecution to get a list of all TestCaseExecutions with their current execution status
	ListTestCaseExecutions(context.Context, *ListTestCaseExecutionsRequest) (*ListTestCaseExecutionsResponse, error)
	// Call from TesterGui to GuiExecution to get a list of all TestSuiteExecutions with their current execution status
	ListTestSuiteExecutions(context.Context, *ListTestSuiteExecutionsRequest) (*ListTestSuiteExecutionsResponse, error)
	mustEmbedUnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer()
}

// UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer must be embedded to have forward compatible implementations.
type UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer struct {
}

func (UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer) AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreYouAlive not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer) ListTestCasesOnExecutionQueue(context.Context, *ListTestCasesInExecutionQueueRequest) (*ListTestCasesInExecutionQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestCasesOnExecutionQueue not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer) ListTestCasesUnderExecution(context.Context, *ListTestCasesUnderExecutionRequest) (*ListTestCasesUnderExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestCasesUnderExecution not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer) ListTestCasesWithFinishedExecutions(context.Context, *ListTestCasesWithFinishedExecutionsRequest) (*ListTestCasesWithFinishedExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestCasesWithFinishedExecutions not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer) GetSingleTestCaseExecution(context.Context, *GetSingleTestCaseExecutionRequest) (*GetSingleTestCaseExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleTestCaseExecution not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer) InitiateTestCaseExecution(context.Context, *InitiateSingleTestCaseExecutionRequestMessage) (*InitiateSingleTestCaseExecutionResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateTestCaseExecution not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer) InitiateTestSuiteExecutionWithOneTestDataSet(context.Context, *InitiateTestSuiteExecutionWithOneTestDataSetRequestMessage) (*InitiateSingleTestSuiteExecutionResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateTestSuiteExecutionWithOneTestDataSet not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer) InitiateTestSuiteExecutionWithAllTestDataSets(context.Context, *InitiateTestSuiteExecutionWithAllTestDataSetsRequestMessage) (*InitiateSingleTestSuiteExecutionResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateTestSuiteExecutionWithAllTestDataSets not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer) SubscribeToMessageStream(*UserAndApplicationRunTimeIdentificationMessage, FenixExecutionServerGuiGrpcServicesForGuiClient_SubscribeToMessageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToMessageStream not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer) SubscribeToMessages(context.Context, *SubscribeToMessagesRequest) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToMessages not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer) UnSubscribeToMessages(context.Context, *UnSubscribeToMessagesRequest) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSubscribeToMessages not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer) TesterGuiIsClosingDown(context.Context, *UserAndApplicationRunTimeIdentificationMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TesterGuiIsClosingDown not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer) TesterGuiIsStartingUp(context.Context, *UserAndApplicationRunTimeIdentificationMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TesterGuiIsStartingUp not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer) ListTestCaseExecutions(context.Context, *ListTestCaseExecutionsRequest) (*ListTestCaseExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestCaseExecutions not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer) ListTestSuiteExecutions(context.Context, *ListTestSuiteExecutionsRequest) (*ListTestSuiteExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestSuiteExecutions not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer) mustEmbedUnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer() {
}

// UnsafeFenixExecutionServerGuiGrpcServicesForGuiClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FenixExecutionServerGuiGrpcServicesForGuiClientServer will
// result in compilation errors.
type UnsafeFenixExecutionServerGuiGrpcServicesForGuiClientServer interface {
	mustEmbedUnimplementedFenixExecutionServerGuiGrpcServicesForGuiClientServer()
}

func RegisterFenixExecutionServerGuiGrpcServicesForGuiClientServer(s grpc.ServiceRegistrar, srv FenixExecutionServerGuiGrpcServicesForGuiClientServer) {
	s.RegisterService(&FenixExecutionServerGuiGrpcServicesForGuiClient_ServiceDesc, srv)
}

func _FenixExecutionServerGuiGrpcServicesForGuiClient_AreYouAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).AreYouAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionServerGuiGrpcServicesForGuiClient_AreYouAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).AreYouAlive(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCasesOnExecutionQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestCasesInExecutionQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).ListTestCasesOnExecutionQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCasesOnExecutionQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).ListTestCasesOnExecutionQueue(ctx, req.(*ListTestCasesInExecutionQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCasesUnderExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestCasesUnderExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).ListTestCasesUnderExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCasesUnderExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).ListTestCasesUnderExecution(ctx, req.(*ListTestCasesUnderExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCasesWithFinishedExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestCasesWithFinishedExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).ListTestCasesWithFinishedExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCasesWithFinishedExecutions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).ListTestCasesWithFinishedExecutions(ctx, req.(*ListTestCasesWithFinishedExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServicesForGuiClient_GetSingleTestCaseExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleTestCaseExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).GetSingleTestCaseExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionServerGuiGrpcServicesForGuiClient_GetSingleTestCaseExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).GetSingleTestCaseExecution(ctx, req.(*GetSingleTestCaseExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServicesForGuiClient_InitiateTestCaseExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateSingleTestCaseExecutionRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).InitiateTestCaseExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionServerGuiGrpcServicesForGuiClient_InitiateTestCaseExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).InitiateTestCaseExecution(ctx, req.(*InitiateSingleTestCaseExecutionRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServicesForGuiClient_InitiateTestSuiteExecutionWithOneTestDataSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateTestSuiteExecutionWithOneTestDataSetRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).InitiateTestSuiteExecutionWithOneTestDataSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionServerGuiGrpcServicesForGuiClient_InitiateTestSuiteExecutionWithOneTestDataSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).InitiateTestSuiteExecutionWithOneTestDataSet(ctx, req.(*InitiateTestSuiteExecutionWithOneTestDataSetRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServicesForGuiClient_InitiateTestSuiteExecutionWithAllTestDataSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateTestSuiteExecutionWithAllTestDataSetsRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).InitiateTestSuiteExecutionWithAllTestDataSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionServerGuiGrpcServicesForGuiClient_InitiateTestSuiteExecutionWithAllTestDataSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).InitiateTestSuiteExecutionWithAllTestDataSets(ctx, req.(*InitiateTestSuiteExecutionWithAllTestDataSetsRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServicesForGuiClient_SubscribeToMessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserAndApplicationRunTimeIdentificationMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).SubscribeToMessageStream(m, &fenixExecutionServerGuiGrpcServicesForGuiClientSubscribeToMessageStreamServer{stream})
}

type FenixExecutionServerGuiGrpcServicesForGuiClient_SubscribeToMessageStreamServer interface {
	Send(*SubscribeToMessagesStreamResponse) error
	grpc.ServerStream
}

type fenixExecutionServerGuiGrpcServicesForGuiClientSubscribeToMessageStreamServer struct {
	grpc.ServerStream
}

func (x *fenixExecutionServerGuiGrpcServicesForGuiClientSubscribeToMessageStreamServer) Send(m *SubscribeToMessagesStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FenixExecutionServerGuiGrpcServicesForGuiClient_SubscribeToMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeToMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).SubscribeToMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionServerGuiGrpcServicesForGuiClient_SubscribeToMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).SubscribeToMessages(ctx, req.(*SubscribeToMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServicesForGuiClient_UnSubscribeToMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSubscribeToMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).UnSubscribeToMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionServerGuiGrpcServicesForGuiClient_UnSubscribeToMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).UnSubscribeToMessages(ctx, req.(*UnSubscribeToMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServicesForGuiClient_TesterGuiIsClosingDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndApplicationRunTimeIdentificationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).TesterGuiIsClosingDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionServerGuiGrpcServicesForGuiClient_TesterGuiIsClosingDown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).TesterGuiIsClosingDown(ctx, req.(*UserAndApplicationRunTimeIdentificationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServicesForGuiClient_TesterGuiIsStartingUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndApplicationRunTimeIdentificationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).TesterGuiIsStartingUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionServerGuiGrpcServicesForGuiClient_TesterGuiIsStartingUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).TesterGuiIsStartingUp(ctx, req.(*UserAndApplicationRunTimeIdentificationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCaseExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestCaseExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).ListTestCaseExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCaseExecutions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).ListTestCaseExecutions(ctx, req.(*ListTestCaseExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestSuiteExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestSuiteExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).ListTestSuiteExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestSuiteExecutions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesForGuiClientServer).ListTestSuiteExecutions(ctx, req.(*ListTestSuiteExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FenixExecutionServerGuiGrpcServicesForGuiClient_ServiceDesc is the grpc.ServiceDesc for FenixExecutionServerGuiGrpcServicesForGuiClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FenixExecutionServerGuiGrpcServicesForGuiClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForGuiClient",
	HandlerType: (*FenixExecutionServerGuiGrpcServicesForGuiClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AreYouAlive",
			Handler:    _FenixExecutionServerGuiGrpcServicesForGuiClient_AreYouAlive_Handler,
		},
		{
			MethodName: "ListTestCasesOnExecutionQueue",
			Handler:    _FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCasesOnExecutionQueue_Handler,
		},
		{
			MethodName: "ListTestCasesUnderExecution",
			Handler:    _FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCasesUnderExecution_Handler,
		},
		{
			MethodName: "ListTestCasesWithFinishedExecutions",
			Handler:    _FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCasesWithFinishedExecutions_Handler,
		},
		{
			MethodName: "GetSingleTestCaseExecution",
			Handler:    _FenixExecutionServerGuiGrpcServicesForGuiClient_GetSingleTestCaseExecution_Handler,
		},
		{
			MethodName: "InitiateTestCaseExecution",
			Handler:    _FenixExecutionServerGuiGrpcServicesForGuiClient_InitiateTestCaseExecution_Handler,
		},
		{
			MethodName: "InitiateTestSuiteExecutionWithOneTestDataSet",
			Handler:    _FenixExecutionServerGuiGrpcServicesForGuiClient_InitiateTestSuiteExecutionWithOneTestDataSet_Handler,
		},
		{
			MethodName: "InitiateTestSuiteExecutionWithAllTestDataSets",
			Handler:    _FenixExecutionServerGuiGrpcServicesForGuiClient_InitiateTestSuiteExecutionWithAllTestDataSets_Handler,
		},
		{
			MethodName: "SubscribeToMessages",
			Handler:    _FenixExecutionServerGuiGrpcServicesForGuiClient_SubscribeToMessages_Handler,
		},
		{
			MethodName: "UnSubscribeToMessages",
			Handler:    _FenixExecutionServerGuiGrpcServicesForGuiClient_UnSubscribeToMessages_Handler,
		},
		{
			MethodName: "TesterGuiIsClosingDown",
			Handler:    _FenixExecutionServerGuiGrpcServicesForGuiClient_TesterGuiIsClosingDown_Handler,
		},
		{
			MethodName: "TesterGuiIsStartingUp",
			Handler:    _FenixExecutionServerGuiGrpcServicesForGuiClient_TesterGuiIsStartingUp_Handler,
		},
		{
			MethodName: "ListTestCaseExecutions",
			Handler:    _FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestCaseExecutions_Handler,
		},
		{
			MethodName: "ListTestSuiteExecutions",
			Handler:    _FenixExecutionServerGuiGrpcServicesForGuiClient_ListTestSuiteExecutions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToMessageStream",
			Handler:       _FenixExecutionServerGuiGrpcServicesForGuiClient_SubscribeToMessageStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi.proto",
}

const (
	FenixExecutionServerGuiGrpcServicesForExecutionServer_SendExecutionStatusTowardsGuiClient_FullMethodName = "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForExecutionServer/SendExecutionStatusTowardsGuiClient"
)

// FenixExecutionServerGuiGrpcServicesForExecutionServerClient is the client API for FenixExecutionServerGuiGrpcServicesForExecutionServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FenixExecutionServerGuiGrpcServicesForExecutionServerClient interface {
	// ExecutionServer send over status for TestCaseExecutions and TestInstructionExecutions
	SendExecutionStatusTowardsGuiClient(ctx context.Context, in *TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
}

type fenixExecutionServerGuiGrpcServicesForExecutionServerClient struct {
	cc grpc.ClientConnInterface
}

func NewFenixExecutionServerGuiGrpcServicesForExecutionServerClient(cc grpc.ClientConnInterface) FenixExecutionServerGuiGrpcServicesForExecutionServerClient {
	return &fenixExecutionServerGuiGrpcServicesForExecutionServerClient{cc}
}

func (c *fenixExecutionServerGuiGrpcServicesForExecutionServerClient) SendExecutionStatusTowardsGuiClient(ctx context.Context, in *TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixExecutionServerGuiGrpcServicesForExecutionServer_SendExecutionStatusTowardsGuiClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FenixExecutionServerGuiGrpcServicesForExecutionServerServer is the server API for FenixExecutionServerGuiGrpcServicesForExecutionServer service.
// All implementations must embed UnimplementedFenixExecutionServerGuiGrpcServicesForExecutionServerServer
// for forward compatibility
type FenixExecutionServerGuiGrpcServicesForExecutionServerServer interface {
	// ExecutionServer send over status for TestCaseExecutions and TestInstructionExecutions
	SendExecutionStatusTowardsGuiClient(context.Context, *TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage) (*AckNackResponse, error)
	mustEmbedUnimplementedFenixExecutionServerGuiGrpcServicesForExecutionServerServer()
}

// UnimplementedFenixExecutionServerGuiGrpcServicesForExecutionServerServer must be embedded to have forward compatible implementations.
type UnimplementedFenixExecutionServerGuiGrpcServicesForExecutionServerServer struct {
}

func (UnimplementedFenixExecutionServerGuiGrpcServicesForExecutionServerServer) SendExecutionStatusTowardsGuiClient(context.Context, *TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendExecutionStatusTowardsGuiClient not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesForExecutionServerServer) mustEmbedUnimplementedFenixExecutionServerGuiGrpcServicesForExecutionServerServer() {
}

// UnsafeFenixExecutionServerGuiGrpcServicesForExecutionServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FenixExecutionServerGuiGrpcServicesForExecutionServerServer will
// result in compilation errors.
type UnsafeFenixExecutionServerGuiGrpcServicesForExecutionServerServer interface {
	mustEmbedUnimplementedFenixExecutionServerGuiGrpcServicesForExecutionServerServer()
}

func RegisterFenixExecutionServerGuiGrpcServicesForExecutionServerServer(s grpc.ServiceRegistrar, srv FenixExecutionServerGuiGrpcServicesForExecutionServerServer) {
	s.RegisterService(&FenixExecutionServerGuiGrpcServicesForExecutionServer_ServiceDesc, srv)
}

func _FenixExecutionServerGuiGrpcServicesForExecutionServer_SendExecutionStatusTowardsGuiClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesForExecutionServerServer).SendExecutionStatusTowardsGuiClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixExecutionServerGuiGrpcServicesForExecutionServer_SendExecutionStatusTowardsGuiClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesForExecutionServerServer).SendExecutionStatusTowardsGuiClient(ctx, req.(*TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// FenixExecutionServerGuiGrpcServicesForExecutionServer_ServiceDesc is the grpc.ServiceDesc for FenixExecutionServerGuiGrpcServicesForExecutionServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FenixExecutionServerGuiGrpcServicesForExecutionServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServicesForExecutionServer",
	HandlerType: (*FenixExecutionServerGuiGrpcServicesForExecutionServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendExecutionStatusTowardsGuiClient",
			Handler:    _FenixExecutionServerGuiGrpcServicesForExecutionServer_SendExecutionStatusTowardsGuiClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi.proto",
}
