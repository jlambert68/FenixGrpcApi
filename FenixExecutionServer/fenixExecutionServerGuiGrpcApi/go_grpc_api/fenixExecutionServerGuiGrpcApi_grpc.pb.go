// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FenixExecutionServerGuiGrpcServicesClient is the client API for FenixExecutionServerGuiGrpcServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FenixExecutionServerGuiGrpcServicesClient interface {
	//Anyone can check if Fenix Execution server is alive with this service
	AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	// List TestCases that exists on Execution Queue, for specific Domains and DateTimes-span
	ListTestCasesOnExecutionQueue(ctx context.Context, in *ListTestCasesInExecutionQueueRequest, opts ...grpc.CallOption) (*ListTestCasesInExecutionQueueResponse, error)
	// List TestCases that is under execution , for specific Domains and DateTimes-span
	ListTestCasesUnderExecution(ctx context.Context, in *ListTestCasesUnderExecutionRequest, opts ...grpc.CallOption) (*ListTestCasesUnderExecutionResponse, error)
	// List TestCases that ire finished execution , for specific Domains and DateTimes-span
	ListTestCasesWithFinishedExecutions(ctx context.Context, in *ListTestCasesWithFinishedExecutionsRequest, opts ...grpc.CallOption) (*ListTestCasesWithFinishedExecutionsResponse, error)
	// Get a single TestCase Execution
	GetSingleTestCaseExecution(ctx context.Context, in *GetSingleTestCaseExecutionRequest, opts ...grpc.CallOption) (*GetSingleTestCaseExecutionResponse, error)
	// Initiate a single TestCase Execution with one specific TestDataSet
	InitiateTestCaseExecution(ctx context.Context, in *InitiateSingleTestCaseExecutionRequestMessage, opts ...grpc.CallOption) (*InitiateSingleTestCaseExecutionResponseMessage, error)
}

type fenixExecutionServerGuiGrpcServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewFenixExecutionServerGuiGrpcServicesClient(cc grpc.ClientConnInterface) FenixExecutionServerGuiGrpcServicesClient {
	return &fenixExecutionServerGuiGrpcServicesClient{cc}
}

func (c *fenixExecutionServerGuiGrpcServicesClient) AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServices/AreYouAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesClient) ListTestCasesOnExecutionQueue(ctx context.Context, in *ListTestCasesInExecutionQueueRequest, opts ...grpc.CallOption) (*ListTestCasesInExecutionQueueResponse, error) {
	out := new(ListTestCasesInExecutionQueueResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServices/ListTestCasesOnExecutionQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesClient) ListTestCasesUnderExecution(ctx context.Context, in *ListTestCasesUnderExecutionRequest, opts ...grpc.CallOption) (*ListTestCasesUnderExecutionResponse, error) {
	out := new(ListTestCasesUnderExecutionResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServices/ListTestCasesUnderExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesClient) ListTestCasesWithFinishedExecutions(ctx context.Context, in *ListTestCasesWithFinishedExecutionsRequest, opts ...grpc.CallOption) (*ListTestCasesWithFinishedExecutionsResponse, error) {
	out := new(ListTestCasesWithFinishedExecutionsResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServices/ListTestCasesWithFinishedExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesClient) GetSingleTestCaseExecution(ctx context.Context, in *GetSingleTestCaseExecutionRequest, opts ...grpc.CallOption) (*GetSingleTestCaseExecutionResponse, error) {
	out := new(GetSingleTestCaseExecutionResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServices/GetSingleTestCaseExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGuiGrpcServicesClient) InitiateTestCaseExecution(ctx context.Context, in *InitiateSingleTestCaseExecutionRequestMessage, opts ...grpc.CallOption) (*InitiateSingleTestCaseExecutionResponseMessage, error) {
	out := new(InitiateSingleTestCaseExecutionResponseMessage)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServices/InitiateTestCaseExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FenixExecutionServerGuiGrpcServicesServer is the server API for FenixExecutionServerGuiGrpcServices service.
// All implementations must embed UnimplementedFenixExecutionServerGuiGrpcServicesServer
// for forward compatibility
type FenixExecutionServerGuiGrpcServicesServer interface {
	//Anyone can check if Fenix Execution server is alive with this service
	AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error)
	// List TestCases that exists on Execution Queue, for specific Domains and DateTimes-span
	ListTestCasesOnExecutionQueue(context.Context, *ListTestCasesInExecutionQueueRequest) (*ListTestCasesInExecutionQueueResponse, error)
	// List TestCases that is under execution , for specific Domains and DateTimes-span
	ListTestCasesUnderExecution(context.Context, *ListTestCasesUnderExecutionRequest) (*ListTestCasesUnderExecutionResponse, error)
	// List TestCases that ire finished execution , for specific Domains and DateTimes-span
	ListTestCasesWithFinishedExecutions(context.Context, *ListTestCasesWithFinishedExecutionsRequest) (*ListTestCasesWithFinishedExecutionsResponse, error)
	// Get a single TestCase Execution
	GetSingleTestCaseExecution(context.Context, *GetSingleTestCaseExecutionRequest) (*GetSingleTestCaseExecutionResponse, error)
	// Initiate a single TestCase Execution with one specific TestDataSet
	InitiateTestCaseExecution(context.Context, *InitiateSingleTestCaseExecutionRequestMessage) (*InitiateSingleTestCaseExecutionResponseMessage, error)
	mustEmbedUnimplementedFenixExecutionServerGuiGrpcServicesServer()
}

// UnimplementedFenixExecutionServerGuiGrpcServicesServer must be embedded to have forward compatible implementations.
type UnimplementedFenixExecutionServerGuiGrpcServicesServer struct {
}

func (UnimplementedFenixExecutionServerGuiGrpcServicesServer) AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreYouAlive not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesServer) ListTestCasesOnExecutionQueue(context.Context, *ListTestCasesInExecutionQueueRequest) (*ListTestCasesInExecutionQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestCasesOnExecutionQueue not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesServer) ListTestCasesUnderExecution(context.Context, *ListTestCasesUnderExecutionRequest) (*ListTestCasesUnderExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestCasesUnderExecution not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesServer) ListTestCasesWithFinishedExecutions(context.Context, *ListTestCasesWithFinishedExecutionsRequest) (*ListTestCasesWithFinishedExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestCasesWithFinishedExecutions not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesServer) GetSingleTestCaseExecution(context.Context, *GetSingleTestCaseExecutionRequest) (*GetSingleTestCaseExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleTestCaseExecution not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesServer) InitiateTestCaseExecution(context.Context, *InitiateSingleTestCaseExecutionRequestMessage) (*InitiateSingleTestCaseExecutionResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateTestCaseExecution not implemented")
}
func (UnimplementedFenixExecutionServerGuiGrpcServicesServer) mustEmbedUnimplementedFenixExecutionServerGuiGrpcServicesServer() {
}

// UnsafeFenixExecutionServerGuiGrpcServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FenixExecutionServerGuiGrpcServicesServer will
// result in compilation errors.
type UnsafeFenixExecutionServerGuiGrpcServicesServer interface {
	mustEmbedUnimplementedFenixExecutionServerGuiGrpcServicesServer()
}

func RegisterFenixExecutionServerGuiGrpcServicesServer(s grpc.ServiceRegistrar, srv FenixExecutionServerGuiGrpcServicesServer) {
	s.RegisterService(&FenixExecutionServerGuiGrpcServices_ServiceDesc, srv)
}

func _FenixExecutionServerGuiGrpcServices_AreYouAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesServer).AreYouAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServices/AreYouAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesServer).AreYouAlive(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServices_ListTestCasesOnExecutionQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestCasesInExecutionQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesServer).ListTestCasesOnExecutionQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServices/ListTestCasesOnExecutionQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesServer).ListTestCasesOnExecutionQueue(ctx, req.(*ListTestCasesInExecutionQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServices_ListTestCasesUnderExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestCasesUnderExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesServer).ListTestCasesUnderExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServices/ListTestCasesUnderExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesServer).ListTestCasesUnderExecution(ctx, req.(*ListTestCasesUnderExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServices_ListTestCasesWithFinishedExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestCasesWithFinishedExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesServer).ListTestCasesWithFinishedExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServices/ListTestCasesWithFinishedExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesServer).ListTestCasesWithFinishedExecutions(ctx, req.(*ListTestCasesWithFinishedExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServices_GetSingleTestCaseExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleTestCaseExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesServer).GetSingleTestCaseExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServices/GetSingleTestCaseExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesServer).GetSingleTestCaseExecution(ctx, req.(*GetSingleTestCaseExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGuiGrpcServices_InitiateTestCaseExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateSingleTestCaseExecutionRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGuiGrpcServicesServer).InitiateTestCaseExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServices/InitiateTestCaseExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGuiGrpcServicesServer).InitiateTestCaseExecution(ctx, req.(*InitiateSingleTestCaseExecutionRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// FenixExecutionServerGuiGrpcServices_ServiceDesc is the grpc.ServiceDesc for FenixExecutionServerGuiGrpcServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FenixExecutionServerGuiGrpcServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fenixExecutionServerGuiGrpcApi.FenixExecutionServerGuiGrpcServices",
	HandlerType: (*FenixExecutionServerGuiGrpcServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AreYouAlive",
			Handler:    _FenixExecutionServerGuiGrpcServices_AreYouAlive_Handler,
		},
		{
			MethodName: "ListTestCasesOnExecutionQueue",
			Handler:    _FenixExecutionServerGuiGrpcServices_ListTestCasesOnExecutionQueue_Handler,
		},
		{
			MethodName: "ListTestCasesUnderExecution",
			Handler:    _FenixExecutionServerGuiGrpcServices_ListTestCasesUnderExecution_Handler,
		},
		{
			MethodName: "ListTestCasesWithFinishedExecutions",
			Handler:    _FenixExecutionServerGuiGrpcServices_ListTestCasesWithFinishedExecutions_Handler,
		},
		{
			MethodName: "GetSingleTestCaseExecution",
			Handler:    _FenixExecutionServerGuiGrpcServices_GetSingleTestCaseExecution_Handler,
		},
		{
			MethodName: "InitiateTestCaseExecution",
			Handler:    _FenixExecutionServerGuiGrpcServices_InitiateTestCaseExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi.proto",
}
