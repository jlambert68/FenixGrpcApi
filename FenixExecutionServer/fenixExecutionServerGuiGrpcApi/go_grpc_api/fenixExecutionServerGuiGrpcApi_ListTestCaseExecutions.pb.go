// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions.proto

package go_grpc_api

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum int32

const (
	TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum_DEFAULT_NOT_SET TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum = 0 //Value used for when the variable is not actively set
	TestCasePreviewStructureMessage_TestInstructionContainer                        TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum = 1 // Type is a TestInstructionContainer
	TestCasePreviewStructureMessage_TestInstruction                                 TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum = 2 // Type is a TestInstruction
	TestCasePreviewStructureMessage_TestInstructionAttribute                        TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum = 3 // Type is a TestInstructionAttribute
)

// Enum value maps for TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum.
var (
	TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum_name = map[int32]string{
		0: "TestCaseStructureObjectTypeEnum_DEFAULT_NOT_SET",
		1: "TestInstructionContainer",
		2: "TestInstruction",
		3: "TestInstructionAttribute",
	}
	TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum_value = map[string]int32{
		"TestCaseStructureObjectTypeEnum_DEFAULT_NOT_SET": 0,
		"TestInstructionContainer":                        1,
		"TestInstruction":                                 2,
		"TestInstructionAttribute":                        3,
	}
)

func (x TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum) Enum() *TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum {
	p := new(TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum)
	*p = x
	return p
}

func (x TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_enumTypes[0].Descriptor()
}

func (TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum) Type() protoreflect.EnumType {
	return &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_enumTypes[0]
}

func (x TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum.Descriptor instead.
func (TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDescGZIP(), []int{5, 0}
}

// Message to be used for requesting a list of all TestCaseExecutions with their current execution status
type ListTestCaseExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAndApplicationRunTimeIdentification    *UserAndApplicationRunTimeIdentificationMessage `protobuf:"bytes,1,opt,name=UserAndApplicationRunTimeIdentification,proto3" json:"UserAndApplicationRunTimeIdentification,omitempty"`        // Identifies User, Application Runt time instance and Proto-file version used
	LatestUniqueTestCaseExecutionDatabaseRowId int32                                           `protobuf:"varint,2,opt,name=LatestUniqueTestCaseExecutionDatabaseRowId,proto3" json:"LatestUniqueTestCaseExecutionDatabaseRowId,omitempty"` //  Specifies the latest database row id for executions that the TesterGui has  in its memory, if zero then TesterGui has no Executions
	OnlyRetrieveLimitedSizedBatch              bool                                            `protobuf:"varint,3,opt,name=OnlyRetrieveLimitedSizedBatch,proto3" json:"OnlyRetrieveLimitedSizedBatch,omitempty"`                           // Inform that only a limited number of rows should be retrieved. Used to give a fast response for the user
	TestCaseExecutionFromTimeStamp             *timestamp.Timestamp                            `protobuf:"bytes,4,opt,name=TestCaseExecutionFromTimeStamp,proto3" json:"TestCaseExecutionFromTimeStamp,omitempty"`                          // Execution From TimeStamp in Request. Filter to be able to select a narrow date span
	TestCaseExecutionToTimeStamp               *timestamp.Timestamp                            `protobuf:"bytes,5,opt,name=TestCaseExecutionToTimeStamp,proto3" json:"TestCaseExecutionToTimeStamp,omitempty"`                              // Execution To TimeStamp in Request. Filter to be able to select a narrow date span
}

func (x *ListTestCaseExecutionsRequest) Reset() {
	*x = ListTestCaseExecutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestCaseExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestCaseExecutionsRequest) ProtoMessage() {}

func (x *ListTestCaseExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestCaseExecutionsRequest.ProtoReflect.Descriptor instead.
func (*ListTestCaseExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDescGZIP(), []int{0}
}

func (x *ListTestCaseExecutionsRequest) GetUserAndApplicationRunTimeIdentification() *UserAndApplicationRunTimeIdentificationMessage {
	if x != nil {
		return x.UserAndApplicationRunTimeIdentification
	}
	return nil
}

func (x *ListTestCaseExecutionsRequest) GetLatestUniqueTestCaseExecutionDatabaseRowId() int32 {
	if x != nil {
		return x.LatestUniqueTestCaseExecutionDatabaseRowId
	}
	return 0
}

func (x *ListTestCaseExecutionsRequest) GetOnlyRetrieveLimitedSizedBatch() bool {
	if x != nil {
		return x.OnlyRetrieveLimitedSizedBatch
	}
	return false
}

func (x *ListTestCaseExecutionsRequest) GetTestCaseExecutionFromTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.TestCaseExecutionFromTimeStamp
	}
	return nil
}

func (x *ListTestCaseExecutionsRequest) GetTestCaseExecutionToTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.TestCaseExecutionToTimeStamp
	}
	return nil
}

// Message to be used in the response when requesting a list of all TestCaseExecutions with their current execution status
type ListTestCaseExecutionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckNackResponse                            *AckNackResponse                 `protobuf:"bytes,1,opt,name=ackNackResponse,proto3" json:"ackNackResponse,omitempty"`                                                        // Hold all error messages, if there are any. Message also gives of everything was OK or not
	TestCaseExecutionsList                     []*TestCaseExecutionsListMessage `protobuf:"bytes,2,rep,name=TestCaseExecutionsList,proto3" json:"TestCaseExecutionsList,omitempty"`                                          // A list with all requested TestCaseExecutions
	LatestUniqueTestCaseExecutionDatabaseRowId int32                            `protobuf:"varint,3,opt,name=LatestUniqueTestCaseExecutionDatabaseRowId,proto3" json:"LatestUniqueTestCaseExecutionDatabaseRowId,omitempty"` // Tha last unique row id for the response
	MoreRowsExists                             bool                             `protobuf:"varint,4,opt,name=MoreRowsExists,proto3" json:"MoreRowsExists,omitempty"`                                                         // An indicator what tells if there are more rows that can be retrieve. Is used to quickly get the latest rows and present to the user and the in the background retrieve the rest.
}

func (x *ListTestCaseExecutionsResponse) Reset() {
	*x = ListTestCaseExecutionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestCaseExecutionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestCaseExecutionsResponse) ProtoMessage() {}

func (x *ListTestCaseExecutionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestCaseExecutionsResponse.ProtoReflect.Descriptor instead.
func (*ListTestCaseExecutionsResponse) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDescGZIP(), []int{1}
}

func (x *ListTestCaseExecutionsResponse) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

func (x *ListTestCaseExecutionsResponse) GetTestCaseExecutionsList() []*TestCaseExecutionsListMessage {
	if x != nil {
		return x.TestCaseExecutionsList
	}
	return nil
}

func (x *ListTestCaseExecutionsResponse) GetLatestUniqueTestCaseExecutionDatabaseRowId() int32 {
	if x != nil {
		return x.LatestUniqueTestCaseExecutionDatabaseRowId
	}
	return 0
}

func (x *ListTestCaseExecutionsResponse) GetMoreRowsExists() bool {
	if x != nil {
		return x.MoreRowsExists
	}
	return false
}

// Message holding one TestCaseExecution
// Owner is ExecutionServer due to it's that server that store the information in the database
// Sync with parent 'TestCaseExecutionsListMessage'
type TestCaseExecutionsListMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUUID                                   string                                               `protobuf:"bytes,1,opt,name=DomainUUID,proto3" json:"DomainUUID,omitempty"`                                                                                                      // The DomainUUID where the TestCase belongs
	DomainName                                   string                                               `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                                                                                      // The DomainName where the TestCase belongs
	TestSuiteUuid                                string                                               `protobuf:"bytes,3,opt,name=TestSuiteUuid,proto3" json:"TestSuiteUuid,omitempty"`                                                                                                // The SuiteUuid when the TestCase was executed in  suite
	TestSuiteName                                string                                               `protobuf:"bytes,4,opt,name=TestSuiteName,proto3" json:"TestSuiteName,omitempty"`                                                                                                // The SuiteName when the TestCase was executed in  suite
	TestSuiteVersion                             int32                                                `protobuf:"varint,5,opt,name=TestSuiteVersion,proto3" json:"TestSuiteVersion,omitempty"`                                                                                         // The SuiteVersion when the TestCase was executed in  suite
	TestSuiteExecutionUuid                       string                                               `protobuf:"bytes,6,opt,name=TestSuiteExecutionUuid,proto3" json:"TestSuiteExecutionUuid,omitempty"`                                                                              // The SuiteExecution Uuid when the TestCase was executed in  suite
	TestSuiteExecutionVersion                    int32                                                `protobuf:"varint,7,opt,name=TestSuiteExecutionVersion,proto3" json:"TestSuiteExecutionVersion,omitempty"`                                                                       // The SuiteExecutionVersion when the TestCase was executed in  suite
	TestCaseUuid                                 string                                               `protobuf:"bytes,8,opt,name=TestCaseUuid,proto3" json:"TestCaseUuid,omitempty"`                                                                                                  // The TestCaseUuid
	TestCaseName                                 string                                               `protobuf:"bytes,9,opt,name=TestCaseName,proto3" json:"TestCaseName,omitempty"`                                                                                                  // The TestCaseName
	TestCaseVersion                              int32                                                `protobuf:"varint,10,opt,name=TestCaseVersion,proto3" json:"TestCaseVersion,omitempty"`                                                                                          // The TestCaseVersion
	TestCaseExecutionUuid                        string                                               `protobuf:"bytes,11,opt,name=TestCaseExecutionUuid,proto3" json:"TestCaseExecutionUuid,omitempty"`                                                                               // The TestCaseExecutionUuid
	TestCaseExecutionVersion                     int32                                                `protobuf:"varint,12,opt,name=TestCaseExecutionVersion,proto3" json:"TestCaseExecutionVersion,omitempty"`                                                                        // The TestCaseExecutionVersion
	QueueTimeStamp                               *timestamp.Timestamp                                 `protobuf:"bytes,13,opt,name=QueueTimeStamp,proto3" json:"QueueTimeStamp,omitempty"`                                                                                             // The TimeStamp when the TestCaseExecution was put on the Execution-queue
	TestDataSetUuid                              string                                               `protobuf:"bytes,14,opt,name=TestDataSetUuid,proto3" json:"TestDataSetUuid,omitempty"`                                                                                           // TestDataSet Uuid - Not used
	ExecutionPriority                            ExecutionPriorityEnum                                `protobuf:"varint,15,opt,name=ExecutionPriority,proto3,enum=fenixExecutionServerGuiGrpcApi.ExecutionPriorityEnum" json:"ExecutionPriority,omitempty"`                            // The execution priority. Helps the execution engine to prioritize the executions between different TestCaseExecutions
	ExecutionStartTimeStamp                      *timestamp.Timestamp                                 `protobuf:"bytes,16,opt,name=ExecutionStartTimeStamp,proto3" json:"ExecutionStartTimeStamp,omitempty"`                                                                           // The Start TimeStamp of the execution
	ExecutionStopTimeStamp                       *timestamp.Timestamp                                 `protobuf:"bytes,17,opt,name=ExecutionStopTimeStamp,proto3" json:"ExecutionStopTimeStamp,omitempty"`                                                                             // The Stop TimeStamp of the execution
	TestCaseExecutionStatus                      TestCaseExecutionStatusEnum                          `protobuf:"varint,18,opt,name=TestCaseExecutionStatus,proto3,enum=fenixExecutionServerGuiGrpcApi.TestCaseExecutionStatusEnum" json:"TestCaseExecutionStatus,omitempty"`          // Execution Status for the TestCaseExecution
	ExecutionHasFinished                         bool                                                 `protobuf:"varint,19,opt,name=ExecutionHasFinished,proto3" json:"ExecutionHasFinished,omitempty"`                                                                                // Boolean telling if the TestCase is finished its execution
	UniqueCounter                                int32                                                `protobuf:"varint,20,opt,name=UniqueCounter,proto3" json:"UniqueCounter,omitempty"`                                                                                              // A unique counter coming from the database table for ongoing executions
	ExecutionStatusUpdateTimeStamp               *timestamp.Timestamp                                 `protobuf:"bytes,21,opt,name=ExecutionStatusUpdateTimeStamp,proto3" json:"ExecutionStatusUpdateTimeStamp,omitempty"`                                                             // The timeStamo when the executions status was last updated
	ExecutionStatusReportLevel                   ExecutionStatusReportLevelEnum                       `protobuf:"varint,22,opt,name=ExecutionStatusReportLevel,proto3,enum=fenixExecutionServerGuiGrpcApi.ExecutionStatusReportLevelEnum" json:"ExecutionStatusReportLevel,omitempty"` // Helps the execution engine to decide if real time execution status updates should be sent using the postgres broadcast system
	TestCasePreview                              *TestCasePreviewStructureMessage                     `protobuf:"bytes,23,opt,name=TestCasePreview,proto3" json:"TestCasePreview,omitempty"`                                                                                           // The full TestCase-preview structure from the TestCase-data. Used in TestCaseExecutions.list to create a preview of execution status for TestCase.
	TestInstructionsExecutionStatusPreviewValues *TestInstructionsExecutionStatusPreviewValuesMessage `protobuf:"bytes,24,opt,name=TestInstructionsExecutionStatusPreviewValues,proto3" json:"TestInstructionsExecutionStatusPreviewValues,omitempty"`                                 // All TestInstructionExecutions and their execution status.
	UniqueExecutionCounter                       int32                                                `protobuf:"varint,25,opt,name=UniqueExecutionCounter,proto3" json:"UniqueExecutionCounter,omitempty"`                                                                            // The unique database row indicator. Used to be able for TesterGui to only retrieve the latest and updated rows from the database
}

func (x *TestCaseExecutionsListMessage) Reset() {
	*x = TestCaseExecutionsListMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseExecutionsListMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseExecutionsListMessage) ProtoMessage() {}

func (x *TestCaseExecutionsListMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseExecutionsListMessage.ProtoReflect.Descriptor instead.
func (*TestCaseExecutionsListMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDescGZIP(), []int{2}
}

func (x *TestCaseExecutionsListMessage) GetDomainUUID() string {
	if x != nil {
		return x.DomainUUID
	}
	return ""
}

func (x *TestCaseExecutionsListMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *TestCaseExecutionsListMessage) GetTestSuiteUuid() string {
	if x != nil {
		return x.TestSuiteUuid
	}
	return ""
}

func (x *TestCaseExecutionsListMessage) GetTestSuiteName() string {
	if x != nil {
		return x.TestSuiteName
	}
	return ""
}

func (x *TestCaseExecutionsListMessage) GetTestSuiteVersion() int32 {
	if x != nil {
		return x.TestSuiteVersion
	}
	return 0
}

func (x *TestCaseExecutionsListMessage) GetTestSuiteExecutionUuid() string {
	if x != nil {
		return x.TestSuiteExecutionUuid
	}
	return ""
}

func (x *TestCaseExecutionsListMessage) GetTestSuiteExecutionVersion() int32 {
	if x != nil {
		return x.TestSuiteExecutionVersion
	}
	return 0
}

func (x *TestCaseExecutionsListMessage) GetTestCaseUuid() string {
	if x != nil {
		return x.TestCaseUuid
	}
	return ""
}

func (x *TestCaseExecutionsListMessage) GetTestCaseName() string {
	if x != nil {
		return x.TestCaseName
	}
	return ""
}

func (x *TestCaseExecutionsListMessage) GetTestCaseVersion() int32 {
	if x != nil {
		return x.TestCaseVersion
	}
	return 0
}

func (x *TestCaseExecutionsListMessage) GetTestCaseExecutionUuid() string {
	if x != nil {
		return x.TestCaseExecutionUuid
	}
	return ""
}

func (x *TestCaseExecutionsListMessage) GetTestCaseExecutionVersion() int32 {
	if x != nil {
		return x.TestCaseExecutionVersion
	}
	return 0
}

func (x *TestCaseExecutionsListMessage) GetQueueTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.QueueTimeStamp
	}
	return nil
}

func (x *TestCaseExecutionsListMessage) GetTestDataSetUuid() string {
	if x != nil {
		return x.TestDataSetUuid
	}
	return ""
}

func (x *TestCaseExecutionsListMessage) GetExecutionPriority() ExecutionPriorityEnum {
	if x != nil {
		return x.ExecutionPriority
	}
	return ExecutionPriorityEnum_ExecutionPriorityEnum_DEFAULT_NOT_SET
}

func (x *TestCaseExecutionsListMessage) GetExecutionStartTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.ExecutionStartTimeStamp
	}
	return nil
}

func (x *TestCaseExecutionsListMessage) GetExecutionStopTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.ExecutionStopTimeStamp
	}
	return nil
}

func (x *TestCaseExecutionsListMessage) GetTestCaseExecutionStatus() TestCaseExecutionStatusEnum {
	if x != nil {
		return x.TestCaseExecutionStatus
	}
	return TestCaseExecutionStatusEnum_TestCaseExecutionStatusEnum_DEFAULT_NOT_SET
}

func (x *TestCaseExecutionsListMessage) GetExecutionHasFinished() bool {
	if x != nil {
		return x.ExecutionHasFinished
	}
	return false
}

func (x *TestCaseExecutionsListMessage) GetUniqueCounter() int32 {
	if x != nil {
		return x.UniqueCounter
	}
	return 0
}

func (x *TestCaseExecutionsListMessage) GetExecutionStatusUpdateTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.ExecutionStatusUpdateTimeStamp
	}
	return nil
}

func (x *TestCaseExecutionsListMessage) GetExecutionStatusReportLevel() ExecutionStatusReportLevelEnum {
	if x != nil {
		return x.ExecutionStatusReportLevel
	}
	return ExecutionStatusReportLevelEnum_ExecutionStatusReportLevelEnum_DEFAULT_NOT_SET
}

func (x *TestCaseExecutionsListMessage) GetTestCasePreview() *TestCasePreviewStructureMessage {
	if x != nil {
		return x.TestCasePreview
	}
	return nil
}

func (x *TestCaseExecutionsListMessage) GetTestInstructionsExecutionStatusPreviewValues() *TestInstructionsExecutionStatusPreviewValuesMessage {
	if x != nil {
		return x.TestInstructionsExecutionStatusPreviewValues
	}
	return nil
}

func (x *TestCaseExecutionsListMessage) GetUniqueExecutionCounter() int32 {
	if x != nil {
		return x.UniqueExecutionCounter
	}
	return 0
}

// Message holding all TestInstructionExecutions, and their execution status, for one TestCase
type TestInstructionsExecutionStatusPreviewValuesMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionExecutionStatusPreviewValues []*TestInstructionExecutionStatusPreviewValueMessage `protobuf:"bytes,1,rep,name=TestInstructionExecutionStatusPreviewValues,proto3" json:"TestInstructionExecutionStatusPreviewValues,omitempty"` // A list of all TestInstructionExecutions, and their status, belonging to TestCaseExecution
}

func (x *TestInstructionsExecutionStatusPreviewValuesMessage) Reset() {
	*x = TestInstructionsExecutionStatusPreviewValuesMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionsExecutionStatusPreviewValuesMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionsExecutionStatusPreviewValuesMessage) ProtoMessage() {}

func (x *TestInstructionsExecutionStatusPreviewValuesMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionsExecutionStatusPreviewValuesMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionsExecutionStatusPreviewValuesMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDescGZIP(), []int{3}
}

func (x *TestInstructionsExecutionStatusPreviewValuesMessage) GetTestInstructionExecutionStatusPreviewValues() []*TestInstructionExecutionStatusPreviewValueMessage {
	if x != nil {
		return x.TestInstructionExecutionStatusPreviewValues
	}
	return nil
}

// A Message holding one TestInstructionExecutions and its execution status
type TestInstructionExecutionStatusPreviewValueMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseExecutionUuid                      string                             `protobuf:"bytes,1,opt,name=TestCaseExecutionUuid,proto3" json:"TestCaseExecutionUuid,omitempty"`                                                                                           // The TestCaseExecution Uuid responsible for this TestInstructionExecution
	TestCaseExecutionVersion                   int32                              `protobuf:"varint,2,opt,name=TestCaseExecutionVersion,proto3" json:"TestCaseExecutionVersion,omitempty"`                                                                                    // The TestCaseExecution Version responsible for this TestInstructionExecution
	TestInstructionExecutionUuid               string                             `protobuf:"bytes,3,opt,name=TestInstructionExecutionUuid,proto3" json:"TestInstructionExecutionUuid,omitempty"`                                                                             // TestInstructionExecution Uuid
	TestInstructionInstructionExecutionVersion int32                              `protobuf:"varint,4,opt,name=TestInstructionInstructionExecutionVersion,proto3" json:"TestInstructionInstructionExecutionVersion,omitempty"`                                                // TestInstructionExecution Version
	MatureTestInstructionUuid                  string                             `protobuf:"bytes,5,opt,name=MatureTestInstructionUuid,proto3" json:"MatureTestInstructionUuid,omitempty"`                                                                                   // The Uuid for the TestInstruction used in the TestCase
	TestInstructionName                        string                             `protobuf:"bytes,6,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"`                                                                                               // The Name for the TestInstruction used in the TestCase
	SentTimeStamp                              *timestamp.Timestamp               `protobuf:"bytes,7,opt,name=SentTimeStamp,proto3" json:"SentTimeStamp,omitempty"`                                                                                                           // The time when the TestInstruction was sent for execution
	TestInstructionExecutionEndTimeStamp       *timestamp.Timestamp               `protobuf:"bytes,8,opt,name=TestInstructionExecutionEndTimeStamp,proto3" json:"TestInstructionExecutionEndTimeStamp,omitempty"`                                                             // The time when the TestInstruction was received after execution
	TestInstructionExecutionStatus             TestInstructionExecutionStatusEnum `protobuf:"varint,9,opt,name=TestInstructionExecutionStatus,proto3,enum=fenixExecutionServerGuiGrpcApi.TestInstructionExecutionStatusEnum" json:"TestInstructionExecutionStatus,omitempty"` // The execution status for the TestInstruction
	ExecutionDomainUuid                        string                             `protobuf:"bytes,10,opt,name=ExecutionDomainUuid,proto3" json:"ExecutionDomainUuid,omitempty"`                                                                                              // The Domain Uuid responsible for execution
	ExecutionDomainName                        string                             `protobuf:"bytes,11,opt,name=ExecutionDomainName,proto3" json:"ExecutionDomainName,omitempty"`                                                                                              // The Domain Name responsible for execution
}

func (x *TestInstructionExecutionStatusPreviewValueMessage) Reset() {
	*x = TestInstructionExecutionStatusPreviewValueMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionExecutionStatusPreviewValueMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionExecutionStatusPreviewValueMessage) ProtoMessage() {}

func (x *TestInstructionExecutionStatusPreviewValueMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionExecutionStatusPreviewValueMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionExecutionStatusPreviewValueMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDescGZIP(), []int{4}
}

func (x *TestInstructionExecutionStatusPreviewValueMessage) GetTestCaseExecutionUuid() string {
	if x != nil {
		return x.TestCaseExecutionUuid
	}
	return ""
}

func (x *TestInstructionExecutionStatusPreviewValueMessage) GetTestCaseExecutionVersion() int32 {
	if x != nil {
		return x.TestCaseExecutionVersion
	}
	return 0
}

func (x *TestInstructionExecutionStatusPreviewValueMessage) GetTestInstructionExecutionUuid() string {
	if x != nil {
		return x.TestInstructionExecutionUuid
	}
	return ""
}

func (x *TestInstructionExecutionStatusPreviewValueMessage) GetTestInstructionInstructionExecutionVersion() int32 {
	if x != nil {
		return x.TestInstructionInstructionExecutionVersion
	}
	return 0
}

func (x *TestInstructionExecutionStatusPreviewValueMessage) GetMatureTestInstructionUuid() string {
	if x != nil {
		return x.MatureTestInstructionUuid
	}
	return ""
}

func (x *TestInstructionExecutionStatusPreviewValueMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

func (x *TestInstructionExecutionStatusPreviewValueMessage) GetSentTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.SentTimeStamp
	}
	return nil
}

func (x *TestInstructionExecutionStatusPreviewValueMessage) GetTestInstructionExecutionEndTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.TestInstructionExecutionEndTimeStamp
	}
	return nil
}

func (x *TestInstructionExecutionStatusPreviewValueMessage) GetTestInstructionExecutionStatus() TestInstructionExecutionStatusEnum {
	if x != nil {
		return x.TestInstructionExecutionStatus
	}
	return TestInstructionExecutionStatusEnum_TestInstructionExecutionStatusEnum_DEFAULT_NOT_SET
}

func (x *TestInstructionExecutionStatusPreviewValueMessage) GetExecutionDomainUuid() string {
	if x != nil {
		return x.ExecutionDomainUuid
	}
	return ""
}

func (x *TestInstructionExecutionStatusPreviewValueMessage) GetExecutionDomainName() string {
	if x != nil {
		return x.ExecutionDomainName
	}
	return ""
}

// Message holding the full preview of the TestCase
// Update and sync with 'fenixTestCaseBuilderServerGrpcApi_TestDataMessages.proto'
type TestCasePreviewStructureMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseName                    string                                                            `protobuf:"bytes,1,opt,name=TestCaseName,proto3" json:"TestCaseName,omitempty"`                                        // The name of the TestCase
	DomainThatOwnTheTestCase        string                                                            `protobuf:"bytes,2,opt,name=DomainThatOwnTheTestCase,proto3" json:"DomainThatOwnTheTestCase,omitempty"`                // The Domain that owns the TestCase
	TestCaseDescription             string                                                            `protobuf:"bytes,3,opt,name=TestCaseDescription,proto3" json:"TestCaseDescription,omitempty"`                          // The Description of the TestCase
	TestCaseStructureObjects        []*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage `protobuf:"bytes,4,rep,name=TestCaseStructureObjects,proto3" json:"TestCaseStructureObjects,omitempty"`                // A list of the different components of the TestCase, TIC, TI and Attributes
	ComplexTextualDescription       string                                                            `protobuf:"bytes,5,opt,name=ComplexTextualDescription,proto3" json:"ComplexTextualDescription,omitempty"`              // A textual description of the TestCase-model
	TestCaseUuid                    string                                                            `protobuf:"bytes,6,opt,name=TestCaseUuid,proto3" json:"TestCaseUuid,omitempty"`                                        // The TestCaseUuid
	TestCaseVersion                 string                                                            `protobuf:"bytes,7,opt,name=TestCaseVersion,proto3" json:"TestCaseVersion,omitempty"`                                  // The version of the TestCase
	LastSavedByUserOnComputer       string                                                            `protobuf:"bytes,12,opt,name=LastSavedByUserOnComputer,proto3" json:"LastSavedByUserOnComputer,omitempty"`             // The logged in user on the computer that last saved the TestCase
	LastSavedByUserGCPAuthorization string                                                            `protobuf:"bytes,13,opt,name=LastSavedByUserGCPAuthorization,proto3" json:"LastSavedByUserGCPAuthorization,omitempty"` // The authorized user towards GCP that last saved the TestCase
	LastSavedTimeStamp              string                                                            `protobuf:"bytes,14,opt,name=LastSavedTimeStamp,proto3" json:"LastSavedTimeStamp,omitempty"`                           // The Timestamp when the TestCase first was last saved
}

func (x *TestCasePreviewStructureMessage) Reset() {
	*x = TestCasePreviewStructureMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCasePreviewStructureMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCasePreviewStructureMessage) ProtoMessage() {}

func (x *TestCasePreviewStructureMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCasePreviewStructureMessage.ProtoReflect.Descriptor instead.
func (*TestCasePreviewStructureMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDescGZIP(), []int{5}
}

func (x *TestCasePreviewStructureMessage) GetTestCaseName() string {
	if x != nil {
		return x.TestCaseName
	}
	return ""
}

func (x *TestCasePreviewStructureMessage) GetDomainThatOwnTheTestCase() string {
	if x != nil {
		return x.DomainThatOwnTheTestCase
	}
	return ""
}

func (x *TestCasePreviewStructureMessage) GetTestCaseDescription() string {
	if x != nil {
		return x.TestCaseDescription
	}
	return ""
}

func (x *TestCasePreviewStructureMessage) GetTestCaseStructureObjects() []*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage {
	if x != nil {
		return x.TestCaseStructureObjects
	}
	return nil
}

func (x *TestCasePreviewStructureMessage) GetComplexTextualDescription() string {
	if x != nil {
		return x.ComplexTextualDescription
	}
	return ""
}

func (x *TestCasePreviewStructureMessage) GetTestCaseUuid() string {
	if x != nil {
		return x.TestCaseUuid
	}
	return ""
}

func (x *TestCasePreviewStructureMessage) GetTestCaseVersion() string {
	if x != nil {
		return x.TestCaseVersion
	}
	return ""
}

func (x *TestCasePreviewStructureMessage) GetLastSavedByUserOnComputer() string {
	if x != nil {
		return x.LastSavedByUserOnComputer
	}
	return ""
}

func (x *TestCasePreviewStructureMessage) GetLastSavedByUserGCPAuthorization() string {
	if x != nil {
		return x.LastSavedByUserGCPAuthorization
	}
	return ""
}

func (x *TestCasePreviewStructureMessage) GetLastSavedTimeStamp() string {
	if x != nil {
		return x.LastSavedTimeStamp
	}
	return ""
}

// A message holding one TestCaseStructureObject, like TIC, TI or TI's attributes
type TestCasePreviewStructureMessage_TestCaseStructureObjectMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseStructureObjectType      TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum                                   `protobuf:"varint,1,opt,name=TestCaseStructureObjectType,proto3,enum=fenixExecutionServerGuiGrpcApi.TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum" json:"TestCaseStructureObjectType,omitempty"` // The type of TestCaseStructureObject, TIC, TI, Attribute
	IndentationLevel                 uint32                                                                                            `protobuf:"varint,2,opt,name=IndentationLevel,proto3" json:"IndentationLevel,omitempty"`                                                                                                                           // How much should the object be move to create the tree like structure
	TestInstructionContainerName     string                                                                                            `protobuf:"bytes,3,opt,name=TestInstructionContainerName,proto3" json:"TestInstructionContainerName,omitempty"`                                                                                                    // The Name of the TestInstructionContainer
	TestInstructionContainerUuid     string                                                                                            `protobuf:"bytes,4,opt,name=TestInstructionContainerUuid,proto3" json:"TestInstructionContainerUuid,omitempty"`                                                                                                    // The Uuid of the TestInstructionContainer
	TestInstructionIsSerialProcessed bool                                                                                              `protobuf:"varint,5,opt,name=TestInstructionIsSerialProcessed,proto3" json:"TestInstructionIsSerialProcessed,omitempty"`                                                                                           // Is the TestInstructionContainer 'serial' or 'parallel' processed
	TestInstructionName              string                                                                                            `protobuf:"bytes,6,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"`                                                                                                                      // The Name of the TestInstruction
	TestInstructionUuid              string                                                                                            `protobuf:"bytes,7,opt,name=TestInstructionUuid,proto3" json:"TestInstructionUuid,omitempty"`                                                                                                                      // The Uuid of the TestInstruction
	TestInstructionColor             string                                                                                            `protobuf:"bytes,8,opt,name=TestInstructionColor,proto3" json:"TestInstructionColor,omitempty"`                                                                                                                    // The color code used for the TestInstruction
	TestInstructionAttributes        []*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage `protobuf:"bytes,9,rep,name=TestInstructionAttributes,proto3" json:"TestInstructionAttributes,omitempty"`                                                                                                          // The Attributes for the TestInstruction
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) Reset() {
	*x = TestCasePreviewStructureMessage_TestCaseStructureObjectMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) ProtoMessage() {}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCasePreviewStructureMessage_TestCaseStructureObjectMessage.ProtoReflect.Descriptor instead.
func (*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDescGZIP(), []int{5, 0}
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetTestCaseStructureObjectType() TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum {
	if x != nil {
		return x.TestCaseStructureObjectType
	}
	return TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum_DEFAULT_NOT_SET
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetIndentationLevel() uint32 {
	if x != nil {
		return x.IndentationLevel
	}
	return 0
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetTestInstructionContainerName() string {
	if x != nil {
		return x.TestInstructionContainerName
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetTestInstructionContainerUuid() string {
	if x != nil {
		return x.TestInstructionContainerUuid
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetTestInstructionIsSerialProcessed() bool {
	if x != nil {
		return x.TestInstructionIsSerialProcessed
	}
	return false
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetTestInstructionUuid() string {
	if x != nil {
		return x.TestInstructionUuid
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetTestInstructionColor() string {
	if x != nil {
		return x.TestInstructionColor
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetTestInstructionAttributes() []*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage {
	if x != nil {
		return x.TestInstructionAttributes
	}
	return nil
}

// Message holding one TestInstructionAttribute
type TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeName      string `protobuf:"bytes,1,opt,name=AttributeName,proto3" json:"AttributeName,omitempty"`           // The name of the Attribute
	AttributeValue     string `protobuf:"bytes,2,opt,name=AttributeValue,proto3" json:"AttributeValue,omitempty"`         // The value of the Attribute
	AttributeGroupName string `protobuf:"bytes,3,opt,name=AttributeGroupName,proto3" json:"AttributeGroupName,omitempty"` // The Group name for the Attribute in the UI
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage) Reset() {
	*x = TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage) ProtoMessage() {
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage.ProtoReflect.Descriptor instead.
func (*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage) GetAttributeValue() string {
	if x != nil {
		return x.AttributeValue
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage) GetAttributeGroupName() string {
	if x != nil {
		return x.AttributeGroupName
	}
	return ""
}

var File_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto protoreflect.FileDescriptor

var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDesc = []byte{
	0x0a, 0x6f, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x70, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x04, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xa8, 0x01, 0x0a, 0x27, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e,
	0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x27, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e,
	0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5e, 0x0a, 0x2a, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x1d, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x53, 0x69, 0x7a,
	0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x62, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x5e, 0x0a, 0x1c, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1c, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xfa, 0x02, 0x0a, 0x1e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59,
	0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75,
	0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x16, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x16, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x5e, 0x0a, 0x2a, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4d, 0x6f, 0x72, 0x65, 0x52, 0x6f,
	0x77, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0xc0, 0x0d, 0x0a, 0x1d, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x3a, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x28, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x63, 0x0a, 0x11, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x11, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x54, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x52, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x75, 0x0a, 0x17, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x32, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x1e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x7e,
	0x0a, 0x1a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x1a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x69,
	0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75,
	0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0xb7, 0x01, 0x0a, 0x2c, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x53, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x2c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0xeb, 0x01, 0x0a, 0x33,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0xb3, 0x01, 0x0a, 0x2b, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x2b, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xdc, 0x06, 0x0a, 0x31, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x2a, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x6e, 0x0a, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x8a, 0x01, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x42, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xfe, 0x0d, 0x0a, 0x1f, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x18, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x68, 0x61, 0x74, 0x4f, 0x77,
	0x6e, 0x54, 0x68, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x68, 0x61, 0x74, 0x4f, 0x77,
	0x6e, 0x54, 0x68, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9a,
	0x01, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x5e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x4c, 0x61, 0x73, 0x74, 0x53,
	0x61, 0x76, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x4c, 0x61, 0x73, 0x74,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x1f, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76,
	0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x47, 0x43, 0x50, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x43, 0x50, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4c, 0x61, 0x73,
	0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x1a,
	0xbd, 0x07, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x75, 0x69, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0xbc,
	0x01, 0x0a, 0x19, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x19, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x9f, 0x01,
	0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xa7, 0x01, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x33, 0x0a, 0x2f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x10, 0x03, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67,
	0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDescOnce sync.Once
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDescData = file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDesc
)

func file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDescGZIP() []byte {
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDescOnce.Do(func() {
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDescData)
	})
	return file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDescData
}

var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_goTypes = []interface{}{
	(TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum)(0),                                   // 0: fenixExecutionServerGuiGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjectTypeEnum
	(*ListTestCaseExecutionsRequest)(nil),                                                                  // 1: fenixExecutionServerGuiGrpcApi.ListTestCaseExecutionsRequest
	(*ListTestCaseExecutionsResponse)(nil),                                                                 // 2: fenixExecutionServerGuiGrpcApi.ListTestCaseExecutionsResponse
	(*TestCaseExecutionsListMessage)(nil),                                                                  // 3: fenixExecutionServerGuiGrpcApi.TestCaseExecutionsListMessage
	(*TestInstructionsExecutionStatusPreviewValuesMessage)(nil),                                            // 4: fenixExecutionServerGuiGrpcApi.TestInstructionsExecutionStatusPreviewValuesMessage
	(*TestInstructionExecutionStatusPreviewValueMessage)(nil),                                              // 5: fenixExecutionServerGuiGrpcApi.TestInstructionExecutionStatusPreviewValueMessage
	(*TestCasePreviewStructureMessage)(nil),                                                                // 6: fenixExecutionServerGuiGrpcApi.TestCasePreviewStructureMessage
	(*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage)(nil),                                 // 7: fenixExecutionServerGuiGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjectMessage
	(*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage)(nil), // 8: fenixExecutionServerGuiGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjectMessage.TestInstructionAttributeMessage
	(*UserAndApplicationRunTimeIdentificationMessage)(nil),                                                 // 9: fenixExecutionServerGuiGrpcApi.UserAndApplicationRunTimeIdentificationMessage
	(*timestamp.Timestamp)(nil),                                                                            // 10: google.protobuf.Timestamp
	(*AckNackResponse)(nil),                                                                                // 11: fenixExecutionServerGuiGrpcApi.AckNackResponse
	(ExecutionPriorityEnum)(0),                                                                             // 12: fenixExecutionServerGuiGrpcApi.ExecutionPriorityEnum
	(TestCaseExecutionStatusEnum)(0),                                                                       // 13: fenixExecutionServerGuiGrpcApi.TestCaseExecutionStatusEnum
	(ExecutionStatusReportLevelEnum)(0),                                                                    // 14: fenixExecutionServerGuiGrpcApi.ExecutionStatusReportLevelEnum
	(TestInstructionExecutionStatusEnum)(0),                                                                // 15: fenixExecutionServerGuiGrpcApi.TestInstructionExecutionStatusEnum
}
var file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_depIdxs = []int32{
	9,  // 0: fenixExecutionServerGuiGrpcApi.ListTestCaseExecutionsRequest.UserAndApplicationRunTimeIdentification:type_name -> fenixExecutionServerGuiGrpcApi.UserAndApplicationRunTimeIdentificationMessage
	10, // 1: fenixExecutionServerGuiGrpcApi.ListTestCaseExecutionsRequest.TestCaseExecutionFromTimeStamp:type_name -> google.protobuf.Timestamp
	10, // 2: fenixExecutionServerGuiGrpcApi.ListTestCaseExecutionsRequest.TestCaseExecutionToTimeStamp:type_name -> google.protobuf.Timestamp
	11, // 3: fenixExecutionServerGuiGrpcApi.ListTestCaseExecutionsResponse.ackNackResponse:type_name -> fenixExecutionServerGuiGrpcApi.AckNackResponse
	3,  // 4: fenixExecutionServerGuiGrpcApi.ListTestCaseExecutionsResponse.TestCaseExecutionsList:type_name -> fenixExecutionServerGuiGrpcApi.TestCaseExecutionsListMessage
	10, // 5: fenixExecutionServerGuiGrpcApi.TestCaseExecutionsListMessage.QueueTimeStamp:type_name -> google.protobuf.Timestamp
	12, // 6: fenixExecutionServerGuiGrpcApi.TestCaseExecutionsListMessage.ExecutionPriority:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionPriorityEnum
	10, // 7: fenixExecutionServerGuiGrpcApi.TestCaseExecutionsListMessage.ExecutionStartTimeStamp:type_name -> google.protobuf.Timestamp
	10, // 8: fenixExecutionServerGuiGrpcApi.TestCaseExecutionsListMessage.ExecutionStopTimeStamp:type_name -> google.protobuf.Timestamp
	13, // 9: fenixExecutionServerGuiGrpcApi.TestCaseExecutionsListMessage.TestCaseExecutionStatus:type_name -> fenixExecutionServerGuiGrpcApi.TestCaseExecutionStatusEnum
	10, // 10: fenixExecutionServerGuiGrpcApi.TestCaseExecutionsListMessage.ExecutionStatusUpdateTimeStamp:type_name -> google.protobuf.Timestamp
	14, // 11: fenixExecutionServerGuiGrpcApi.TestCaseExecutionsListMessage.ExecutionStatusReportLevel:type_name -> fenixExecutionServerGuiGrpcApi.ExecutionStatusReportLevelEnum
	6,  // 12: fenixExecutionServerGuiGrpcApi.TestCaseExecutionsListMessage.TestCasePreview:type_name -> fenixExecutionServerGuiGrpcApi.TestCasePreviewStructureMessage
	4,  // 13: fenixExecutionServerGuiGrpcApi.TestCaseExecutionsListMessage.TestInstructionsExecutionStatusPreviewValues:type_name -> fenixExecutionServerGuiGrpcApi.TestInstructionsExecutionStatusPreviewValuesMessage
	5,  // 14: fenixExecutionServerGuiGrpcApi.TestInstructionsExecutionStatusPreviewValuesMessage.TestInstructionExecutionStatusPreviewValues:type_name -> fenixExecutionServerGuiGrpcApi.TestInstructionExecutionStatusPreviewValueMessage
	10, // 15: fenixExecutionServerGuiGrpcApi.TestInstructionExecutionStatusPreviewValueMessage.SentTimeStamp:type_name -> google.protobuf.Timestamp
	10, // 16: fenixExecutionServerGuiGrpcApi.TestInstructionExecutionStatusPreviewValueMessage.TestInstructionExecutionEndTimeStamp:type_name -> google.protobuf.Timestamp
	15, // 17: fenixExecutionServerGuiGrpcApi.TestInstructionExecutionStatusPreviewValueMessage.TestInstructionExecutionStatus:type_name -> fenixExecutionServerGuiGrpcApi.TestInstructionExecutionStatusEnum
	7,  // 18: fenixExecutionServerGuiGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjects:type_name -> fenixExecutionServerGuiGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjectMessage
	0,  // 19: fenixExecutionServerGuiGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjectMessage.TestCaseStructureObjectType:type_name -> fenixExecutionServerGuiGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjectTypeEnum
	8,  // 20: fenixExecutionServerGuiGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjectMessage.TestInstructionAttributes:type_name -> fenixExecutionServerGuiGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjectMessage.TestInstructionAttributeMessage
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() {
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_init()
}
func file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_init() {
	if File_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto != nil {
		return
	}
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_GeneralMessagesAndEnums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestCaseExecutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestCaseExecutionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseExecutionsListMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionsExecutionStatusPreviewValuesMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionExecutionStatusPreviewValueMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCasePreviewStructureMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_goTypes,
		DependencyIndexes: file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_depIdxs,
		EnumInfos:         file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_enumTypes,
		MessageInfos:      file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_msgTypes,
	}.Build()
	File_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto = out.File
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_rawDesc = nil
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_goTypes = nil
	file_FenixExecutionServer_fenixExecutionServerGuiGrpcApi_fenixExecutionServerGuiGrpcApi_ListTestCaseExecutions_proto_depIdxs = nil
}
