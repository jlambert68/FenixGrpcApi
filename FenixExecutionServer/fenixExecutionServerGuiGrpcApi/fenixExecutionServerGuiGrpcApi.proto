syntax = "proto3";
package fenixExecutionServerGuiGrpcApi;
option go_package = "./go_grpc_api";

import "FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi_GeneralMessagesAndEnums.proto";
import "FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi_SingleTestCaseExecutionMessages.proto";

// ****************************************************************************************************
// Fenix Execution Server service definition. (Will support Test Suite building in feature, and will then be renamed)

service FenixExecutionServerGuiGrpcServicesForGuiClient {

  // ************************ Admin ************************

  //Anyone can check if Fenix Execution server is alive with this service
  rpc AreYouAlive (EmptyParameter) returns (AckNackResponse) {
  }


  // ************************ Single TestCase Execution ************************

  // *** Get data from Server ***

  // List TestCases that exists on Execution Queue, for specific Domains and DateTimes-span
  rpc ListTestCasesOnExecutionQueue (ListTestCasesInExecutionQueueRequest) returns (ListTestCasesInExecutionQueueResponse) {
  }

  // List TestCases that is under execution , for specific Domains and DateTimes-span
  rpc ListTestCasesUnderExecution (ListTestCasesUnderExecutionRequest) returns (ListTestCasesUnderExecutionResponse) {
  }


  // List TestCases that ire finished execution , for specific Domains and DateTimes-span
  rpc ListTestCasesWithFinishedExecutions (ListTestCasesWithFinishedExecutionsRequest) returns (ListTestCasesWithFinishedExecutionsResponse) {
  }


  // Get a single TestCase Execution
  rpc GetSingleTestCaseExecution (GetSingleTestCaseExecutionRequest) returns (GetSingleTestCaseExecutionResponse) {
  }

  // *** Send data to Server ***

  // Initiate a single TestCase Execution with one specific TestDataSet
  rpc InitiateTestCaseExecution (InitiateSingleTestCaseExecutionRequestMessage) returns (InitiateSingleTestCaseExecutionResponseMessage) {
  }

  // Execution TesterGui opens the gPRC-channel and messages are then streamed back to TestGui from GuiExecutionServer
  // Messages can be everything from execution status, information messages or Environment status
  rpc SubscribeToMessageStream(UserAndApplicationRunTimeIdentificationMessage) returns (stream SubscribeToMessagesStreamResponse) {
  }

  // Call from TesterGui to GuiExecution regarding which messages to subscribe to
  rpc SubscribeToMessages(SubscribeToMessagesRequest) returns (AckNackResponse) {
  }

}

// Services used by ExecutionServer
service FenixExecutionServerGuiGrpcServicesForExecutionServer {

  // ExecutionServer send over status for TestCaseExecutions and TestInstructionExecutions
  rpc SendExecutionStatusTowardsGuiClient (TestCaseExecutionsStatusAndTestInstructionExecutionsStatusMessage) returns (AckNackResponse) {
  }

}



