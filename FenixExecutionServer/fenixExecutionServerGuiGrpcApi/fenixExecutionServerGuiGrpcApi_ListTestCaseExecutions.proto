syntax = "proto3";
package fenixExecutionServerGuiGrpcApi;
option go_package = "./go_grpc_api";

import "google/protobuf/timestamp.proto";
import "FenixExecutionServer/fenixExecutionServerGuiGrpcApi/fenixExecutionServerGuiGrpcApi_GeneralMessagesAndEnums.proto";
//import "FenixExecutionServer/fenixExecutionServerGrpcApi/fenixExecutionServerGrpcApi_Messages.proto";

// Message to be used for requesting a list of all TestCaseExecutions with their current execution status
message ListTestCaseExecutionsRequest {
  UserAndApplicationRunTimeIdentificationMessage UserAndApplicationRunTimeIdentification = 1; // Identifies User, Application Runt time instance and Proto-file version used
  int32 LatestUniqueTestCaseExecutionDatabaseRowId = 2 ; //  Specifies the latest database row id for executions that the TesterGui has  in its memory, if zero then TesterGui has no Executions
  bool OnlyRetrieveLimitedSizedBatch = 3; // Inform that only a limited number of rows should be retrieved. Used to give a fast response for the user
  int32 BatchSize = 4; // If limited batch is wanted by caller then use this batch size
  bool RetrieveAllExecutionsForSpecificTestCaseUuid = 5; // Should all TestCaseExecutions be retrieved for attached TestCaseUuid?
  string SpecificTestCaseUuid = 6; // TestCaseUuid for which all  all TestCaseExecutions should be retrieved
  google.protobuf.Timestamp TestCaseExecutionFromTimeStamp = 7; // Execution From TimeStamp in Request. Filter to be able to select a narrow date span
  google.protobuf.Timestamp TestCaseExecutionToTimeStamp = 8; // Execution To TimeStamp in Request. Filter to be able to select a narrow date span
}


// Message to be used in the response when requesting a list of all TestCaseExecutions with their current execution status
message ListTestCaseExecutionsResponse {
  AckNackResponse ackNackResponse = 1; // Hold all error messages, if there are any. Message also gives of everything was OK or not
  repeated TestCaseExecutionsListMessage TestCaseExecutionsList = 2; // A list with all requested TestCaseExecutions
  int32   LatestUniqueTestCaseExecutionDatabaseRowId = 3; // Tha last unique row id for the response
  bool MoreRowsExists = 4; // An indicator what tells if there are more rows that can be retrieve. Is used to quickly get the latest rows and present to the user and the in the background retrieve the rest.
}


// Message holding one TestCaseExecution
// Owner is ExecutionServer due to it's that server that store the information in the database
// Sync with parent 'TestCaseExecutionsListMessage'
message  TestCaseExecutionsListMessage {
  string DomainUUID = 1; // The DomainUUID where the TestCase belongs
  string DomainName = 2; // The DomainName where the TestCase belongs
  string  TestSuiteUuid = 3; // The SuiteUuid when the TestCase was executed in  suite
  string  TestSuiteName = 4; // The SuiteName when the TestCase was executed in  suite
  int32  TestSuiteVersion = 5; // The SuiteVersion when the TestCase was executed in  suite
  string  TestSuiteExecutionUuid = 6; // The SuiteExecution Uuid when the TestCase was executed in  suite
  int32  TestSuiteExecutionVersion = 7; // The SuiteExecutionVersion when the TestCase was executed in  suite
  string  TestCaseUuid = 8; // The TestCaseUuid
  string  TestCaseName = 9; // The TestCaseName
  int32  TestCaseVersion = 10; // The TestCaseVersion
  string  TestCaseExecutionUuid = 11; // The TestCaseExecutionUuid
  int32 TestCaseExecutionVersion = 12; // The TestCaseExecutionVersion
  google.protobuf.Timestamp QueueTimeStamp = 13; // The TimeStamp when the TestCaseExecution was put on the Execution-queue
  string TestDataSetUuid = 14; // TestDataSet Uuid - Not used
  ExecutionPriorityEnum ExecutionPriority = 15; // The execution priority. Helps the execution engine to prioritize the executions between different TestCaseExecutions
  google.protobuf.Timestamp ExecutionStartTimeStamp = 16; // The Start TimeStamp of the execution
  google.protobuf.Timestamp ExecutionStopTimeStamp = 17; // The Stop TimeStamp of the execution
  TestCaseExecutionStatusEnum TestCaseExecutionStatus = 18; // Execution Status for the TestCaseExecution
  bool ExecutionHasFinished = 19; // Boolean telling if the TestCase is finished its execution
  int32 UniqueCounter = 20; // A unique counter coming from the database table for ongoing executions
  google.protobuf.Timestamp ExecutionStatusUpdateTimeStamp = 21; // The timeStamo when the executions status was last updated
  ExecutionStatusReportLevelEnum ExecutionStatusReportLevel = 22; // Helps the execution engine to decide if real time execution status updates should be sent using the postgres broadcast system
  TestCasePreviewStructureMessage TestCasePreview = 23; // The full TestCase-preview structure from the TestCase-data. Used in TestCaseExecutions.list to create a preview of execution status for TestCase.
  TestInstructionsExecutionStatusPreviewValuesMessage TestInstructionsExecutionStatusPreviewValues = 24; // All TestInstructionExecutions and their execution status.
  int32 UniqueExecutionCounter = 25; // The unique database row indicator. Used to be able for TesterGui to only retrieve the latest and updated rows from the database
  string   TestCasePreviewHash = 26; // Comes from TestCasePreview in Database, but is not used here. But is need due to Unmarshal into Proto-message
  int32 NumberOfTestCaseExecutionForTestCase = 27; // The number of TestCaseExecutions this specific TestCaseUuid has produced
}

// Message holding all TestInstructionExecutions, and their execution status, for one TestCase
message TestInstructionsExecutionStatusPreviewValuesMessage {
  string TestCaseExecutionUuid = 1; // The TestCaseExecution-Uuid responsible for this TestInstructionExecution
  int32 TestCaseExecutionVersion = 2; // The TestCaseExecution-Version responsible for this TestInstructionExecution
  TestCaseExecutionStatusEnum TestCaseExecutionStatus = 3; // Execution Status for the TestCaseExecution
  repeated TestInstructionExecutionStatusPreviewValueMessage TestInstructionExecutionStatusPreviewValues = 4; // A list of all TestInstructionExecutions, and their status, belonging to TestCaseExecution
}

// A Message holding one TestInstructionExecutions and its execution status
message    TestInstructionExecutionStatusPreviewValueMessage {
  string TestCaseExecutionUuid = 1; // The TestCaseExecution Uuid responsible for this TestInstructionExecution
  int32 TestCaseExecutionVersion = 2; // The TestCaseExecution Version responsible for this TestInstructionExecution
  string TestInstructionExecutionUuid = 3; // TestInstructionExecution Uuid
  int32 TestInstructionInstructionExecutionVersion = 4; // TestInstructionExecution Version
  string MatureTestInstructionUuid = 5; // The Uuid for the TestInstruction used in the TestCase
  string TestInstructionName = 6; // The Name for the TestInstruction used in the TestCase
  google.protobuf.Timestamp SentTimeStamp = 7; // The time when the TestInstruction was sent for execution
  google.protobuf.Timestamp TestInstructionExecutionEndTimeStamp = 8; // The time when the TestInstruction was received after execution
  TestInstructionExecutionStatusEnum TestInstructionExecutionStatus = 9; // The execution status for the TestInstruction
  string ExecutionDomainUuid = 10; // The Domain Uuid responsible for execution
  string ExecutionDomainName = 11; // The Domain Name responsible for execution
}


// Message holding the full preview of the TestCase
// Update and sync with 'fenixTestCaseBuilderServerGrpcApi_TestDataMessages.proto'
message TestCasePreviewStructureMessage {
  string TestCaseName = 1; // The name of the TestCase
  string DomainThatOwnTheTestCase = 2; // The Domain that owns the TestCase
  string TestCaseDescription = 3; // The Description of the TestCase
  repeated TestCaseStructureObjectMessage TestCaseStructureObjects = 4; // A list of the different components of the TestCase, TIC, TI and Attributes
  string ComplexTextualDescription = 5; // A textual description of the TestCase-model
  string TestCaseUuid = 6; // The TestCaseUuid
  string TestCaseVersion = 7; // The version of the TestCase
  string LastSavedByUserOnComputer = 12; // The logged in user on the computer that last saved the TestCase
  string LastSavedByUserGCPAuthorization = 13; // The authorized user towards GCP that last saved the TestCase
  string LastSavedTimeStamp = 14; // The Timestamp when the TestCase first was last saved
  map<string, SelectedMetaDataValueMessage> SelectedMetaDataValuesMap = 15; // Map containing all selected MetaDataValues. For MultiSelect each values is added.  The Map key = 'OwnerDomainUuid.MetaDataGroupName.MetaDataName.MetaDataNameValue'


  // A message holding one TestCaseStructureObject, like TIC, TI or TI's attributes
  message TestCaseStructureObjectMessage {
    TestCaseStructureObjectTypeEnum TestCaseStructureObjectType = 1; // The type of TestCaseStructureObject, TIC, TI, Attribute
    uint32 IndentationLevel = 2; // How much should the object be move to create the tree like structure
    string TestInstructionContainerName = 3; // The Name of the TestInstructionContainer
    string TestInstructionContainerUuid = 4; // The Uuid of the TestInstructionContainer
    bool TestInstructionIsSerialProcessed = 5; // Is the TestInstructionContainer 'serial' or 'parallel' processed
    string TestInstructionName = 6; // The Name of the TestInstruction
    string TestInstructionUuid = 7; // The Uuid of the TestInstruction
    string TestInstructionColor = 8; // The color code used for the TestInstruction
    repeated TestInstructionAttributeMessage TestInstructionAttributes = 9; // The Attributes for the TestInstruction

    // Message holding one TestInstructionAttribute
    message TestInstructionAttributeMessage {
      string AttributeName = 1; // The name of the Attribute
      string AttributeValue = 2; // The value of the Attribute
      string AttributeGroupName = 3; // The Group name for the Attribute in the UI
    }

  }

  enum TestCaseStructureObjectTypeEnum {
    TestCaseStructureObjectTypeEnum_DEFAULT_NOT_SET = 0; //Value used for when the variable is not actively set
    TestInstructionContainer = 1; // Type is a TestInstructionContainer
    TestInstruction = 2; // Type is a TestInstruction
    TestInstructionAttribute = 3; // Type is a TestInstructionAttribute
  }

  // The Selected MetaData with all its values
  message SelectedMetaDataValueMessage {
    string OwnerDomainUuid = 1; // The Domain, Uuid, that owns the TestCase
    string OwnerDomainName = 2; // The Domain, Name, that owns the TestCase
    string MetaDataGroupName = 3; // The name of the MetaData-Group
    string MetaDataName = 4; // The name of the MetaData-post
    string MetaDataNameValue = 5; // The MetaDataValue
    MetaDataSelectTypeEnum SelectType = 6;  // Is the MetaData-post single- or multi-select
    bool IsMandatory = 7;
  }

  // MetaDataSelectTypeEnum
  // The type used for SelectType
  enum MetaDataSelectTypeEnum {
    MetaDataSelectType_NotSelected = 0;
    MetaDataSelectType_SingleSelect = 1;
    MetaDataSelectType_MultiSelect = 2;
  }

}

