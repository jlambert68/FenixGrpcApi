syntax = "proto3";
package fenixExecutionServerGrpcApi;
option go_package = "./go_grpc_api";
option csharp_namespace = "ExecutionServerGrpc";

import "google/protobuf/timestamp.proto";
import "FenixExecutionServer/fenixExecutionServerGrpcApi/fenixExecutionServerGrpcApi_GeneralMessagesAndEnums.proto";



// This message is sent from Client System, to Fenix Execution Server, when a TestExecution has stopped executed, and the result is final (OK or not OK result)
message FinalTestInstructionExecutionResultMessage {
  ClientSystemIdentificationMessage ClientSystemIdentification = 1; // Identifies Client System and Proto-file version used
  string TestInstructionExecutionUuid = 2; // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
  TestInstructionExecutionStatusEnum TestInstructionExecutionStatus = 3; // The final status for the TestInstruction-execution
  google.protobuf.Timestamp TestInstructionExecutionEndTimeStamp = 4; // The TimeStamp for when the TestInstructionExecution ended
}

// This message is sent from Client System, to Fenix Execution Server, during a TestExecution before it has stopped executed, and the result is not finished (OK or not OK result)
message CurrentTestInstructionExecutionResultMessage {
  ClientSystemIdentificationMessage ClientSystemIdentification = 1; // Identifies Client System and Proto-file version used
  string TestInstructionExecutionUuid = 2; // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
  TestInstructionExecutionStatusEnum TestInstructionExecutionStatus = 3; // The current status for the TestInstruction-execution
}

// This message is a log post message that can be sent any time from Client System to Fenix Execution Server
message LogPostsMessage {
  ClientSystemIdentificationMessage ClientSystemIdentification = 1; // Identifies Client System and Proto-file version used
  string LogPostUuid = 2; // A unique uuid for the log post
  repeated LogPostMessage LogPosts = 3; // The container containing the actual log information

  message LogPostMessage {
    google.protobuf.Timestamp LogPostTimeStamp = 1; // The TimeStamp for the specific log post
    LogPostStatusEnum LogPostStatus = 2; // The status for the log post
    string LogPostText = 3; // Information text for log post
    repeated FoundVersusExpectedValueMessage FoundVersusExpectedValue = 4; // A list with found versus expected values, in string representations

    message FoundVersusExpectedValueMessage {
      string FoundValue = 1; // The value that was found
      string ExpectedValue = 2; // The value that was expected
    }
  }
}


// A Worker reports what processing capabilities its underlying test automation has
message ProcessingCapabilityMessage {
  ClientSystemIdentificationMessage ClientSystemIdentification = 1; // Identifies Client System and Proto-file version used
  ProcessingCapabilityForClientSystemEnum TestInstructionProcessingCapability = 2; // Can TestInstructions be processed in parallell or only in serial, for a TestCase
  ProcessingCapabilityForClientSystemEnum TestCaseProcessingCapability = 3; // Can TestCases be processed in parallell or only in serial
  ProcessingCapabilityForClientSystemEnum TestSuiteProcessingCapability = 4; // Can TestSuites be processed in parallell or only in serial

}

// Message used to check if a specific worker is up and running
message IsWorkerAliveRequest {
  CurrentFenixExecutionServerProtoFileVersionEnum ProtoFileVersionUsedByClient = 1; // The latest proto file version number to be used
  string WorkersDomainUuid = 3; // The Execution Worker's Domain belonging

}

// Message holding the TestCaseExecutions that should be processed
message TestCaseExecutionsToProcessMessage {
  CurrentFenixExecutionServerProtoFileVersionEnum ProtoFileVersionUsedByClient = 1; // The latest proto file version number to be used
  repeated TestCaseExecutionToProcess TestCaseExecutionsToProcess = 2; // An array with all TestCasesExecutions (UUID and VersionNumber) that should be processed
}

// Message holding one specific TestCaseExecution that should be processed
message TestCaseExecutionToProcess {
  string TestCaseExecutionsUuid = 1; // The TestCaseExecution to process
  int32 TestCaseExecutionVersion = 2; // The version of the TestCaseExecution to process
  ExecutionStatusReportLevelEnum ExecutionStatusReportLevel = 3; // Used to tell ExecutionServer what level of ExecutionStatus should be reported back
}

// Response from execution client to execution server that client can execute TestInstruction
message ProcessTestInstructionExecutionResponseStatus {
  AckNackResponse AckNackResponse = 1;
  string TestInstructionExecutionUuid = 2; // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
  google.protobuf.Timestamp ExpectedExecutionDuration = 3; // The expected time during an execution result can be expected back to execution server
  bool TestInstructionCanBeReExecuted = 4; // Indicates if the TestInstruction can be resent to be re-executed. Good example is validations that can be don't as many times as needed
}
