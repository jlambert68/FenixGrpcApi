syntax = "proto3";
package fenixExecutionServerGrpcApi;
option go_package = "./go_grpc_api";

import "google/protobuf/timestamp.proto";
import "FenixExecutionServer/fenixExecutionServerGrpcApi/fenixExecutionServerGrpcApi_GeneralMessagesAndEnums.proto";
//import "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_TestDataMessages.proto";



// This message is sent from Client System, to Fenix Execution Server via a Execution Worker, when a TestExecution has stopped executed, and the result is final (OK or not OK result)
message FinalTestInstructionExecutionResultMessage {
  ClientSystemIdentificationMessage ClientSystemIdentification = 1; // Identifies Client System and Proto-file version used
  string TestInstructionExecutionUuid = 2; // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
  int32 TestInstructionExecutionVersion = 3; // The version number for the TestInstructionExecution, set by Fenix Execution Server
  string MatureTestInstructionUuid = 4; // The unique uuid for the TestInstruction when it is added to a TestCase, set by FenixTesterGui
  TestInstructionExecutionStatusEnum TestInstructionExecutionStatus = 5; // The final status for the TestInstruction-execution
  google.protobuf.Timestamp TestInstructionExecutionStartTimeStamp = 6; // The TimeStamp for when the TestInstructionExecution started
  google.protobuf.Timestamp TestInstructionExecutionEndTimeStamp = 7; // The TimeStamp for when the TestInstructionExecution ended
  repeated ResponseVariableMessage ResponseVariables = 8; // Connector can send back variables to be used by later TestInstructionExecutions
  repeated LogPostMessage LogPosts = 9; // The container containing the actual log information

  message ResponseVariableMessage {
    string ResponseVariableUuid = 1; // The UUID of the Variable
    string ResponseVariableName = 2; // The Name of the Variable
    string ResponseVariableTypeUuid = 3; // The UUID for the type ResponseVariable. Used for matching as input to TestInstruction
    string ResponseVariableTypeName = 4; // The Name for the type ResponseVariable
    string ResponseVariableValueAsString = 5; // The string representation of the Variable
  }

  message LogPostMessage {
    string LogPostUuid = 1; // The unique uuid for this log post
    google.protobuf.Timestamp LogPostTimeStamp = 2; // The TimeStamp for the specific log post
    LogPostStatusEnum LogPostStatus = 3; // The status for the log post
    string LogPostText = 4; // Information text for log post
    repeated FoundVersusExpectedValueForVariableMessage FoundVersusExpectedValueForVariable = 5; // A list of variables with their found versus expected values, in string representations

    message FoundVersusExpectedValueForVariableMessage {
      string VariableName = 1; // The Name of the variable that is was validated
      string VariableDescription = 2; // A longer description of  the variable that is was validated
      FoundVersusExpectedValueMessage FoundVersusExpectedValue = 3; // Found values vs Expected value
    }

    message FoundVersusExpectedValueMessage {
      string FoundValue = 1; // The value that was found
      string ExpectedValue = 2; // The value that was expected
    }
  }
}

// This message is sent from Client System, to Fenix Execution Server, during a TestExecution before it has stopped executed, and the result is not finished (OK or not OK result)
message CurrentTestInstructionExecutionResultMessage {
  ClientSystemIdentificationMessage ClientSystemIdentification = 1; // Identifies Client System and Proto-file version used
  string TestInstructionExecutionUuid = 2; // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
  TestInstructionExecutionStatusEnum TestInstructionExecutionStatus = 3; // The current status for the TestInstruction-execution
}

// This message is a log post message that can be sent any time from Client System to Fenix Execution Server
message LogPostsMessage {
  ClientSystemIdentificationMessage ClientSystemIdentification = 1; // Identifies Client System and Proto-file version used
  string LogPostUuid = 2; // A unique uuid for the log post
  repeated LogPostMessage LogPosts = 3; // The container containing the actual log information

  message LogPostMessage {
    google.protobuf.Timestamp LogPostTimeStamp = 1; // The TimeStamp for the specific log post
    LogPostStatusEnum LogPostStatus = 2; // The status for the log post
    string LogPostText = 3; // Information text for log post
    repeated FoundVersusExpectedValueMessage FoundVersusExpectedValue = 4; // A list with found versus expected values, in string representations

    message FoundVersusExpectedValueMessage {
      string FoundValue = 1; // The value that was found
      string ExpectedValue = 2; // The value that was expected
    }
  }
}


// A Worker reports what processing capabilities its underlying test automation has
message ProcessingCapabilityMessage {
  ClientSystemIdentificationMessage ClientSystemIdentification = 1; // Identifies Client System and Proto-file version used
  ProcessingCapabilityForClientSystemEnum TestInstructionProcessingCapability = 2; // Can TestInstructions be processed in parallell or only in serial, for a TestCase
  ProcessingCapabilityForClientSystemEnum TestCaseProcessingCapability = 3; // Can TestCases be processed in parallell or only in serial
  ProcessingCapabilityForClientSystemEnum TestSuiteProcessingCapability = 4; // Can TestSuites be processed in parallell or only in serial

}

// Message used to check if a specific worker is up and running
message IsWorkerAliveRequest {
  CurrentFenixExecutionServerProtoFileVersionEnum ProtoFileVersionUsedByClient = 1; // The latest proto file version number to be used
  string WorkersDomainUuid = 3; // The Execution Worker's Domain belonging

}

// Message holding the TestCaseExecutions that should be processed
message TestCaseExecutionsToProcessMessage {
  CurrentFenixExecutionServerProtoFileVersionEnum ProtoFileVersionUsedByClient = 1; // The latest proto file version number to be used
  repeated TestCaseExecutionToProcess TestCaseExecutionsToProcess = 2; // An array with all TestCasesExecutions (UUID and VersionNumber) that should be processed
}

// Message holding one specific TestCaseExecution that should be processed
message TestCaseExecutionToProcess {
  string TestCaseExecutionsUuid = 1; // The TestCaseExecution to process
  int32 TestCaseExecutionVersion = 2; // The version of the TestCaseExecution to process
  ExecutionStatusReportLevelEnum ExecutionStatusReportLevel = 3; // Used to tell ExecutionServer what level of ExecutionStatus should be reported back
}

// Response from execution client to execution server that client can execute TestInstruction
message ProcessTestInstructionExecutionResponseStatus {
  AckNackResponse AckNackResponse = 1;
  string TestInstructionExecutionUuid = 2; // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
  google.protobuf.Timestamp ExpectedExecutionDuration = 3; // The expected time during an execution result can be expected back to execution server
  bool TestInstructionCanBeReExecuted = 4; // Indicates if the TestInstruction can be resent to be re-executed. Good example is validations that can be don't as many times as needed
}



// Message holding one TestCaseExecution
// Owner is ExecutionServer due to it's that server that store the information in the database
message  TestCaseExecutionsListMessage {
  string DomainUUID = 1; // The DomainUUID where the TestCase belongs
  string DomainName = 2; // The DomainName where the TestCase belongs
  string  TestSuiteUuid = 3; // The SuiteUuid when the TestCase was executed in  suite
  string  TestSuiteName = 4; // The SuiteName when the TestCase was executed in  suite
  string  TestSuiteVersion = 5; // The SuiteVersion when the TestCase was executed in  suite
  string  TestSuiteExecutionUuid = 6; // The SuiteExecution Uuid when the TestCase was executed in  suite
  int32  TestSuiteExecutionVersion = 7; // The SuiteExecutionVersion when the TestCase was executed in  suite
  string  TestCaseUuid = 8; // The TestCaseUuid
  string  TestCaseName = 9; // The TestCaseName
  int32  TestCaseVersion = 10; // The TestCaseVersion
  string  TestCaseExecutionUuid = 11; // The TestCaseExecutionUuid
  int32 TestCaseExecutionVersion = 12; // The TestCaseExecutionVersion
  google.protobuf.Timestamp QueueTimeStamp = 13; // The TimeStamp when the TestCaseExecution was put on the Execution-queue
  string TestDataSetUuid = 14; // TestDataSet Uuid - Not used
  ExecutionPriorityEnum ExecutionPriority = 15; // The execution priority. Helps the execution engine to prioritize the executions between different TestCaseExecutions
  google.protobuf.Timestamp ExecutionStartTimeStamp = 16; // The Start TimeStamp of the execution
  google.protobuf.Timestamp ExecutionStopTimeStamp = 17; // The Stop TimeStamp of the execution
  TestCaseExecutionStatusEnum TestCaseExecutionStatus = 18; // Execution Status for the TestCaseExecution
  bool ExecutionHasFinished = 19; // Boolean telling if the TestCase is finished its execution
  int32 UniqueCounter = 20; // A unique counter coming from the database table for ongoing executions
  google.protobuf.Timestamp ExecutionStatusUpdateTimeStamp = 21; // The timeStamo when the executions status was last updated
  ExecutionStatusReportLevelEnum ExecutionStatusReportLevel = 22; // Helps the execution engine to decide if real time execution status updates should be sent using the postgres broadcast system
  TestCasePreviewStructureMessage TestCasePreview = 23; // The full TestCase-preview structure from the TestCase-data. Used in TestCaseExecutions.list to create a preview of execution status for TestCase.
  TestInstructionsExecutionStatusPreviewValuesMessage TestInstructionsExecutionStatusPreviewValues = 24; // All TestInstructionExecutions and their execution status.
  int32 UniqueExecutionCounter = 25; // The unique database row indicator. Used to be able for TesterGui to only retrieve the latest and updated rows from the database
}

// Message holding all TestInstructionExecutions, and their execution status, for one TestCase
message TestInstructionsExecutionStatusPreviewValuesMessage {
  repeated TestInstructionExecutionStatusPreviewValueMessage TestInstructionExecutionStatusPreviewValues = 1; // A list of all TestInstructionExecutions, and their status, belonging to TestCaseExecution
}

// A Message holding one TestInstructionExecutions and its execution status
message    TestInstructionExecutionStatusPreviewValueMessage {
  string TestCaseExecutionUuid = 1; // The TestCaseExecution Uuid responsible for this TestInstructionExecution
  int32 TestCaseExecutionVersion = 2; // The TestCaseExecution Version responsible for this TestInstructionExecution
  string TestInstructionExecutionUuid = 3; // TestInstructionExecution Uuid
  int32 TestInstructionInstructionExecutionVersion = 4; // TestInstructionExecution Version
  string MatureTestInstructionUuid = 5; // The Uuid for the TestInstruction used in the TestCase
  string TestInstructionName = 6; // The Name for the TestInstruction used in the TestCase
  google.protobuf.Timestamp SentTimeStamp = 7; // The time when the TestInstruction was sent for execution
  google.protobuf.Timestamp TestInstructionExecutionEndTimeStamp = 8; // The time when the TestInstruction was received after execution
  TestInstructionExecutionStatusEnum TestInstructionExecutionStatus = 9; // The execution status for the TestInstruction
  string ExecutionDomainUuid = 10; // The Domain Uuid responsible for execution
  string ExecutionDomainName = 11; // The Domain Name responsible for execution
}


// Message holding the full preview of the TestCase
// Update and sync with 'fenixTestCaseBuilderServerGrpcApi_TestDataMessages.proto'
message TestCasePreviewStructureMessage {
  string TestCaseName = 1; // The name of the TestCase
  string DomainThatOwnTheTestCase = 2; // The Domain that owns the TestCase
  string TestCaseDescription = 3; // The Description of the TestCase
  repeated TestCaseStructureObjectMessage TestCaseStructureObjects = 4; // A list of the different components of the TestCase, TIC, TI and Attributes
  string ComplexTextualDescription = 5; // A textual description of the TestCase-model
  string TestCaseUuid = 6; // The TestCaseUuid
  string TestCaseVersion = 7; // The version of the TestCase
  string LastSavedByUserOnComputer = 12; // The logged in user on the computer that last saved the TestCase
  string LastSavedByUserGCPAuthorization = 13; // The authorized user towards GCP that last saved the TestCase
  string LastSavedTimeStamp = 14; // The Timestamp when the TestCase first was last saved

  // A message holding one TestCaseStructureObject, like TIC, TI or TI's attributes
  message TestCaseStructureObjectMessage {
    TestCaseStructureObjectTypeEnum TestCaseStructureObjectType = 1; // The type of TestCaseStructureObject, TIC, TI, Attribute
    uint32 IndentationLevel = 2; // How much should the object be move to create the tree like structure
    string TestInstructionContainerName = 3; // The Name of the TestInstructionContainer
    string TestInstructionContainerUuid = 4; // The Uuid of the TestInstructionContainer
    bool TestInstructionIsSerialProcessed = 5; // Is the TestInstructionContainer 'serial' or 'parallel' processed
    string TestInstructionName = 6; // The Name of the TestInstruction
    string TestInstructionUuid = 7; // The Uuid of the TestInstruction
    string TestInstructionColor = 8; // The color code used for the TestInstruction
    repeated TestInstructionAttributeMessage TestInstructionAttributes = 9; // The Attributes for the TestInstruction

    // Message holding one TestInstructionAttribute
    message TestInstructionAttributeMessage {
      string AttributeName = 1; // The name of the Attribute
      string AttributeValue = 2; // The value of the Attribute
      string AttributeGroupName = 3; // The Group name for the Attribute in the UI
    }

  }

  enum TestCaseStructureObjectTypeEnum {
    TestCaseStructureObjectTypeEnum_DEFAULT_NOT_SET = 0; //Value used for when the variable is not actively set
    TestInstructionContainer = 1; // Type is a TestInstructionContainer
    TestInstruction = 2; // Type is a TestInstruction
    TestInstructionAttribute = 3; // Type is a TestInstructionAttribute
  }

}
