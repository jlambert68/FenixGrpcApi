// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: FenixExecutionServer/fenixExecutionServerGrpcApi/fenixExecutionServerGrpcApi_Messages.proto

package go_grpc_api

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This message is sent from Client System, to Fenix Execution Server via a Execution Worker, when a TestExecution has stopped executed, and the result is final (OK or not OK result)
type FinalTestInstructionExecutionResultMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSystemIdentification             *ClientSystemIdentificationMessage                                    `protobuf:"bytes,1,opt,name=ClientSystemIdentification,proto3" json:"ClientSystemIdentification,omitempty"`                                                                              // Identifies Client System and Proto-file version used
	TestInstructionExecutionUuid           string                                                                `protobuf:"bytes,2,opt,name=TestInstructionExecutionUuid,proto3" json:"TestInstructionExecutionUuid,omitempty"`                                                                          // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
	TestInstructionExecutionVersion        int32                                                                 `protobuf:"varint,3,opt,name=TestInstructionExecutionVersion,proto3" json:"TestInstructionExecutionVersion,omitempty"`                                                                   // The version number for the TestInstructionExecution, set by Fenix Execution Server
	MatureTestInstructionUuid              string                                                                `protobuf:"bytes,4,opt,name=MatureTestInstructionUuid,proto3" json:"MatureTestInstructionUuid,omitempty"`                                                                                // The unique uuid for the TestInstruction when it is added to a TestCase, set by FenixTesterGui
	TestInstructionExecutionStatus         TestInstructionExecutionStatusEnum                                    `protobuf:"varint,5,opt,name=TestInstructionExecutionStatus,proto3,enum=fenixExecutionServerGrpcApi.TestInstructionExecutionStatusEnum" json:"TestInstructionExecutionStatus,omitempty"` // The final status for the TestInstruction-execution
	TestInstructionExecutionStartTimeStamp *timestamp.Timestamp                                                  `protobuf:"bytes,6,opt,name=TestInstructionExecutionStartTimeStamp,proto3" json:"TestInstructionExecutionStartTimeStamp,omitempty"`                                                      // The TimeStamp for when the TestInstructionExecution started
	TestInstructionExecutionEndTimeStamp   *timestamp.Timestamp                                                  `protobuf:"bytes,7,opt,name=TestInstructionExecutionEndTimeStamp,proto3" json:"TestInstructionExecutionEndTimeStamp,omitempty"`                                                          // The TimeStamp for when the TestInstructionExecution ended
	ResponseVariables                      []*FinalTestInstructionExecutionResultMessage_ResponseVariableMessage `protobuf:"bytes,8,rep,name=ResponseVariables,proto3" json:"ResponseVariables,omitempty"`                                                                                                // Connector can send back variables to be used by later TestInstructionExecutions
	LogPosts                               []*FinalTestInstructionExecutionResultMessage_LogPostMessage          `protobuf:"bytes,9,rep,name=LogPosts,proto3" json:"LogPosts,omitempty"`                                                                                                                  // The container containing the actual log information
}

func (x *FinalTestInstructionExecutionResultMessage) Reset() {
	*x = FinalTestInstructionExecutionResultMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalTestInstructionExecutionResultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalTestInstructionExecutionResultMessage) ProtoMessage() {}

func (x *FinalTestInstructionExecutionResultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalTestInstructionExecutionResultMessage.ProtoReflect.Descriptor instead.
func (*FinalTestInstructionExecutionResultMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescGZIP(), []int{0}
}

func (x *FinalTestInstructionExecutionResultMessage) GetClientSystemIdentification() *ClientSystemIdentificationMessage {
	if x != nil {
		return x.ClientSystemIdentification
	}
	return nil
}

func (x *FinalTestInstructionExecutionResultMessage) GetTestInstructionExecutionUuid() string {
	if x != nil {
		return x.TestInstructionExecutionUuid
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage) GetTestInstructionExecutionVersion() int32 {
	if x != nil {
		return x.TestInstructionExecutionVersion
	}
	return 0
}

func (x *FinalTestInstructionExecutionResultMessage) GetMatureTestInstructionUuid() string {
	if x != nil {
		return x.MatureTestInstructionUuid
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage) GetTestInstructionExecutionStatus() TestInstructionExecutionStatusEnum {
	if x != nil {
		return x.TestInstructionExecutionStatus
	}
	return TestInstructionExecutionStatusEnum_TestInstructionExecutionStatusEnum_DEFAULT_NOT_SET
}

func (x *FinalTestInstructionExecutionResultMessage) GetTestInstructionExecutionStartTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.TestInstructionExecutionStartTimeStamp
	}
	return nil
}

func (x *FinalTestInstructionExecutionResultMessage) GetTestInstructionExecutionEndTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.TestInstructionExecutionEndTimeStamp
	}
	return nil
}

func (x *FinalTestInstructionExecutionResultMessage) GetResponseVariables() []*FinalTestInstructionExecutionResultMessage_ResponseVariableMessage {
	if x != nil {
		return x.ResponseVariables
	}
	return nil
}

func (x *FinalTestInstructionExecutionResultMessage) GetLogPosts() []*FinalTestInstructionExecutionResultMessage_LogPostMessage {
	if x != nil {
		return x.LogPosts
	}
	return nil
}

// This message is sent from Client System, to Fenix Execution Server, during a TestExecution before it has stopped executed, and the result is not finished (OK or not OK result)
type CurrentTestInstructionExecutionResultMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSystemIdentification     *ClientSystemIdentificationMessage `protobuf:"bytes,1,opt,name=ClientSystemIdentification,proto3" json:"ClientSystemIdentification,omitempty"`                                                                              // Identifies Client System and Proto-file version used
	TestInstructionExecutionUuid   string                             `protobuf:"bytes,2,opt,name=TestInstructionExecutionUuid,proto3" json:"TestInstructionExecutionUuid,omitempty"`                                                                          // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
	TestInstructionExecutionStatus TestInstructionExecutionStatusEnum `protobuf:"varint,3,opt,name=TestInstructionExecutionStatus,proto3,enum=fenixExecutionServerGrpcApi.TestInstructionExecutionStatusEnum" json:"TestInstructionExecutionStatus,omitempty"` // The current status for the TestInstruction-execution
}

func (x *CurrentTestInstructionExecutionResultMessage) Reset() {
	*x = CurrentTestInstructionExecutionResultMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentTestInstructionExecutionResultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentTestInstructionExecutionResultMessage) ProtoMessage() {}

func (x *CurrentTestInstructionExecutionResultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentTestInstructionExecutionResultMessage.ProtoReflect.Descriptor instead.
func (*CurrentTestInstructionExecutionResultMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescGZIP(), []int{1}
}

func (x *CurrentTestInstructionExecutionResultMessage) GetClientSystemIdentification() *ClientSystemIdentificationMessage {
	if x != nil {
		return x.ClientSystemIdentification
	}
	return nil
}

func (x *CurrentTestInstructionExecutionResultMessage) GetTestInstructionExecutionUuid() string {
	if x != nil {
		return x.TestInstructionExecutionUuid
	}
	return ""
}

func (x *CurrentTestInstructionExecutionResultMessage) GetTestInstructionExecutionStatus() TestInstructionExecutionStatusEnum {
	if x != nil {
		return x.TestInstructionExecutionStatus
	}
	return TestInstructionExecutionStatusEnum_TestInstructionExecutionStatusEnum_DEFAULT_NOT_SET
}

// This message is a log post message that can be sent any time from Client System to Fenix Execution Server
type LogPostsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSystemIdentification *ClientSystemIdentificationMessage `protobuf:"bytes,1,opt,name=ClientSystemIdentification,proto3" json:"ClientSystemIdentification,omitempty"` // Identifies Client System and Proto-file version used
	LogPostUuid                string                             `protobuf:"bytes,2,opt,name=LogPostUuid,proto3" json:"LogPostUuid,omitempty"`                               // A unique uuid for the log post
	LogPosts                   []*LogPostsMessage_LogPostMessage  `protobuf:"bytes,3,rep,name=LogPosts,proto3" json:"LogPosts,omitempty"`                                     // The container containing the actual log information
}

func (x *LogPostsMessage) Reset() {
	*x = LogPostsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogPostsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogPostsMessage) ProtoMessage() {}

func (x *LogPostsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogPostsMessage.ProtoReflect.Descriptor instead.
func (*LogPostsMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescGZIP(), []int{2}
}

func (x *LogPostsMessage) GetClientSystemIdentification() *ClientSystemIdentificationMessage {
	if x != nil {
		return x.ClientSystemIdentification
	}
	return nil
}

func (x *LogPostsMessage) GetLogPostUuid() string {
	if x != nil {
		return x.LogPostUuid
	}
	return ""
}

func (x *LogPostsMessage) GetLogPosts() []*LogPostsMessage_LogPostMessage {
	if x != nil {
		return x.LogPosts
	}
	return nil
}

// A Worker reports what processing capabilities its underlying test automation has
type ProcessingCapabilityMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSystemIdentification          *ClientSystemIdentificationMessage      `protobuf:"bytes,1,opt,name=ClientSystemIdentification,proto3" json:"ClientSystemIdentification,omitempty"`                                                                                             // Identifies Client System and Proto-file version used
	TestInstructionProcessingCapability ProcessingCapabilityForClientSystemEnum `protobuf:"varint,2,opt,name=TestInstructionProcessingCapability,proto3,enum=fenixExecutionServerGrpcApi.ProcessingCapabilityForClientSystemEnum" json:"TestInstructionProcessingCapability,omitempty"` // Can TestInstructions be processed in parallell or only in serial, for a TestCase
	TestCaseProcessingCapability        ProcessingCapabilityForClientSystemEnum `protobuf:"varint,3,opt,name=TestCaseProcessingCapability,proto3,enum=fenixExecutionServerGrpcApi.ProcessingCapabilityForClientSystemEnum" json:"TestCaseProcessingCapability,omitempty"`               // Can TestCases be processed in parallell or only in serial
	TestSuiteProcessingCapability       ProcessingCapabilityForClientSystemEnum `protobuf:"varint,4,opt,name=TestSuiteProcessingCapability,proto3,enum=fenixExecutionServerGrpcApi.ProcessingCapabilityForClientSystemEnum" json:"TestSuiteProcessingCapability,omitempty"`             // Can TestSuites be processed in parallell or only in serial
}

func (x *ProcessingCapabilityMessage) Reset() {
	*x = ProcessingCapabilityMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingCapabilityMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingCapabilityMessage) ProtoMessage() {}

func (x *ProcessingCapabilityMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingCapabilityMessage.ProtoReflect.Descriptor instead.
func (*ProcessingCapabilityMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescGZIP(), []int{3}
}

func (x *ProcessingCapabilityMessage) GetClientSystemIdentification() *ClientSystemIdentificationMessage {
	if x != nil {
		return x.ClientSystemIdentification
	}
	return nil
}

func (x *ProcessingCapabilityMessage) GetTestInstructionProcessingCapability() ProcessingCapabilityForClientSystemEnum {
	if x != nil {
		return x.TestInstructionProcessingCapability
	}
	return ProcessingCapabilityForClientSystemEnum_ProcessingCapabilityForClientSystemEnum_DEFAULT_NOT_SET
}

func (x *ProcessingCapabilityMessage) GetTestCaseProcessingCapability() ProcessingCapabilityForClientSystemEnum {
	if x != nil {
		return x.TestCaseProcessingCapability
	}
	return ProcessingCapabilityForClientSystemEnum_ProcessingCapabilityForClientSystemEnum_DEFAULT_NOT_SET
}

func (x *ProcessingCapabilityMessage) GetTestSuiteProcessingCapability() ProcessingCapabilityForClientSystemEnum {
	if x != nil {
		return x.TestSuiteProcessingCapability
	}
	return ProcessingCapabilityForClientSystemEnum_ProcessingCapabilityForClientSystemEnum_DEFAULT_NOT_SET
}

// Message used to check if a specific worker is up and running
type IsWorkerAliveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoFileVersionUsedByClient CurrentFenixExecutionServerProtoFileVersionEnum `protobuf:"varint,1,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixExecutionServerGrpcApi.CurrentFenixExecutionServerProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
	WorkersDomainUuid            string                                          `protobuf:"bytes,3,opt,name=WorkersDomainUuid,proto3" json:"WorkersDomainUuid,omitempty"`                                                                                                         // The Execution Worker's Domain belonging
}

func (x *IsWorkerAliveRequest) Reset() {
	*x = IsWorkerAliveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsWorkerAliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsWorkerAliveRequest) ProtoMessage() {}

func (x *IsWorkerAliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsWorkerAliveRequest.ProtoReflect.Descriptor instead.
func (*IsWorkerAliveRequest) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescGZIP(), []int{4}
}

func (x *IsWorkerAliveRequest) GetProtoFileVersionUsedByClient() CurrentFenixExecutionServerProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixExecutionServerProtoFileVersionEnum_CurrentFenixExecutionServerProtoFileVersionEnum_DEFAULT_NOT_SET
}

func (x *IsWorkerAliveRequest) GetWorkersDomainUuid() string {
	if x != nil {
		return x.WorkersDomainUuid
	}
	return ""
}

// Message holding the TestCaseExecutions that should be processed
type TestCaseExecutionsToProcessMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoFileVersionUsedByClient CurrentFenixExecutionServerProtoFileVersionEnum `protobuf:"varint,1,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixExecutionServerGrpcApi.CurrentFenixExecutionServerProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
	TestCaseExecutionsToProcess  []*TestCaseExecutionToProcess                   `protobuf:"bytes,2,rep,name=TestCaseExecutionsToProcess,proto3" json:"TestCaseExecutionsToProcess,omitempty"`                                                                                     // An array with all TestCasesExecutions (UUID and VersionNumber) that should be processed
}

func (x *TestCaseExecutionsToProcessMessage) Reset() {
	*x = TestCaseExecutionsToProcessMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseExecutionsToProcessMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseExecutionsToProcessMessage) ProtoMessage() {}

func (x *TestCaseExecutionsToProcessMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseExecutionsToProcessMessage.ProtoReflect.Descriptor instead.
func (*TestCaseExecutionsToProcessMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescGZIP(), []int{5}
}

func (x *TestCaseExecutionsToProcessMessage) GetProtoFileVersionUsedByClient() CurrentFenixExecutionServerProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixExecutionServerProtoFileVersionEnum_CurrentFenixExecutionServerProtoFileVersionEnum_DEFAULT_NOT_SET
}

func (x *TestCaseExecutionsToProcessMessage) GetTestCaseExecutionsToProcess() []*TestCaseExecutionToProcess {
	if x != nil {
		return x.TestCaseExecutionsToProcess
	}
	return nil
}

// Message holding one specific TestCaseExecution that should be processed
type TestCaseExecutionToProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseExecutionsUuid     string                         `protobuf:"bytes,1,opt,name=TestCaseExecutionsUuid,proto3" json:"TestCaseExecutionsUuid,omitempty"`                                                                          // The TestCaseExecution to process
	TestCaseExecutionVersion   int32                          `protobuf:"varint,2,opt,name=TestCaseExecutionVersion,proto3" json:"TestCaseExecutionVersion,omitempty"`                                                                     // The version of the TestCaseExecution to process
	ExecutionStatusReportLevel ExecutionStatusReportLevelEnum `protobuf:"varint,3,opt,name=ExecutionStatusReportLevel,proto3,enum=fenixExecutionServerGrpcApi.ExecutionStatusReportLevelEnum" json:"ExecutionStatusReportLevel,omitempty"` // Used to tell ExecutionServer what level of ExecutionStatus should be reported back
}

func (x *TestCaseExecutionToProcess) Reset() {
	*x = TestCaseExecutionToProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseExecutionToProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseExecutionToProcess) ProtoMessage() {}

func (x *TestCaseExecutionToProcess) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseExecutionToProcess.ProtoReflect.Descriptor instead.
func (*TestCaseExecutionToProcess) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescGZIP(), []int{6}
}

func (x *TestCaseExecutionToProcess) GetTestCaseExecutionsUuid() string {
	if x != nil {
		return x.TestCaseExecutionsUuid
	}
	return ""
}

func (x *TestCaseExecutionToProcess) GetTestCaseExecutionVersion() int32 {
	if x != nil {
		return x.TestCaseExecutionVersion
	}
	return 0
}

func (x *TestCaseExecutionToProcess) GetExecutionStatusReportLevel() ExecutionStatusReportLevelEnum {
	if x != nil {
		return x.ExecutionStatusReportLevel
	}
	return ExecutionStatusReportLevelEnum_ExecutionStatusReportLevelEnum_DEFAULT_NOT_SET
}

// Response from execution client to execution server that client can execute TestInstruction
type ProcessTestInstructionExecutionResponseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckNackResponse                *AckNackResponse     `protobuf:"bytes,1,opt,name=AckNackResponse,proto3" json:"AckNackResponse,omitempty"`
	TestInstructionExecutionUuid   string               `protobuf:"bytes,2,opt,name=TestInstructionExecutionUuid,proto3" json:"TestInstructionExecutionUuid,omitempty"`      // The unique uuid for the TestInstructionExecution, set by Fenix Execution Server
	ExpectedExecutionDuration      *timestamp.Timestamp `protobuf:"bytes,3,opt,name=ExpectedExecutionDuration,proto3" json:"ExpectedExecutionDuration,omitempty"`            // The expected time during an execution result can be expected back to execution server
	TestInstructionCanBeReExecuted bool                 `protobuf:"varint,4,opt,name=TestInstructionCanBeReExecuted,proto3" json:"TestInstructionCanBeReExecuted,omitempty"` // Indicates if the TestInstruction can be resent to be re-executed. Good example is validations that can be don't as many times as needed
}

func (x *ProcessTestInstructionExecutionResponseStatus) Reset() {
	*x = ProcessTestInstructionExecutionResponseStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTestInstructionExecutionResponseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTestInstructionExecutionResponseStatus) ProtoMessage() {}

func (x *ProcessTestInstructionExecutionResponseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTestInstructionExecutionResponseStatus.ProtoReflect.Descriptor instead.
func (*ProcessTestInstructionExecutionResponseStatus) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescGZIP(), []int{7}
}

func (x *ProcessTestInstructionExecutionResponseStatus) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

func (x *ProcessTestInstructionExecutionResponseStatus) GetTestInstructionExecutionUuid() string {
	if x != nil {
		return x.TestInstructionExecutionUuid
	}
	return ""
}

func (x *ProcessTestInstructionExecutionResponseStatus) GetExpectedExecutionDuration() *timestamp.Timestamp {
	if x != nil {
		return x.ExpectedExecutionDuration
	}
	return nil
}

func (x *ProcessTestInstructionExecutionResponseStatus) GetTestInstructionCanBeReExecuted() bool {
	if x != nil {
		return x.TestInstructionCanBeReExecuted
	}
	return false
}

type FinalTestInstructionExecutionResultMessage_ResponseVariableMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseVariableUuid          string `protobuf:"bytes,1,opt,name=ResponseVariableUuid,proto3" json:"ResponseVariableUuid,omitempty"`                   // The UUID of the Variable
	ResponseVariableName          string `protobuf:"bytes,2,opt,name=ResponseVariableName,proto3" json:"ResponseVariableName,omitempty"`                   // The Name of the Variable
	ResponseVariableTypeUuid      string `protobuf:"bytes,3,opt,name=ResponseVariableTypeUuid,proto3" json:"ResponseVariableTypeUuid,omitempty"`           // The UUID for the type ResponseVariable. Used for matching as input to TestInstruction
	ResponseVariableTypeName      string `protobuf:"bytes,4,opt,name=ResponseVariableTypeName,proto3" json:"ResponseVariableTypeName,omitempty"`           // The Name for the type ResponseVariable
	ResponseVariableValueAsString string `protobuf:"bytes,5,opt,name=ResponseVariableValueAsString,proto3" json:"ResponseVariableValueAsString,omitempty"` // The string representation of the Variable
}

func (x *FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) Reset() {
	*x = FinalTestInstructionExecutionResultMessage_ResponseVariableMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) ProtoMessage() {}

func (x *FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalTestInstructionExecutionResultMessage_ResponseVariableMessage.ProtoReflect.Descriptor instead.
func (*FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) GetResponseVariableUuid() string {
	if x != nil {
		return x.ResponseVariableUuid
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) GetResponseVariableName() string {
	if x != nil {
		return x.ResponseVariableName
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) GetResponseVariableTypeUuid() string {
	if x != nil {
		return x.ResponseVariableTypeUuid
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) GetResponseVariableTypeName() string {
	if x != nil {
		return x.ResponseVariableTypeName
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage_ResponseVariableMessage) GetResponseVariableValueAsString() string {
	if x != nil {
		return x.ResponseVariableValueAsString
	}
	return ""
}

type FinalTestInstructionExecutionResultMessage_LogPostMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogPostUuid                         string                                                                                                  `protobuf:"bytes,1,opt,name=LogPostUuid,proto3" json:"LogPostUuid,omitempty"`                                                         // The unique uuid for this log post
	LogPostTimeStamp                    *timestamp.Timestamp                                                                                    `protobuf:"bytes,2,opt,name=LogPostTimeStamp,proto3" json:"LogPostTimeStamp,omitempty"`                                               // The TimeStamp for the specific log post
	LogPostStatus                       LogPostStatusEnum                                                                                       `protobuf:"varint,3,opt,name=LogPostStatus,proto3,enum=fenixExecutionServerGrpcApi.LogPostStatusEnum" json:"LogPostStatus,omitempty"` // The status for the log post
	LogPostText                         string                                                                                                  `protobuf:"bytes,4,opt,name=LogPostText,proto3" json:"LogPostText,omitempty"`                                                         // Information text for log post
	FoundVersusExpectedValueForVariable []*FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueForVariableMessage `protobuf:"bytes,5,rep,name=FoundVersusExpectedValueForVariable,proto3" json:"FoundVersusExpectedValueForVariable,omitempty"`         // A list of variables with their found versus expected values, in string representations
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage) Reset() {
	*x = FinalTestInstructionExecutionResultMessage_LogPostMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalTestInstructionExecutionResultMessage_LogPostMessage) ProtoMessage() {}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalTestInstructionExecutionResultMessage_LogPostMessage.ProtoReflect.Descriptor instead.
func (*FinalTestInstructionExecutionResultMessage_LogPostMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescGZIP(), []int{0, 1}
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage) GetLogPostUuid() string {
	if x != nil {
		return x.LogPostUuid
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage) GetLogPostTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.LogPostTimeStamp
	}
	return nil
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage) GetLogPostStatus() LogPostStatusEnum {
	if x != nil {
		return x.LogPostStatus
	}
	return LogPostStatusEnum_LogPostStatusEnum_DEFAULT_NOT_SET
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage) GetLogPostText() string {
	if x != nil {
		return x.LogPostText
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage) GetFoundVersusExpectedValueForVariable() []*FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueForVariableMessage {
	if x != nil {
		return x.FoundVersusExpectedValueForVariable
	}
	return nil
}

type FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueForVariableMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VariableName             string                                                                                     `protobuf:"bytes,1,opt,name=VariableName,proto3" json:"VariableName,omitempty"`                         // The Name of the variable that is was validated
	VariableDescription      string                                                                                     `protobuf:"bytes,2,opt,name=VariableDescription,proto3" json:"VariableDescription,omitempty"`           // A longer description of  the variable that is was validated
	FoundVersusExpectedValue *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage `protobuf:"bytes,3,opt,name=FoundVersusExpectedValue,proto3" json:"FoundVersusExpectedValue,omitempty"` // Found values vs Expected value
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueForVariableMessage) Reset() {
	*x = FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueForVariableMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueForVariableMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueForVariableMessage) ProtoMessage() {
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueForVariableMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueForVariableMessage.ProtoReflect.Descriptor instead.
func (*FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueForVariableMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueForVariableMessage) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueForVariableMessage) GetVariableDescription() string {
	if x != nil {
		return x.VariableDescription
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueForVariableMessage) GetFoundVersusExpectedValue() *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage {
	if x != nil {
		return x.FoundVersusExpectedValue
	}
	return nil
}

type FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FoundValue    string `protobuf:"bytes,1,opt,name=FoundValue,proto3" json:"FoundValue,omitempty"`       // The value that was found
	ExpectedValue string `protobuf:"bytes,2,opt,name=ExpectedValue,proto3" json:"ExpectedValue,omitempty"` // The value that was expected
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage) Reset() {
	*x = FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage) ProtoMessage() {
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage.ProtoReflect.Descriptor instead.
func (*FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage) GetFoundValue() string {
	if x != nil {
		return x.FoundValue
	}
	return ""
}

func (x *FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage) GetExpectedValue() string {
	if x != nil {
		return x.ExpectedValue
	}
	return ""
}

type LogPostsMessage_LogPostMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogPostTimeStamp         *timestamp.Timestamp                                              `protobuf:"bytes,1,opt,name=LogPostTimeStamp,proto3" json:"LogPostTimeStamp,omitempty"`                                               // The TimeStamp for the specific log post
	LogPostStatus            LogPostStatusEnum                                                 `protobuf:"varint,2,opt,name=LogPostStatus,proto3,enum=fenixExecutionServerGrpcApi.LogPostStatusEnum" json:"LogPostStatus,omitempty"` // The status for the log post
	LogPostText              string                                                            `protobuf:"bytes,3,opt,name=LogPostText,proto3" json:"LogPostText,omitempty"`                                                         // Information text for log post
	FoundVersusExpectedValue []*LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage `protobuf:"bytes,4,rep,name=FoundVersusExpectedValue,proto3" json:"FoundVersusExpectedValue,omitempty"`                               // A list with found versus expected values, in string representations
}

func (x *LogPostsMessage_LogPostMessage) Reset() {
	*x = LogPostsMessage_LogPostMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogPostsMessage_LogPostMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogPostsMessage_LogPostMessage) ProtoMessage() {}

func (x *LogPostsMessage_LogPostMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogPostsMessage_LogPostMessage.ProtoReflect.Descriptor instead.
func (*LogPostsMessage_LogPostMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescGZIP(), []int{2, 0}
}

func (x *LogPostsMessage_LogPostMessage) GetLogPostTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.LogPostTimeStamp
	}
	return nil
}

func (x *LogPostsMessage_LogPostMessage) GetLogPostStatus() LogPostStatusEnum {
	if x != nil {
		return x.LogPostStatus
	}
	return LogPostStatusEnum_LogPostStatusEnum_DEFAULT_NOT_SET
}

func (x *LogPostsMessage_LogPostMessage) GetLogPostText() string {
	if x != nil {
		return x.LogPostText
	}
	return ""
}

func (x *LogPostsMessage_LogPostMessage) GetFoundVersusExpectedValue() []*LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage {
	if x != nil {
		return x.FoundVersusExpectedValue
	}
	return nil
}

type LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FoundValue    string `protobuf:"bytes,1,opt,name=FoundValue,proto3" json:"FoundValue,omitempty"`       // The value that was found
	ExpectedValue string `protobuf:"bytes,2,opt,name=ExpectedValue,proto3" json:"ExpectedValue,omitempty"` // The value that was expected
}

func (x *LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage) Reset() {
	*x = LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage) ProtoMessage() {}

func (x *LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage.ProtoReflect.Descriptor instead.
func (*LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage) Descriptor() ([]byte, []int) {
	return file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage) GetFoundValue() string {
	if x != nil {
		return x.FoundValue
	}
	return ""
}

func (x *LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage) GetExpectedValue() string {
	if x != nil {
		return x.ExpectedValue
	}
	return ""
}

var File_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto protoreflect.FileDescriptor

var file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDesc = []byte{
	0x0a, 0x5b, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x6a, 0x46, 0x65, 0x6e,
	0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x11, 0x0a, 0x2a, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7e, 0x0a, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1a, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x1f, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1e, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x72, 0x0a, 0x26,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x26, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x6e, 0x0a, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x24, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x8d, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x11, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x72, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x56, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x50,
	0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x50,
	0x6f, 0x73, 0x74, 0x73, 0x1a, 0xbf, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x44, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0xec, 0x06, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x50, 0x6f,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x67,
	0x50, 0x6f, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x4c,
	0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x10, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x4c, 0x6f, 0x67, 0x50,
	0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x67,
	0x50, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0xd4, 0x01, 0x0a, 0x23,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x23, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x1a, 0xb7, 0x02, 0x0a, 0x2a, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46,
	0x6f, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb2, 0x01, 0x0a, 0x18, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x76, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x18, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x45,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x67, 0x0a, 0x1f,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfc, 0x02, 0x0a, 0x2c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7e, 0x0a, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1a, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x1e, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xe2, 0x05, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7e, 0x0a, 0x1a, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1a, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x50,
	0x6f, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c,
	0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x08, 0x4c, 0x6f,
	0x67, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x6f,
	0x73, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x6f,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x50, 0x6f,
	0x73, 0x74, 0x73, 0x1a, 0xd3, 0x03, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x4c, 0x6f,
	0x67, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x54,
	0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x6f, 0x67, 0x50, 0x6f,
	0x73, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x97, 0x01, 0x0a, 0x18, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x18, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x67, 0x0a, 0x1f, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x45,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xce, 0x04, 0x0a, 0x1b, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7e, 0x0a, 0x1a, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1a, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x96, 0x01, 0x0a, 0x23, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x23, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x88, 0x01, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x1c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x8a, 0x01,
	0x0a, 0x1d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1d, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xd7, 0x01, 0x0a, 0x14, 0x49,
	0x73, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x55, 0x75, 0x69, 0x64, 0x22, 0xb2, 0x02, 0x0a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x1c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x79,
	0x0a, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x1b, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x54, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x1a, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x3a, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x1a,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1a, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xed, 0x02, 0x0a, 0x2d, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0f, 0x41,
	0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0f, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x19, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x52, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x52,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67,
	0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescOnce sync.Once
	file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescData = file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDesc
)

func file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescGZIP() []byte {
	file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescOnce.Do(func() {
		file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescData)
	})
	return file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDescData
}

var file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_goTypes = []interface{}{
	(*FinalTestInstructionExecutionResultMessage)(nil),                         // 0: fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage
	(*CurrentTestInstructionExecutionResultMessage)(nil),                       // 1: fenixExecutionServerGrpcApi.CurrentTestInstructionExecutionResultMessage
	(*LogPostsMessage)(nil),                                                    // 2: fenixExecutionServerGrpcApi.LogPostsMessage
	(*ProcessingCapabilityMessage)(nil),                                        // 3: fenixExecutionServerGrpcApi.ProcessingCapabilityMessage
	(*IsWorkerAliveRequest)(nil),                                               // 4: fenixExecutionServerGrpcApi.IsWorkerAliveRequest
	(*TestCaseExecutionsToProcessMessage)(nil),                                 // 5: fenixExecutionServerGrpcApi.TestCaseExecutionsToProcessMessage
	(*TestCaseExecutionToProcess)(nil),                                         // 6: fenixExecutionServerGrpcApi.TestCaseExecutionToProcess
	(*ProcessTestInstructionExecutionResponseStatus)(nil),                      // 7: fenixExecutionServerGrpcApi.ProcessTestInstructionExecutionResponseStatus
	(*FinalTestInstructionExecutionResultMessage_ResponseVariableMessage)(nil), // 8: fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.ResponseVariableMessage
	(*FinalTestInstructionExecutionResultMessage_LogPostMessage)(nil),          // 9: fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPostMessage
	(*FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueForVariableMessage)(nil), // 10: fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPostMessage.FoundVersusExpectedValueForVariableMessage
	(*FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage)(nil),            // 11: fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPostMessage.FoundVersusExpectedValueMessage
	(*LogPostsMessage_LogPostMessage)(nil),                                 // 12: fenixExecutionServerGrpcApi.LogPostsMessage.LogPostMessage
	(*LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage)(nil), // 13: fenixExecutionServerGrpcApi.LogPostsMessage.LogPostMessage.FoundVersusExpectedValueMessage
	(*ClientSystemIdentificationMessage)(nil),                              // 14: fenixExecutionServerGrpcApi.ClientSystemIdentificationMessage
	(TestInstructionExecutionStatusEnum)(0),                                // 15: fenixExecutionServerGrpcApi.TestInstructionExecutionStatusEnum
	(*timestamp.Timestamp)(nil),                                            // 16: google.protobuf.Timestamp
	(ProcessingCapabilityForClientSystemEnum)(0),                           // 17: fenixExecutionServerGrpcApi.ProcessingCapabilityForClientSystemEnum
	(CurrentFenixExecutionServerProtoFileVersionEnum)(0),                   // 18: fenixExecutionServerGrpcApi.CurrentFenixExecutionServerProtoFileVersionEnum
	(ExecutionStatusReportLevelEnum)(0),                                    // 19: fenixExecutionServerGrpcApi.ExecutionStatusReportLevelEnum
	(*AckNackResponse)(nil),                                                // 20: fenixExecutionServerGrpcApi.AckNackResponse
	(LogPostStatusEnum)(0),                                                 // 21: fenixExecutionServerGrpcApi.LogPostStatusEnum
}
var file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_depIdxs = []int32{
	14, // 0: fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.ClientSystemIdentification:type_name -> fenixExecutionServerGrpcApi.ClientSystemIdentificationMessage
	15, // 1: fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.TestInstructionExecutionStatus:type_name -> fenixExecutionServerGrpcApi.TestInstructionExecutionStatusEnum
	16, // 2: fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.TestInstructionExecutionStartTimeStamp:type_name -> google.protobuf.Timestamp
	16, // 3: fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.TestInstructionExecutionEndTimeStamp:type_name -> google.protobuf.Timestamp
	8,  // 4: fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.ResponseVariables:type_name -> fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.ResponseVariableMessage
	9,  // 5: fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPosts:type_name -> fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPostMessage
	14, // 6: fenixExecutionServerGrpcApi.CurrentTestInstructionExecutionResultMessage.ClientSystemIdentification:type_name -> fenixExecutionServerGrpcApi.ClientSystemIdentificationMessage
	15, // 7: fenixExecutionServerGrpcApi.CurrentTestInstructionExecutionResultMessage.TestInstructionExecutionStatus:type_name -> fenixExecutionServerGrpcApi.TestInstructionExecutionStatusEnum
	14, // 8: fenixExecutionServerGrpcApi.LogPostsMessage.ClientSystemIdentification:type_name -> fenixExecutionServerGrpcApi.ClientSystemIdentificationMessage
	12, // 9: fenixExecutionServerGrpcApi.LogPostsMessage.LogPosts:type_name -> fenixExecutionServerGrpcApi.LogPostsMessage.LogPostMessage
	14, // 10: fenixExecutionServerGrpcApi.ProcessingCapabilityMessage.ClientSystemIdentification:type_name -> fenixExecutionServerGrpcApi.ClientSystemIdentificationMessage
	17, // 11: fenixExecutionServerGrpcApi.ProcessingCapabilityMessage.TestInstructionProcessingCapability:type_name -> fenixExecutionServerGrpcApi.ProcessingCapabilityForClientSystemEnum
	17, // 12: fenixExecutionServerGrpcApi.ProcessingCapabilityMessage.TestCaseProcessingCapability:type_name -> fenixExecutionServerGrpcApi.ProcessingCapabilityForClientSystemEnum
	17, // 13: fenixExecutionServerGrpcApi.ProcessingCapabilityMessage.TestSuiteProcessingCapability:type_name -> fenixExecutionServerGrpcApi.ProcessingCapabilityForClientSystemEnum
	18, // 14: fenixExecutionServerGrpcApi.IsWorkerAliveRequest.ProtoFileVersionUsedByClient:type_name -> fenixExecutionServerGrpcApi.CurrentFenixExecutionServerProtoFileVersionEnum
	18, // 15: fenixExecutionServerGrpcApi.TestCaseExecutionsToProcessMessage.ProtoFileVersionUsedByClient:type_name -> fenixExecutionServerGrpcApi.CurrentFenixExecutionServerProtoFileVersionEnum
	6,  // 16: fenixExecutionServerGrpcApi.TestCaseExecutionsToProcessMessage.TestCaseExecutionsToProcess:type_name -> fenixExecutionServerGrpcApi.TestCaseExecutionToProcess
	19, // 17: fenixExecutionServerGrpcApi.TestCaseExecutionToProcess.ExecutionStatusReportLevel:type_name -> fenixExecutionServerGrpcApi.ExecutionStatusReportLevelEnum
	20, // 18: fenixExecutionServerGrpcApi.ProcessTestInstructionExecutionResponseStatus.AckNackResponse:type_name -> fenixExecutionServerGrpcApi.AckNackResponse
	16, // 19: fenixExecutionServerGrpcApi.ProcessTestInstructionExecutionResponseStatus.ExpectedExecutionDuration:type_name -> google.protobuf.Timestamp
	16, // 20: fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPostMessage.LogPostTimeStamp:type_name -> google.protobuf.Timestamp
	21, // 21: fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPostMessage.LogPostStatus:type_name -> fenixExecutionServerGrpcApi.LogPostStatusEnum
	10, // 22: fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPostMessage.FoundVersusExpectedValueForVariable:type_name -> fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPostMessage.FoundVersusExpectedValueForVariableMessage
	11, // 23: fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPostMessage.FoundVersusExpectedValueForVariableMessage.FoundVersusExpectedValue:type_name -> fenixExecutionServerGrpcApi.FinalTestInstructionExecutionResultMessage.LogPostMessage.FoundVersusExpectedValueMessage
	16, // 24: fenixExecutionServerGrpcApi.LogPostsMessage.LogPostMessage.LogPostTimeStamp:type_name -> google.protobuf.Timestamp
	21, // 25: fenixExecutionServerGrpcApi.LogPostsMessage.LogPostMessage.LogPostStatus:type_name -> fenixExecutionServerGrpcApi.LogPostStatusEnum
	13, // 26: fenixExecutionServerGrpcApi.LogPostsMessage.LogPostMessage.FoundVersusExpectedValue:type_name -> fenixExecutionServerGrpcApi.LogPostsMessage.LogPostMessage.FoundVersusExpectedValueMessage
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() {
	file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_init()
}
func file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_init() {
	if File_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto != nil {
		return
	}
	file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_GeneralMessagesAndEnums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalTestInstructionExecutionResultMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentTestInstructionExecutionResultMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogPostsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessingCapabilityMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsWorkerAliveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseExecutionsToProcessMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseExecutionToProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTestInstructionExecutionResponseStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalTestInstructionExecutionResultMessage_ResponseVariableMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalTestInstructionExecutionResultMessage_LogPostMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueForVariableMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalTestInstructionExecutionResultMessage_LogPostMessage_FoundVersusExpectedValueMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogPostsMessage_LogPostMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogPostsMessage_LogPostMessage_FoundVersusExpectedValueMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_goTypes,
		DependencyIndexes: file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_depIdxs,
		MessageInfos:      file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_msgTypes,
	}.Build()
	File_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto = out.File
	file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_rawDesc = nil
	file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_goTypes = nil
	file_FenixExecutionServer_fenixExecutionServerGrpcApi_fenixExecutionServerGrpcApi_Messages_proto_depIdxs = nil
}
