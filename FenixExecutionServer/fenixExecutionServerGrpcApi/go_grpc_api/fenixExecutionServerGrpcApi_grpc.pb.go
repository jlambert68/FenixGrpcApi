// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FenixExecutionServerGrpcServicesClient is the client API for FenixExecutionServerGrpcServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FenixExecutionServerGrpcServicesClient interface {
	//Anyone can check if Fenix Execution server is alive with this service
	AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Ask Fenix Execution server to call a Execution Worker to see if is alive
	IsWorkerAlive(ctx context.Context, in *IsWorkerAliveRequest, opts ...grpc.CallOption) (*AckNackResponse, error)
	// ExecutionServerGui-server inform ExecutionServer that there is a new TestCase that is ready on the Execution-queue
	InformThatThereAreNewTestCasesOnExecutionQueue(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	// ExecutionServer-server is informed to check TestInstructionExecutionQueue for new TestInstructions to execute
	InformThatThereAreNewTestInstructionsOnExecutionQueue(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Client can inform Server of Client capability to execute requests in parallell, serial or no processing at all
	ReportProcessingCapability(ctx context.Context, in *ProcessingCapabilityMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// This can be used to trigger/re-trigger sending new TestInstructionExecutions to workers
	TriggerSendNewTestInstructionsThatIsWaitingToBeSent(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	// When a TestInstruction has been fully executed the Client use this to inform the results of the execution result to the Server
	ReportCompleteTestInstructionExecutionResult(ctx context.Context, in *FinalTestInstructionExecutionResultMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// During a TestInstruction execution the Client use this to inform the current of the execution result to the Server
	ReportCurrentTestInstructionExecutionResult(ctx context.Context, opts ...grpc.CallOption) (FenixExecutionServerGrpcServices_ReportCurrentTestInstructionExecutionResultClient, error)
	// During the execution the Client can send log information that can be shown to the user
	SendLogPostForExecution(ctx context.Context, opts ...grpc.CallOption) (FenixExecutionServerGrpcServices_SendLogPostForExecutionClient, error)
}

type fenixExecutionServerGrpcServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewFenixExecutionServerGrpcServicesClient(cc grpc.ClientConnInterface) FenixExecutionServerGrpcServicesClient {
	return &fenixExecutionServerGrpcServicesClient{cc}
}

func (c *fenixExecutionServerGrpcServicesClient) AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerGrpcApi.FenixExecutionServerGrpcServices/AreYouAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGrpcServicesClient) IsWorkerAlive(ctx context.Context, in *IsWorkerAliveRequest, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerGrpcApi.FenixExecutionServerGrpcServices/IsWorkerAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGrpcServicesClient) InformThatThereAreNewTestCasesOnExecutionQueue(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerGrpcApi.FenixExecutionServerGrpcServices/InformThatThereAreNewTestCasesOnExecutionQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGrpcServicesClient) InformThatThereAreNewTestInstructionsOnExecutionQueue(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerGrpcApi.FenixExecutionServerGrpcServices/InformThatThereAreNewTestInstructionsOnExecutionQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGrpcServicesClient) ReportProcessingCapability(ctx context.Context, in *ProcessingCapabilityMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerGrpcApi.FenixExecutionServerGrpcServices/ReportProcessingCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGrpcServicesClient) TriggerSendNewTestInstructionsThatIsWaitingToBeSent(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerGrpcApi.FenixExecutionServerGrpcServices/TriggerSendNewTestInstructionsThatIsWaitingToBeSent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGrpcServicesClient) ReportCompleteTestInstructionExecutionResult(ctx context.Context, in *FinalTestInstructionExecutionResultMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixExecutionServerGrpcApi.FenixExecutionServerGrpcServices/ReportCompleteTestInstructionExecutionResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixExecutionServerGrpcServicesClient) ReportCurrentTestInstructionExecutionResult(ctx context.Context, opts ...grpc.CallOption) (FenixExecutionServerGrpcServices_ReportCurrentTestInstructionExecutionResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &FenixExecutionServerGrpcServices_ServiceDesc.Streams[0], "/fenixExecutionServerGrpcApi.FenixExecutionServerGrpcServices/ReportCurrentTestInstructionExecutionResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &fenixExecutionServerGrpcServicesReportCurrentTestInstructionExecutionResultClient{stream}
	return x, nil
}

type FenixExecutionServerGrpcServices_ReportCurrentTestInstructionExecutionResultClient interface {
	Send(*CurrentTestInstructionExecutionResultMessage) error
	CloseAndRecv() (*AckNackResponse, error)
	grpc.ClientStream
}

type fenixExecutionServerGrpcServicesReportCurrentTestInstructionExecutionResultClient struct {
	grpc.ClientStream
}

func (x *fenixExecutionServerGrpcServicesReportCurrentTestInstructionExecutionResultClient) Send(m *CurrentTestInstructionExecutionResultMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fenixExecutionServerGrpcServicesReportCurrentTestInstructionExecutionResultClient) CloseAndRecv() (*AckNackResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AckNackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fenixExecutionServerGrpcServicesClient) SendLogPostForExecution(ctx context.Context, opts ...grpc.CallOption) (FenixExecutionServerGrpcServices_SendLogPostForExecutionClient, error) {
	stream, err := c.cc.NewStream(ctx, &FenixExecutionServerGrpcServices_ServiceDesc.Streams[1], "/fenixExecutionServerGrpcApi.FenixExecutionServerGrpcServices/SendLogPostForExecution", opts...)
	if err != nil {
		return nil, err
	}
	x := &fenixExecutionServerGrpcServicesSendLogPostForExecutionClient{stream}
	return x, nil
}

type FenixExecutionServerGrpcServices_SendLogPostForExecutionClient interface {
	Send(*LogPostsMessage) error
	CloseAndRecv() (*AckNackResponse, error)
	grpc.ClientStream
}

type fenixExecutionServerGrpcServicesSendLogPostForExecutionClient struct {
	grpc.ClientStream
}

func (x *fenixExecutionServerGrpcServicesSendLogPostForExecutionClient) Send(m *LogPostsMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fenixExecutionServerGrpcServicesSendLogPostForExecutionClient) CloseAndRecv() (*AckNackResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AckNackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FenixExecutionServerGrpcServicesServer is the server API for FenixExecutionServerGrpcServices service.
// All implementations must embed UnimplementedFenixExecutionServerGrpcServicesServer
// for forward compatibility
type FenixExecutionServerGrpcServicesServer interface {
	//Anyone can check if Fenix Execution server is alive with this service
	AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error)
	// Ask Fenix Execution server to call a Execution Worker to see if is alive
	IsWorkerAlive(context.Context, *IsWorkerAliveRequest) (*AckNackResponse, error)
	// ExecutionServerGui-server inform ExecutionServer that there is a new TestCase that is ready on the Execution-queue
	InformThatThereAreNewTestCasesOnExecutionQueue(context.Context, *EmptyParameter) (*AckNackResponse, error)
	// ExecutionServer-server is informed to check TestInstructionExecutionQueue for new TestInstructions to execute
	InformThatThereAreNewTestInstructionsOnExecutionQueue(context.Context, *EmptyParameter) (*AckNackResponse, error)
	// Client can inform Server of Client capability to execute requests in parallell, serial or no processing at all
	ReportProcessingCapability(context.Context, *ProcessingCapabilityMessage) (*AckNackResponse, error)
	// This can be used to trigger/re-trigger sending new TestInstructionExecutions to workers
	TriggerSendNewTestInstructionsThatIsWaitingToBeSent(context.Context, *EmptyParameter) (*AckNackResponse, error)
	// When a TestInstruction has been fully executed the Client use this to inform the results of the execution result to the Server
	ReportCompleteTestInstructionExecutionResult(context.Context, *FinalTestInstructionExecutionResultMessage) (*AckNackResponse, error)
	// During a TestInstruction execution the Client use this to inform the current of the execution result to the Server
	ReportCurrentTestInstructionExecutionResult(FenixExecutionServerGrpcServices_ReportCurrentTestInstructionExecutionResultServer) error
	// During the execution the Client can send log information that can be shown to the user
	SendLogPostForExecution(FenixExecutionServerGrpcServices_SendLogPostForExecutionServer) error
	mustEmbedUnimplementedFenixExecutionServerGrpcServicesServer()
}

// UnimplementedFenixExecutionServerGrpcServicesServer must be embedded to have forward compatible implementations.
type UnimplementedFenixExecutionServerGrpcServicesServer struct {
}

func (UnimplementedFenixExecutionServerGrpcServicesServer) AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreYouAlive not implemented")
}
func (UnimplementedFenixExecutionServerGrpcServicesServer) IsWorkerAlive(context.Context, *IsWorkerAliveRequest) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWorkerAlive not implemented")
}
func (UnimplementedFenixExecutionServerGrpcServicesServer) InformThatThereAreNewTestCasesOnExecutionQueue(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformThatThereAreNewTestCasesOnExecutionQueue not implemented")
}
func (UnimplementedFenixExecutionServerGrpcServicesServer) InformThatThereAreNewTestInstructionsOnExecutionQueue(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformThatThereAreNewTestInstructionsOnExecutionQueue not implemented")
}
func (UnimplementedFenixExecutionServerGrpcServicesServer) ReportProcessingCapability(context.Context, *ProcessingCapabilityMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportProcessingCapability not implemented")
}
func (UnimplementedFenixExecutionServerGrpcServicesServer) TriggerSendNewTestInstructionsThatIsWaitingToBeSent(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerSendNewTestInstructionsThatIsWaitingToBeSent not implemented")
}
func (UnimplementedFenixExecutionServerGrpcServicesServer) ReportCompleteTestInstructionExecutionResult(context.Context, *FinalTestInstructionExecutionResultMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCompleteTestInstructionExecutionResult not implemented")
}
func (UnimplementedFenixExecutionServerGrpcServicesServer) ReportCurrentTestInstructionExecutionResult(FenixExecutionServerGrpcServices_ReportCurrentTestInstructionExecutionResultServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportCurrentTestInstructionExecutionResult not implemented")
}
func (UnimplementedFenixExecutionServerGrpcServicesServer) SendLogPostForExecution(FenixExecutionServerGrpcServices_SendLogPostForExecutionServer) error {
	return status.Errorf(codes.Unimplemented, "method SendLogPostForExecution not implemented")
}
func (UnimplementedFenixExecutionServerGrpcServicesServer) mustEmbedUnimplementedFenixExecutionServerGrpcServicesServer() {
}

// UnsafeFenixExecutionServerGrpcServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FenixExecutionServerGrpcServicesServer will
// result in compilation errors.
type UnsafeFenixExecutionServerGrpcServicesServer interface {
	mustEmbedUnimplementedFenixExecutionServerGrpcServicesServer()
}

func RegisterFenixExecutionServerGrpcServicesServer(s grpc.ServiceRegistrar, srv FenixExecutionServerGrpcServicesServer) {
	s.RegisterService(&FenixExecutionServerGrpcServices_ServiceDesc, srv)
}

func _FenixExecutionServerGrpcServices_AreYouAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGrpcServicesServer).AreYouAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerGrpcApi.FenixExecutionServerGrpcServices/AreYouAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGrpcServicesServer).AreYouAlive(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGrpcServices_IsWorkerAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsWorkerAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGrpcServicesServer).IsWorkerAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerGrpcApi.FenixExecutionServerGrpcServices/IsWorkerAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGrpcServicesServer).IsWorkerAlive(ctx, req.(*IsWorkerAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGrpcServices_InformThatThereAreNewTestCasesOnExecutionQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGrpcServicesServer).InformThatThereAreNewTestCasesOnExecutionQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerGrpcApi.FenixExecutionServerGrpcServices/InformThatThereAreNewTestCasesOnExecutionQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGrpcServicesServer).InformThatThereAreNewTestCasesOnExecutionQueue(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGrpcServices_InformThatThereAreNewTestInstructionsOnExecutionQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGrpcServicesServer).InformThatThereAreNewTestInstructionsOnExecutionQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerGrpcApi.FenixExecutionServerGrpcServices/InformThatThereAreNewTestInstructionsOnExecutionQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGrpcServicesServer).InformThatThereAreNewTestInstructionsOnExecutionQueue(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGrpcServices_ReportProcessingCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessingCapabilityMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGrpcServicesServer).ReportProcessingCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerGrpcApi.FenixExecutionServerGrpcServices/ReportProcessingCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGrpcServicesServer).ReportProcessingCapability(ctx, req.(*ProcessingCapabilityMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGrpcServices_TriggerSendNewTestInstructionsThatIsWaitingToBeSent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGrpcServicesServer).TriggerSendNewTestInstructionsThatIsWaitingToBeSent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerGrpcApi.FenixExecutionServerGrpcServices/TriggerSendNewTestInstructionsThatIsWaitingToBeSent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGrpcServicesServer).TriggerSendNewTestInstructionsThatIsWaitingToBeSent(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGrpcServices_ReportCompleteTestInstructionExecutionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalTestInstructionExecutionResultMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixExecutionServerGrpcServicesServer).ReportCompleteTestInstructionExecutionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixExecutionServerGrpcApi.FenixExecutionServerGrpcServices/ReportCompleteTestInstructionExecutionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixExecutionServerGrpcServicesServer).ReportCompleteTestInstructionExecutionResult(ctx, req.(*FinalTestInstructionExecutionResultMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixExecutionServerGrpcServices_ReportCurrentTestInstructionExecutionResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FenixExecutionServerGrpcServicesServer).ReportCurrentTestInstructionExecutionResult(&fenixExecutionServerGrpcServicesReportCurrentTestInstructionExecutionResultServer{stream})
}

type FenixExecutionServerGrpcServices_ReportCurrentTestInstructionExecutionResultServer interface {
	SendAndClose(*AckNackResponse) error
	Recv() (*CurrentTestInstructionExecutionResultMessage, error)
	grpc.ServerStream
}

type fenixExecutionServerGrpcServicesReportCurrentTestInstructionExecutionResultServer struct {
	grpc.ServerStream
}

func (x *fenixExecutionServerGrpcServicesReportCurrentTestInstructionExecutionResultServer) SendAndClose(m *AckNackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fenixExecutionServerGrpcServicesReportCurrentTestInstructionExecutionResultServer) Recv() (*CurrentTestInstructionExecutionResultMessage, error) {
	m := new(CurrentTestInstructionExecutionResultMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FenixExecutionServerGrpcServices_SendLogPostForExecution_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FenixExecutionServerGrpcServicesServer).SendLogPostForExecution(&fenixExecutionServerGrpcServicesSendLogPostForExecutionServer{stream})
}

type FenixExecutionServerGrpcServices_SendLogPostForExecutionServer interface {
	SendAndClose(*AckNackResponse) error
	Recv() (*LogPostsMessage, error)
	grpc.ServerStream
}

type fenixExecutionServerGrpcServicesSendLogPostForExecutionServer struct {
	grpc.ServerStream
}

func (x *fenixExecutionServerGrpcServicesSendLogPostForExecutionServer) SendAndClose(m *AckNackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fenixExecutionServerGrpcServicesSendLogPostForExecutionServer) Recv() (*LogPostsMessage, error) {
	m := new(LogPostsMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FenixExecutionServerGrpcServices_ServiceDesc is the grpc.ServiceDesc for FenixExecutionServerGrpcServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FenixExecutionServerGrpcServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fenixExecutionServerGrpcApi.FenixExecutionServerGrpcServices",
	HandlerType: (*FenixExecutionServerGrpcServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AreYouAlive",
			Handler:    _FenixExecutionServerGrpcServices_AreYouAlive_Handler,
		},
		{
			MethodName: "IsWorkerAlive",
			Handler:    _FenixExecutionServerGrpcServices_IsWorkerAlive_Handler,
		},
		{
			MethodName: "InformThatThereAreNewTestCasesOnExecutionQueue",
			Handler:    _FenixExecutionServerGrpcServices_InformThatThereAreNewTestCasesOnExecutionQueue_Handler,
		},
		{
			MethodName: "InformThatThereAreNewTestInstructionsOnExecutionQueue",
			Handler:    _FenixExecutionServerGrpcServices_InformThatThereAreNewTestInstructionsOnExecutionQueue_Handler,
		},
		{
			MethodName: "ReportProcessingCapability",
			Handler:    _FenixExecutionServerGrpcServices_ReportProcessingCapability_Handler,
		},
		{
			MethodName: "TriggerSendNewTestInstructionsThatIsWaitingToBeSent",
			Handler:    _FenixExecutionServerGrpcServices_TriggerSendNewTestInstructionsThatIsWaitingToBeSent_Handler,
		},
		{
			MethodName: "ReportCompleteTestInstructionExecutionResult",
			Handler:    _FenixExecutionServerGrpcServices_ReportCompleteTestInstructionExecutionResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportCurrentTestInstructionExecutionResult",
			Handler:       _FenixExecutionServerGrpcServices_ReportCurrentTestInstructionExecutionResult_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendLogPostForExecution",
			Handler:       _FenixExecutionServerGrpcServices_SendLogPostForExecution_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "FenixExecutionServer/fenixExecutionServerGrpcApi/fenixExecutionServerGrpcApi.proto",
}
