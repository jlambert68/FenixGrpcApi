syntax = "proto3";
package fenixExecutionServerGrpcApi;
option go_package = "./go_grpc_api";
option csharp_namespace = "ExecutionServerGrpc";

import "FenixExecutionServer/fenixExecutionServerGrpcApi/fenixExecutionServerGrpcApi_GeneralMessagesAndEnums.proto";
import "FenixExecutionServer/fenixExecutionServerGrpcApi/fenixExecutionServerGrpcApi_Messages.proto";


// ****************************************************************************************************
//

service FenixExecutionServerGrpcServices {

  // ************************ Admin ************************

  //Anyone can check if Fenix Execution server is alive with this service
  rpc AreYouAlive (EmptyParameter) returns (AckNackResponse) {
  }

  // ExecutionServerGui-server inform ExecutionServer that there is a new TestCase that is ready on the Execution-queue
  rpc InformThatThereAreNewTestCasesOnExecutionQueue (EmptyParameter) returns (AckNackResponse) {
  }

  // ExecutionServer-server is informed to check TestInstructionExecutionQueue for new TestInstructions to execute
  rpc InformThatThereAreNewTestInstructionsOnExecutionQueue (EmptyParameter) returns (AckNackResponse) {
  }

  // *** Client inform Server of Clients status and capability ***

  // Client can inform Server of Client capability to execute requests in parallell, serial or no processing at all
  rpc ReportProcessingCapability (ProcessingCapabilityMessage) returns (AckNackResponse) {
  }


  // ************************ Execution Status ************************

  // When a TestInstruction has been fully executed the Client use this to inform the results of the execution result to the Server
  rpc ReportCompleteTestInstructionExecutionResult (FinalTestInstructionExecutionResultMessage) returns (AckNackResponse) {
  }

  // During a TestInstruction execution the Client use this to inform the current of the execution result to the Server
  rpc ReportCurrentTestInstructionExecutionResult (stream CurrentTestInstructionExecutionResultMessage) returns (AckNackResponse) {
  }

  // During the execution the Client can send log information that can be shown to the user
  rpc SendLogPostForExecution(stream LogPostsMessage) returns (AckNackResponse) {
  }



}



