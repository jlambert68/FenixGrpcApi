syntax = "proto3";
package fenixClientTestDataSyncServerGrpcApi;
option go_package ="./go_grpc_api";

// Used to have client and server in sync with using the same proto file version
// Minor changes is backwards compatible with previous version
// Major changes changes needs to be the same for server and client
enum CurrentFenixClientTestDataProtoFileVersionEnum {
    VERSION_0_9 = 0 [deprecated = true];
    VERSION_1_0 = 1; // Current version
}

// Error codes - for now a test
enum ErrorCodesEnum {
    OK = 0;
    ERROR_UNKNOWN_CALLER = 1;
    ERROR_WRONG_PROTO_FILE_VERSION = 2;
}

// Parameter used for Empty inputs, only containing current proto-file version
message EmptyParameter {
    CurrentFenixClientTestDataProtoFileVersionEnum ProtoFileVersionUsedByClient = 1;
}

// Ack/Nack- Response message with comment
message AckNackResponse {
    bool acknack = 1; // True=Ack, False=Nack
    string comments = 2; //Comments if needed
    repeated ErrorCodesEnum ErrorCodes = 3;
}


// Fenix Client Testdata sync server service definition.
// ***********************
service FenixClientTestDataGrpcServices {

    //Ask Client to call Fenix Server to check if Fenix Testdata Server is alive with this service
    rpc AreFenixTestDataSyncServerAlive (EmptyParameter) returns (AckNackResponse) {
    }

    //Fenix Server can check if Fenix Client Testdata sync server is alive with this service
    rpc AreYouAlive (EmptyParameter) returns (AckNackResponse) {
    }

    // Fenix Server asks Fenix client to register itself with the Fenix Testdata sync server
    rpc RegisterTestDataClient(EmptyParameter) returns (AckNackResponse) {
    }

    // Fenix Server asks Fenix client to send TestData MerkleHash to Fenix Testdata sync server with this service
    rpc SendMerkleHash (EmptyParameter) returns (AckNackResponse) {
    }

    // Fenix Server asks Fenix client to send TestData MerkleTree to Fenix Testdata sync server with this service
    rpc SendMerkleTree (EmptyParameter) returns (AckNackResponse) {
    }

    // Fenix Server asks Fenix client to send TestDataHeaderHash to Fenix Testdata sync server with this service
    rpc SendTestDataHeaderHash (EmptyParameter) returns (AckNackResponse) {
    }

    // Fenix Server asks Fenix client to send TestDataHeaders to Fenix Testdata sync server with this service
    rpc SendTestDataHeaders (EmptyParameter) returns (AckNackResponse) {
    }

    // Fenix Server asks Fenix client to send all TestData rows to Fenix Testdata sync server with this service
    rpc SendAllTestDataRows (EmptyParameter) returns (AckNackResponse) {
    }

    // Fenix Server asks Fenix client to  send TestData rows, based on list of MerklePaths, to Fenix Testdata sync server with this service
    rpc SendTestDataRows (MerklePathsMessage) returns (AckNackResponse) {
    }
}

// List of MerklePath's to be sent fr√•n client to FenixTestDataSyncServer
message MerklePathsMessage {
    repeated string MerklePath = 1;
    CurrentFenixClientTestDataProtoFileVersionEnum ProtoFileVersionUsedByCaller = 2;
}