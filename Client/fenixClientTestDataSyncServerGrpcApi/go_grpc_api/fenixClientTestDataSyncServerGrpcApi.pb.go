// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: fenixClientTestDataSyncServerGrpcApi.proto

package go_grpc_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Used to have client and server in sync with using the same proto file version
// Minor changes is backwards compatible with previous version
// Major changes changes needs to be the same for server and client
type CurrentFenixClientTestDataProtoFileVersionEnum int32

const (
	// Deprecated: Do not use.
	CurrentFenixClientTestDataProtoFileVersionEnum_VERSION_0_9  CurrentFenixClientTestDataProtoFileVersionEnum = 0
	CurrentFenixClientTestDataProtoFileVersionEnum_VERSION_0_10 CurrentFenixClientTestDataProtoFileVersionEnum = 1 // Current version
)

// Enum value maps for CurrentFenixClientTestDataProtoFileVersionEnum.
var (
	CurrentFenixClientTestDataProtoFileVersionEnum_name = map[int32]string{
		0: "VERSION_0_9",
		1: "VERSION_0_10",
	}
	CurrentFenixClientTestDataProtoFileVersionEnum_value = map[string]int32{
		"VERSION_0_9":  0,
		"VERSION_0_10": 1,
	}
)

func (x CurrentFenixClientTestDataProtoFileVersionEnum) Enum() *CurrentFenixClientTestDataProtoFileVersionEnum {
	p := new(CurrentFenixClientTestDataProtoFileVersionEnum)
	*p = x
	return p
}

func (x CurrentFenixClientTestDataProtoFileVersionEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrentFenixClientTestDataProtoFileVersionEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_fenixClientTestDataSyncServerGrpcApi_proto_enumTypes[0].Descriptor()
}

func (CurrentFenixClientTestDataProtoFileVersionEnum) Type() protoreflect.EnumType {
	return &file_fenixClientTestDataSyncServerGrpcApi_proto_enumTypes[0]
}

func (x CurrentFenixClientTestDataProtoFileVersionEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrentFenixClientTestDataProtoFileVersionEnum.Descriptor instead.
func (CurrentFenixClientTestDataProtoFileVersionEnum) EnumDescriptor() ([]byte, []int) {
	return file_fenixClientTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{0}
}

// Error codes - for now a test
type ErrorCodesEnum int32

const (
	ErrorCodesEnum_OK                             ErrorCodesEnum = 0
	ErrorCodesEnum_ERROR_UNKNOWN_CALLER           ErrorCodesEnum = 1
	ErrorCodesEnum_ERROR_WRONG_PROTO_FILE_VERSION ErrorCodesEnum = 2
)

// Enum value maps for ErrorCodesEnum.
var (
	ErrorCodesEnum_name = map[int32]string{
		0: "OK",
		1: "ERROR_UNKNOWN_CALLER",
		2: "ERROR_WRONG_PROTO_FILE_VERSION",
	}
	ErrorCodesEnum_value = map[string]int32{
		"OK":                             0,
		"ERROR_UNKNOWN_CALLER":           1,
		"ERROR_WRONG_PROTO_FILE_VERSION": 2,
	}
)

func (x ErrorCodesEnum) Enum() *ErrorCodesEnum {
	p := new(ErrorCodesEnum)
	*p = x
	return p
}

func (x ErrorCodesEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCodesEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_fenixClientTestDataSyncServerGrpcApi_proto_enumTypes[1].Descriptor()
}

func (ErrorCodesEnum) Type() protoreflect.EnumType {
	return &file_fenixClientTestDataSyncServerGrpcApi_proto_enumTypes[1]
}

func (x ErrorCodesEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCodesEnum.Descriptor instead.
func (ErrorCodesEnum) EnumDescriptor() ([]byte, []int) {
	return file_fenixClientTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{1}
}

// Parameter used for Empty inputs, only containing current proto-file version
type EmptyParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoFileVersionUsedByClient CurrentFenixClientTestDataProtoFileVersionEnum `protobuf:"varint,1,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixClientTestDataSyncServerGrpcApi.CurrentFenixClientTestDataProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"`
}

func (x *EmptyParameter) Reset() {
	*x = EmptyParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixClientTestDataSyncServerGrpcApi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyParameter) ProtoMessage() {}

func (x *EmptyParameter) ProtoReflect() protoreflect.Message {
	mi := &file_fenixClientTestDataSyncServerGrpcApi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyParameter.ProtoReflect.Descriptor instead.
func (*EmptyParameter) Descriptor() ([]byte, []int) {
	return file_fenixClientTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{0}
}

func (x *EmptyParameter) GetProtoFileVersionUsedByClient() CurrentFenixClientTestDataProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixClientTestDataProtoFileVersionEnum_VERSION_0_9
}

// Ack/Nack- Response message with comment
type AckNackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckNack    bool             `protobuf:"varint,1,opt,name=AckNack,proto3" json:"AckNack,omitempty"`  // True=Ack, False=Nack
	Comments   string           `protobuf:"bytes,2,opt,name=comments,proto3" json:"comments,omitempty"` //Comments if needed
	ErrorCodes []ErrorCodesEnum `protobuf:"varint,3,rep,packed,name=ErrorCodes,proto3,enum=fenixClientTestDataSyncServerGrpcApi.ErrorCodesEnum" json:"ErrorCodes,omitempty"`
}

func (x *AckNackResponse) Reset() {
	*x = AckNackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixClientTestDataSyncServerGrpcApi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckNackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckNackResponse) ProtoMessage() {}

func (x *AckNackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fenixClientTestDataSyncServerGrpcApi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckNackResponse.ProtoReflect.Descriptor instead.
func (*AckNackResponse) Descriptor() ([]byte, []int) {
	return file_fenixClientTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{1}
}

func (x *AckNackResponse) GetAckNack() bool {
	if x != nil {
		return x.AckNack
	}
	return false
}

func (x *AckNackResponse) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *AckNackResponse) GetErrorCodes() []ErrorCodesEnum {
	if x != nil {
		return x.ErrorCodes
	}
	return nil
}

// List of MerklePath's to be sent fr√•n client to FenixTestDataSyncServer
type MerklePathsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerklePath                   []string                                       `protobuf:"bytes,1,rep,name=MerklePath,proto3" json:"MerklePath,omitempty"`
	ProtoFileVersionUsedByCaller CurrentFenixClientTestDataProtoFileVersionEnum `protobuf:"varint,2,opt,name=ProtoFileVersionUsedByCaller,proto3,enum=fenixClientTestDataSyncServerGrpcApi.CurrentFenixClientTestDataProtoFileVersionEnum" json:"ProtoFileVersionUsedByCaller,omitempty"`
}

func (x *MerklePathsMessage) Reset() {
	*x = MerklePathsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixClientTestDataSyncServerGrpcApi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerklePathsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerklePathsMessage) ProtoMessage() {}

func (x *MerklePathsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixClientTestDataSyncServerGrpcApi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerklePathsMessage.ProtoReflect.Descriptor instead.
func (*MerklePathsMessage) Descriptor() ([]byte, []int) {
	return file_fenixClientTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{2}
}

func (x *MerklePathsMessage) GetMerklePath() []string {
	if x != nil {
		return x.MerklePath
	}
	return nil
}

func (x *MerklePathsMessage) GetProtoFileVersionUsedByCaller() CurrentFenixClientTestDataProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByCaller
	}
	return CurrentFenixClientTestDataProtoFileVersionEnum_VERSION_0_9
}

var File_fenixClientTestDataSyncServerGrpcApi_proto protoreflect.FileDescriptor

var file_fenixClientTestDataSyncServerGrpcApi_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x22, 0xab, 0x01, 0x0a, 0x0e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x98, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x22, 0x9d, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0xcf, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x98, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64,
	0x42, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e,
	0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x2a, 0x57, 0x0a, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e,
	0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x0b, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x30, 0x5f, 0x39, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x31, 0x30, 0x10, 0x01, 0x2a, 0x56, 0x0a, 0x0e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x22, 0x0a, 0x1e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x32, 0xde, 0x09, 0x0a, 0x1f, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x47, 0x72, 0x70, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x1f, 0x41, 0x72, 0x65, 0x46,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x34, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x1a, 0x35, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0b, 0x41, 0x72,
	0x65, 0x59, 0x6f, 0x75, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x34, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a,
	0x35, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x34, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0x35, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7f, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0x35, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x34, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0x35, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x34, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0x35, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b,
	0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84,
	0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x34, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0x35, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x34, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x1a, 0x35, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a,
	0x10, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77,
	0x73, 0x12, 0x38, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x35, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fenixClientTestDataSyncServerGrpcApi_proto_rawDescOnce sync.Once
	file_fenixClientTestDataSyncServerGrpcApi_proto_rawDescData = file_fenixClientTestDataSyncServerGrpcApi_proto_rawDesc
)

func file_fenixClientTestDataSyncServerGrpcApi_proto_rawDescGZIP() []byte {
	file_fenixClientTestDataSyncServerGrpcApi_proto_rawDescOnce.Do(func() {
		file_fenixClientTestDataSyncServerGrpcApi_proto_rawDescData = protoimpl.X.CompressGZIP(file_fenixClientTestDataSyncServerGrpcApi_proto_rawDescData)
	})
	return file_fenixClientTestDataSyncServerGrpcApi_proto_rawDescData
}

var file_fenixClientTestDataSyncServerGrpcApi_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_fenixClientTestDataSyncServerGrpcApi_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_fenixClientTestDataSyncServerGrpcApi_proto_goTypes = []interface{}{
	(CurrentFenixClientTestDataProtoFileVersionEnum)(0), // 0: fenixClientTestDataSyncServerGrpcApi.CurrentFenixClientTestDataProtoFileVersionEnum
	(ErrorCodesEnum)(0),        // 1: fenixClientTestDataSyncServerGrpcApi.ErrorCodesEnum
	(*EmptyParameter)(nil),     // 2: fenixClientTestDataSyncServerGrpcApi.EmptyParameter
	(*AckNackResponse)(nil),    // 3: fenixClientTestDataSyncServerGrpcApi.AckNackResponse
	(*MerklePathsMessage)(nil), // 4: fenixClientTestDataSyncServerGrpcApi.MerklePathsMessage
}
var file_fenixClientTestDataSyncServerGrpcApi_proto_depIdxs = []int32{
	0,  // 0: fenixClientTestDataSyncServerGrpcApi.EmptyParameter.ProtoFileVersionUsedByClient:type_name -> fenixClientTestDataSyncServerGrpcApi.CurrentFenixClientTestDataProtoFileVersionEnum
	1,  // 1: fenixClientTestDataSyncServerGrpcApi.AckNackResponse.ErrorCodes:type_name -> fenixClientTestDataSyncServerGrpcApi.ErrorCodesEnum
	0,  // 2: fenixClientTestDataSyncServerGrpcApi.MerklePathsMessage.ProtoFileVersionUsedByCaller:type_name -> fenixClientTestDataSyncServerGrpcApi.CurrentFenixClientTestDataProtoFileVersionEnum
	2,  // 3: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.AreFenixTestDataSyncServerAlive:input_type -> fenixClientTestDataSyncServerGrpcApi.EmptyParameter
	2,  // 4: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.AreYouAlive:input_type -> fenixClientTestDataSyncServerGrpcApi.EmptyParameter
	2,  // 5: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.RegisterTestDataClient:input_type -> fenixClientTestDataSyncServerGrpcApi.EmptyParameter
	2,  // 6: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.SendMerkleHash:input_type -> fenixClientTestDataSyncServerGrpcApi.EmptyParameter
	2,  // 7: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.SendMerkleTree:input_type -> fenixClientTestDataSyncServerGrpcApi.EmptyParameter
	2,  // 8: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.SendTestDataHeaderHash:input_type -> fenixClientTestDataSyncServerGrpcApi.EmptyParameter
	2,  // 9: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.SendTestDataHeaders:input_type -> fenixClientTestDataSyncServerGrpcApi.EmptyParameter
	2,  // 10: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.SendAllTestDataRows:input_type -> fenixClientTestDataSyncServerGrpcApi.EmptyParameter
	4,  // 11: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.SendTestDataRows:input_type -> fenixClientTestDataSyncServerGrpcApi.MerklePathsMessage
	3,  // 12: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.AreFenixTestDataSyncServerAlive:output_type -> fenixClientTestDataSyncServerGrpcApi.AckNackResponse
	3,  // 13: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.AreYouAlive:output_type -> fenixClientTestDataSyncServerGrpcApi.AckNackResponse
	3,  // 14: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.RegisterTestDataClient:output_type -> fenixClientTestDataSyncServerGrpcApi.AckNackResponse
	3,  // 15: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.SendMerkleHash:output_type -> fenixClientTestDataSyncServerGrpcApi.AckNackResponse
	3,  // 16: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.SendMerkleTree:output_type -> fenixClientTestDataSyncServerGrpcApi.AckNackResponse
	3,  // 17: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.SendTestDataHeaderHash:output_type -> fenixClientTestDataSyncServerGrpcApi.AckNackResponse
	3,  // 18: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.SendTestDataHeaders:output_type -> fenixClientTestDataSyncServerGrpcApi.AckNackResponse
	3,  // 19: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.SendAllTestDataRows:output_type -> fenixClientTestDataSyncServerGrpcApi.AckNackResponse
	3,  // 20: fenixClientTestDataSyncServerGrpcApi.FenixClientTestDataGrpcServices.SendTestDataRows:output_type -> fenixClientTestDataSyncServerGrpcApi.AckNackResponse
	12, // [12:21] is the sub-list for method output_type
	3,  // [3:12] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_fenixClientTestDataSyncServerGrpcApi_proto_init() }
func file_fenixClientTestDataSyncServerGrpcApi_proto_init() {
	if File_fenixClientTestDataSyncServerGrpcApi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fenixClientTestDataSyncServerGrpcApi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixClientTestDataSyncServerGrpcApi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckNackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixClientTestDataSyncServerGrpcApi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerklePathsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fenixClientTestDataSyncServerGrpcApi_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fenixClientTestDataSyncServerGrpcApi_proto_goTypes,
		DependencyIndexes: file_fenixClientTestDataSyncServerGrpcApi_proto_depIdxs,
		EnumInfos:         file_fenixClientTestDataSyncServerGrpcApi_proto_enumTypes,
		MessageInfos:      file_fenixClientTestDataSyncServerGrpcApi_proto_msgTypes,
	}.Build()
	File_fenixClientTestDataSyncServerGrpcApi_proto = out.File
	file_fenixClientTestDataSyncServerGrpcApi_proto_rawDesc = nil
	file_fenixClientTestDataSyncServerGrpcApi_proto_goTypes = nil
	file_fenixClientTestDataSyncServerGrpcApi_proto_depIdxs = nil
}
