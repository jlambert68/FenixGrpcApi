syntax = "proto3";
package fenixTestCaseBuilderServerGrpcApi;
option go_package = "./go_grpc_api";


import "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_AvailableMessages.proto";
import "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums.proto";
import "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_BondingMessages.proto";
import "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_TestCaseMessages.proto";
import "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages.proto";
import "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_TestInstructionContainerMessages.proto";
import "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers.proto";
import "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_TemplateRepositoryConnectionParameters.proto";
import "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_TestDataMessages.proto";
import "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_SupportedTestCaseMetaData.proto";

// ****************************************************************************************************
// Fenix TestCase-builder server service definition. (Will support Test Suite building in feature, and will then be renamed)

service FenixTestCaseBuilderServerGrpcServices {

  // ************************ Admin ************************

  //Anyone can check if Fenix TestCase Builder server is alive with this service
  rpc AreYouAlive (EmptyParameter) returns (AckNackResponse) {
  }


  // ************************ Data Used to build Available structure, which is what the user can chose from ************************

  // *** Get data from DB ***

  // The TestCase Builder asks for all TestInstructions and Pre-defined TestInstructionContainer that the user can add to a TestCase
  rpc ListAllAvailableTestInstructionsAndTestInstructionContainers (UserIdentificationMessage) returns (AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) {
  }

  // The TestCase Builder asks for which TestInstructions and Pre-defined TestInstructionContainer that the user has pinned in the GUI
  rpc ListAllAvailablePinnedTestInstructionsAndTestInstructionContainers (UserIdentificationMessage) returns (AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) {
  }

  // The TestCase Builder asks for all Bonds-elements that can be used in the TestCase-model
  rpc ListAllAvailableBonds (UserIdentificationMessage) returns (ImmatureBondsMessage) {
  }

  // The TestCase Builder asks for all TestInstructionAttributes for all  attributes
  //rpc ListAllImmatureTestInstructionAttributes (UserIdentificationMessage) returns (ImmatureTestInstructionAttributesMessage) {
  //}

  // The TestCase Builder asks for a list of all url:s to repositories where templates are stored
  rpc ListAllRepositoryApiUrls(UserIdentificationMessage)  returns (ListAllRepositoryApiUrlsResponseMessage) {
  }

  // The TestCase Builder asks for a list of all url:s to repositories where templates are stored
  rpc ListAllTestDataForTestDataAreas(UserIdentificationMessage)  returns (ListAllTestDataForTestDataAreasResponseMessage) {
  }

  // The TestCase Builder asks for a list of all TestCaseMetaData and TestSuiteMetaData that the user can use for different Domains
  rpc ListTestCaseMetaData(UserIdentificationMessage)  returns (ListTestCaseAndTestSuiteMetaDataResponseMessage) {
  }


  // *** Send data to DB ***

  // The TestCase Builder sends all TestInstructions and Pre-defined TestInstructionContainer that the user has pinned in the GUI by the user
  rpc SaveAllPinnedTestInstructionsAndTestInstructionContainers (SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage) returns (AckNackResponse) {
  }

  // ************************************************  TestCase Builder ************************************************

  // *** Get data from DB ***

  // The TestCase Builder asks for a list of TestCase, with some basic information. Messages will be streamed in chunks of e.g. 100 TestCases per chunk
  rpc ListAllTestCases(ListTestCasesRequestMessage) returns (stream ListTestCasesResponseMessage) {
  }

  // The TestCase Builder asks for one complete TestCase
  rpc GetDetailedTestCase(GetTestCaseRequestMessage) returns (GetDetailedTestCaseResponse) {
  }

  // List all TestInstructions in the TestCase
  rpc ListAllTestCaseTestInstructions(ListAllTestInstructionsForSpecificTestCaseRequestMessage) returns (MatureTestInstructionsMessage) {
  }

  // List all TestInstructionContainers in the TestCase
  rpc ListAllTestCaseTestInstructionContainers(ListAllTestInstructionContainersForSpecificTestCaseRequestMessage) returns (MatureTestInstructionContainersMessage) {
  }

  // List TestCases that the user can edit
  rpc ListTestCasesThatCanBeEdited(ListTestCasesRequestMessage) returns (ListTestCasesThatCanBeEditedResponseMessage) {
  }

  // *** Send data to server ***

  // Save full TestCase in DB
  rpc SaveFullTestCase(FullTestCaseMessage) returns (AckNackResponse) {
  }

  // Save a Basic TestCase info in DB
  rpc SaveTestCase(TestCaseBasicInformationMessage) returns (AckNackResponse) {
  }

  // Save all TestInstructions from the TestCase
  rpc SaveAllTestCaseTestInstructions(SaveAllTestInstructionsForSpecificTestCaseRequestMessage) returns (AckNackResponse) {
  }

  // Save all TestInstructionContainers from the TestCase
  rpc SaveAllTestCaseTestInstructionContainers(SaveAllTestInstructionContainersForSpecificTestCaseRequestMessage) returns (AckNackResponse) {
  }

  // *** Check if TestCases are updated by comparing TestCase-hash ***
  rpc GetTestCasesHashes(TestCasesHashRequest) returns (TestCasesHashResponse) {
  }

  // *** TesterGui send Delete-command that updates database that TestCase will be delete per a certain date ***
  rpc DeleteTestCaseAtThisDate(DeleteTestCaseAtThisDateRequest) returns (AckNackResponse) {
  }



}


// Services exposed towards Worker
service FenixTestCaseBuilderServerGrpcWorkerServices {

  // Connector publish supported TestInstructions, TestInstructionContainers and allowed Users
  rpc PublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers (SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) returns (AckNackResponse) {
  }

  // Connector publish Template Repository Connection Parameters
  rpc ConnectorPublishTemplateRepositoryConnectionParameters (AllTemplateRepositoryConnectionParameters) returns (AckNackResponse) {
  }

  // Connector Publish TestData From a Simple TestData-file for one TestData-area
  rpc ConnectorPublishTestDataFromSimpleTestDataAreaFile (TestDataFromSimpleTestDataAreaFileMessage) returns (AckNackResponse) {
  }

  // Connector Publish Support MetaData for the Domain
  rpc ConnectorPublishSupportedMetaData (SupportedTestCaseAndTestSuiteMetaData) returns (AckNackResponse) {
  }

  // Worker ask TestCaseBuilderServer for a Message to Sign to be able to prove identity
  rpc GetMessageToSignToProveCallerIdentity (EmptyParameter) returns (GetMessageToSignToProveCallerIdentityResponse) {
  }

}

