syntax = "proto3";
package fenixTestCaseBuilderServerGrpcApi;
option go_package ="./go_grpc_api";
import "google/protobuf/timestamp.proto";
import "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_AvailableMessages.proto";
import "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums.proto";



// ****************************************************************************************************
// Fenix TestCase-builder server service definition. (Will support Test Suite building in feature, and will then be renamed)

service FenixTestCaseBuilderServerGrpcServices {

    // Admin

    //Anyone can check if Fenix TestCase Builder server is alive with this service
    rpc AreYouAlive (EmptyParameter) returns (AckNackResponse) {
    }


    // ************************ Available for user to use in TestCase ************************

    // *** Get data from DB ***

    // The TestCase Builder asks for all TestInstructions and Pre-defined TestInstructionContainer that the user can add to a TestCase
    rpc GetAvailableTestInstructionsAndTestContainers (UserIdentificationMessage) returns (AvailableTestInstructionsAndPreCreatedTestContainersResponseMessage) {
    }

    // The TestCase Builder asks for which TestInstructions and Pre-defined TestInstructionContainer that the user has pinned in the GUI
    rpc GetAvailablePinnedTestInstructionsAndTestContainers (UserIdentificationMessage) returns (AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) {
    }

    // *** Send data to DB ***

    // The TestCase Builder sends all TestInstructions and Pre-defined TestInstructionContainer that the user has pinned in the GUI
    rpc SaveAvailablePinnedTestInstructionsAndTestContainers (AvailableSavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage) returns (AckNackResponse) {
    }

    // ************************ InUse in TestCase ************************

    // *** Get data from DB ***

    // The TestCase Builder asks for a list of TestCase, with some basic information. Messages will be streamed in chunks of e.g. 100 TestCases per chunk
    rpc GetInUseListTestCases(InUseListTestCasesRequestMessage) returns (stream InUseListTestCasesResponseMessage) {
    }

    // The TestCase Builder asks for one complete TestCase
    rpc GetInUseDetailedTestCase(InUseGetDetailedTestCaseRequestMessage) returns (InUseDetailedTestCaseResponseMessage) {
    }

    // The TestCase Builder asks for DropZones. A DropZone is collection of pre-set attribute values
    rpc GetInUseDropZonesForTestInstruction (InUseDropZoneListMessage) returns (DetailedDropZonesMessages) {
    }

    // The TestCase Builder asks for Attributes that belongs to a list of 'new' TestInstructions
    rpc GetAttributesForNewTestInstructionInTestCase (NewTestInstructionsInTestCaseListMessage) returns (AttributesForNewTestInstructionsMessages) {
    }

    // The TestCase Builder asks for Attributes that belongs to 'existing' TestInstructions in a specific TestCase
    rpc GetAttributesForExistingTestInstructionInTestCase (ExistingTestInstructionsInTestCaseListMessage) returns (AttributesForExistingTestInstructionsMessages) {
    }





    // *** Send data to server ***

    // * Available for user to use in TestCase *



    // * Used in a TestCase *

    // The TestCase Builder send for all TestInstructions and TestInstructionContainer that is in a specific TestCase
    rpc SaveTestInstructionsAndTestContainersFromTestCase (TestInstructionsAndTestContainersInTestCaseToBeSavedMessage) returns (AckNackResponse) {
    }



}






// ****************************************************************************************************
// TestInstructionAttributeMessages

// Message holding one Pinned TestInstructionContainer
message AttributesForNewTestInstructionMessages {
    repeated TestInstructionAttribute TestInstructionAttributes = 1; // A list of all TestInstructionAttributes that belongs to one TestInstruction
    AckNackResponse ackNackResponse = 2; // Hold all error messages, if there are any. Message also gives if everything was OK or not
}


// A specific Attribute for a Test Instruction
message TestInstructionAttribute {
    string TestInstructionAttributeGuid = 1; // The unique guid for the TestInstructionAttribute, set by plugin
    string TestInstructionAttributeName = 2; // The name of the TestInstructionAttribute
    string TestInstructionAttributeTypeGuid = 3; // The unique guid for the TestInstructionAttribute-type, set by plugin
    string TestInstructionAttributeTypeName = 4; // The name for the TestInstructionAttribute-type, set by plugin
    string TestInstructionAttributeDescription = 5; // The description of the TestInstructionAttribute
    string TestInstructionAttributeMouseOver = 6; // The mouse over text for the TestInstructionAttribute
    bool TestInstructionAttributeVisible = 7; // Should the TestInstructionAttribute be visible in attributes list in GUI or not
    bool TestInstructionAttributeEnable = 8; // Should the TestInstructionAttribute be enabled or not
    bool TestInstructionAttributeMandatory = 9; // Should the TestInstructionAttribute be mandatory or not
    bool TestInstructionAttributeVisibleInTestCaseArea = 10; // Should the TestInstructionAttribute be visible in TestInstruction at TestCase Area in GUI or not
    bool TestInstructionAttributeIsDeprecated = 11; // Indicates that this TestInstruction attribute shouldn't be used anymore
    TestInstructionAttributeTypeEnum TestInstructionAttributeType = 12; // The choosen Enum value for what type the instruction attribute should be

    // The TestInstructionAttribute can one of the folowing type: "TextBox", "ComboBox", "FileSelector", "FunctionSelector"
    enum TestInstructionAttributeTypeEnum {
        TEXTBOX = 0; // Defines that TestInstructionAttribute of type "TextBox"
        COMBOBOX = 1; // Defines that TestInstructionAttriebute of type ComboBox
        FILESELECTOR = 2; // Defines that TestInstructionAttribute of type FileSelector
        FUNCTIONSLECTOR = 3; // Defines that TestInstructionAttribute of type FunctionSelector
    }

    TestInstructionAttributeInputTextBoxProperty inputTextBoxProperty = 13; // If the attribute is a textbox then all properties can be found in structure
    // Properties for TextBox attribute
    message TestInstructionAttributeInputTextBoxProperty {
        string TestInstructionAttributeInputTextBoxGuid = 1; // The unique guid for the TestInstructionAttributeInputTextBoxProperties, set by plugin
        string TestInstructionAttributeInputTextBoxName = 2; // The name of the TestInstructionAttributeInputTextBoxProperties
        bool TextBoxEditable = 3; // Should the the TextBox be editable or not
        string TextBoxInputMask = 4; // Input mask for the TextBox
        string TextBoxAttributeTypeGuid = 5; // The unique guid for the Type of the TextBox. Used for data manipulation
        string TextBoxAttributeTypeName = 6; // The Name for the Type of the TextBox.
        string TextBoxAttributeValue = 7; // The value for the the TextBox, used for preset values
    }

    TestInstructionAttributeInputComboBoxProperty InputComboBoxProperty = 14; // If the attribute is a combobox then all properties can be found in structure
    // Properties for ComboBox attribute
    message TestInstructionAttributeInputComboBoxProperty {
        string TestInstructionAttributeComboBoxGuid = 1; // The unique guid for the TestInstructionAttributeComboBoxProperties, set by plugin
        string TestInstructionAttributeComboBoxName = 2; // The name of the TestInstructionAttributeComboBoxProperties
        bool ComboBoxEditable = 3; // Should the the ComboBox be editable or not
        string ComboBoxInputMask = 4; // Input mask for the ComboBox
        string ComboBoxAttributeTypeGuid = 5; // The unique guid for the Type of the ComboBox Used for data manipulation
        string ComboBoxAttributeTypeName = 6; // The Name for the Type of the ComboBox
        string ComboBoxAttributeValueGuid = 7; // The guid of the value for the the ComboBox, used for preset values
        string ComboBoxAttributeValue = 8; // The value for the the ComboBox, used for preset values
    }

    TestInstructionAttributeInputFileSelectorProperty InputFileSelectorProperty = 15; // If the attribute is a combobox then all properties can be found in structure
    // Properties for FileSelector attribute
    message TestInstructionAttributeInputFileSelectorProperty {
        string TestInstructionAttributeFileSelectorGuid = 1; // The unique guid for the TestInstructionAttributeFileSelectorProperties, set by plugin
        string TestInstructionAttributeFileSelectorName = 2; // The name of the TestInstructionAttributeFileSelectorProperties
    }




    //TODO Create Attribute property for functions
}




