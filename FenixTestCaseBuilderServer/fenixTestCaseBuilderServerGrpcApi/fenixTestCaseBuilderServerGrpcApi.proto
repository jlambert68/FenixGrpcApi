syntax = "proto3";
package fenixTestCaseBuilderServerGrpcApi;
option go_package ="./go_grpc_api";
import "google/protobuf/timestamp.proto";
import "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_AvailableMessages.proto";
import "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums.proto";



// ****************************************************************************************************
// Fenix TestCase-builder server service definition. (Will support Test Suite building in feature, and will then be renamed)

service FenixTestCaseBuilderServerGrpcServices {

    // Admin

    //Anyone can check if Fenix TestCase Builder server is alive with this service
    rpc AreYouAlive (EmptyParameter) returns (AckNackResponse) {
    }


    // ************************ Available for user to use in TestCase ************************

    // *** Get data from DB ***

    // The TestCase Builder asks for all TestInstructions and Pre-defined TestInstructionContainer that the user can add to a TestCase
    rpc GetAvailableTestInstructionsAndTestContainers (UserIdentificationMessage) returns (AvailableTestInstructionsAndPreCreatedTestContainersResponseMessage) {
    }

    // The TestCase Builder asks for which TestInstructions and Pre-defined TestInstructionContainer that the user has pinned in the GUI
    rpc GetAvailablePinnedTestInstructionsAndTestContainers (UserIdentificationMessage) returns (AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) {
    }

    // *** Send data to DB ***

    // The TestCase Builder sends all TestInstructions and Pre-defined TestInstructionContainer that the user has pinned in the GUI
    rpc SaveAvailablePinnedTestInstructionsAndTestContainers (AvailableSavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage) returns (AckNackResponse) {
    }

    // ************************ InUse in TestCase ************************

    // *** Get data from DB ***

    // The TestCase Builder asks for a list of TestCase, with some basic information. Messages will be streamed in chunks of e.g. 100 TestCases per chunk
    rpc GetInUseListTestCases(InUseListTestCasesRequestMessage) returns (stream InUseListTestCasesResponseMessage) {
    }

    // The TestCase Builder asks for one complete TestCase
    rpc GetInUseDetailedTestCase(InUseGetDetailedTestCaseRequestMessage) returns (InUseDetailedTestCaseResponseMessage) {
    }

    // The TestCase Builder asks for DropZones. A DropZone is collection of pre-set attribute values
    rpc GetInUseDropZonesForTestInstruction (InUseDropZoneListMessage) returns (DetailedDropZonesMessages) {
    }

    // The TestCase Builder asks for Attributes that belongs to a list of 'new' TestInstructions
    rpc GetAttributesForNewTestInstructionInTestCase (NewTestInstructionsInTestCaseListMessage) returns (AttributesForNewTestInstructionsMessages) {
    }

    // The TestCase Builder asks for Attributes that belongs to 'existing' TestInstructions in a specific TestCase
    rpc GetAttributesForExistingTestInstructionInTestCase (ExistingTestInstructionsInTestCaseListMessage) returns (AttributesForExistingTestInstructionsMessages) {
    }





    // *** Send data to server ***

    // * Available for user to use in TestCase *



    // * Used in a TestCase *

    // The TestCase Builder send for all TestInstructions and TestInstructionContainer that is in a specific TestCase
    rpc SaveTestInstructionsAndTestContainersFromTestCase (TestInstructionsAndTestContainersInTestCaseToBeSavedMessage) returns (AckNackResponse) {
    }



}






// ****************************************************************************************************
// TestInstructionAttributeMessages

// Message holding one Pinned TestInstructionContainer
message AttributesForNewTestInstructionMessages {
    repeated TestInstructionAttribute TestInstructionAttributes = 1; // A list of all TestInstructionAttributes that belongs to one TestInstruction
    AckNackResponse ackNackResponse = 2; // Hold all error messages, if there are any. Message also gives if everything was OK or not
}







