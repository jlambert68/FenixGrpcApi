// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages.proto

package go_grpc_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message holding Groups and their TestDataPoints for TestCase
type UsersChosenTestDataForTestCaseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChosenTestDataPointsPerGroupMap     map[string]*TestDataPointNameMapMessage `protobuf:"bytes,1,rep,name=ChosenTestDataPointsPerGroupMap,proto3" json:"ChosenTestDataPointsPerGroupMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // The 'Map[TestDataGroupName]TestDataPointNameMapMessage' is map holding maps with TestDataPoints
	UsersSelectedTestDataPointRow       *UsersSelectedTestDataPointRowMessage   `protobuf:"bytes,2,opt,name=UsersSelectedTestDataPointRow,proto3" json:"UsersSelectedTestDataPointRow,omitempty"`                                                                                             // The Selected TestData by the user for the TestCase to/from TesterGui
	HashOfThisMessageWithEmptyHashField string                                  `protobuf:"bytes,3,opt,name=HashOfThisMessageWithEmptyHashField,proto3" json:"HashOfThisMessageWithEmptyHashField,omitempty"`                                                                                 // The hash of this message but with hash-field set to empty string.
}

func (x *UsersChosenTestDataForTestCaseMessage) Reset() {
	*x = UsersChosenTestDataForTestCaseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersChosenTestDataForTestCaseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersChosenTestDataForTestCaseMessage) ProtoMessage() {}

func (x *UsersChosenTestDataForTestCaseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersChosenTestDataForTestCaseMessage.ProtoReflect.Descriptor instead.
func (*UsersChosenTestDataForTestCaseMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDescGZIP(), []int{0}
}

func (x *UsersChosenTestDataForTestCaseMessage) GetChosenTestDataPointsPerGroupMap() map[string]*TestDataPointNameMapMessage {
	if x != nil {
		return x.ChosenTestDataPointsPerGroupMap
	}
	return nil
}

func (x *UsersChosenTestDataForTestCaseMessage) GetUsersSelectedTestDataPointRow() *UsersSelectedTestDataPointRowMessage {
	if x != nil {
		return x.UsersSelectedTestDataPointRow
	}
	return nil
}

func (x *UsersChosenTestDataForTestCaseMessage) GetHashOfThisMessageWithEmptyHashField() string {
	if x != nil {
		return x.HashOfThisMessageWithEmptyHashField
	}
	return ""
}

// Message holding Groups and their TestDataPoints for TestStuie
type UsersChosenTestDataForTestSuiteMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChosenTestDataPointsPerGroupMap     map[string]*TestDataPointNameMapMessage `protobuf:"bytes,1,rep,name=ChosenTestDataPointsPerGroupMap,proto3" json:"ChosenTestDataPointsPerGroupMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // The 'Map[TestDataGroupName]TestDataPointNameMapMessage' is map holding maps with TestDataPoints
	UsersSelectedTestDataPointRow       *UsersSelectedTestDataPointRowMessage   `protobuf:"bytes,2,opt,name=UsersSelectedTestDataPointRow,proto3" json:"UsersSelectedTestDataPointRow,omitempty"`                                                                                             // The Selected TestData by the user for the TestCase to/from TesterGui
	HashOfThisMessageWithEmptyHashField string                                  `protobuf:"bytes,3,opt,name=HashOfThisMessageWithEmptyHashField,proto3" json:"HashOfThisMessageWithEmptyHashField,omitempty"`                                                                                 // The hash of this message but with hash-field set to empty string.
}

func (x *UsersChosenTestDataForTestSuiteMessage) Reset() {
	*x = UsersChosenTestDataForTestSuiteMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersChosenTestDataForTestSuiteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersChosenTestDataForTestSuiteMessage) ProtoMessage() {}

func (x *UsersChosenTestDataForTestSuiteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersChosenTestDataForTestSuiteMessage.ProtoReflect.Descriptor instead.
func (*UsersChosenTestDataForTestSuiteMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDescGZIP(), []int{1}
}

func (x *UsersChosenTestDataForTestSuiteMessage) GetChosenTestDataPointsPerGroupMap() map[string]*TestDataPointNameMapMessage {
	if x != nil {
		return x.ChosenTestDataPointsPerGroupMap
	}
	return nil
}

func (x *UsersChosenTestDataForTestSuiteMessage) GetUsersSelectedTestDataPointRow() *UsersSelectedTestDataPointRowMessage {
	if x != nil {
		return x.UsersSelectedTestDataPointRow
	}
	return nil
}

func (x *UsersChosenTestDataForTestSuiteMessage) GetHashOfThisMessageWithEmptyHashField() string {
	if x != nil {
		return x.HashOfThisMessageWithEmptyHashField
	}
	return ""
}

// Message holding one TestDataPoint and indirect its TestDataRows
type TestDataPointNameMapMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChosenTestDataRowsPerTestDataPointMap map[string]*TestDataRowsMessage `protobuf:"bytes,1,rep,name=ChosenTestDataRowsPerTestDataPointMap,proto3" json:"ChosenTestDataRowsPerTestDataPointMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // The 'Map[TestDataPointName]TestDataRowsMessage' is map holding TestDataRows for a TestDataPoint
}

func (x *TestDataPointNameMapMessage) Reset() {
	*x = TestDataPointNameMapMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataPointNameMapMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataPointNameMapMessage) ProtoMessage() {}

func (x *TestDataPointNameMapMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataPointNameMapMessage.ProtoReflect.Descriptor instead.
func (*TestDataPointNameMapMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDescGZIP(), []int{2}
}

func (x *TestDataPointNameMapMessage) GetChosenTestDataRowsPerTestDataPointMap() map[string]*TestDataRowsMessage {
	if x != nil {
		return x.ChosenTestDataRowsPerTestDataPointMap
	}
	return nil
}

// Message holding all TestDataRows for one TestDataPoint
type TestDataRowsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataRows []*TestDataRowMessage `protobuf:"bytes,1,rep,name=TestDataRows,proto3" json:"TestDataRows,omitempty"` // All TestDataRows for one TestDataPoints
}

func (x *TestDataRowsMessage) Reset() {
	*x = TestDataRowsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataRowsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataRowsMessage) ProtoMessage() {}

func (x *TestDataRowsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataRowsMessage.ProtoReflect.Descriptor instead.
func (*TestDataRowsMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDescGZIP(), []int{3}
}

func (x *TestDataRowsMessage) GetTestDataRows() []*TestDataRowMessage {
	if x != nil {
		return x.TestDataRows
	}
	return nil
}

// Message holding one TestDataRow and all data needed
type TestDataRowMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataDomainUuid              string                                             `protobuf:"bytes,1,opt,name=TestDataDomainUuid,proto3" json:"TestDataDomainUuid,omitempty"`                                                                                                                   // The DomainUuid for the TestDataRow
	TestDataDomainName              string                                             `protobuf:"bytes,2,opt,name=TestDataDomainName,proto3" json:"TestDataDomainName,omitempty"`                                                                                                                   // The DomainName for the TestDataRow
	TestDataAreaUuid                string                                             `protobuf:"bytes,3,opt,name=TestDataAreaUuid,proto3" json:"TestDataAreaUuid,omitempty"`                                                                                                                       // The TestDataArea, Uuid, for the Domain
	TestDataAreaName                string                                             `protobuf:"bytes,4,opt,name=TestDataAreaName,proto3" json:"TestDataAreaName,omitempty"`                                                                                                                       //  The TestDataArea, Name, for the Domain
	TestDataPointName               string                                             `protobuf:"bytes,5,opt,name=TestDataPointName,proto3" json:"TestDataPointName,omitempty"`                                                                                                                     // The name for the TestDataRow. It create using filter parameters for that row, e.g. 'Sub Custody/Main TestData Area/SEK/AccTest/SE/CRDT/EU/Euroclear/Other bank/NOK/EUR/SEK'
	TestDataPointRowValueSummaryMap map[string]*TestDataPointRowValueSummaryMapMessage `protobuf:"bytes,6,rep,name=TestDataPointRowValueSummaryMap,proto3" json:"TestDataPointRowValueSummaryMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // The Map['TestDataPointRowUuid']TestDataPointRowValueSummaryMapMessage
}

func (x *TestDataRowMessage) Reset() {
	*x = TestDataRowMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataRowMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataRowMessage) ProtoMessage() {}

func (x *TestDataRowMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataRowMessage.ProtoReflect.Descriptor instead.
func (*TestDataRowMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDescGZIP(), []int{4}
}

func (x *TestDataRowMessage) GetTestDataDomainUuid() string {
	if x != nil {
		return x.TestDataDomainUuid
	}
	return ""
}

func (x *TestDataRowMessage) GetTestDataDomainName() string {
	if x != nil {
		return x.TestDataDomainName
	}
	return ""
}

func (x *TestDataRowMessage) GetTestDataAreaUuid() string {
	if x != nil {
		return x.TestDataAreaUuid
	}
	return ""
}

func (x *TestDataRowMessage) GetTestDataAreaName() string {
	if x != nil {
		return x.TestDataAreaName
	}
	return ""
}

func (x *TestDataRowMessage) GetTestDataPointName() string {
	if x != nil {
		return x.TestDataPointName
	}
	return ""
}

func (x *TestDataRowMessage) GetTestDataPointRowValueSummaryMap() map[string]*TestDataPointRowValueSummaryMapMessage {
	if x != nil {
		return x.TestDataPointRowValueSummaryMap
	}
	return nil
}

// Message holding
type TestDataPointRowValueSummaryMapMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataPointRowUuid          string `protobuf:"bytes,1,opt,name=TestDataPointRowUuid,proto3" json:"TestDataPointRowUuid,omitempty"`                   // The TestDataRows Uuid
	TestDataPointRowValuesSummary string `protobuf:"bytes,2,opt,name=TestDataPointRowValuesSummary,proto3" json:"TestDataPointRowValuesSummary,omitempty"` // The summary of the data, used for filtering, e.g. '613/3010001/5010001/SEK/AccTest/SE/CRDT/MGTCBEBEXXX/EU/Euroclear/Other bank/C/1182633/52018108263/NOK/NO9900027190/RÄNTEBÄRANDE/EUR/SEK/PRINCIPAL/NULL/No/6752528,843/Sub Custody/Main TestData Area/SEK/AccTest/SE/CRDT/EU/Euroclear/Other bank/NOK/EUR/SEK/655345d3-664d-521b-9cd7-50ba40689ff1'
}

func (x *TestDataPointRowValueSummaryMapMessage) Reset() {
	*x = TestDataPointRowValueSummaryMapMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataPointRowValueSummaryMapMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataPointRowValueSummaryMapMessage) ProtoMessage() {}

func (x *TestDataPointRowValueSummaryMapMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataPointRowValueSummaryMapMessage.ProtoReflect.Descriptor instead.
func (*TestDataPointRowValueSummaryMapMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDescGZIP(), []int{5}
}

func (x *TestDataPointRowValueSummaryMapMessage) GetTestDataPointRowUuid() string {
	if x != nil {
		return x.TestDataPointRowUuid
	}
	return ""
}

func (x *TestDataPointRowValueSummaryMapMessage) GetTestDataPointRowValuesSummary() string {
	if x != nil {
		return x.TestDataPointRowValuesSummary
	}
	return ""
}

// Message holding the Selected TestDataGroup, TestDataPoint and TestDataPointSummary
type UsersSelectedTestDataPointRowMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataGroup        string `protobuf:"bytes,1,opt,name=TestDataGroup,proto3" json:"TestDataGroup,omitempty"`               // The Selected TestData Group in the TesterGui
	TestDataPoint        string `protobuf:"bytes,2,opt,name=TestDataPoint,proto3" json:"TestDataPoint,omitempty"`               // The Selected TestDataPoint in the TesterGui
	TestDataPointSummary string `protobuf:"bytes,3,opt,name=TestDataPointSummary,proto3" json:"TestDataPointSummary,omitempty"` // The Selected TestDataPointSummary in the TesterGui
}

func (x *UsersSelectedTestDataPointRowMessage) Reset() {
	*x = UsersSelectedTestDataPointRowMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersSelectedTestDataPointRowMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersSelectedTestDataPointRowMessage) ProtoMessage() {}

func (x *UsersSelectedTestDataPointRowMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersSelectedTestDataPointRowMessage.ProtoReflect.Descriptor instead.
func (*UsersSelectedTestDataPointRowMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDescGZIP(), []int{6}
}

func (x *UsersSelectedTestDataPointRowMessage) GetTestDataGroup() string {
	if x != nil {
		return x.TestDataGroup
	}
	return ""
}

func (x *UsersSelectedTestDataPointRowMessage) GetTestDataPoint() string {
	if x != nil {
		return x.TestDataPoint
	}
	return ""
}

func (x *UsersSelectedTestDataPointRowMessage) GetTestDataPointSummary() string {
	if x != nil {
		return x.TestDataPointSummary
	}
	return ""
}

var File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto protoreflect.FileDescriptor

var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDesc = []byte{
	0x0a, 0x8b, 0x01, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x22, 0xd8, 0x04, 0x0a, 0x25, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x6f, 0x73, 0x65,
	0x6e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x1f,
	0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x1f, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x8d, 0x01, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x50, 0x0a, 0x23, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x66, 0x54,
	0x68, 0x69, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x23, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x66, 0x54, 0x68, 0x69, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x61,
	0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x92, 0x01, 0x0a, 0x24, 0x43, 0x68, 0x6f, 0x73,
	0x65, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x50, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x04, 0x0a,
	0x26, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x1f, 0x43, 0x68, 0x6f, 0x73,
	0x65, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x50, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x6e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x6f, 0x73, 0x65,
	0x6e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x75, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x6f,
	0x73, 0x65, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x1f, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x61, 0x70, 0x12, 0x8d, 0x01, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x6f, 0x77, 0x12, 0x50, 0x0a, 0x23, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x66, 0x54, 0x68, 0x69, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x23, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x66, 0x54, 0x68, 0x69, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x61, 0x73, 0x68, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x1a, 0x92, 0x01, 0x0a, 0x24, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf2, 0x02, 0x0a, 0x1b, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4d,
	0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x25, 0x43, 0x68,
	0x6f, 0x73, 0x65, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x73,
	0x50, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4d,
	0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x73, 0x50, 0x65, 0x72, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x25, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x73, 0x50, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x90, 0x01, 0x0a, 0x2a,
	0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f,
	0x77, 0x73, 0x50, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x70,
	0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x73,
	0x22, 0xc1, 0x04, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x41, 0x72, 0x65, 0x61, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x65, 0x61, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xa4, 0x01,
	0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x61,
	0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x4d, 0x61, 0x70, 0x1a, 0x9d, 0x01, 0x0a, 0x24, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x5f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4d,
	0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x26, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x6f, 0x77, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xa6, 0x01, 0x0a, 0x24, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDescOnce sync.Once
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDescData = file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDesc
)

func file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDescGZIP() []byte {
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDescOnce.Do(func() {
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDescData)
	})
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDescData
}

var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_goTypes = []interface{}{
	(*UsersChosenTestDataForTestCaseMessage)(nil),  // 0: fenixTestCaseBuilderServerGrpcApi.UsersChosenTestDataForTestCaseMessage
	(*UsersChosenTestDataForTestSuiteMessage)(nil), // 1: fenixTestCaseBuilderServerGrpcApi.UsersChosenTestDataForTestSuiteMessage
	(*TestDataPointNameMapMessage)(nil),            // 2: fenixTestCaseBuilderServerGrpcApi.TestDataPointNameMapMessage
	(*TestDataRowsMessage)(nil),                    // 3: fenixTestCaseBuilderServerGrpcApi.TestDataRowsMessage
	(*TestDataRowMessage)(nil),                     // 4: fenixTestCaseBuilderServerGrpcApi.TestDataRowMessage
	(*TestDataPointRowValueSummaryMapMessage)(nil), // 5: fenixTestCaseBuilderServerGrpcApi.TestDataPointRowValueSummaryMapMessage
	(*UsersSelectedTestDataPointRowMessage)(nil),   // 6: fenixTestCaseBuilderServerGrpcApi.UsersSelectedTestDataPointRowMessage
	nil, // 7: fenixTestCaseBuilderServerGrpcApi.UsersChosenTestDataForTestCaseMessage.ChosenTestDataPointsPerGroupMapEntry
	nil, // 8: fenixTestCaseBuilderServerGrpcApi.UsersChosenTestDataForTestSuiteMessage.ChosenTestDataPointsPerGroupMapEntry
	nil, // 9: fenixTestCaseBuilderServerGrpcApi.TestDataPointNameMapMessage.ChosenTestDataRowsPerTestDataPointMapEntry
	nil, // 10: fenixTestCaseBuilderServerGrpcApi.TestDataRowMessage.TestDataPointRowValueSummaryMapEntry
}
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_depIdxs = []int32{
	7,  // 0: fenixTestCaseBuilderServerGrpcApi.UsersChosenTestDataForTestCaseMessage.ChosenTestDataPointsPerGroupMap:type_name -> fenixTestCaseBuilderServerGrpcApi.UsersChosenTestDataForTestCaseMessage.ChosenTestDataPointsPerGroupMapEntry
	6,  // 1: fenixTestCaseBuilderServerGrpcApi.UsersChosenTestDataForTestCaseMessage.UsersSelectedTestDataPointRow:type_name -> fenixTestCaseBuilderServerGrpcApi.UsersSelectedTestDataPointRowMessage
	8,  // 2: fenixTestCaseBuilderServerGrpcApi.UsersChosenTestDataForTestSuiteMessage.ChosenTestDataPointsPerGroupMap:type_name -> fenixTestCaseBuilderServerGrpcApi.UsersChosenTestDataForTestSuiteMessage.ChosenTestDataPointsPerGroupMapEntry
	6,  // 3: fenixTestCaseBuilderServerGrpcApi.UsersChosenTestDataForTestSuiteMessage.UsersSelectedTestDataPointRow:type_name -> fenixTestCaseBuilderServerGrpcApi.UsersSelectedTestDataPointRowMessage
	9,  // 4: fenixTestCaseBuilderServerGrpcApi.TestDataPointNameMapMessage.ChosenTestDataRowsPerTestDataPointMap:type_name -> fenixTestCaseBuilderServerGrpcApi.TestDataPointNameMapMessage.ChosenTestDataRowsPerTestDataPointMapEntry
	4,  // 5: fenixTestCaseBuilderServerGrpcApi.TestDataRowsMessage.TestDataRows:type_name -> fenixTestCaseBuilderServerGrpcApi.TestDataRowMessage
	10, // 6: fenixTestCaseBuilderServerGrpcApi.TestDataRowMessage.TestDataPointRowValueSummaryMap:type_name -> fenixTestCaseBuilderServerGrpcApi.TestDataRowMessage.TestDataPointRowValueSummaryMapEntry
	2,  // 7: fenixTestCaseBuilderServerGrpcApi.UsersChosenTestDataForTestCaseMessage.ChosenTestDataPointsPerGroupMapEntry.value:type_name -> fenixTestCaseBuilderServerGrpcApi.TestDataPointNameMapMessage
	2,  // 8: fenixTestCaseBuilderServerGrpcApi.UsersChosenTestDataForTestSuiteMessage.ChosenTestDataPointsPerGroupMapEntry.value:type_name -> fenixTestCaseBuilderServerGrpcApi.TestDataPointNameMapMessage
	3,  // 9: fenixTestCaseBuilderServerGrpcApi.TestDataPointNameMapMessage.ChosenTestDataRowsPerTestDataPointMapEntry.value:type_name -> fenixTestCaseBuilderServerGrpcApi.TestDataRowsMessage
	5,  // 10: fenixTestCaseBuilderServerGrpcApi.TestDataRowMessage.TestDataPointRowValueSummaryMapEntry.value:type_name -> fenixTestCaseBuilderServerGrpcApi.TestDataPointRowValueSummaryMapMessage
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() {
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_init()
}
func file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_init() {
	if File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersChosenTestDataForTestCaseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersChosenTestDataForTestSuiteMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataPointNameMapMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataRowsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataRowMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataPointRowValueSummaryMapMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersSelectedTestDataPointRowMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_goTypes,
		DependencyIndexes: file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_depIdxs,
		MessageInfos:      file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_msgTypes,
	}.Build()
	File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto = out.File
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_rawDesc = nil
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_goTypes = nil
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestDataInTestCaseAndTestSuiteMessages_proto_depIdxs = nil
}
