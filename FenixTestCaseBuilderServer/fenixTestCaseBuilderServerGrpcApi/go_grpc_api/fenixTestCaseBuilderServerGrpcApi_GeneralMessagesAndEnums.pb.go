// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixExecutionServerGuiGrpcApi_GeneralMessagesAndEnums.proto

package go_grpc_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Used to have client and server in sync with using the same proto file version
type CurrentFenixTestCaseBuilderProtoFileVersionEnum int32

const (
	// Deprecated: Do not use.
	CurrentFenixTestCaseBuilderProtoFileVersionEnum_VERSION_0_0 CurrentFenixTestCaseBuilderProtoFileVersionEnum = 0
	// Deprecated: Do not use.
	CurrentFenixTestCaseBuilderProtoFileVersionEnum_VERSION_0_1 CurrentFenixTestCaseBuilderProtoFileVersionEnum = 1
	// Deprecated: Do not use.
	CurrentFenixTestCaseBuilderProtoFileVersionEnum_VERSION_0_2 CurrentFenixTestCaseBuilderProtoFileVersionEnum = 2
	// Deprecated: Do not use.
	CurrentFenixTestCaseBuilderProtoFileVersionEnum_VERSION_0_3 CurrentFenixTestCaseBuilderProtoFileVersionEnum = 3
	CurrentFenixTestCaseBuilderProtoFileVersionEnum_VERSION_0_4 CurrentFenixTestCaseBuilderProtoFileVersionEnum = 4 // Current version
)

// Enum value maps for CurrentFenixTestCaseBuilderProtoFileVersionEnum.
var (
	CurrentFenixTestCaseBuilderProtoFileVersionEnum_name = map[int32]string{
		0: "VERSION_0_0",
		1: "VERSION_0_1",
		2: "VERSION_0_2",
		3: "VERSION_0_3",
		4: "VERSION_0_4",
	}
	CurrentFenixTestCaseBuilderProtoFileVersionEnum_value = map[string]int32{
		"VERSION_0_0": 0,
		"VERSION_0_1": 1,
		"VERSION_0_2": 2,
		"VERSION_0_3": 3,
		"VERSION_0_4": 4,
	}
)

func (x CurrentFenixTestCaseBuilderProtoFileVersionEnum) Enum() *CurrentFenixTestCaseBuilderProtoFileVersionEnum {
	p := new(CurrentFenixTestCaseBuilderProtoFileVersionEnum)
	*p = x
	return p
}

func (x CurrentFenixTestCaseBuilderProtoFileVersionEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrentFenixTestCaseBuilderProtoFileVersionEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes[0].Descriptor()
}

func (CurrentFenixTestCaseBuilderProtoFileVersionEnum) Type() protoreflect.EnumType {
	return &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes[0]
}

func (x CurrentFenixTestCaseBuilderProtoFileVersionEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrentFenixTestCaseBuilderProtoFileVersionEnum.Descriptor instead.
func (CurrentFenixTestCaseBuilderProtoFileVersionEnum) EnumDescriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescGZIP(), []int{0}
}

// Error codes - for now a test
type ErrorCodesEnum int32

const (
	ErrorCodesEnum_OK                             ErrorCodesEnum = 0
	ErrorCodesEnum_ERROR_UNKNOWN_CALLER           ErrorCodesEnum = 1
	ErrorCodesEnum_ERROR_WRONG_PROTO_FILE_VERSION ErrorCodesEnum = 2
	ErrorCodesEnum_ERROR_UNSPECIFIED              ErrorCodesEnum = 3
	ErrorCodesEnum_ERROR_DATABASE_PROBLEM         ErrorCodesEnum = 4
)

// Enum value maps for ErrorCodesEnum.
var (
	ErrorCodesEnum_name = map[int32]string{
		0: "OK",
		1: "ERROR_UNKNOWN_CALLER",
		2: "ERROR_WRONG_PROTO_FILE_VERSION",
		3: "ERROR_UNSPECIFIED",
		4: "ERROR_DATABASE_PROBLEM",
	}
	ErrorCodesEnum_value = map[string]int32{
		"OK":                             0,
		"ERROR_UNKNOWN_CALLER":           1,
		"ERROR_WRONG_PROTO_FILE_VERSION": 2,
		"ERROR_UNSPECIFIED":              3,
		"ERROR_DATABASE_PROBLEM":         4,
	}
)

func (x ErrorCodesEnum) Enum() *ErrorCodesEnum {
	p := new(ErrorCodesEnum)
	*p = x
	return p
}

func (x ErrorCodesEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCodesEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes[1].Descriptor()
}

func (ErrorCodesEnum) Type() protoreflect.EnumType {
	return &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes[1]
}

func (x ErrorCodesEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCodesEnum.Descriptor instead.
func (ErrorCodesEnum) EnumDescriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescGZIP(), []int{1}
}

// How a TestInstructionContainer is processed
type TestInstructionContainerExecutionTypeEnum int32

const (
	TestInstructionContainerExecutionTypeEnum_PARALLELLED_PROCESSED TestInstructionContainerExecutionTypeEnum = 0 // Children in container is parallelled processed
	TestInstructionContainerExecutionTypeEnum_SERIAL_PROCESSED      TestInstructionContainerExecutionTypeEnum = 1 // Children in container is serial processed
)

// Enum value maps for TestInstructionContainerExecutionTypeEnum.
var (
	TestInstructionContainerExecutionTypeEnum_name = map[int32]string{
		0: "PARALLELLED_PROCESSED",
		1: "SERIAL_PROCESSED",
	}
	TestInstructionContainerExecutionTypeEnum_value = map[string]int32{
		"PARALLELLED_PROCESSED": 0,
		"SERIAL_PROCESSED":      1,
	}
)

func (x TestInstructionContainerExecutionTypeEnum) Enum() *TestInstructionContainerExecutionTypeEnum {
	p := new(TestInstructionContainerExecutionTypeEnum)
	*p = x
	return p
}

func (x TestInstructionContainerExecutionTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestInstructionContainerExecutionTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes[2].Descriptor()
}

func (TestInstructionContainerExecutionTypeEnum) Type() protoreflect.EnumType {
	return &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes[2]
}

func (x TestInstructionContainerExecutionTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestInstructionContainerExecutionTypeEnum.Descriptor instead.
func (TestInstructionContainerExecutionTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescGZIP(), []int{2}
}

// TestInstructionContainer Child Type
type TestInstructionContainerChildTypeEnum int32

const (
	TestInstructionContainerChildTypeEnum_TESTINSTRUCTION          TestInstructionContainerChildTypeEnum = 0 // Child os of type TestInstruction
	TestInstructionContainerChildTypeEnum_TESTINSTRUCTIONCONTAINER TestInstructionContainerChildTypeEnum = 1 // Child os of type TestInstructionContainer
)

// Enum value maps for TestInstructionContainerChildTypeEnum.
var (
	TestInstructionContainerChildTypeEnum_name = map[int32]string{
		0: "TESTINSTRUCTION",
		1: "TESTINSTRUCTIONCONTAINER",
	}
	TestInstructionContainerChildTypeEnum_value = map[string]int32{
		"TESTINSTRUCTION":          0,
		"TESTINSTRUCTIONCONTAINER": 1,
	}
)

func (x TestInstructionContainerChildTypeEnum) Enum() *TestInstructionContainerChildTypeEnum {
	p := new(TestInstructionContainerChildTypeEnum)
	*p = x
	return p
}

func (x TestInstructionContainerChildTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestInstructionContainerChildTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes[3].Descriptor()
}

func (TestInstructionContainerChildTypeEnum) Type() protoreflect.EnumType {
	return &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes[3]
}

func (x TestInstructionContainerChildTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestInstructionContainerChildTypeEnum.Descriptor instead.
func (TestInstructionContainerChildTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescGZIP(), []int{3}
}

// All TestCaseModel-elements
type TestCaseModelElementTypeEnum int32

const (
	TestCaseModelElementTypeEnum_B0_BOND                                      TestCaseModelElementTypeEnum = 0  // Bond with zero connection. This is the base for any TestCase: "B0"
	TestCaseModelElementTypeEnum_B1f_BOND_NONE_SWAPPABLE                      TestCaseModelElementTypeEnum = 1  // Bond with one connection. Use for starting a TestCase and is only found in pre-created TestInstructionContainers
	TestCaseModelElementTypeEnum_B1l_BOND_NONE_SWAPPABLE                      TestCaseModelElementTypeEnum = 2  // Bond with one connection. Use for ending a TestCase and is only found in pre-created TestInstructionContainers
	TestCaseModelElementTypeEnum_B10_BOND                                     TestCaseModelElementTypeEnum = 3  // Bond with zero connections which appear as an element in a new TestInstructionContainer without any other elements
	TestCaseModelElementTypeEnum_B11f_BOND                                    TestCaseModelElementTypeEnum = 4  // Bond with one connection which appear as first element inside a TestInstructionContainer
	TestCaseModelElementTypeEnum_B11l_BOND                                    TestCaseModelElementTypeEnum = 5  // Bond with one connection which appear as last element inside a TestInstructionContainer
	TestCaseModelElementTypeEnum_B12_BOND                                     TestCaseModelElementTypeEnum = 6  // Bond with two connections which connects TestInstructions or TestInstructionContainers
	TestCaseModelElementTypeEnum_B10oxo_BOND                                  TestCaseModelElementTypeEnum = 7  //Bond with zero connections. This Bond is used in Pre-created containers and is used when user swap TIC(B10*x*) into TIC(B11fx-n-B11lx).
	TestCaseModelElementTypeEnum_B10ox_BOND                                   TestCaseModelElementTypeEnum = 8  // Bond with zero connections. This Bond is used in Pre-created containers and is used when user swap TIC(B10*x) into TIC(B11fx-n-B11l).
	TestCaseModelElementTypeEnum_B10xo_BOND                                   TestCaseModelElementTypeEnum = 9  // Bond with zero connections. This Bond is used in Pre-created containers and is used when user swap TIC(B10x*) into TIC(B11f-n-B11lx).
	TestCaseModelElementTypeEnum_B11fx_BOND_NONE_SWAPPABLE                    TestCaseModelElementTypeEnum = 10 // Bond with one connection which appear as first element inside a TestInstructionContainer. This Bond is used in Pre-created containers and is used to stop a user to add new TestInstructions or TestInstructionsContainers before(first) structure.
	TestCaseModelElementTypeEnum_B11lx_BOND_NONE_SWAPPABLE                    TestCaseModelElementTypeEnum = 11 // Bond with one connection which appear as first element inside a TestInstructionContainer. This Bond is used in Pre-created containers and is used to stop a user to add new TestInstructions or TestInstructionsContainers after(last) structure.
	TestCaseModelElementTypeEnum_B12x_BOND_NONE_SWAPPABLE                     TestCaseModelElementTypeEnum = 12 // Bond with two connections which connects TestInstructions or TestInstructionContainers. This Bond is used in Pre-created containers and is used to stop a user to add new TestInstructions or TestInstructionsContainers within a pre-created container.
	TestCaseModelElementTypeEnum_TI_TESTINSTRUCTION                           TestCaseModelElementTypeEnum = 13 // TestInstruction
	TestCaseModelElementTypeEnum_TIx_TESTINSTRUCTION_NONE_REMOVABLE           TestCaseModelElementTypeEnum = 14 // A standard TestInstruction which can not be removed or swapped out by the user
	TestCaseModelElementTypeEnum_TIC_TESTINSTRUCTIONCONTAINER                 TestCaseModelElementTypeEnum = 15 // TestInstructionContainer(X), where X is any valid structure. Children in TestExecutionContainer is executed in serial mode
	TestCaseModelElementTypeEnum_TICx_TESTINSTRUCTIONCONTAINER_NONE_REMOVABLE TestCaseModelElementTypeEnum = 16 // A standard TestInstructionContainer(X), where X is any valid structure, which can not be removed or swapped out by the user. Children in TestExecutionContainer is executed in serial mode
)

// Enum value maps for TestCaseModelElementTypeEnum.
var (
	TestCaseModelElementTypeEnum_name = map[int32]string{
		0:  "B0_BOND",
		1:  "B1f_BOND_NONE_SWAPPABLE",
		2:  "B1l_BOND_NONE_SWAPPABLE",
		3:  "B10_BOND",
		4:  "B11f_BOND",
		5:  "B11l_BOND",
		6:  "B12_BOND",
		7:  "B10oxo_BOND",
		8:  "B10ox_BOND",
		9:  "B10xo_BOND",
		10: "B11fx_BOND_NONE_SWAPPABLE",
		11: "B11lx_BOND_NONE_SWAPPABLE",
		12: "B12x_BOND_NONE_SWAPPABLE",
		13: "TI_TESTINSTRUCTION",
		14: "TIx_TESTINSTRUCTION_NONE_REMOVABLE",
		15: "TIC_TESTINSTRUCTIONCONTAINER",
		16: "TICx_TESTINSTRUCTIONCONTAINER_NONE_REMOVABLE",
	}
	TestCaseModelElementTypeEnum_value = map[string]int32{
		"B0_BOND":                            0,
		"B1f_BOND_NONE_SWAPPABLE":            1,
		"B1l_BOND_NONE_SWAPPABLE":            2,
		"B10_BOND":                           3,
		"B11f_BOND":                          4,
		"B11l_BOND":                          5,
		"B12_BOND":                           6,
		"B10oxo_BOND":                        7,
		"B10ox_BOND":                         8,
		"B10xo_BOND":                         9,
		"B11fx_BOND_NONE_SWAPPABLE":          10,
		"B11lx_BOND_NONE_SWAPPABLE":          11,
		"B12x_BOND_NONE_SWAPPABLE":           12,
		"TI_TESTINSTRUCTION":                 13,
		"TIx_TESTINSTRUCTION_NONE_REMOVABLE": 14,
		"TIC_TESTINSTRUCTIONCONTAINER":       15,
		"TICx_TESTINSTRUCTIONCONTAINER_NONE_REMOVABLE": 16,
	}
)

func (x TestCaseModelElementTypeEnum) Enum() *TestCaseModelElementTypeEnum {
	p := new(TestCaseModelElementTypeEnum)
	*p = x
	return p
}

func (x TestCaseModelElementTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestCaseModelElementTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes[4].Descriptor()
}

func (TestCaseModelElementTypeEnum) Type() protoreflect.EnumType {
	return &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes[4]
}

func (x TestCaseModelElementTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestCaseModelElementTypeEnum.Descriptor instead.
func (TestCaseModelElementTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescGZIP(), []int{4}
}

// Presentation Names for above TestCaseModel-elements. When presenting then name only the part to left of "_" should presented
type TestCaseModelElementPresentationNameEnum int32

const (
	TestCaseModelElementPresentationNameEnum_B0_    TestCaseModelElementPresentationNameEnum = 0  // Presentation name for 'B0_BOND'. Only Present 'B0'
	TestCaseModelElementPresentationNameEnum_B1_01  TestCaseModelElementPresentationNameEnum = 1  // Presentation name for 'B1f_BOND_NONE_SWAPPABLE'. Only Present 'B1'
	TestCaseModelElementPresentationNameEnum_B1_02  TestCaseModelElementPresentationNameEnum = 2  // Presentation name for 'B1l_BOND_NONE_SWAPPABLE'. Only Present 'B1'
	TestCaseModelElementPresentationNameEnum_B10_   TestCaseModelElementPresentationNameEnum = 3  // Presentation name for 'B10_BOND'. Only Present 'B10'
	TestCaseModelElementPresentationNameEnum_B11_1  TestCaseModelElementPresentationNameEnum = 4  // Presentation name for 'B11f_BOND'. Only Present 'B11'
	TestCaseModelElementPresentationNameEnum_B11_2  TestCaseModelElementPresentationNameEnum = 5  // Presentation name for 'B11l_BOND'. Only Present 'B11'
	TestCaseModelElementPresentationNameEnum_B12_   TestCaseModelElementPresentationNameEnum = 6  // Presentation name for 'B12_BOND'. Only Present 'B12'
	TestCaseModelElementPresentationNameEnum_B10x_1 TestCaseModelElementPresentationNameEnum = 7  //Presentation name for 'B10oxo_BOND'. Only Present 'B10x'
	TestCaseModelElementPresentationNameEnum_B10x_2 TestCaseModelElementPresentationNameEnum = 8  // Presentation name for 'B10ox_BOND'. Only Present 'B10x'
	TestCaseModelElementPresentationNameEnum_B10x_3 TestCaseModelElementPresentationNameEnum = 9  // Presentation name for 'B10xo_BOND'. Only Present 'B10x'
	TestCaseModelElementPresentationNameEnum_B11x_1 TestCaseModelElementPresentationNameEnum = 10 // Presentation name for 'B11fx_BOND_NONE_SWAPPABLE'. Only Present 'B11x'
	TestCaseModelElementPresentationNameEnum_B11x_2 TestCaseModelElementPresentationNameEnum = 11 // Presentation name for 'B11lx_BOND_NONE_SWAPPABLE'. Only Present 'B11x'
	TestCaseModelElementPresentationNameEnum_B12x_  TestCaseModelElementPresentationNameEnum = 12 // Presentation name for 'B12x_BOND_NONE_SWAPPABLE'. Only Present 'B12x'
	TestCaseModelElementPresentationNameEnum_TI_    TestCaseModelElementPresentationNameEnum = 13 // Presentation name for 'TI_TESTINSTRUCTION'. Only Present 'TI'
	TestCaseModelElementPresentationNameEnum_TIx_   TestCaseModelElementPresentationNameEnum = 14 // Presentation name for 'TIx_TESTINSTRUCTION_NONE_REMOVABLE'. Only Present 'TIx'
	TestCaseModelElementPresentationNameEnum_TIC_   TestCaseModelElementPresentationNameEnum = 15 // Presentation name for 'TIC_TESTINSTRUCTIONCONTAINER'. Only Present 'TIC(...)'
	TestCaseModelElementPresentationNameEnum_TICx_  TestCaseModelElementPresentationNameEnum = 16 // Presentation name for 'TICx_TESTINSTRUCTIONCONTAINER_NONE_REMOVABLE'. Only Present 'TICx(...)'
)

// Enum value maps for TestCaseModelElementPresentationNameEnum.
var (
	TestCaseModelElementPresentationNameEnum_name = map[int32]string{
		0:  "B0_",
		1:  "B1_01",
		2:  "B1_02",
		3:  "B10_",
		4:  "B11_1",
		5:  "B11_2",
		6:  "B12_",
		7:  "B10x_1",
		8:  "B10x_2",
		9:  "B10x_3",
		10: "B11x_1",
		11: "B11x_2",
		12: "B12x_",
		13: "TI_",
		14: "TIx_",
		15: "TIC_",
		16: "TICx_",
	}
	TestCaseModelElementPresentationNameEnum_value = map[string]int32{
		"B0_":    0,
		"B1_01":  1,
		"B1_02":  2,
		"B10_":   3,
		"B11_1":  4,
		"B11_2":  5,
		"B12_":   6,
		"B10x_1": 7,
		"B10x_2": 8,
		"B10x_3": 9,
		"B11x_1": 10,
		"B11x_2": 11,
		"B12x_":  12,
		"TI_":    13,
		"TIx_":   14,
		"TIC_":   15,
		"TICx_":  16,
	}
)

func (x TestCaseModelElementPresentationNameEnum) Enum() *TestCaseModelElementPresentationNameEnum {
	p := new(TestCaseModelElementPresentationNameEnum)
	*p = x
	return p
}

func (x TestCaseModelElementPresentationNameEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestCaseModelElementPresentationNameEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes[5].Descriptor()
}

func (TestCaseModelElementPresentationNameEnum) Type() protoreflect.EnumType {
	return &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes[5]
}

func (x TestCaseModelElementPresentationNameEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestCaseModelElementPresentationNameEnum.Descriptor instead.
func (TestCaseModelElementPresentationNameEnum) EnumDescriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescGZIP(), []int{5}
}

// All different commands that can be used to change  TestCase-Model
type TestCaseCommandTypeEnum int32

const (
	TestCaseCommandTypeEnum_NEW_TESTCASE                             TestCaseCommandTypeEnum = 0 //NewTestCase(). Creates a new TestCase
	TestCaseCommandTypeEnum_REMOVE_ELEMENT                           TestCaseCommandTypeEnum = 1 // RemoveElement(ElementUuidToBeRemoved). Remove an element from the TestCase
	TestCaseCommandTypeEnum_SWAP_OUT_ELEMENT_FOR_NEW_ELEMENT         TestCaseCommandTypeEnum = 2 // SwapOutElementForNewElement(ElementUuidTobeSwappedOut, NewElementUuidTobeSwappedIn). Swap in a new element instead of an existing
	TestCaseCommandTypeEnum_COPY_ELEMENT                             TestCaseCommandTypeEnum = 3 // CopyElement(ElementUuid). Create a copy of an element and place it in the copy-buffer
	TestCaseCommandTypeEnum_SWAP_OUT_ELEMENT_FOR_COPY_BUFFER_ELEMENT TestCaseCommandTypeEnum = 4 // SwapOutElementForCopyBufferElement(ElementUuidTobeSwappedOut, CopyBufferElementUuidTobeSwappedIn). Swap in a copy of the element that exist in the copy buffer
	TestCaseCommandTypeEnum_CUT_ELEMENT                              TestCaseCommandTypeEnum = 5 // CopyElement(ElementUuid). Cut out an element and place in the cut buffer
	TestCaseCommandTypeEnum_SWAP_OUT_ELEMENT_FOR_CUT_BUFFER_ELEMENT  TestCaseCommandTypeEnum = 6 // SwapOutElementForCutBufferElement(ElementUuidTobeSwappedOut, CutBufferElementUuidTobeSwappedIn). Swap in the element that exist in the cut buffer
)

// Enum value maps for TestCaseCommandTypeEnum.
var (
	TestCaseCommandTypeEnum_name = map[int32]string{
		0: "NEW_TESTCASE",
		1: "REMOVE_ELEMENT",
		2: "SWAP_OUT_ELEMENT_FOR_NEW_ELEMENT",
		3: "COPY_ELEMENT",
		4: "SWAP_OUT_ELEMENT_FOR_COPY_BUFFER_ELEMENT",
		5: "CUT_ELEMENT",
		6: "SWAP_OUT_ELEMENT_FOR_CUT_BUFFER_ELEMENT",
	}
	TestCaseCommandTypeEnum_value = map[string]int32{
		"NEW_TESTCASE":                             0,
		"REMOVE_ELEMENT":                           1,
		"SWAP_OUT_ELEMENT_FOR_NEW_ELEMENT":         2,
		"COPY_ELEMENT":                             3,
		"SWAP_OUT_ELEMENT_FOR_COPY_BUFFER_ELEMENT": 4,
		"CUT_ELEMENT":                              5,
		"SWAP_OUT_ELEMENT_FOR_CUT_BUFFER_ELEMENT":  6,
	}
)

func (x TestCaseCommandTypeEnum) Enum() *TestCaseCommandTypeEnum {
	p := new(TestCaseCommandTypeEnum)
	*p = x
	return p
}

func (x TestCaseCommandTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestCaseCommandTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes[6].Descriptor()
}

func (TestCaseCommandTypeEnum) Type() protoreflect.EnumType {
	return &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes[6]
}

func (x TestCaseCommandTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestCaseCommandTypeEnum.Descriptor instead.
func (TestCaseCommandTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescGZIP(), []int{6}
}

// The TestInstructionAttribute can have one of the following types: "TextBox", "ComboBox", "FileSelector", "FunctionSelector"
type TestInstructionAttributeTypeEnum int32

const (
	TestInstructionAttributeTypeEnum_TEXTBOX           TestInstructionAttributeTypeEnum = 0 // Defines that TestInstructionAttribute of type "TextBox"
	TestInstructionAttributeTypeEnum_COMBOBOX          TestInstructionAttributeTypeEnum = 1 // Defines that TestInstructionAttriebute of type ComboBox
	TestInstructionAttributeTypeEnum_FILE_SELECTOR     TestInstructionAttributeTypeEnum = 2 // Defines that TestInstructionAttribute of type FileSelector
	TestInstructionAttributeTypeEnum_FUNCTION_SELECTOR TestInstructionAttributeTypeEnum = 3 // Defines that TestInstructionAttribute of type FunctionSelector
)

// Enum value maps for TestInstructionAttributeTypeEnum.
var (
	TestInstructionAttributeTypeEnum_name = map[int32]string{
		0: "TEXTBOX",
		1: "COMBOBOX",
		2: "FILE_SELECTOR",
		3: "FUNCTION_SELECTOR",
	}
	TestInstructionAttributeTypeEnum_value = map[string]int32{
		"TEXTBOX":           0,
		"COMBOBOX":          1,
		"FILE_SELECTOR":     2,
		"FUNCTION_SELECTOR": 3,
	}
)

func (x TestInstructionAttributeTypeEnum) Enum() *TestInstructionAttributeTypeEnum {
	p := new(TestInstructionAttributeTypeEnum)
	*p = x
	return p
}

func (x TestInstructionAttributeTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestInstructionAttributeTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes[7].Descriptor()
}

func (TestInstructionAttributeTypeEnum) Type() protoreflect.EnumType {
	return &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes[7]
}

func (x TestInstructionAttributeTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestInstructionAttributeTypeEnum.Descriptor instead.
func (TestInstructionAttributeTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescGZIP(), []int{7}
}

// Parameter used for Empty inputs, only containing current proto-file version
type EmptyParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoFileVersionUsedByClient CurrentFenixTestCaseBuilderProtoFileVersionEnum `protobuf:"varint,1,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
}

func (x *EmptyParameter) Reset() {
	*x = EmptyParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyParameter) ProtoMessage() {}

func (x *EmptyParameter) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyParameter.ProtoReflect.Descriptor instead.
func (*EmptyParameter) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescGZIP(), []int{0}
}

func (x *EmptyParameter) GetProtoFileVersionUsedByClient() CurrentFenixTestCaseBuilderProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestCaseBuilderProtoFileVersionEnum_VERSION_0_0
}

// Ack/Nack- Response message with comment
type AckNackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckNack                      bool                                            `protobuf:"varint,1,opt,name=AckNack,proto3" json:"AckNack,omitempty"`                                                                                                                                  // True=Ack, False=Nack
	Comments                     string                                          `protobuf:"bytes,2,opt,name=Comments,proto3" json:"Comments,omitempty"`                                                                                                                                 //Comments if needed
	ErrorCodes                   []ErrorCodesEnum                                `protobuf:"varint,3,rep,packed,name=ErrorCodes,proto3,enum=fenixTestCaseBuilderServerGrpcApi.ErrorCodesEnum" json:"ErrorCodes,omitempty"`                                                               // List of Error codes
	ProtoFileVersionUsedByClient CurrentFenixTestCaseBuilderProtoFileVersionEnum `protobuf:"varint,4,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
}

func (x *AckNackResponse) Reset() {
	*x = AckNackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckNackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckNackResponse) ProtoMessage() {}

func (x *AckNackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckNackResponse.ProtoReflect.Descriptor instead.
func (*AckNackResponse) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescGZIP(), []int{1}
}

func (x *AckNackResponse) GetAckNack() bool {
	if x != nil {
		return x.AckNack
	}
	return false
}

func (x *AckNackResponse) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *AckNackResponse) GetErrorCodes() []ErrorCodesEnum {
	if x != nil {
		return x.ErrorCodes
	}
	return nil
}

func (x *AckNackResponse) GetProtoFileVersionUsedByClient() CurrentFenixTestCaseBuilderProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestCaseBuilderProtoFileVersionEnum_VERSION_0_0
}

// Message Holding information about who is the calling client
type UserIdentificationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                       string                                          `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`                                                                                                                                     // The Users Id, SEB S-id will be used for SEB
	ProtoFileVersionUsedByClient CurrentFenixTestCaseBuilderProtoFileVersionEnum `protobuf:"varint,2,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
}

func (x *UserIdentificationMessage) Reset() {
	*x = UserIdentificationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdentificationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdentificationMessage) ProtoMessage() {}

func (x *UserIdentificationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdentificationMessage.ProtoReflect.Descriptor instead.
func (*UserIdentificationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescGZIP(), []int{2}
}

func (x *UserIdentificationMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserIdentificationMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestCaseBuilderProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestCaseBuilderProtoFileVersionEnum_VERSION_0_0
}

// ****************************************************************************************************
// TestInstructionContainerChildrenMessage
//TODO *** IS NOT USED AT THE MOMENT ***
// *** IS NOT USED AT THE MOMENT ***
//Message holding one child and its type (TestInstruction or TestInstructionContainer)
type TestInstructionContainerChildMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionContainerChildUuid string                                `protobuf:"bytes,1,opt,name=TestInstructionContainerChildUuid,proto3" json:"TestInstructionContainerChildUuid,omitempty"`                                                                               // The UUID for the child, can be from a TestInstruction or a TestInstructionContainer
	TestInstructionContainerChildType TestInstructionContainerChildTypeEnum `protobuf:"varint,2,opt,name=TestInstructionContainerChildType,proto3,enum=fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerChildTypeEnum" json:"TestInstructionContainerChildType,omitempty"` // The type of the child, 'TestInstruction' or 'TestInstructionContainer'
}

func (x *TestInstructionContainerChildMessage) Reset() {
	*x = TestInstructionContainerChildMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionContainerChildMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionContainerChildMessage) ProtoMessage() {}

func (x *TestInstructionContainerChildMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionContainerChildMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionContainerChildMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescGZIP(), []int{3}
}

func (x *TestInstructionContainerChildMessage) GetTestInstructionContainerChildUuid() string {
	if x != nil {
		return x.TestInstructionContainerChildUuid
	}
	return ""
}

func (x *TestInstructionContainerChildMessage) GetTestInstructionContainerChildType() TestInstructionContainerChildTypeEnum {
	if x != nil {
		return x.TestInstructionContainerChildType
	}
	return TestInstructionContainerChildTypeEnum_TESTINSTRUCTION
}

var File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto protoreflect.FileDescriptor

var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDesc = []byte{
	0x0a, 0x7c, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x41, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x96, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xb3, 0x02,
	0x0a, 0x0f, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x1c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x52, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x1c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x52, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x22, 0x8d, 0x02, 0x0a, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x21, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x55, 0x75, 0x69, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x21, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x2a, 0x96, 0x01, 0x0a, 0x2f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x0b, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x30, 0x5f, 0x30, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x13, 0x0a, 0x0b, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x31, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01,
	0x12, 0x13, 0x0a, 0x0b, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x32, 0x10,
	0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x13, 0x0a, 0x0b, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x30, 0x5f, 0x33, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x34, 0x10, 0x04, 0x2a, 0x89, 0x01, 0x0a, 0x0e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x22, 0x0a, 0x1e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x10, 0x04, 0x2a, 0x5c, 0x0a, 0x29, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c,
	0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x5a, 0x0a, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x10,
	0x01, 0x2a, 0xc0, 0x03, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x30, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x42, 0x31, 0x66, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x5f, 0x53, 0x57, 0x41, 0x50, 0x50, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x42, 0x31, 0x6c, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x57,
	0x41, 0x50, 0x50, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x31, 0x30,
	0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x31, 0x31, 0x66, 0x5f,
	0x42, 0x4f, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x31, 0x31, 0x6c, 0x5f, 0x42,
	0x4f, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x31, 0x32, 0x5f, 0x42, 0x4f, 0x4e,
	0x44, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x31, 0x30, 0x6f, 0x78, 0x6f, 0x5f, 0x42, 0x4f,
	0x4e, 0x44, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x31, 0x30, 0x6f, 0x78, 0x5f, 0x42, 0x4f,
	0x4e, 0x44, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x31, 0x30, 0x78, 0x6f, 0x5f, 0x42, 0x4f,
	0x4e, 0x44, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x31, 0x31, 0x66, 0x78, 0x5f, 0x42, 0x4f,
	0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x50, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x31, 0x31, 0x6c, 0x78, 0x5f, 0x42, 0x4f, 0x4e,
	0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x50, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x31, 0x32, 0x78, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x50, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0c,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x49, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x49, 0x78, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0e,
	0x12, 0x20, 0x0a, 0x1c, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x53, 0x54,
	0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52,
	0x10, 0x0f, 0x12, 0x30, 0x0a, 0x2c, 0x54, 0x49, 0x43, 0x78, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49,
	0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x10, 0x2a, 0xe2, 0x01, 0x0a, 0x28, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x30, 0x5f, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x31,
	0x5f, 0x30, 0x31, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x31, 0x5f, 0x30, 0x32, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x31, 0x30, 0x5f, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x31,
	0x31, 0x5f, 0x31, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x31, 0x31, 0x5f, 0x32, 0x10, 0x05,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x31, 0x32, 0x5f, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x31,
	0x30, 0x78, 0x5f, 0x31, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x31, 0x30, 0x78, 0x5f, 0x32,
	0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x31, 0x30, 0x78, 0x5f, 0x33, 0x10, 0x09, 0x12, 0x0a,
	0x0a, 0x06, 0x42, 0x31, 0x31, 0x78, 0x5f, 0x31, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x31,
	0x31, 0x78, 0x5f, 0x32, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x31, 0x32, 0x78, 0x5f, 0x10,
	0x0c, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x49, 0x5f, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49,
	0x78, 0x5f, 0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x43, 0x5f, 0x10, 0x0f, 0x12, 0x09,
	0x0a, 0x05, 0x54, 0x49, 0x43, 0x78, 0x5f, 0x10, 0x10, 0x2a, 0xe3, 0x01, 0x0a, 0x17, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x57, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x43, 0x41, 0x53, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x53,
	0x57, 0x41, 0x50, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x50, 0x59,
	0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x55, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x55, 0x54, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x2a,
	0x67, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x45, 0x58, 0x54, 0x42, 0x4f, 0x58, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x42, 0x4f, 0x42, 0x4f, 0x58, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45,
	0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x42, 0x22, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x6f,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x10, 0x53, 0x75, 0x62, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescOnce sync.Once
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescData = file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDesc
)

func file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescGZIP() []byte {
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescOnce.Do(func() {
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescData)
	})
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDescData
}

var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_goTypes = []interface{}{
	(CurrentFenixTestCaseBuilderProtoFileVersionEnum)(0), // 0: fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum
	(ErrorCodesEnum)(0),                            // 1: fenixTestCaseBuilderServerGrpcApi.ErrorCodesEnum
	(TestInstructionContainerExecutionTypeEnum)(0), // 2: fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerExecutionTypeEnum
	(TestInstructionContainerChildTypeEnum)(0),     // 3: fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerChildTypeEnum
	(TestCaseModelElementTypeEnum)(0),              // 4: fenixTestCaseBuilderServerGrpcApi.TestCaseModelElementTypeEnum
	(TestCaseModelElementPresentationNameEnum)(0),  // 5: fenixTestCaseBuilderServerGrpcApi.TestCaseModelElementPresentationNameEnum
	(TestCaseCommandTypeEnum)(0),                   // 6: fenixTestCaseBuilderServerGrpcApi.TestCaseCommandTypeEnum
	(TestInstructionAttributeTypeEnum)(0),          // 7: fenixTestCaseBuilderServerGrpcApi.TestInstructionAttributeTypeEnum
	(*EmptyParameter)(nil),                         // 8: fenixTestCaseBuilderServerGrpcApi.EmptyParameter
	(*AckNackResponse)(nil),                        // 9: fenixTestCaseBuilderServerGrpcApi.AckNackResponse
	(*UserIdentificationMessage)(nil),              // 10: fenixTestCaseBuilderServerGrpcApi.UserIdentificationMessage
	(*TestInstructionContainerChildMessage)(nil),   // 11: fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerChildMessage
}
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_depIdxs = []int32{
	0, // 0: fenixTestCaseBuilderServerGrpcApi.EmptyParameter.ProtoFileVersionUsedByClient:type_name -> fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum
	1, // 1: fenixTestCaseBuilderServerGrpcApi.AckNackResponse.ErrorCodes:type_name -> fenixTestCaseBuilderServerGrpcApi.ErrorCodesEnum
	0, // 2: fenixTestCaseBuilderServerGrpcApi.AckNackResponse.ProtoFileVersionUsedByClient:type_name -> fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum
	0, // 3: fenixTestCaseBuilderServerGrpcApi.UserIdentificationMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum
	3, // 4: fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerChildMessage.TestInstructionContainerChildType:type_name -> fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerChildTypeEnum
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() {
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_init()
}
func file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_init() {
	if File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckNackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdentificationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionContainerChildMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_goTypes,
		DependencyIndexes: file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_depIdxs,
		EnumInfos:         file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_enumTypes,
		MessageInfos:      file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_msgTypes,
	}.Build()
	File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto = out.File
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_rawDesc = nil
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_goTypes = nil
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_depIdxs = nil
}
