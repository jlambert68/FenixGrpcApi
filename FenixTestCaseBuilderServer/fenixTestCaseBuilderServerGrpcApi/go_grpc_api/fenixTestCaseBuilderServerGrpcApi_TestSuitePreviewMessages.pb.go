// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixExecutionServerGuiGrpcApi_TestSuitePreviewMessages.proto_old

package go_grpc_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestSuitePreviewStructureMessage_TestSuiteTypeEnum int32

const (
	TestSuitePreviewStructureMessage_TestSuiteType_NotDefined TestSuitePreviewStructureMessage_TestSuiteTypeEnum = 0 // The TestSuite-type was never properly defined
	TestSuitePreviewStructureMessage_TestSuiteType_Standard   TestSuitePreviewStructureMessage_TestSuiteTypeEnum = 1 // A 'Standard' TestSuite
	TestSuitePreviewStructureMessage_TestSuiteType_Pig        TestSuitePreviewStructureMessage_TestSuiteTypeEnum = 2 // A TestSuite that is used for controlling environments. Is often run like every 10 minutes
)

// Enum value maps for TestSuitePreviewStructureMessage_TestSuiteTypeEnum.
var (
	TestSuitePreviewStructureMessage_TestSuiteTypeEnum_name = map[int32]string{
		0: "TestSuiteType_NotDefined",
		1: "TestSuiteType_Standard",
		2: "TestSuiteType_Pig",
	}
	TestSuitePreviewStructureMessage_TestSuiteTypeEnum_value = map[string]int32{
		"TestSuiteType_NotDefined": 0,
		"TestSuiteType_Standard":   1,
		"TestSuiteType_Pig":        2,
	}
)

func (x TestSuitePreviewStructureMessage_TestSuiteTypeEnum) Enum() *TestSuitePreviewStructureMessage_TestSuiteTypeEnum {
	p := new(TestSuitePreviewStructureMessage_TestSuiteTypeEnum)
	*p = x
	return p
}

func (x TestSuitePreviewStructureMessage_TestSuiteTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestSuitePreviewStructureMessage_TestSuiteTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_enumTypes[0].Descriptor()
}

func (TestSuitePreviewStructureMessage_TestSuiteTypeEnum) Type() protoreflect.EnumType {
	return &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_enumTypes[0]
}

func (x TestSuitePreviewStructureMessage_TestSuiteTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestSuitePreviewStructureMessage_TestSuiteTypeEnum.Descriptor instead.
func (TestSuitePreviewStructureMessage_TestSuiteTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDescGZIP(), []int{1, 0}
}

// Message holden a preview and the hash of the preview  of the TestSuite. Only used for looking at and no editing
type TestSuitePreviewMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestSuitePreview     *TestSuitePreviewStructureMessage `protobuf:"bytes,1,opt,name=TestSuitePreview,proto3" json:"TestSuitePreview,omitempty"`         // The Preview message of the TestCase
	TestSuitePreviewHash string                            `protobuf:"bytes,2,opt,name=TestSuitePreviewHash,proto3" json:"TestSuitePreviewHash,omitempty"` // The hash of the Preview message
}

func (x *TestSuitePreviewMessage) Reset() {
	*x = TestSuitePreviewMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuitePreviewMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuitePreviewMessage) ProtoMessage() {}

func (x *TestSuitePreviewMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuitePreviewMessage.ProtoReflect.Descriptor instead.
func (*TestSuitePreviewMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDescGZIP(), []int{0}
}

func (x *TestSuitePreviewMessage) GetTestSuitePreview() *TestSuitePreviewStructureMessage {
	if x != nil {
		return x.TestSuitePreview
	}
	return nil
}

func (x *TestSuitePreviewMessage) GetTestSuitePreviewHash() string {
	if x != nil {
		return x.TestSuitePreviewHash
	}
	return ""
}

// Message holding the full preview of the TestSuite and its TestCases
// Update and sync with 'fenixExecutionServerGrpcApi_Messages.proto'
type TestSuitePreviewStructureMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestSuiteUuid                      string                                                                             `protobuf:"bytes,1,opt,name=TestSuiteUuid,proto3" json:"TestSuiteUuid,omitempty"`                                                                                                                                    // The TestSuiteUuid
	TestSuiteName                      string                                                                             `protobuf:"bytes,2,opt,name=TestSuiteName,proto3" json:"TestSuiteName,omitempty"`                                                                                                                                    // The name of the Suite
	TestSuiteVersion                   string                                                                             `protobuf:"bytes,3,opt,name=TestSuiteVersion,proto3" json:"TestSuiteVersion,omitempty"`                                                                                                                              // The version of the Suite
	DomainUuidThatOwnTheTestSuite      string                                                                             `protobuf:"bytes,4,opt,name=DomainUuidThatOwnTheTestSuite,proto3" json:"DomainUuidThatOwnTheTestSuite,omitempty"`                                                                                                    // The Domain that owns the Suite
	DomainNameThatOwnTheTestSuite      string                                                                             `protobuf:"bytes,5,opt,name=DomainNameThatOwnTheTestSuite,proto3" json:"DomainNameThatOwnTheTestSuite,omitempty"`                                                                                                    // The Domain that owns the Suite
	TestSuiteDescription               string                                                                             `protobuf:"bytes,6,opt,name=TestSuiteDescription,proto3" json:"TestSuiteDescription,omitempty"`                                                                                                                      // The Description of the TestCase
	TestCasesInTestSuite               *TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage                      `protobuf:"bytes,7,opt,name=TestCasesInTestSuite,proto3" json:"TestCasesInTestSuite,omitempty"`                                                                                                                      // A list of the different TestCases used in the TestSuite
	CreatedByGcpLoginUser              string                                                                             `protobuf:"bytes,8,opt,name=CreatedByGcpLoginUser,proto3" json:"CreatedByGcpLoginUser,omitempty"`                                                                                                                    // The person that did log in towards GCP
	CreatedByComputerLoginUser         string                                                                             `protobuf:"bytes,9,opt,name=CreatedByComputerLoginUser,proto3" json:"CreatedByComputerLoginUser,omitempty"`                                                                                                          // The person that is logged into the computer
	CreatedDate                        string                                                                             `protobuf:"bytes,10,opt,name=CreatedDate,proto3" json:"CreatedDate,omitempty"`                                                                                                                                       // The date when the TestSuite was first created
	LastSavedByUserOnComputer          string                                                                             `protobuf:"bytes,11,opt,name=LastSavedByUserOnComputer,proto3" json:"LastSavedByUserOnComputer,omitempty"`                                                                                                           // The logged in user on the computer that last saved the TestSuite
	LastSavedByUserGCPAuthorization    string                                                                             `protobuf:"bytes,12,opt,name=LastSavedByUserGCPAuthorization,proto3" json:"LastSavedByUserGCPAuthorization,omitempty"`                                                                                               // The authorized user towards GCP that last saved the TestSuite
	LastSavedTimeStamp                 string                                                                             `protobuf:"bytes,13,opt,name=LastSavedTimeStamp,proto3" json:"LastSavedTimeStamp,omitempty"`                                                                                                                         // The Timestamp when the TestSuite was last saved
	TestSuiteType                      *TestSuitePreviewStructureMessage_TestSuiteTypeMessage                             `protobuf:"bytes,14,opt,name=TestSuiteType,proto3" json:"TestSuiteType,omitempty"`                                                                                                                                   // The type of TestSuite; Standard, Pig....
	SelectedTestSuiteMetaDataValuesMap map[string]*TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage `protobuf:"bytes,15,rep,name=SelectedTestSuiteMetaDataValuesMap,proto3" json:"SelectedTestSuiteMetaDataValuesMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Map containing all selected MetaDataValues. For MultiSelect each values is added.  The Map key = 'OwnerDomainUuid.MetaDataGroupName.MetaDataName.MetaDataNameValue'
}

func (x *TestSuitePreviewStructureMessage) Reset() {
	*x = TestSuitePreviewStructureMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuitePreviewStructureMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuitePreviewStructureMessage) ProtoMessage() {}

func (x *TestSuitePreviewStructureMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuitePreviewStructureMessage.ProtoReflect.Descriptor instead.
func (*TestSuitePreviewStructureMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDescGZIP(), []int{1}
}

func (x *TestSuitePreviewStructureMessage) GetTestSuiteUuid() string {
	if x != nil {
		return x.TestSuiteUuid
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage) GetTestSuiteName() string {
	if x != nil {
		return x.TestSuiteName
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage) GetTestSuiteVersion() string {
	if x != nil {
		return x.TestSuiteVersion
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage) GetDomainUuidThatOwnTheTestSuite() string {
	if x != nil {
		return x.DomainUuidThatOwnTheTestSuite
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage) GetDomainNameThatOwnTheTestSuite() string {
	if x != nil {
		return x.DomainNameThatOwnTheTestSuite
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage) GetTestSuiteDescription() string {
	if x != nil {
		return x.TestSuiteDescription
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage) GetTestCasesInTestSuite() *TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage {
	if x != nil {
		return x.TestCasesInTestSuite
	}
	return nil
}

func (x *TestSuitePreviewStructureMessage) GetCreatedByGcpLoginUser() string {
	if x != nil {
		return x.CreatedByGcpLoginUser
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage) GetCreatedByComputerLoginUser() string {
	if x != nil {
		return x.CreatedByComputerLoginUser
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage) GetCreatedDate() string {
	if x != nil {
		return x.CreatedDate
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage) GetLastSavedByUserOnComputer() string {
	if x != nil {
		return x.LastSavedByUserOnComputer
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage) GetLastSavedByUserGCPAuthorization() string {
	if x != nil {
		return x.LastSavedByUserGCPAuthorization
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage) GetLastSavedTimeStamp() string {
	if x != nil {
		return x.LastSavedTimeStamp
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage) GetTestSuiteType() *TestSuitePreviewStructureMessage_TestSuiteTypeMessage {
	if x != nil {
		return x.TestSuiteType
	}
	return nil
}

func (x *TestSuitePreviewStructureMessage) GetSelectedTestSuiteMetaDataValuesMap() map[string]*TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage {
	if x != nil {
		return x.SelectedTestSuiteMetaDataValuesMap
	}
	return nil
}

// Message holding all TestCases that is added to a TestSuite
type TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCasesInTestSuite []*TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage `protobuf:"bytes,1,rep,name=TestCasesInTestSuite,proto3" json:"TestCasesInTestSuite,omitempty"` // All the TestCases in the TestSuite
}

func (x *TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage) Reset() {
	*x = TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage) ProtoMessage() {}

func (x *TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage.ProtoReflect.Descriptor instead.
func (*TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDescGZIP(), []int{1, 1}
}

func (x *TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage) GetTestCasesInTestSuite() []*TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage {
	if x != nil {
		return x.TestCasesInTestSuite
	}
	return nil
}

// Message holding one TestCase that is added to a TestSuite
type TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUuid   string `protobuf:"bytes,1,opt,name=DomainUuid,proto3" json:"DomainUuid,omitempty"`     // The Domain, UUID, where the TestCase 'has its home'
	DomainName   string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`     // The Domain, Name, where the TestCase 'has its home'
	TestCaseUuid string `protobuf:"bytes,3,opt,name=TestCaseUuid,proto3" json:"TestCaseUuid,omitempty"` // The TestCase, UUID, set by TestCase-builder
	TestCaseName string `protobuf:"bytes,4,opt,name=TestCaseName,proto3" json:"TestCaseName,omitempty"` // The TestCase, Name, set in TestCase-builder
}

func (x *TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) Reset() {
	*x = TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) ProtoMessage() {}

func (x *TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage.ProtoReflect.Descriptor instead.
func (*TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDescGZIP(), []int{1, 2}
}

func (x *TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) GetDomainUuid() string {
	if x != nil {
		return x.DomainUuid
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) GetTestCaseUuid() string {
	if x != nil {
		return x.TestCaseUuid
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage) GetTestCaseName() string {
	if x != nil {
		return x.TestCaseName
	}
	return ""
}

// TestSuiteTypeMessage
// The type of TestSuite; Standard, Pig....
type TestSuitePreviewStructureMessage_TestSuiteTypeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestSuiteType     TestSuitePreviewStructureMessage_TestSuiteTypeEnum `protobuf:"varint,1,opt,name=TestSuiteType,proto3,enum=fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage_TestSuiteTypeEnum" json:"TestSuiteType,omitempty"` // The underlay type definition
	TestSuiteTypeName string                                             `protobuf:"bytes,2,opt,name=TestSuiteTypeName,proto3" json:"TestSuiteTypeName,omitempty"`                                                                                    // Textual name for the type
}

func (x *TestSuitePreviewStructureMessage_TestSuiteTypeMessage) Reset() {
	*x = TestSuitePreviewStructureMessage_TestSuiteTypeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuitePreviewStructureMessage_TestSuiteTypeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuitePreviewStructureMessage_TestSuiteTypeMessage) ProtoMessage() {}

func (x *TestSuitePreviewStructureMessage_TestSuiteTypeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuitePreviewStructureMessage_TestSuiteTypeMessage.ProtoReflect.Descriptor instead.
func (*TestSuitePreviewStructureMessage_TestSuiteTypeMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDescGZIP(), []int{1, 3}
}

func (x *TestSuitePreviewStructureMessage_TestSuiteTypeMessage) GetTestSuiteType() TestSuitePreviewStructureMessage_TestSuiteTypeEnum {
	if x != nil {
		return x.TestSuiteType
	}
	return TestSuitePreviewStructureMessage_TestSuiteType_NotDefined
}

func (x *TestSuitePreviewStructureMessage_TestSuiteTypeMessage) GetTestSuiteTypeName() string {
	if x != nil {
		return x.TestSuiteTypeName
	}
	return ""
}

// The Selected MetaData with all its values
type TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerDomainUuid   string                 `protobuf:"bytes,1,opt,name=OwnerDomainUuid,proto3" json:"OwnerDomainUuid,omitempty"`                                                      // The Domain, Uuid, that owns the TestCase
	OwnerDomainName   string                 `protobuf:"bytes,2,opt,name=OwnerDomainName,proto3" json:"OwnerDomainName,omitempty"`                                                      // The Domain, Name, that owns the TestCase
	MetaDataGroupName string                 `protobuf:"bytes,3,opt,name=MetaDataGroupName,proto3" json:"MetaDataGroupName,omitempty"`                                                  // The name of the MetaData-Group
	MetaDataName      string                 `protobuf:"bytes,4,opt,name=MetaDataName,proto3" json:"MetaDataName,omitempty"`                                                            // The name of the MetaData-post
	MetaDataNameValue string                 `protobuf:"bytes,5,opt,name=MetaDataNameValue,proto3" json:"MetaDataNameValue,omitempty"`                                                  // The MetaDataValue
	SelectType        MetaDataSelectTypeEnum `protobuf:"varint,6,opt,name=SelectType,proto3,enum=fenixTestCaseBuilderServerGrpcApi.MetaDataSelectTypeEnum" json:"SelectType,omitempty"` // Is the MetaData-post single- or multi-select
	IsMandatory       bool                   `protobuf:"varint,7,opt,name=IsMandatory,proto3" json:"IsMandatory,omitempty"`
}

func (x *TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) Reset() {
	*x = TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) ProtoMessage() {}

func (x *TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage.ProtoReflect.Descriptor instead.
func (*TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDescGZIP(), []int{1, 4}
}

func (x *TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) GetOwnerDomainUuid() string {
	if x != nil {
		return x.OwnerDomainUuid
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) GetOwnerDomainName() string {
	if x != nil {
		return x.OwnerDomainName
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) GetMetaDataGroupName() string {
	if x != nil {
		return x.MetaDataGroupName
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) GetMetaDataName() string {
	if x != nil {
		return x.MetaDataName
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) GetMetaDataNameValue() string {
	if x != nil {
		return x.MetaDataNameValue
	}
	return ""
}

func (x *TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) GetSelectType() MetaDataSelectTypeEnum {
	if x != nil {
		return x.SelectType
	}
	return MetaDataSelectTypeEnum_MetaDataSelectType_NotSelected
}

func (x *TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage) GetIsMandatory() bool {
	if x != nil {
		return x.IsMandatory
	}
	return false
}

var File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto protoreflect.FileDescriptor

var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDesc = []byte{
	0x0a, 0x7d, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x5f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x21, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x1a, 0x83, 0x01, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x01, 0x0a, 0x17, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x6f, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x10, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x22, 0xc2, 0x12, 0x0a, 0x20, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x1d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x55, 0x75, 0x69, 0x64, 0x54, 0x68, 0x61, 0x74, 0x4f, 0x77, 0x6e, 0x54, 0x68, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x54, 0x68, 0x61, 0x74, 0x4f, 0x77, 0x6e,
	0x54, 0x68, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1d,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x68, 0x61, 0x74, 0x4f, 0x77,
	0x6e, 0x54, 0x68, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x54,
	0x68, 0x61, 0x74, 0x4f, 0x77, 0x6e, 0x54, 0x68, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x93, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x73, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x47, 0x63, 0x70, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x47, 0x63, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76,
	0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x72, 0x12, 0x48, 0x0a, 0x1f, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x47, 0x43, 0x50, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x4c, 0x61, 0x73,
	0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x47, 0x43, 0x50, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x7e, 0x0a, 0x0d,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0xbb, 0x01, 0x0a,
	0x22, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x4d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x22, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0xc0, 0x01, 0x0a, 0x27, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x7f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb2, 0x01,
	0x0a, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x92, 0x01,
	0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x75, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x1a, 0xa4, 0x01, 0x0a, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xc1, 0x01, 0x0a, 0x14, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x7b, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xf8, 0x02,
	0x0a, 0x25, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x59, 0x0a, 0x0a, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x4d, 0x61, 0x6e, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x4d,
	0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x64, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e,
	0x6f, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x75, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x69, 0x67, 0x10, 0x02, 0x42, 0x0f,
	0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDescOnce sync.Once
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDescData = file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDesc
)

func file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDescGZIP() []byte {
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDescOnce.Do(func() {
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDescData)
	})
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDescData
}

var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_goTypes = []interface{}{
	(TestSuitePreviewStructureMessage_TestSuiteTypeEnum)(0), // 0: fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.TestSuiteTypeEnum
	(*TestSuitePreviewMessage)(nil),                         // 1: fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewMessage
	(*TestSuitePreviewStructureMessage)(nil),                // 2: fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage
	nil,                                                     // 3: fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.SelectedTestSuiteMetaDataValuesMapEntry
	(*TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage)(nil),           // 4: fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.TestCasesInTestSuiteMessage
	(*TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage)(nil),            // 5: fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.TestCaseInTestSuiteMessage
	(*TestSuitePreviewStructureMessage_TestSuiteTypeMessage)(nil),                  // 6: fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.TestSuiteTypeMessage
	(*TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage)(nil), // 7: fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.SelectedTestSuiteMetaDataValueMessage
	(MetaDataSelectTypeEnum)(0), // 8: fenixTestCaseBuilderServerGrpcApi.MetaDataSelectTypeEnum
}
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_depIdxs = []int32{
	2, // 0: fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewMessage.TestSuitePreview:type_name -> fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage
	4, // 1: fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.TestCasesInTestSuite:type_name -> fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.TestCasesInTestSuiteMessage
	6, // 2: fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.TestSuiteType:type_name -> fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.TestSuiteTypeMessage
	3, // 3: fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.SelectedTestSuiteMetaDataValuesMap:type_name -> fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.SelectedTestSuiteMetaDataValuesMapEntry
	7, // 4: fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.SelectedTestSuiteMetaDataValuesMapEntry.value:type_name -> fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.SelectedTestSuiteMetaDataValueMessage
	5, // 5: fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.TestCasesInTestSuiteMessage.TestCasesInTestSuite:type_name -> fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.TestCaseInTestSuiteMessage
	0, // 6: fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.TestSuiteTypeMessage.TestSuiteType:type_name -> fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.TestSuiteTypeEnum
	8, // 7: fenixTestCaseBuilderServerGrpcApi.TestSuitePreviewStructureMessage.SelectedTestSuiteMetaDataValueMessage.SelectType:type_name -> fenixTestCaseBuilderServerGrpcApi.MetaDataSelectTypeEnum
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() {
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_init()
}
func file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_init() {
	if File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto != nil {
		return
	}
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_MetaDataInTestCaseAndTestSuite_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSuitePreviewMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSuitePreviewStructureMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSuitePreviewStructureMessage_TestCasesInTestSuiteMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSuitePreviewStructureMessage_TestCaseInTestSuiteMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSuitePreviewStructureMessage_TestSuiteTypeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSuitePreviewStructureMessage_SelectedTestSuiteMetaDataValueMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_goTypes,
		DependencyIndexes: file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_depIdxs,
		EnumInfos:         file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_enumTypes,
		MessageInfos:      file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_msgTypes,
	}.Build()
	File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto = out.File
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_rawDesc = nil
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_goTypes = nil
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestSuitePreviewMessages_proto_depIdxs = nil
}
