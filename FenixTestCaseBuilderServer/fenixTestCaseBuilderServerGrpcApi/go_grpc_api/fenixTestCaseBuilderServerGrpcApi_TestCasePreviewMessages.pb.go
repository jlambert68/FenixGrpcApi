// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages.proto

package go_grpc_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The Type of object in the PreView
type TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum int32

const (
	TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum_DEFAULT_NOT_SET TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum = 0 //Value used for when the variable is not actively set
	TestCasePreviewStructureMessage_TestInstructionContainer                        TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum = 1 // Type is a TestInstructionContainer
	TestCasePreviewStructureMessage_TestInstruction                                 TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum = 2 // Type is a TestInstruction
	TestCasePreviewStructureMessage_TestInstructionAttribute                        TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum = 3 // Type is a TestInstructionAttribute
)

// Enum value maps for TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum.
var (
	TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum_name = map[int32]string{
		0: "TestCaseStructureObjectTypeEnum_DEFAULT_NOT_SET",
		1: "TestInstructionContainer",
		2: "TestInstruction",
		3: "TestInstructionAttribute",
	}
	TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum_value = map[string]int32{
		"TestCaseStructureObjectTypeEnum_DEFAULT_NOT_SET": 0,
		"TestInstructionContainer":                        1,
		"TestInstruction":                                 2,
		"TestInstructionAttribute":                        3,
	}
)

func (x TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum) Enum() *TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum {
	p := new(TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum)
	*p = x
	return p
}

func (x TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_enumTypes[0].Descriptor()
}

func (TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum) Type() protoreflect.EnumType {
	return &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_enumTypes[0]
}

func (x TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum.Descriptor instead.
func (TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_rawDescGZIP(), []int{1, 0}
}

// Message holden a preview and the hash of the preview  of the TestCase. Only used for looking at and no editing
type TestCasePreviewMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCasePreview     *TestCasePreviewStructureMessage `protobuf:"bytes,1,opt,name=TestCasePreview,proto3" json:"TestCasePreview,omitempty"`         // The Preview message of the TestCase
	TestCasePreviewHash string                           `protobuf:"bytes,2,opt,name=TestCasePreviewHash,proto3" json:"TestCasePreviewHash,omitempty"` // The hash of the Preview message
}

func (x *TestCasePreviewMessage) Reset() {
	*x = TestCasePreviewMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCasePreviewMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCasePreviewMessage) ProtoMessage() {}

func (x *TestCasePreviewMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCasePreviewMessage.ProtoReflect.Descriptor instead.
func (*TestCasePreviewMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_rawDescGZIP(), []int{0}
}

func (x *TestCasePreviewMessage) GetTestCasePreview() *TestCasePreviewStructureMessage {
	if x != nil {
		return x.TestCasePreview
	}
	return nil
}

func (x *TestCasePreviewMessage) GetTestCasePreviewHash() string {
	if x != nil {
		return x.TestCasePreviewHash
	}
	return ""
}

// Message holding the full preview of the TestCase
// Update and sync with 'fenixExecutionServerGrpcApi_Messages.proto'
type TestCasePreviewStructureMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseName                    string                                                                   `protobuf:"bytes,1,opt,name=TestCaseName,proto3" json:"TestCaseName,omitempty"`                                                                                                                    // The name of the TestCase
	DomainThatOwnTheTestCase        string                                                                   `protobuf:"bytes,2,opt,name=DomainThatOwnTheTestCase,proto3" json:"DomainThatOwnTheTestCase,omitempty"`                                                                                            // The Domain that owns the TestCase
	TestCaseDescription             string                                                                   `protobuf:"bytes,3,opt,name=TestCaseDescription,proto3" json:"TestCaseDescription,omitempty"`                                                                                                      // The Description of the TestCase
	TestCaseStructureObjects        []*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage        `protobuf:"bytes,4,rep,name=TestCaseStructureObjects,proto3" json:"TestCaseStructureObjects,omitempty"`                                                                                            // A list of the different components of the TestCase, TIC, TI and Attributes
	ComplexTextualDescription       string                                                                   `protobuf:"bytes,5,opt,name=ComplexTextualDescription,proto3" json:"ComplexTextualDescription,omitempty"`                                                                                          // A textual description of the TestCase-model
	TestCaseUuid                    string                                                                   `protobuf:"bytes,6,opt,name=TestCaseUuid,proto3" json:"TestCaseUuid,omitempty"`                                                                                                                    // The TestCaseUuid
	TestCaseVersion                 string                                                                   `protobuf:"bytes,7,opt,name=TestCaseVersion,proto3" json:"TestCaseVersion,omitempty"`                                                                                                              // The version of the TestCase
	LastSavedByUserOnComputer       string                                                                   `protobuf:"bytes,12,opt,name=LastSavedByUserOnComputer,proto3" json:"LastSavedByUserOnComputer,omitempty"`                                                                                         // The logged in user on the computer that last saved the TestCase
	LastSavedByUserGCPAuthorization string                                                                   `protobuf:"bytes,13,opt,name=LastSavedByUserGCPAuthorization,proto3" json:"LastSavedByUserGCPAuthorization,omitempty"`                                                                             // The authorized user towards GCP that last saved the TestCase
	LastSavedTimeStamp              string                                                                   `protobuf:"bytes,14,opt,name=LastSavedTimeStamp,proto3" json:"LastSavedTimeStamp,omitempty"`                                                                                                       // The Timestamp when the TestCase first was last saved
	SelectedMetaDataValuesMap       map[string]*TestCasePreviewStructureMessage_SelectedMetaDataValueMessage `protobuf:"bytes,15,rep,name=SelectedMetaDataValuesMap,proto3" json:"SelectedMetaDataValuesMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Map containing all selected MetaDataValues. For MultiSelect each values is added.  The Map key = 'OwnerDomainUuid.MetaDataGroupName.MetaDataName.MetaDataNameValue'
}

func (x *TestCasePreviewStructureMessage) Reset() {
	*x = TestCasePreviewStructureMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCasePreviewStructureMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCasePreviewStructureMessage) ProtoMessage() {}

func (x *TestCasePreviewStructureMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCasePreviewStructureMessage.ProtoReflect.Descriptor instead.
func (*TestCasePreviewStructureMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_rawDescGZIP(), []int{1}
}

func (x *TestCasePreviewStructureMessage) GetTestCaseName() string {
	if x != nil {
		return x.TestCaseName
	}
	return ""
}

func (x *TestCasePreviewStructureMessage) GetDomainThatOwnTheTestCase() string {
	if x != nil {
		return x.DomainThatOwnTheTestCase
	}
	return ""
}

func (x *TestCasePreviewStructureMessage) GetTestCaseDescription() string {
	if x != nil {
		return x.TestCaseDescription
	}
	return ""
}

func (x *TestCasePreviewStructureMessage) GetTestCaseStructureObjects() []*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage {
	if x != nil {
		return x.TestCaseStructureObjects
	}
	return nil
}

func (x *TestCasePreviewStructureMessage) GetComplexTextualDescription() string {
	if x != nil {
		return x.ComplexTextualDescription
	}
	return ""
}

func (x *TestCasePreviewStructureMessage) GetTestCaseUuid() string {
	if x != nil {
		return x.TestCaseUuid
	}
	return ""
}

func (x *TestCasePreviewStructureMessage) GetTestCaseVersion() string {
	if x != nil {
		return x.TestCaseVersion
	}
	return ""
}

func (x *TestCasePreviewStructureMessage) GetLastSavedByUserOnComputer() string {
	if x != nil {
		return x.LastSavedByUserOnComputer
	}
	return ""
}

func (x *TestCasePreviewStructureMessage) GetLastSavedByUserGCPAuthorization() string {
	if x != nil {
		return x.LastSavedByUserGCPAuthorization
	}
	return ""
}

func (x *TestCasePreviewStructureMessage) GetLastSavedTimeStamp() string {
	if x != nil {
		return x.LastSavedTimeStamp
	}
	return ""
}

func (x *TestCasePreviewStructureMessage) GetSelectedMetaDataValuesMap() map[string]*TestCasePreviewStructureMessage_SelectedMetaDataValueMessage {
	if x != nil {
		return x.SelectedMetaDataValuesMap
	}
	return nil
}

// A message holding one TestCaseStructureObject, like TIC, TI or TI's attributes
type TestCasePreviewStructureMessage_TestCaseStructureObjectMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseStructureObjectType      TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum                                   `protobuf:"varint,1,opt,name=TestCaseStructureObjectType,proto3,enum=fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum" json:"TestCaseStructureObjectType,omitempty"` // The type of TestCaseStructureObject, TIC, TI, Attribute
	IndentationLevel                 uint32                                                                                            `protobuf:"varint,2,opt,name=IndentationLevel,proto3" json:"IndentationLevel,omitempty"`                                                                                                                              // How much should the object be move to create the tree like structure
	TestInstructionContainerName     string                                                                                            `protobuf:"bytes,3,opt,name=TestInstructionContainerName,proto3" json:"TestInstructionContainerName,omitempty"`                                                                                                       // The Name of the TestInstructionContainer
	TestInstructionContainerUuid     string                                                                                            `protobuf:"bytes,4,opt,name=TestInstructionContainerUuid,proto3" json:"TestInstructionContainerUuid,omitempty"`                                                                                                       // The Uuid of the TestInstructionContainer
	TestInstructionIsSerialProcessed bool                                                                                              `protobuf:"varint,5,opt,name=TestInstructionIsSerialProcessed,proto3" json:"TestInstructionIsSerialProcessed,omitempty"`                                                                                              // Is the TestInstructionContainer 'serial' or 'parallel' processed
	TestInstructionName              string                                                                                            `protobuf:"bytes,6,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"`                                                                                                                         // The Name of the TestInstruction
	TestInstructionUuid              string                                                                                            `protobuf:"bytes,7,opt,name=TestInstructionUuid,proto3" json:"TestInstructionUuid,omitempty"`                                                                                                                         // The Uuid of the TestInstruction
	TestInstructionColor             string                                                                                            `protobuf:"bytes,8,opt,name=TestInstructionColor,proto3" json:"TestInstructionColor,omitempty"`                                                                                                                       // The color code used for the TestInstruction
	TestInstructionAttributes        []*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage `protobuf:"bytes,9,rep,name=TestInstructionAttributes,proto3" json:"TestInstructionAttributes,omitempty"`                                                                                                             // The Attributes for the TestInstruction
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) Reset() {
	*x = TestCasePreviewStructureMessage_TestCaseStructureObjectMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) ProtoMessage() {}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCasePreviewStructureMessage_TestCaseStructureObjectMessage.ProtoReflect.Descriptor instead.
func (*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_rawDescGZIP(), []int{1, 1}
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetTestCaseStructureObjectType() TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum {
	if x != nil {
		return x.TestCaseStructureObjectType
	}
	return TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum_DEFAULT_NOT_SET
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetIndentationLevel() uint32 {
	if x != nil {
		return x.IndentationLevel
	}
	return 0
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetTestInstructionContainerName() string {
	if x != nil {
		return x.TestInstructionContainerName
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetTestInstructionContainerUuid() string {
	if x != nil {
		return x.TestInstructionContainerUuid
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetTestInstructionIsSerialProcessed() bool {
	if x != nil {
		return x.TestInstructionIsSerialProcessed
	}
	return false
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetTestInstructionUuid() string {
	if x != nil {
		return x.TestInstructionUuid
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetTestInstructionColor() string {
	if x != nil {
		return x.TestInstructionColor
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage) GetTestInstructionAttributes() []*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage {
	if x != nil {
		return x.TestInstructionAttributes
	}
	return nil
}

// The Selected MetaData with all its values
type TestCasePreviewStructureMessage_SelectedMetaDataValueMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerDomainUuid   string                 `protobuf:"bytes,1,opt,name=OwnerDomainUuid,proto3" json:"OwnerDomainUuid,omitempty"`                                                      // The Domain, Uuid, that owns the TestCase
	OwnerDomainName   string                 `protobuf:"bytes,2,opt,name=OwnerDomainName,proto3" json:"OwnerDomainName,omitempty"`                                                      // The Domain, Name, that owns the TestCase
	MetaDataGroupName string                 `protobuf:"bytes,3,opt,name=MetaDataGroupName,proto3" json:"MetaDataGroupName,omitempty"`                                                  // The name of the MetaData-Group
	MetaDataName      string                 `protobuf:"bytes,4,opt,name=MetaDataName,proto3" json:"MetaDataName,omitempty"`                                                            // The name of the MetaData-post
	MetaDataNameValue string                 `protobuf:"bytes,5,opt,name=MetaDataNameValue,proto3" json:"MetaDataNameValue,omitempty"`                                                  // The MetaDataValue
	SelectType        MetaDataSelectTypeEnum `protobuf:"varint,6,opt,name=SelectType,proto3,enum=fenixTestCaseBuilderServerGrpcApi.MetaDataSelectTypeEnum" json:"SelectType,omitempty"` // Is the MetaData-post single- or multi-select
	IsMandatory       bool                   `protobuf:"varint,7,opt,name=IsMandatory,proto3" json:"IsMandatory,omitempty"`
}

func (x *TestCasePreviewStructureMessage_SelectedMetaDataValueMessage) Reset() {
	*x = TestCasePreviewStructureMessage_SelectedMetaDataValueMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCasePreviewStructureMessage_SelectedMetaDataValueMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCasePreviewStructureMessage_SelectedMetaDataValueMessage) ProtoMessage() {}

func (x *TestCasePreviewStructureMessage_SelectedMetaDataValueMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCasePreviewStructureMessage_SelectedMetaDataValueMessage.ProtoReflect.Descriptor instead.
func (*TestCasePreviewStructureMessage_SelectedMetaDataValueMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_rawDescGZIP(), []int{1, 2}
}

func (x *TestCasePreviewStructureMessage_SelectedMetaDataValueMessage) GetOwnerDomainUuid() string {
	if x != nil {
		return x.OwnerDomainUuid
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_SelectedMetaDataValueMessage) GetOwnerDomainName() string {
	if x != nil {
		return x.OwnerDomainName
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_SelectedMetaDataValueMessage) GetMetaDataGroupName() string {
	if x != nil {
		return x.MetaDataGroupName
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_SelectedMetaDataValueMessage) GetMetaDataName() string {
	if x != nil {
		return x.MetaDataName
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_SelectedMetaDataValueMessage) GetMetaDataNameValue() string {
	if x != nil {
		return x.MetaDataNameValue
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_SelectedMetaDataValueMessage) GetSelectType() MetaDataSelectTypeEnum {
	if x != nil {
		return x.SelectType
	}
	return MetaDataSelectTypeEnum_MetaDataSelectType_NotSelected
}

func (x *TestCasePreviewStructureMessage_SelectedMetaDataValueMessage) GetIsMandatory() bool {
	if x != nil {
		return x.IsMandatory
	}
	return false
}

// Message holding one TestInstructionAttribute
type TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeName      string `protobuf:"bytes,1,opt,name=AttributeName,proto3" json:"AttributeName,omitempty"`           // The name of the Attribute
	AttributeValue     string `protobuf:"bytes,2,opt,name=AttributeValue,proto3" json:"AttributeValue,omitempty"`         // The value of the Attribute
	AttributeGroupName string `protobuf:"bytes,3,opt,name=AttributeGroupName,proto3" json:"AttributeGroupName,omitempty"` // The Group name for the Attribute in the UI
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage) Reset() {
	*x = TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage) ProtoMessage() {
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage.ProtoReflect.Descriptor instead.
func (*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage) GetAttributeValue() string {
	if x != nil {
		return x.AttributeValue
	}
	return ""
}

func (x *TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage) GetAttributeGroupName() string {
	if x != nil {
		return x.AttributeGroupName
	}
	return ""
}

var File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto protoreflect.FileDescriptor

var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_rawDesc = []byte{
	0x0a, 0x7c, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x5f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x1a, 0x83, 0x01, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x6c, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61,
	0x73, 0x68, 0x22, 0xcc, 0x13, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x54, 0x68, 0x61, 0x74, 0x4f, 0x77, 0x6e, 0x54, 0x68, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x54, 0x68, 0x61, 0x74, 0x4f, 0x77, 0x6e, 0x54, 0x68, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9d, 0x01, 0x0a, 0x18, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x18,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76,
	0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x72, 0x12, 0x48, 0x0a, 0x1f, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x47, 0x43, 0x50, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x4c, 0x61, 0x73,
	0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x47, 0x43, 0x50, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x9f, 0x01, 0x0a,
	0x19, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x61, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x19, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0xad,
	0x01, 0x0a, 0x1e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x75, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xc4,
	0x07, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0xa4, 0x01, 0x0a, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x62, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1b, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x20,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0xc0, 0x01, 0x0a, 0x19, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x19, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x1a, 0x9f, 0x01, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xef, 0x02, 0x0a, 0x1c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x59, 0x0a, 0x0a, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x4d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xa7, 0x01, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x33, 0x0a, 0x2f, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x10,
	0x03, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_rawDescOnce sync.Once
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_rawDescData = file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_rawDesc
)

func file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_rawDescGZIP() []byte {
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_rawDescOnce.Do(func() {
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_rawDescData)
	})
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_rawDescData
}

var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_goTypes = []interface{}{
	(TestCasePreviewStructureMessage_TestCaseStructureObjectTypeEnum)(0), // 0: fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjectTypeEnum
	(*TestCasePreviewMessage)(nil),                                       // 1: fenixTestCaseBuilderServerGrpcApi.TestCasePreviewMessage
	(*TestCasePreviewStructureMessage)(nil),                              // 2: fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage
	nil,                                                                  // 3: fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage.SelectedMetaDataValuesMapEntry
	(*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage)(nil),                                 // 4: fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjectMessage
	(*TestCasePreviewStructureMessage_SelectedMetaDataValueMessage)(nil),                                   // 5: fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage.SelectedMetaDataValueMessage
	(*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage)(nil), // 6: fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjectMessage.TestInstructionAttributeMessage
	(MetaDataSelectTypeEnum)(0), // 7: fenixTestCaseBuilderServerGrpcApi.MetaDataSelectTypeEnum
}
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_depIdxs = []int32{
	2, // 0: fenixTestCaseBuilderServerGrpcApi.TestCasePreviewMessage.TestCasePreview:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage
	4, // 1: fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjects:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjectMessage
	3, // 2: fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage.SelectedMetaDataValuesMap:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage.SelectedMetaDataValuesMapEntry
	5, // 3: fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage.SelectedMetaDataValuesMapEntry.value:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage.SelectedMetaDataValueMessage
	0, // 4: fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjectMessage.TestCaseStructureObjectType:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjectTypeEnum
	6, // 5: fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjectMessage.TestInstructionAttributes:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage.TestCaseStructureObjectMessage.TestInstructionAttributeMessage
	7, // 6: fenixTestCaseBuilderServerGrpcApi.TestCasePreviewStructureMessage.SelectedMetaDataValueMessage.SelectType:type_name -> fenixTestCaseBuilderServerGrpcApi.MetaDataSelectTypeEnum
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() {
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_init()
}
func file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_init() {
	if File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto != nil {
		return
	}
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_MetaDataInTestCaseAndTestSuite_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCasePreviewMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCasePreviewStructureMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCasePreviewStructureMessage_SelectedMetaDataValueMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCasePreviewStructureMessage_TestCaseStructureObjectMessage_TestInstructionAttributeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_goTypes,
		DependencyIndexes: file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_depIdxs,
		EnumInfos:         file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_enumTypes,
		MessageInfos:      file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_msgTypes,
	}.Build()
	File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto = out.File
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_rawDesc = nil
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_goTypes = nil
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCasePreviewMessages_proto_depIdxs = nil
}
