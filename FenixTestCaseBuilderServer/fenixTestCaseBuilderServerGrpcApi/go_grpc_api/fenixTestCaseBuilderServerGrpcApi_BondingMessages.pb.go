// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_BondingMessages.proto

package go_grpc_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message holding all immature bonds that can be used within the TestCase-model
type ImmatureBondsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImmatureBonds   []*ImmatureBondsMessage_ImmatureBondMessage `protobuf:"bytes,1,rep,name=ImmatureBonds,proto3" json:"ImmatureBonds,omitempty"`     // List of all immature bonds
	AckNackResponse *AckNackResponse                            `protobuf:"bytes,2,opt,name=ackNackResponse,proto3" json:"ackNackResponse,omitempty"` // Hold all error messages, if there are any. Message also gives of everything was OK or not
}

func (x *ImmatureBondsMessage) Reset() {
	*x = ImmatureBondsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmatureBondsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmatureBondsMessage) ProtoMessage() {}

func (x *ImmatureBondsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmatureBondsMessage.ProtoReflect.Descriptor instead.
func (*ImmatureBondsMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDescGZIP(), []int{0}
}

func (x *ImmatureBondsMessage) GetImmatureBonds() []*ImmatureBondsMessage_ImmatureBondMessage {
	if x != nil {
		return x.ImmatureBonds
	}
	return nil
}

func (x *ImmatureBondsMessage) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

// Message holding one Mature Bond which is used when used add and Delete TestInstructions and TestInstructionContainers in the TestCase
type MatureBondMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicBondInformation  *BasicBondInformationMessage  `protobuf:"bytes,1,opt,name=BasicBondInformation,proto3" json:"BasicBondInformation,omitempty"`   // Data is used to describe the basic information for the Bond
	MatureBondInformation *MatureBondInformationMessage `protobuf:"bytes,2,opt,name=MatureBondInformation,proto3" json:"MatureBondInformation,omitempty"` // Information about the Mature Bond
}

func (x *MatureBondMessage) Reset() {
	*x = MatureBondMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatureBondMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatureBondMessage) ProtoMessage() {}

func (x *MatureBondMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatureBondMessage.ProtoReflect.Descriptor instead.
func (*MatureBondMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDescGZIP(), []int{1}
}

func (x *MatureBondMessage) GetBasicBondInformation() *BasicBondInformationMessage {
	if x != nil {
		return x.BasicBondInformation
	}
	return nil
}

func (x *MatureBondMessage) GetMatureBondInformation() *MatureBondInformationMessage {
	if x != nil {
		return x.MatureBondInformation
	}
	return nil
}

// Message holding basic information for one Bond
type BasicBondInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VisibleBondAttributes *BasicBondInformationMessage_VisibleBondAttributesMessage `protobuf:"bytes,1,opt,name=VisibleBondAttributes,proto3" json:"VisibleBondAttributes,omitempty"` // If 'ShowBondAttributes' then these attributes will be shown to users in attributes area
}

func (x *BasicBondInformationMessage) Reset() {
	*x = BasicBondInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicBondInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicBondInformationMessage) ProtoMessage() {}

func (x *BasicBondInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicBondInformationMessage.ProtoReflect.Descriptor instead.
func (*BasicBondInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDescGZIP(), []int{2}
}

func (x *BasicBondInformationMessage) GetVisibleBondAttributes() *BasicBondInformationMessage_VisibleBondAttributesMessage {
	if x != nil {
		return x.VisibleBondAttributes
	}
	return nil
}

//  Message holding all data that is set for the Mature Bond
type MatureBondInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatureBasicTestInstructionInformation *MatureBondInformationMessage_MatureBasicBondInformationMessage   `protobuf:"bytes,1,opt,name=MatureBasicTestInstructionInformation,proto3" json:"MatureBasicTestInstructionInformation,omitempty"` // The Basic information for the Matures Bond
	CreatedAndUpdatedInformation          *MatureBondInformationMessage_CreatedAndUpdatedInformationMessage `protobuf:"bytes,2,opt,name=CreatedAndUpdatedInformation,proto3" json:"CreatedAndUpdatedInformation,omitempty"`                   // Information regarding who did what and when
}

func (x *MatureBondInformationMessage) Reset() {
	*x = MatureBondInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatureBondInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatureBondInformationMessage) ProtoMessage() {}

func (x *MatureBondInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatureBondInformationMessage.ProtoReflect.Descriptor instead.
func (*MatureBondInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDescGZIP(), []int{3}
}

func (x *MatureBondInformationMessage) GetMatureBasicTestInstructionInformation() *MatureBondInformationMessage_MatureBasicBondInformationMessage {
	if x != nil {
		return x.MatureBasicTestInstructionInformation
	}
	return nil
}

func (x *MatureBondInformationMessage) GetCreatedAndUpdatedInformation() *MatureBondInformationMessage_CreatedAndUpdatedInformationMessage {
	if x != nil {
		return x.CreatedAndUpdatedInformation
	}
	return nil
}

// Message holding one Immature Bond which exist in a TestCase
type ImmatureBondsMessage_ImmatureBondMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicBondInformation *BasicBondInformationMessage `protobuf:"bytes,1,opt,name=BasicBondInformation,proto3" json:"BasicBondInformation,omitempty"` // Data is used to describe the basic information for the Bond
}

func (x *ImmatureBondsMessage_ImmatureBondMessage) Reset() {
	*x = ImmatureBondsMessage_ImmatureBondMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmatureBondsMessage_ImmatureBondMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmatureBondsMessage_ImmatureBondMessage) ProtoMessage() {}

func (x *ImmatureBondsMessage_ImmatureBondMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmatureBondsMessage_ImmatureBondMessage.ProtoReflect.Descriptor instead.
func (*ImmatureBondsMessage_ImmatureBondMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ImmatureBondsMessage_ImmatureBondMessage) GetBasicBondInformation() *BasicBondInformationMessage {
	if x != nil {
		return x.BasicBondInformation
	}
	return nil
}

// Message holding the attribute that could be shown to user in the attributes area in the GUI
type BasicBondInformationMessage_VisibleBondAttributesMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BondUuid                 string                       `protobuf:"bytes,1,opt,name=BondUuid,proto3" json:"BondUuid,omitempty"`                                                                                                       // The Bond, UUID
	BondName                 string                       `protobuf:"bytes,2,opt,name=BondName,proto3" json:"BondName,omitempty"`                                                                                                       // The Bond, Name
	BondDescription          string                       `protobuf:"bytes,3,opt,name=BondDescription,proto3" json:"BondDescription,omitempty"`                                                                                         // The description of the TestInstruction
	BondMouseOverText        string                       `protobuf:"bytes,4,opt,name=BondMouseOverText,proto3" json:"BondMouseOverText,omitempty"`                                                                                     // The mouse over text when hovering over TestInstruction
	Deprecated               bool                         `protobuf:"varint,5,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`                                                                                                  // Indicates that this TestInstruction shouldn't be used anymore
	Enabled                  bool                         `protobuf:"varint,6,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                                                                                                        // Bond can be disabled when the user shouldn't use it anymore
	Visible                  bool                         `protobuf:"varint,7,opt,name=Visible,proto3" json:"Visible,omitempty"`                                                                                                        // Should the Bond be visible in the TestCase or not
	BondColor                string                       `protobuf:"bytes,8,opt,name=BondColor,proto3" json:"BondColor,omitempty"`                                                                                                     // The color used for presenting the Bond, e.g. #FAF437
	CanBeDeleted             bool                         `protobuf:"varint,9,opt,name=CanBeDeleted,proto3" json:"CanBeDeleted,omitempty"`                                                                                              // Defines of the Bond can be Deleted from the TestCase structure
	CanBeSwappedOut          bool                         `protobuf:"varint,10,opt,name=CanBeSwappedOut,proto3" json:"CanBeSwappedOut,omitempty"`                                                                                       // Defines if the Bond can be swapped out from the TestCase and be replaced by some other element
	UpdatedTimeStamp         *timestamppb.Timestamp       `protobuf:"bytes,11,opt,name=UpdatedTimeStamp,proto3" json:"UpdatedTimeStamp,omitempty"`                                                                                      // The TimeStamp when the Bond was last updated
	TestCaseModelElementType TestCaseModelElementTypeEnum `protobuf:"varint,12,opt,name=TestCaseModelElementType,proto3,enum=fenixTestCaseBuilderServerGrpcApi.TestCaseModelElementTypeEnum" json:"TestCaseModelElementType,omitempty"` // The Type of Bond
	ShowBondAttributes       bool                         `protobuf:"varint,13,opt,name=ShowBondAttributes,proto3" json:"ShowBondAttributes,omitempty"`                                                                                 // If this is True then Attributes are shown to the user, mostly for "error-hunting"
	TCRuleDeletion           string                       `protobuf:"bytes,14,opt,name=TCRuleDeletion,proto3" json:"TCRuleDeletion,omitempty"`                                                                                          // The Deletion Rule for this Bond
	TCRuleSwap               string                       `protobuf:"bytes,15,opt,name=TCRuleSwap,proto3" json:"TCRuleSwap,omitempty"`                                                                                                  // The Swap Rule for this Bond
}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) Reset() {
	*x = BasicBondInformationMessage_VisibleBondAttributesMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicBondInformationMessage_VisibleBondAttributesMessage) ProtoMessage() {}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicBondInformationMessage_VisibleBondAttributesMessage.ProtoReflect.Descriptor instead.
func (*BasicBondInformationMessage_VisibleBondAttributesMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDescGZIP(), []int{2, 0}
}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) GetBondUuid() string {
	if x != nil {
		return x.BondUuid
	}
	return ""
}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) GetBondName() string {
	if x != nil {
		return x.BondName
	}
	return ""
}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) GetBondDescription() string {
	if x != nil {
		return x.BondDescription
	}
	return ""
}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) GetBondMouseOverText() string {
	if x != nil {
		return x.BondMouseOverText
	}
	return ""
}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) GetBondColor() string {
	if x != nil {
		return x.BondColor
	}
	return ""
}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) GetCanBeDeleted() bool {
	if x != nil {
		return x.CanBeDeleted
	}
	return false
}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) GetCanBeSwappedOut() bool {
	if x != nil {
		return x.CanBeSwappedOut
	}
	return false
}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) GetUpdatedTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedTimeStamp
	}
	return nil
}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) GetTestCaseModelElementType() TestCaseModelElementTypeEnum {
	if x != nil {
		return x.TestCaseModelElementType
	}
	return TestCaseModelElementTypeEnum_B0_BOND
}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) GetShowBondAttributes() bool {
	if x != nil {
		return x.ShowBondAttributes
	}
	return false
}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) GetTCRuleDeletion() string {
	if x != nil {
		return x.TCRuleDeletion
	}
	return ""
}

func (x *BasicBondInformationMessage_VisibleBondAttributesMessage) GetTCRuleSwap() string {
	if x != nil {
		return x.TCRuleSwap
	}
	return ""
}

// Message holding the mature basic information about the Bond
type MatureBondInformationMessage_MatureBasicBondInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BondMatureUuid string `protobuf:"bytes,1,opt,name=BondMatureUuid,proto3" json:"BondMatureUuid,omitempty"` // The Mature UUID that the Bond gets when it is added to the TestCase
}

func (x *MatureBondInformationMessage_MatureBasicBondInformationMessage) Reset() {
	*x = MatureBondInformationMessage_MatureBasicBondInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatureBondInformationMessage_MatureBasicBondInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatureBondInformationMessage_MatureBasicBondInformationMessage) ProtoMessage() {}

func (x *MatureBondInformationMessage_MatureBasicBondInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatureBondInformationMessage_MatureBasicBondInformationMessage.ProtoReflect.Descriptor instead.
func (*MatureBondInformationMessage_MatureBasicBondInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDescGZIP(), []int{3, 0}
}

func (x *MatureBondInformationMessage_MatureBasicBondInformationMessage) GetBondMatureUuid() string {
	if x != nil {
		return x.BondMatureUuid
	}
	return ""
}

// Message holding information about changes to the Bond, who and when
type MatureBondInformationMessage_CreatedAndUpdatedInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddedToTestCaseTimeStamp       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=AddedToTestCaseTimeStamp,proto3" json:"AddedToTestCaseTimeStamp,omitempty"`             // The TimeStamp when the TestInstructionContainer was first added to the TestCase
	AddedToTestCaseByUserId        string                 `protobuf:"bytes,2,opt,name=AddedToTestCaseByUserId,proto3" json:"AddedToTestCaseByUserId,omitempty"`               // Which user added the Bond to the TestCase
	LastUpdatedInTestCaseTimeStamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=LastUpdatedInTestCaseTimeStamp,proto3" json:"LastUpdatedInTestCaseTimeStamp,omitempty"` // The TimeStamp when the Bond was updated in the TestCase
	LastUpdatedInTestCaseByUserId  string                 `protobuf:"bytes,4,opt,name=LastUpdatedInTestCaseByUserId,proto3" json:"LastUpdatedInTestCaseByUserId,omitempty"`   // Which user was the last to update the Bond in the TestCase
	DeletedFromTestCaseTimeStamp   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=DeletedFromTestCaseTimeStamp,proto3" json:"DeletedFromTestCaseTimeStamp,omitempty"`     // The TimeStamp when the Bond was was deleted from the TestCase
	DeletedFromTestCaseByUserId    string                 `protobuf:"bytes,6,opt,name=DeletedFromTestCaseByUserId,proto3" json:"DeletedFromTestCaseByUserId,omitempty"`       // Which user deleted the Bond from the TestCase
}

func (x *MatureBondInformationMessage_CreatedAndUpdatedInformationMessage) Reset() {
	*x = MatureBondInformationMessage_CreatedAndUpdatedInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatureBondInformationMessage_CreatedAndUpdatedInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatureBondInformationMessage_CreatedAndUpdatedInformationMessage) ProtoMessage() {}

func (x *MatureBondInformationMessage_CreatedAndUpdatedInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatureBondInformationMessage_CreatedAndUpdatedInformationMessage.ProtoReflect.Descriptor instead.
func (*MatureBondInformationMessage_CreatedAndUpdatedInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDescGZIP(), []int{3, 1}
}

func (x *MatureBondInformationMessage_CreatedAndUpdatedInformationMessage) GetAddedToTestCaseTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.AddedToTestCaseTimeStamp
	}
	return nil
}

func (x *MatureBondInformationMessage_CreatedAndUpdatedInformationMessage) GetAddedToTestCaseByUserId() string {
	if x != nil {
		return x.AddedToTestCaseByUserId
	}
	return ""
}

func (x *MatureBondInformationMessage_CreatedAndUpdatedInformationMessage) GetLastUpdatedInTestCaseTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedInTestCaseTimeStamp
	}
	return nil
}

func (x *MatureBondInformationMessage_CreatedAndUpdatedInformationMessage) GetLastUpdatedInTestCaseByUserId() string {
	if x != nil {
		return x.LastUpdatedInTestCaseByUserId
	}
	return ""
}

func (x *MatureBondInformationMessage_CreatedAndUpdatedInformationMessage) GetDeletedFromTestCaseTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedFromTestCaseTimeStamp
	}
	return nil
}

func (x *MatureBondInformationMessage_CreatedAndUpdatedInformationMessage) GetDeletedFromTestCaseByUserId() string {
	if x != nil {
		return x.DeletedFromTestCaseByUserId
	}
	return ""
}

var File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto protoreflect.FileDescriptor

var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDesc = []byte{
	0x0a, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x5f, 0x42, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x7c, 0x46, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x02, 0x0a, 0x14, 0x49, 0x6d, 0x6d,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x71, 0x0a, 0x0d, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x6d,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x1a, 0x89, 0x01, 0x0a, 0x13, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x6f, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x72, 0x0a, 0x14, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x42, 0x61, 0x73, 0x69, 0x63, 0x42,
	0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfe,
	0x01, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x72, 0x0a, 0x14, 0x42, 0x61, 0x73, 0x69, 0x63, 0x42, 0x6f, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x42, 0x6f, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x14, 0x42, 0x61, 0x73, 0x69, 0x63, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x15, 0x4d, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x15, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xdf, 0x06, 0x0a, 0x1b, 0x42, 0x61, 0x73, 0x69, 0x63, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x91, 0x01, 0x0a, 0x15, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x15, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x1a, 0xab, 0x05, 0x0a, 0x1c, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42,
	0x6f, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6f, 0x6e, 0x64, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x6f, 0x6e, 0x64, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6f, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x6f, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x42, 0x6f, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x6f, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x6f, 0x6e, 0x64, 0x4d, 0x6f,
	0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x42, 0x6f, 0x6e, 0x64, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6f, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6f, 0x6e,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x43, 0x61,
	0x6e, 0x42, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x61,
	0x6e, 0x42, 0x65, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x4f, 0x75, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x7b, 0x0a, 0x18,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x68, 0x6f,
	0x77, 0x42, 0x6f, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x6f, 0x6e, 0x64, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x43, 0x52,
	0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x54, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x77, 0x61,
	0x70, 0x22, 0xd5, 0x07, 0x0a, 0x1c, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x25, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x61, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x42,
	0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x25, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa7, 0x01, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6f,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4b, 0x0a, 0x21, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x42,
	0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x1a, 0x83, 0x04, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x18, 0x41,
	0x64, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x18, 0x41, 0x64, 0x64, 0x65, 0x64,
	0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x62, 0x0a,
	0x1e, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x1e, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x44, 0x0a, 0x1d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x22, 0x5a, 0x0d, 0x2e, 0x2f, 0x67,
	0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x10, 0x53, 0x75, 0x62,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDescOnce sync.Once
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDescData = file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDesc
)

func file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDescGZIP() []byte {
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDescOnce.Do(func() {
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDescData)
	})
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDescData
}

var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_goTypes = []interface{}{
	(*ImmatureBondsMessage)(nil),                                             // 0: fenixTestCaseBuilderServerGrpcApi.ImmatureBondsMessage
	(*MatureBondMessage)(nil),                                                // 1: fenixTestCaseBuilderServerGrpcApi.MatureBondMessage
	(*BasicBondInformationMessage)(nil),                                      // 2: fenixTestCaseBuilderServerGrpcApi.BasicBondInformationMessage
	(*MatureBondInformationMessage)(nil),                                     // 3: fenixTestCaseBuilderServerGrpcApi.MatureBondInformationMessage
	(*ImmatureBondsMessage_ImmatureBondMessage)(nil),                         // 4: fenixTestCaseBuilderServerGrpcApi.ImmatureBondsMessage.ImmatureBondMessage
	(*BasicBondInformationMessage_VisibleBondAttributesMessage)(nil),         // 5: fenixTestCaseBuilderServerGrpcApi.BasicBondInformationMessage.VisibleBondAttributesMessage
	(*MatureBondInformationMessage_MatureBasicBondInformationMessage)(nil),   // 6: fenixTestCaseBuilderServerGrpcApi.MatureBondInformationMessage.MatureBasicBondInformationMessage
	(*MatureBondInformationMessage_CreatedAndUpdatedInformationMessage)(nil), // 7: fenixTestCaseBuilderServerGrpcApi.MatureBondInformationMessage.CreatedAndUpdatedInformationMessage
	(*AckNackResponse)(nil),                                                  // 8: fenixTestCaseBuilderServerGrpcApi.AckNackResponse
	(*timestamppb.Timestamp)(nil),                                            // 9: google.protobuf.Timestamp
	(TestCaseModelElementTypeEnum)(0),                                        // 10: fenixTestCaseBuilderServerGrpcApi.TestCaseModelElementTypeEnum
}
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_depIdxs = []int32{
	4,  // 0: fenixTestCaseBuilderServerGrpcApi.ImmatureBondsMessage.ImmatureBonds:type_name -> fenixTestCaseBuilderServerGrpcApi.ImmatureBondsMessage.ImmatureBondMessage
	8,  // 1: fenixTestCaseBuilderServerGrpcApi.ImmatureBondsMessage.ackNackResponse:type_name -> fenixTestCaseBuilderServerGrpcApi.AckNackResponse
	2,  // 2: fenixTestCaseBuilderServerGrpcApi.MatureBondMessage.BasicBondInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.BasicBondInformationMessage
	3,  // 3: fenixTestCaseBuilderServerGrpcApi.MatureBondMessage.MatureBondInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.MatureBondInformationMessage
	5,  // 4: fenixTestCaseBuilderServerGrpcApi.BasicBondInformationMessage.VisibleBondAttributes:type_name -> fenixTestCaseBuilderServerGrpcApi.BasicBondInformationMessage.VisibleBondAttributesMessage
	6,  // 5: fenixTestCaseBuilderServerGrpcApi.MatureBondInformationMessage.MatureBasicTestInstructionInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.MatureBondInformationMessage.MatureBasicBondInformationMessage
	7,  // 6: fenixTestCaseBuilderServerGrpcApi.MatureBondInformationMessage.CreatedAndUpdatedInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.MatureBondInformationMessage.CreatedAndUpdatedInformationMessage
	2,  // 7: fenixTestCaseBuilderServerGrpcApi.ImmatureBondsMessage.ImmatureBondMessage.BasicBondInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.BasicBondInformationMessage
	9,  // 8: fenixTestCaseBuilderServerGrpcApi.BasicBondInformationMessage.VisibleBondAttributesMessage.UpdatedTimeStamp:type_name -> google.protobuf.Timestamp
	10, // 9: fenixTestCaseBuilderServerGrpcApi.BasicBondInformationMessage.VisibleBondAttributesMessage.TestCaseModelElementType:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCaseModelElementTypeEnum
	9,  // 10: fenixTestCaseBuilderServerGrpcApi.MatureBondInformationMessage.CreatedAndUpdatedInformationMessage.AddedToTestCaseTimeStamp:type_name -> google.protobuf.Timestamp
	9,  // 11: fenixTestCaseBuilderServerGrpcApi.MatureBondInformationMessage.CreatedAndUpdatedInformationMessage.LastUpdatedInTestCaseTimeStamp:type_name -> google.protobuf.Timestamp
	9,  // 12: fenixTestCaseBuilderServerGrpcApi.MatureBondInformationMessage.CreatedAndUpdatedInformationMessage.DeletedFromTestCaseTimeStamp:type_name -> google.protobuf.Timestamp
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() {
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_init()
}
func file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_init() {
	if File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto != nil {
		return
	}
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmatureBondsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatureBondMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicBondInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatureBondInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmatureBondsMessage_ImmatureBondMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicBondInformationMessage_VisibleBondAttributesMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatureBondInformationMessage_MatureBasicBondInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatureBondInformationMessage_CreatedAndUpdatedInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_goTypes,
		DependencyIndexes: file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_depIdxs,
		MessageInfos:      file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_msgTypes,
	}.Build()
	File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto = out.File
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_rawDesc = nil
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_goTypes = nil
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_BondingMessages_proto_depIdxs = nil
}
