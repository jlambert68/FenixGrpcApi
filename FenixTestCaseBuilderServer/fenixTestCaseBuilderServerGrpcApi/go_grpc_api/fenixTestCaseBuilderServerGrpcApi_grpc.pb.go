// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi.proto

package go_grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FenixTestCaseBuilderServerGrpcServices_AreYouAlive_FullMethodName                                                        = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices/AreYouAlive"
	FenixTestCaseBuilderServerGrpcServices_ListAllAvailableTestInstructionsAndTestInstructionContainers_FullMethodName       = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices/ListAllAvailableTestInstructionsAndTestInstructionContainers"
	FenixTestCaseBuilderServerGrpcServices_ListAllAvailablePinnedTestInstructionsAndTestInstructionContainers_FullMethodName = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices/ListAllAvailablePinnedTestInstructionsAndTestInstructionContainers"
	FenixTestCaseBuilderServerGrpcServices_ListAllAvailableBonds_FullMethodName                                              = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices/ListAllAvailableBonds"
	FenixTestCaseBuilderServerGrpcServices_ListAllRepositoryApiUrls_FullMethodName                                           = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices/ListAllRepositoryApiUrls"
	FenixTestCaseBuilderServerGrpcServices_ListAllTestDataForTestDataAreas_FullMethodName                                    = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices/ListAllTestDataForTestDataAreas"
	FenixTestCaseBuilderServerGrpcServices_SaveAllPinnedTestInstructionsAndTestInstructionContainers_FullMethodName          = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices/SaveAllPinnedTestInstructionsAndTestInstructionContainers"
	FenixTestCaseBuilderServerGrpcServices_ListAllTestCases_FullMethodName                                                   = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices/ListAllTestCases"
	FenixTestCaseBuilderServerGrpcServices_GetDetailedTestCase_FullMethodName                                                = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices/GetDetailedTestCase"
	FenixTestCaseBuilderServerGrpcServices_ListAllTestCaseTestInstructions_FullMethodName                                    = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices/ListAllTestCaseTestInstructions"
	FenixTestCaseBuilderServerGrpcServices_ListAllTestCaseTestInstructionContainers_FullMethodName                           = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices/ListAllTestCaseTestInstructionContainers"
	FenixTestCaseBuilderServerGrpcServices_ListTestCasesThatCanBeEdited_FullMethodName                                       = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices/ListTestCasesThatCanBeEdited"
	FenixTestCaseBuilderServerGrpcServices_SaveFullTestCase_FullMethodName                                                   = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices/SaveFullTestCase"
	FenixTestCaseBuilderServerGrpcServices_SaveTestCase_FullMethodName                                                       = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices/SaveTestCase"
	FenixTestCaseBuilderServerGrpcServices_SaveAllTestCaseTestInstructions_FullMethodName                                    = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices/SaveAllTestCaseTestInstructions"
	FenixTestCaseBuilderServerGrpcServices_SaveAllTestCaseTestInstructionContainers_FullMethodName                           = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices/SaveAllTestCaseTestInstructionContainers"
	FenixTestCaseBuilderServerGrpcServices_GetTestCasesHashes_FullMethodName                                                 = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices/GetTestCasesHashes"
)

// FenixTestCaseBuilderServerGrpcServicesClient is the client API for FenixTestCaseBuilderServerGrpcServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FenixTestCaseBuilderServerGrpcServicesClient interface {
	// Anyone can check if Fenix TestCase Builder server is alive with this service
	AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	// The TestCase Builder asks for all TestInstructions and Pre-defined TestInstructionContainer that the user can add to a TestCase
	ListAllAvailableTestInstructionsAndTestInstructionContainers(ctx context.Context, in *UserIdentificationMessage, opts ...grpc.CallOption) (*AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage, error)
	// The TestCase Builder asks for which TestInstructions and Pre-defined TestInstructionContainer that the user has pinned in the GUI
	ListAllAvailablePinnedTestInstructionsAndTestInstructionContainers(ctx context.Context, in *UserIdentificationMessage, opts ...grpc.CallOption) (*AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage, error)
	// The TestCase Builder asks for all Bonds-elements that can be used in the TestCase-model
	ListAllAvailableBonds(ctx context.Context, in *UserIdentificationMessage, opts ...grpc.CallOption) (*ImmatureBondsMessage, error)
	// The TestCase Builder asks for a list of all url:s to repositories where templates are stored
	ListAllRepositoryApiUrls(ctx context.Context, in *UserIdentificationMessage, opts ...grpc.CallOption) (*ListAllRepositoryApiUrlsResponseMessage, error)
	// The TestCase Builder asks for a list of all url:s to repositories where templates are stored
	ListAllTestDataForTestDataAreas(ctx context.Context, in *UserIdentificationMessage, opts ...grpc.CallOption) (*ListAllTestDataForTestDataAreasResponseMessage, error)
	// The TestCase Builder sends all TestInstructions and Pre-defined TestInstructionContainer that the user has pinned in the GUI by the user
	SaveAllPinnedTestInstructionsAndTestInstructionContainers(ctx context.Context, in *SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// The TestCase Builder asks for a list of TestCase, with some basic information. Messages will be streamed in chunks of e.g. 100 TestCases per chunk
	ListAllTestCases(ctx context.Context, in *ListTestCasesRequestMessage, opts ...grpc.CallOption) (FenixTestCaseBuilderServerGrpcServices_ListAllTestCasesClient, error)
	// The TestCase Builder asks for one complete TestCase
	GetDetailedTestCase(ctx context.Context, in *GetTestCaseRequestMessage, opts ...grpc.CallOption) (*GetDetailedTestCaseResponse, error)
	// List all TestInstructions in the TestCase
	ListAllTestCaseTestInstructions(ctx context.Context, in *ListAllTestInstructionsForSpecificTestCaseRequestMessage, opts ...grpc.CallOption) (*MatureTestInstructionsMessage, error)
	// List all TestInstructionContainers in the TestCase
	ListAllTestCaseTestInstructionContainers(ctx context.Context, in *ListAllTestInstructionContainersForSpecificTestCaseRequestMessage, opts ...grpc.CallOption) (*MatureTestInstructionContainersMessage, error)
	// List TestCases that the user can edit
	ListTestCasesThatCanBeEdited(ctx context.Context, in *ListTestCasesRequestMessage, opts ...grpc.CallOption) (*ListTestCasesThatCanBeEditedResponseMessage, error)
	// Save full TestCase in DB
	SaveFullTestCase(ctx context.Context, in *FullTestCaseMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Save a Basic TestCase info in DB
	SaveTestCase(ctx context.Context, in *TestCaseBasicInformationMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Save all TestInstructions from the TestCase
	SaveAllTestCaseTestInstructions(ctx context.Context, in *SaveAllTestInstructionsForSpecificTestCaseRequestMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Save all TestInstructionContainers from the TestCase
	SaveAllTestCaseTestInstructionContainers(ctx context.Context, in *SaveAllTestInstructionContainersForSpecificTestCaseRequestMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// *** Check if TestCases are updated by comparing TestCase-hash ***
	GetTestCasesHashes(ctx context.Context, in *TestCasesHashRequest, opts ...grpc.CallOption) (*TestCasesHashResponse, error)
}

type fenixTestCaseBuilderServerGrpcServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewFenixTestCaseBuilderServerGrpcServicesClient(cc grpc.ClientConnInterface) FenixTestCaseBuilderServerGrpcServicesClient {
	return &fenixTestCaseBuilderServerGrpcServicesClient{cc}
}

func (c *fenixTestCaseBuilderServerGrpcServicesClient) AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcServices_AreYouAlive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcServicesClient) ListAllAvailableTestInstructionsAndTestInstructionContainers(ctx context.Context, in *UserIdentificationMessage, opts ...grpc.CallOption) (*AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage, error) {
	out := new(AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcServices_ListAllAvailableTestInstructionsAndTestInstructionContainers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcServicesClient) ListAllAvailablePinnedTestInstructionsAndTestInstructionContainers(ctx context.Context, in *UserIdentificationMessage, opts ...grpc.CallOption) (*AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage, error) {
	out := new(AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcServices_ListAllAvailablePinnedTestInstructionsAndTestInstructionContainers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcServicesClient) ListAllAvailableBonds(ctx context.Context, in *UserIdentificationMessage, opts ...grpc.CallOption) (*ImmatureBondsMessage, error) {
	out := new(ImmatureBondsMessage)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcServices_ListAllAvailableBonds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcServicesClient) ListAllRepositoryApiUrls(ctx context.Context, in *UserIdentificationMessage, opts ...grpc.CallOption) (*ListAllRepositoryApiUrlsResponseMessage, error) {
	out := new(ListAllRepositoryApiUrlsResponseMessage)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcServices_ListAllRepositoryApiUrls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcServicesClient) ListAllTestDataForTestDataAreas(ctx context.Context, in *UserIdentificationMessage, opts ...grpc.CallOption) (*ListAllTestDataForTestDataAreasResponseMessage, error) {
	out := new(ListAllTestDataForTestDataAreasResponseMessage)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcServices_ListAllTestDataForTestDataAreas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcServicesClient) SaveAllPinnedTestInstructionsAndTestInstructionContainers(ctx context.Context, in *SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcServices_SaveAllPinnedTestInstructionsAndTestInstructionContainers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcServicesClient) ListAllTestCases(ctx context.Context, in *ListTestCasesRequestMessage, opts ...grpc.CallOption) (FenixTestCaseBuilderServerGrpcServices_ListAllTestCasesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FenixTestCaseBuilderServerGrpcServices_ServiceDesc.Streams[0], FenixTestCaseBuilderServerGrpcServices_ListAllTestCases_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fenixTestCaseBuilderServerGrpcServicesListAllTestCasesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FenixTestCaseBuilderServerGrpcServices_ListAllTestCasesClient interface {
	Recv() (*ListTestCasesResponseMessage, error)
	grpc.ClientStream
}

type fenixTestCaseBuilderServerGrpcServicesListAllTestCasesClient struct {
	grpc.ClientStream
}

func (x *fenixTestCaseBuilderServerGrpcServicesListAllTestCasesClient) Recv() (*ListTestCasesResponseMessage, error) {
	m := new(ListTestCasesResponseMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fenixTestCaseBuilderServerGrpcServicesClient) GetDetailedTestCase(ctx context.Context, in *GetTestCaseRequestMessage, opts ...grpc.CallOption) (*GetDetailedTestCaseResponse, error) {
	out := new(GetDetailedTestCaseResponse)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcServices_GetDetailedTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcServicesClient) ListAllTestCaseTestInstructions(ctx context.Context, in *ListAllTestInstructionsForSpecificTestCaseRequestMessage, opts ...grpc.CallOption) (*MatureTestInstructionsMessage, error) {
	out := new(MatureTestInstructionsMessage)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcServices_ListAllTestCaseTestInstructions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcServicesClient) ListAllTestCaseTestInstructionContainers(ctx context.Context, in *ListAllTestInstructionContainersForSpecificTestCaseRequestMessage, opts ...grpc.CallOption) (*MatureTestInstructionContainersMessage, error) {
	out := new(MatureTestInstructionContainersMessage)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcServices_ListAllTestCaseTestInstructionContainers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcServicesClient) ListTestCasesThatCanBeEdited(ctx context.Context, in *ListTestCasesRequestMessage, opts ...grpc.CallOption) (*ListTestCasesThatCanBeEditedResponseMessage, error) {
	out := new(ListTestCasesThatCanBeEditedResponseMessage)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcServices_ListTestCasesThatCanBeEdited_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcServicesClient) SaveFullTestCase(ctx context.Context, in *FullTestCaseMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcServices_SaveFullTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcServicesClient) SaveTestCase(ctx context.Context, in *TestCaseBasicInformationMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcServices_SaveTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcServicesClient) SaveAllTestCaseTestInstructions(ctx context.Context, in *SaveAllTestInstructionsForSpecificTestCaseRequestMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcServices_SaveAllTestCaseTestInstructions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcServicesClient) SaveAllTestCaseTestInstructionContainers(ctx context.Context, in *SaveAllTestInstructionContainersForSpecificTestCaseRequestMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcServices_SaveAllTestCaseTestInstructionContainers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcServicesClient) GetTestCasesHashes(ctx context.Context, in *TestCasesHashRequest, opts ...grpc.CallOption) (*TestCasesHashResponse, error) {
	out := new(TestCasesHashResponse)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcServices_GetTestCasesHashes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FenixTestCaseBuilderServerGrpcServicesServer is the server API for FenixTestCaseBuilderServerGrpcServices service.
// All implementations must embed UnimplementedFenixTestCaseBuilderServerGrpcServicesServer
// for forward compatibility
type FenixTestCaseBuilderServerGrpcServicesServer interface {
	// Anyone can check if Fenix TestCase Builder server is alive with this service
	AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error)
	// The TestCase Builder asks for all TestInstructions and Pre-defined TestInstructionContainer that the user can add to a TestCase
	ListAllAvailableTestInstructionsAndTestInstructionContainers(context.Context, *UserIdentificationMessage) (*AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage, error)
	// The TestCase Builder asks for which TestInstructions and Pre-defined TestInstructionContainer that the user has pinned in the GUI
	ListAllAvailablePinnedTestInstructionsAndTestInstructionContainers(context.Context, *UserIdentificationMessage) (*AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage, error)
	// The TestCase Builder asks for all Bonds-elements that can be used in the TestCase-model
	ListAllAvailableBonds(context.Context, *UserIdentificationMessage) (*ImmatureBondsMessage, error)
	// The TestCase Builder asks for a list of all url:s to repositories where templates are stored
	ListAllRepositoryApiUrls(context.Context, *UserIdentificationMessage) (*ListAllRepositoryApiUrlsResponseMessage, error)
	// The TestCase Builder asks for a list of all url:s to repositories where templates are stored
	ListAllTestDataForTestDataAreas(context.Context, *UserIdentificationMessage) (*ListAllTestDataForTestDataAreasResponseMessage, error)
	// The TestCase Builder sends all TestInstructions and Pre-defined TestInstructionContainer that the user has pinned in the GUI by the user
	SaveAllPinnedTestInstructionsAndTestInstructionContainers(context.Context, *SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage) (*AckNackResponse, error)
	// The TestCase Builder asks for a list of TestCase, with some basic information. Messages will be streamed in chunks of e.g. 100 TestCases per chunk
	ListAllTestCases(*ListTestCasesRequestMessage, FenixTestCaseBuilderServerGrpcServices_ListAllTestCasesServer) error
	// The TestCase Builder asks for one complete TestCase
	GetDetailedTestCase(context.Context, *GetTestCaseRequestMessage) (*GetDetailedTestCaseResponse, error)
	// List all TestInstructions in the TestCase
	ListAllTestCaseTestInstructions(context.Context, *ListAllTestInstructionsForSpecificTestCaseRequestMessage) (*MatureTestInstructionsMessage, error)
	// List all TestInstructionContainers in the TestCase
	ListAllTestCaseTestInstructionContainers(context.Context, *ListAllTestInstructionContainersForSpecificTestCaseRequestMessage) (*MatureTestInstructionContainersMessage, error)
	// List TestCases that the user can edit
	ListTestCasesThatCanBeEdited(context.Context, *ListTestCasesRequestMessage) (*ListTestCasesThatCanBeEditedResponseMessage, error)
	// Save full TestCase in DB
	SaveFullTestCase(context.Context, *FullTestCaseMessage) (*AckNackResponse, error)
	// Save a Basic TestCase info in DB
	SaveTestCase(context.Context, *TestCaseBasicInformationMessage) (*AckNackResponse, error)
	// Save all TestInstructions from the TestCase
	SaveAllTestCaseTestInstructions(context.Context, *SaveAllTestInstructionsForSpecificTestCaseRequestMessage) (*AckNackResponse, error)
	// Save all TestInstructionContainers from the TestCase
	SaveAllTestCaseTestInstructionContainers(context.Context, *SaveAllTestInstructionContainersForSpecificTestCaseRequestMessage) (*AckNackResponse, error)
	// *** Check if TestCases are updated by comparing TestCase-hash ***
	GetTestCasesHashes(context.Context, *TestCasesHashRequest) (*TestCasesHashResponse, error)
	mustEmbedUnimplementedFenixTestCaseBuilderServerGrpcServicesServer()
}

// UnimplementedFenixTestCaseBuilderServerGrpcServicesServer must be embedded to have forward compatible implementations.
type UnimplementedFenixTestCaseBuilderServerGrpcServicesServer struct {
}

func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreYouAlive not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) ListAllAvailableTestInstructionsAndTestInstructionContainers(context.Context, *UserIdentificationMessage) (*AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllAvailableTestInstructionsAndTestInstructionContainers not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) ListAllAvailablePinnedTestInstructionsAndTestInstructionContainers(context.Context, *UserIdentificationMessage) (*AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllAvailablePinnedTestInstructionsAndTestInstructionContainers not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) ListAllAvailableBonds(context.Context, *UserIdentificationMessage) (*ImmatureBondsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllAvailableBonds not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) ListAllRepositoryApiUrls(context.Context, *UserIdentificationMessage) (*ListAllRepositoryApiUrlsResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllRepositoryApiUrls not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) ListAllTestDataForTestDataAreas(context.Context, *UserIdentificationMessage) (*ListAllTestDataForTestDataAreasResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllTestDataForTestDataAreas not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) SaveAllPinnedTestInstructionsAndTestInstructionContainers(context.Context, *SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAllPinnedTestInstructionsAndTestInstructionContainers not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) ListAllTestCases(*ListTestCasesRequestMessage, FenixTestCaseBuilderServerGrpcServices_ListAllTestCasesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAllTestCases not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) GetDetailedTestCase(context.Context, *GetTestCaseRequestMessage) (*GetDetailedTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailedTestCase not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) ListAllTestCaseTestInstructions(context.Context, *ListAllTestInstructionsForSpecificTestCaseRequestMessage) (*MatureTestInstructionsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllTestCaseTestInstructions not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) ListAllTestCaseTestInstructionContainers(context.Context, *ListAllTestInstructionContainersForSpecificTestCaseRequestMessage) (*MatureTestInstructionContainersMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllTestCaseTestInstructionContainers not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) ListTestCasesThatCanBeEdited(context.Context, *ListTestCasesRequestMessage) (*ListTestCasesThatCanBeEditedResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestCasesThatCanBeEdited not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) SaveFullTestCase(context.Context, *FullTestCaseMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFullTestCase not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) SaveTestCase(context.Context, *TestCaseBasicInformationMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTestCase not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) SaveAllTestCaseTestInstructions(context.Context, *SaveAllTestInstructionsForSpecificTestCaseRequestMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAllTestCaseTestInstructions not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) SaveAllTestCaseTestInstructionContainers(context.Context, *SaveAllTestInstructionContainersForSpecificTestCaseRequestMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAllTestCaseTestInstructionContainers not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) GetTestCasesHashes(context.Context, *TestCasesHashRequest) (*TestCasesHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestCasesHashes not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcServicesServer) mustEmbedUnimplementedFenixTestCaseBuilderServerGrpcServicesServer() {
}

// UnsafeFenixTestCaseBuilderServerGrpcServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FenixTestCaseBuilderServerGrpcServicesServer will
// result in compilation errors.
type UnsafeFenixTestCaseBuilderServerGrpcServicesServer interface {
	mustEmbedUnimplementedFenixTestCaseBuilderServerGrpcServicesServer()
}

func RegisterFenixTestCaseBuilderServerGrpcServicesServer(s grpc.ServiceRegistrar, srv FenixTestCaseBuilderServerGrpcServicesServer) {
	s.RegisterService(&FenixTestCaseBuilderServerGrpcServices_ServiceDesc, srv)
}

func _FenixTestCaseBuilderServerGrpcServices_AreYouAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).AreYouAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcServices_AreYouAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).AreYouAlive(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcServices_ListAllAvailableTestInstructionsAndTestInstructionContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentificationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).ListAllAvailableTestInstructionsAndTestInstructionContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcServices_ListAllAvailableTestInstructionsAndTestInstructionContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).ListAllAvailableTestInstructionsAndTestInstructionContainers(ctx, req.(*UserIdentificationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcServices_ListAllAvailablePinnedTestInstructionsAndTestInstructionContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentificationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).ListAllAvailablePinnedTestInstructionsAndTestInstructionContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcServices_ListAllAvailablePinnedTestInstructionsAndTestInstructionContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).ListAllAvailablePinnedTestInstructionsAndTestInstructionContainers(ctx, req.(*UserIdentificationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcServices_ListAllAvailableBonds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentificationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).ListAllAvailableBonds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcServices_ListAllAvailableBonds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).ListAllAvailableBonds(ctx, req.(*UserIdentificationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcServices_ListAllRepositoryApiUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentificationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).ListAllRepositoryApiUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcServices_ListAllRepositoryApiUrls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).ListAllRepositoryApiUrls(ctx, req.(*UserIdentificationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcServices_ListAllTestDataForTestDataAreas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentificationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).ListAllTestDataForTestDataAreas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcServices_ListAllTestDataForTestDataAreas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).ListAllTestDataForTestDataAreas(ctx, req.(*UserIdentificationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcServices_SaveAllPinnedTestInstructionsAndTestInstructionContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).SaveAllPinnedTestInstructionsAndTestInstructionContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcServices_SaveAllPinnedTestInstructionsAndTestInstructionContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).SaveAllPinnedTestInstructionsAndTestInstructionContainers(ctx, req.(*SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcServices_ListAllTestCases_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTestCasesRequestMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FenixTestCaseBuilderServerGrpcServicesServer).ListAllTestCases(m, &fenixTestCaseBuilderServerGrpcServicesListAllTestCasesServer{stream})
}

type FenixTestCaseBuilderServerGrpcServices_ListAllTestCasesServer interface {
	Send(*ListTestCasesResponseMessage) error
	grpc.ServerStream
}

type fenixTestCaseBuilderServerGrpcServicesListAllTestCasesServer struct {
	grpc.ServerStream
}

func (x *fenixTestCaseBuilderServerGrpcServicesListAllTestCasesServer) Send(m *ListTestCasesResponseMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _FenixTestCaseBuilderServerGrpcServices_GetDetailedTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestCaseRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).GetDetailedTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcServices_GetDetailedTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).GetDetailedTestCase(ctx, req.(*GetTestCaseRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcServices_ListAllTestCaseTestInstructions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllTestInstructionsForSpecificTestCaseRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).ListAllTestCaseTestInstructions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcServices_ListAllTestCaseTestInstructions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).ListAllTestCaseTestInstructions(ctx, req.(*ListAllTestInstructionsForSpecificTestCaseRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcServices_ListAllTestCaseTestInstructionContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllTestInstructionContainersForSpecificTestCaseRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).ListAllTestCaseTestInstructionContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcServices_ListAllTestCaseTestInstructionContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).ListAllTestCaseTestInstructionContainers(ctx, req.(*ListAllTestInstructionContainersForSpecificTestCaseRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcServices_ListTestCasesThatCanBeEdited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestCasesRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).ListTestCasesThatCanBeEdited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcServices_ListTestCasesThatCanBeEdited_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).ListTestCasesThatCanBeEdited(ctx, req.(*ListTestCasesRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcServices_SaveFullTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullTestCaseMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).SaveFullTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcServices_SaveFullTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).SaveFullTestCase(ctx, req.(*FullTestCaseMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcServices_SaveTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseBasicInformationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).SaveTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcServices_SaveTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).SaveTestCase(ctx, req.(*TestCaseBasicInformationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcServices_SaveAllTestCaseTestInstructions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAllTestInstructionsForSpecificTestCaseRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).SaveAllTestCaseTestInstructions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcServices_SaveAllTestCaseTestInstructions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).SaveAllTestCaseTestInstructions(ctx, req.(*SaveAllTestInstructionsForSpecificTestCaseRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcServices_SaveAllTestCaseTestInstructionContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAllTestInstructionContainersForSpecificTestCaseRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).SaveAllTestCaseTestInstructionContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcServices_SaveAllTestCaseTestInstructionContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).SaveAllTestCaseTestInstructionContainers(ctx, req.(*SaveAllTestInstructionContainersForSpecificTestCaseRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcServices_GetTestCasesHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCasesHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).GetTestCasesHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcServices_GetTestCasesHashes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcServicesServer).GetTestCasesHashes(ctx, req.(*TestCasesHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FenixTestCaseBuilderServerGrpcServices_ServiceDesc is the grpc.ServiceDesc for FenixTestCaseBuilderServerGrpcServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FenixTestCaseBuilderServerGrpcServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices",
	HandlerType: (*FenixTestCaseBuilderServerGrpcServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AreYouAlive",
			Handler:    _FenixTestCaseBuilderServerGrpcServices_AreYouAlive_Handler,
		},
		{
			MethodName: "ListAllAvailableTestInstructionsAndTestInstructionContainers",
			Handler:    _FenixTestCaseBuilderServerGrpcServices_ListAllAvailableTestInstructionsAndTestInstructionContainers_Handler,
		},
		{
			MethodName: "ListAllAvailablePinnedTestInstructionsAndTestInstructionContainers",
			Handler:    _FenixTestCaseBuilderServerGrpcServices_ListAllAvailablePinnedTestInstructionsAndTestInstructionContainers_Handler,
		},
		{
			MethodName: "ListAllAvailableBonds",
			Handler:    _FenixTestCaseBuilderServerGrpcServices_ListAllAvailableBonds_Handler,
		},
		{
			MethodName: "ListAllRepositoryApiUrls",
			Handler:    _FenixTestCaseBuilderServerGrpcServices_ListAllRepositoryApiUrls_Handler,
		},
		{
			MethodName: "ListAllTestDataForTestDataAreas",
			Handler:    _FenixTestCaseBuilderServerGrpcServices_ListAllTestDataForTestDataAreas_Handler,
		},
		{
			MethodName: "SaveAllPinnedTestInstructionsAndTestInstructionContainers",
			Handler:    _FenixTestCaseBuilderServerGrpcServices_SaveAllPinnedTestInstructionsAndTestInstructionContainers_Handler,
		},
		{
			MethodName: "GetDetailedTestCase",
			Handler:    _FenixTestCaseBuilderServerGrpcServices_GetDetailedTestCase_Handler,
		},
		{
			MethodName: "ListAllTestCaseTestInstructions",
			Handler:    _FenixTestCaseBuilderServerGrpcServices_ListAllTestCaseTestInstructions_Handler,
		},
		{
			MethodName: "ListAllTestCaseTestInstructionContainers",
			Handler:    _FenixTestCaseBuilderServerGrpcServices_ListAllTestCaseTestInstructionContainers_Handler,
		},
		{
			MethodName: "ListTestCasesThatCanBeEdited",
			Handler:    _FenixTestCaseBuilderServerGrpcServices_ListTestCasesThatCanBeEdited_Handler,
		},
		{
			MethodName: "SaveFullTestCase",
			Handler:    _FenixTestCaseBuilderServerGrpcServices_SaveFullTestCase_Handler,
		},
		{
			MethodName: "SaveTestCase",
			Handler:    _FenixTestCaseBuilderServerGrpcServices_SaveTestCase_Handler,
		},
		{
			MethodName: "SaveAllTestCaseTestInstructions",
			Handler:    _FenixTestCaseBuilderServerGrpcServices_SaveAllTestCaseTestInstructions_Handler,
		},
		{
			MethodName: "SaveAllTestCaseTestInstructionContainers",
			Handler:    _FenixTestCaseBuilderServerGrpcServices_SaveAllTestCaseTestInstructionContainers_Handler,
		},
		{
			MethodName: "GetTestCasesHashes",
			Handler:    _FenixTestCaseBuilderServerGrpcServices_GetTestCasesHashes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAllTestCases",
			Handler:       _FenixTestCaseBuilderServerGrpcServices_ListAllTestCases_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi.proto",
}

const (
	FenixTestCaseBuilderServerGrpcWorkerServices_PublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_FullMethodName = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcWorkerServices/PublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers"
	FenixTestCaseBuilderServerGrpcWorkerServices_ConnectorPublishTemplateRepositoryConnectionParameters_FullMethodName                      = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcWorkerServices/ConnectorPublishTemplateRepositoryConnectionParameters"
	FenixTestCaseBuilderServerGrpcWorkerServices_ConnectorPublishTestDataFromSimpleTestDataAreaFile_FullMethodName                          = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcWorkerServices/ConnectorPublishTestDataFromSimpleTestDataAreaFile"
	FenixTestCaseBuilderServerGrpcWorkerServices_GetMessageToSignToProveCallerIdentity_FullMethodName                                       = "/fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcWorkerServices/GetMessageToSignToProveCallerIdentity"
)

// FenixTestCaseBuilderServerGrpcWorkerServicesClient is the client API for FenixTestCaseBuilderServerGrpcWorkerServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FenixTestCaseBuilderServerGrpcWorkerServicesClient interface {
	// Connector publish supported TestInstructions, TestInstructionContainers and allowed Users
	PublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers(ctx context.Context, in *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Connector publish Template Repository Connection Parameters
	ConnectorPublishTemplateRepositoryConnectionParameters(ctx context.Context, in *AllTemplateRepositoryConnectionParameters, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Connector Publish TestData From a Simple TestData-file for one TestData-area
	ConnectorPublishTestDataFromSimpleTestDataAreaFile(ctx context.Context, in *TestDataFromSimpleTestDataAreaFileMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
	// Worker ask TestCaseBuilderServer for a Message to Sign to be able to prove identity
	GetMessageToSignToProveCallerIdentity(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*GetMessageToSignToProveCallerIdentityResponse, error)
}

type fenixTestCaseBuilderServerGrpcWorkerServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewFenixTestCaseBuilderServerGrpcWorkerServicesClient(cc grpc.ClientConnInterface) FenixTestCaseBuilderServerGrpcWorkerServicesClient {
	return &fenixTestCaseBuilderServerGrpcWorkerServicesClient{cc}
}

func (c *fenixTestCaseBuilderServerGrpcWorkerServicesClient) PublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers(ctx context.Context, in *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcWorkerServices_PublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcWorkerServicesClient) ConnectorPublishTemplateRepositoryConnectionParameters(ctx context.Context, in *AllTemplateRepositoryConnectionParameters, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcWorkerServices_ConnectorPublishTemplateRepositoryConnectionParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcWorkerServicesClient) ConnectorPublishTestDataFromSimpleTestDataAreaFile(ctx context.Context, in *TestDataFromSimpleTestDataAreaFileMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcWorkerServices_ConnectorPublishTestDataFromSimpleTestDataAreaFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestCaseBuilderServerGrpcWorkerServicesClient) GetMessageToSignToProveCallerIdentity(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*GetMessageToSignToProveCallerIdentityResponse, error) {
	out := new(GetMessageToSignToProveCallerIdentityResponse)
	err := c.cc.Invoke(ctx, FenixTestCaseBuilderServerGrpcWorkerServices_GetMessageToSignToProveCallerIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FenixTestCaseBuilderServerGrpcWorkerServicesServer is the server API for FenixTestCaseBuilderServerGrpcWorkerServices service.
// All implementations must embed UnimplementedFenixTestCaseBuilderServerGrpcWorkerServicesServer
// for forward compatibility
type FenixTestCaseBuilderServerGrpcWorkerServicesServer interface {
	// Connector publish supported TestInstructions, TestInstructionContainers and allowed Users
	PublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers(context.Context, *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) (*AckNackResponse, error)
	// Connector publish Template Repository Connection Parameters
	ConnectorPublishTemplateRepositoryConnectionParameters(context.Context, *AllTemplateRepositoryConnectionParameters) (*AckNackResponse, error)
	// Connector Publish TestData From a Simple TestData-file for one TestData-area
	ConnectorPublishTestDataFromSimpleTestDataAreaFile(context.Context, *TestDataFromSimpleTestDataAreaFileMessage) (*AckNackResponse, error)
	// Worker ask TestCaseBuilderServer for a Message to Sign to be able to prove identity
	GetMessageToSignToProveCallerIdentity(context.Context, *EmptyParameter) (*GetMessageToSignToProveCallerIdentityResponse, error)
	mustEmbedUnimplementedFenixTestCaseBuilderServerGrpcWorkerServicesServer()
}

// UnimplementedFenixTestCaseBuilderServerGrpcWorkerServicesServer must be embedded to have forward compatible implementations.
type UnimplementedFenixTestCaseBuilderServerGrpcWorkerServicesServer struct {
}

func (UnimplementedFenixTestCaseBuilderServerGrpcWorkerServicesServer) PublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers(context.Context, *SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcWorkerServicesServer) ConnectorPublishTemplateRepositoryConnectionParameters(context.Context, *AllTemplateRepositoryConnectionParameters) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectorPublishTemplateRepositoryConnectionParameters not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcWorkerServicesServer) ConnectorPublishTestDataFromSimpleTestDataAreaFile(context.Context, *TestDataFromSimpleTestDataAreaFileMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectorPublishTestDataFromSimpleTestDataAreaFile not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcWorkerServicesServer) GetMessageToSignToProveCallerIdentity(context.Context, *EmptyParameter) (*GetMessageToSignToProveCallerIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageToSignToProveCallerIdentity not implemented")
}
func (UnimplementedFenixTestCaseBuilderServerGrpcWorkerServicesServer) mustEmbedUnimplementedFenixTestCaseBuilderServerGrpcWorkerServicesServer() {
}

// UnsafeFenixTestCaseBuilderServerGrpcWorkerServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FenixTestCaseBuilderServerGrpcWorkerServicesServer will
// result in compilation errors.
type UnsafeFenixTestCaseBuilderServerGrpcWorkerServicesServer interface {
	mustEmbedUnimplementedFenixTestCaseBuilderServerGrpcWorkerServicesServer()
}

func RegisterFenixTestCaseBuilderServerGrpcWorkerServicesServer(s grpc.ServiceRegistrar, srv FenixTestCaseBuilderServerGrpcWorkerServicesServer) {
	s.RegisterService(&FenixTestCaseBuilderServerGrpcWorkerServices_ServiceDesc, srv)
}

func _FenixTestCaseBuilderServerGrpcWorkerServices_PublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcWorkerServicesServer).PublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcWorkerServices_PublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcWorkerServicesServer).PublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers(ctx, req.(*SupportedTestInstructionsAndTestInstructionContainersAndAllowedUsersMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcWorkerServices_ConnectorPublishTemplateRepositoryConnectionParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllTemplateRepositoryConnectionParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcWorkerServicesServer).ConnectorPublishTemplateRepositoryConnectionParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcWorkerServices_ConnectorPublishTemplateRepositoryConnectionParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcWorkerServicesServer).ConnectorPublishTemplateRepositoryConnectionParameters(ctx, req.(*AllTemplateRepositoryConnectionParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcWorkerServices_ConnectorPublishTestDataFromSimpleTestDataAreaFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestDataFromSimpleTestDataAreaFileMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcWorkerServicesServer).ConnectorPublishTestDataFromSimpleTestDataAreaFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcWorkerServices_ConnectorPublishTestDataFromSimpleTestDataAreaFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcWorkerServicesServer).ConnectorPublishTestDataFromSimpleTestDataAreaFile(ctx, req.(*TestDataFromSimpleTestDataAreaFileMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestCaseBuilderServerGrpcWorkerServices_GetMessageToSignToProveCallerIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestCaseBuilderServerGrpcWorkerServicesServer).GetMessageToSignToProveCallerIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FenixTestCaseBuilderServerGrpcWorkerServices_GetMessageToSignToProveCallerIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestCaseBuilderServerGrpcWorkerServicesServer).GetMessageToSignToProveCallerIdentity(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

// FenixTestCaseBuilderServerGrpcWorkerServices_ServiceDesc is the grpc.ServiceDesc for FenixTestCaseBuilderServerGrpcWorkerServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FenixTestCaseBuilderServerGrpcWorkerServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcWorkerServices",
	HandlerType: (*FenixTestCaseBuilderServerGrpcWorkerServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers",
			Handler:    _FenixTestCaseBuilderServerGrpcWorkerServices_PublishSupportedTestInstructionsAndTestInstructionContainersAndAllowedUsers_Handler,
		},
		{
			MethodName: "ConnectorPublishTemplateRepositoryConnectionParameters",
			Handler:    _FenixTestCaseBuilderServerGrpcWorkerServices_ConnectorPublishTemplateRepositoryConnectionParameters_Handler,
		},
		{
			MethodName: "ConnectorPublishTestDataFromSimpleTestDataAreaFile",
			Handler:    _FenixTestCaseBuilderServerGrpcWorkerServices_ConnectorPublishTestDataFromSimpleTestDataAreaFile_Handler,
		},
		{
			MethodName: "GetMessageToSignToProveCallerIdentity",
			Handler:    _FenixTestCaseBuilderServerGrpcWorkerServices_GetMessageToSignToProveCallerIdentity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi.proto",
}
