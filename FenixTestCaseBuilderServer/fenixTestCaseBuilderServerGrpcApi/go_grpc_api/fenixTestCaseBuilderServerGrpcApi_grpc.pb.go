// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FenixTestDataGrpcServicesClient is the client API for FenixTestDataGrpcServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FenixTestDataGrpcServicesClient interface {
	//Fenix client can check if Fenix Testdata sync server is alive with this service
	AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error)
	// The TestCase Builder asks for all TestInstructions and Pre-defined TestInstructionContainer that the user can add to a TestCase
	GetTestInstructionsAndTestContainers(ctx context.Context, in *UserIdentificationMessage, opts ...grpc.CallOption) (*TestInstructionsAndTestContainersMessage, error)
	// The TestCase Builder asks for which TestInstructions and Pre-defined TestInstructionContainer that the user has pinned in the GUI
	GetPinnedTestInstructionsAndTestContainers(ctx context.Context, in *UserIdentificationMessage, opts ...grpc.CallOption) (*TestInstructionsAndTestContainersMessage, error)
	// The TestCase Builder sends all TestInstructions and Pre-defined TestInstructionContainer that the user has pinned in the GUI
	SendTestInstructionsAndTestContainers(ctx context.Context, in *PinnedTestInstructionsAndTestContainersMessage, opts ...grpc.CallOption) (*AckNackResponse, error)
}

type fenixTestDataGrpcServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewFenixTestDataGrpcServicesClient(cc grpc.ClientConnInterface) FenixTestDataGrpcServicesClient {
	return &fenixTestDataGrpcServicesClient{cc}
}

func (c *fenixTestDataGrpcServicesClient) AreYouAlive(ctx context.Context, in *EmptyParameter, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixTestCaseBuilderServerGrpcApi.FenixTestDataGrpcServices/AreYouAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestDataGrpcServicesClient) GetTestInstructionsAndTestContainers(ctx context.Context, in *UserIdentificationMessage, opts ...grpc.CallOption) (*TestInstructionsAndTestContainersMessage, error) {
	out := new(TestInstructionsAndTestContainersMessage)
	err := c.cc.Invoke(ctx, "/fenixTestCaseBuilderServerGrpcApi.FenixTestDataGrpcServices/GetTestInstructionsAndTestContainers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestDataGrpcServicesClient) GetPinnedTestInstructionsAndTestContainers(ctx context.Context, in *UserIdentificationMessage, opts ...grpc.CallOption) (*TestInstructionsAndTestContainersMessage, error) {
	out := new(TestInstructionsAndTestContainersMessage)
	err := c.cc.Invoke(ctx, "/fenixTestCaseBuilderServerGrpcApi.FenixTestDataGrpcServices/GetPinnedTestInstructionsAndTestContainers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fenixTestDataGrpcServicesClient) SendTestInstructionsAndTestContainers(ctx context.Context, in *PinnedTestInstructionsAndTestContainersMessage, opts ...grpc.CallOption) (*AckNackResponse, error) {
	out := new(AckNackResponse)
	err := c.cc.Invoke(ctx, "/fenixTestCaseBuilderServerGrpcApi.FenixTestDataGrpcServices/SendTestInstructionsAndTestContainers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FenixTestDataGrpcServicesServer is the server API for FenixTestDataGrpcServices service.
// All implementations must embed UnimplementedFenixTestDataGrpcServicesServer
// for forward compatibility
type FenixTestDataGrpcServicesServer interface {
	//Fenix client can check if Fenix Testdata sync server is alive with this service
	AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error)
	// The TestCase Builder asks for all TestInstructions and Pre-defined TestInstructionContainer that the user can add to a TestCase
	GetTestInstructionsAndTestContainers(context.Context, *UserIdentificationMessage) (*TestInstructionsAndTestContainersMessage, error)
	// The TestCase Builder asks for which TestInstructions and Pre-defined TestInstructionContainer that the user has pinned in the GUI
	GetPinnedTestInstructionsAndTestContainers(context.Context, *UserIdentificationMessage) (*TestInstructionsAndTestContainersMessage, error)
	// The TestCase Builder sends all TestInstructions and Pre-defined TestInstructionContainer that the user has pinned in the GUI
	SendTestInstructionsAndTestContainers(context.Context, *PinnedTestInstructionsAndTestContainersMessage) (*AckNackResponse, error)
	mustEmbedUnimplementedFenixTestDataGrpcServicesServer()
}

// UnimplementedFenixTestDataGrpcServicesServer must be embedded to have forward compatible implementations.
type UnimplementedFenixTestDataGrpcServicesServer struct {
}

func (UnimplementedFenixTestDataGrpcServicesServer) AreYouAlive(context.Context, *EmptyParameter) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreYouAlive not implemented")
}
func (UnimplementedFenixTestDataGrpcServicesServer) GetTestInstructionsAndTestContainers(context.Context, *UserIdentificationMessage) (*TestInstructionsAndTestContainersMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestInstructionsAndTestContainers not implemented")
}
func (UnimplementedFenixTestDataGrpcServicesServer) GetPinnedTestInstructionsAndTestContainers(context.Context, *UserIdentificationMessage) (*TestInstructionsAndTestContainersMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPinnedTestInstructionsAndTestContainers not implemented")
}
func (UnimplementedFenixTestDataGrpcServicesServer) SendTestInstructionsAndTestContainers(context.Context, *PinnedTestInstructionsAndTestContainersMessage) (*AckNackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTestInstructionsAndTestContainers not implemented")
}
func (UnimplementedFenixTestDataGrpcServicesServer) mustEmbedUnimplementedFenixTestDataGrpcServicesServer() {
}

// UnsafeFenixTestDataGrpcServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FenixTestDataGrpcServicesServer will
// result in compilation errors.
type UnsafeFenixTestDataGrpcServicesServer interface {
	mustEmbedUnimplementedFenixTestDataGrpcServicesServer()
}

func RegisterFenixTestDataGrpcServicesServer(s grpc.ServiceRegistrar, srv FenixTestDataGrpcServicesServer) {
	s.RegisterService(&FenixTestDataGrpcServices_ServiceDesc, srv)
}

func _FenixTestDataGrpcServices_AreYouAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestDataGrpcServicesServer).AreYouAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixTestCaseBuilderServerGrpcApi.FenixTestDataGrpcServices/AreYouAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestDataGrpcServicesServer).AreYouAlive(ctx, req.(*EmptyParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestDataGrpcServices_GetTestInstructionsAndTestContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentificationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestDataGrpcServicesServer).GetTestInstructionsAndTestContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixTestCaseBuilderServerGrpcApi.FenixTestDataGrpcServices/GetTestInstructionsAndTestContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestDataGrpcServicesServer).GetTestInstructionsAndTestContainers(ctx, req.(*UserIdentificationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestDataGrpcServices_GetPinnedTestInstructionsAndTestContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentificationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestDataGrpcServicesServer).GetPinnedTestInstructionsAndTestContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixTestCaseBuilderServerGrpcApi.FenixTestDataGrpcServices/GetPinnedTestInstructionsAndTestContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestDataGrpcServicesServer).GetPinnedTestInstructionsAndTestContainers(ctx, req.(*UserIdentificationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FenixTestDataGrpcServices_SendTestInstructionsAndTestContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinnedTestInstructionsAndTestContainersMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FenixTestDataGrpcServicesServer).SendTestInstructionsAndTestContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fenixTestCaseBuilderServerGrpcApi.FenixTestDataGrpcServices/SendTestInstructionsAndTestContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FenixTestDataGrpcServicesServer).SendTestInstructionsAndTestContainers(ctx, req.(*PinnedTestInstructionsAndTestContainersMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// FenixTestDataGrpcServices_ServiceDesc is the grpc.ServiceDesc for FenixTestDataGrpcServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FenixTestDataGrpcServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fenixTestCaseBuilderServerGrpcApi.FenixTestDataGrpcServices",
	HandlerType: (*FenixTestDataGrpcServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AreYouAlive",
			Handler:    _FenixTestDataGrpcServices_AreYouAlive_Handler,
		},
		{
			MethodName: "GetTestInstructionsAndTestContainers",
			Handler:    _FenixTestDataGrpcServices_GetTestInstructionsAndTestContainers_Handler,
		},
		{
			MethodName: "GetPinnedTestInstructionsAndTestContainers",
			Handler:    _FenixTestDataGrpcServices_GetPinnedTestInstructionsAndTestContainers_Handler,
		},
		{
			MethodName: "SendTestInstructionsAndTestContainers",
			Handler:    _FenixTestDataGrpcServices_SendTestInstructionsAndTestContainers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fenixTestCaseBuilderServerGrpcApi.proto",
}
