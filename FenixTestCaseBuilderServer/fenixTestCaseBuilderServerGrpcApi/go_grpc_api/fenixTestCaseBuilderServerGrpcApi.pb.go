// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: fenixTestCaseBuilderServerGrpcApi.proto

package go_grpc_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Used to have client and server in sync with using the same proto file version
type CurrentFenixTestDataProtoFileVersionEnum int32

const (
	// Deprecated: Do not use.
	CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_0 CurrentFenixTestDataProtoFileVersionEnum = 0
	CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_1 CurrentFenixTestDataProtoFileVersionEnum = 1 // Current version // Current version
)

// Enum value maps for CurrentFenixTestDataProtoFileVersionEnum.
var (
	CurrentFenixTestDataProtoFileVersionEnum_name = map[int32]string{
		0: "VERSION_0_0",
		1: "VERSION_0_1",
	}
	CurrentFenixTestDataProtoFileVersionEnum_value = map[string]int32{
		"VERSION_0_0": 0,
		"VERSION_0_1": 1,
	}
)

func (x CurrentFenixTestDataProtoFileVersionEnum) Enum() *CurrentFenixTestDataProtoFileVersionEnum {
	p := new(CurrentFenixTestDataProtoFileVersionEnum)
	*p = x
	return p
}

func (x CurrentFenixTestDataProtoFileVersionEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrentFenixTestDataProtoFileVersionEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes[0].Descriptor()
}

func (CurrentFenixTestDataProtoFileVersionEnum) Type() protoreflect.EnumType {
	return &file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes[0]
}

func (x CurrentFenixTestDataProtoFileVersionEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrentFenixTestDataProtoFileVersionEnum.Descriptor instead.
func (CurrentFenixTestDataProtoFileVersionEnum) EnumDescriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{0}
}

// Error codes - for now a test
type ErrorCodesEnum int32

const (
	ErrorCodesEnum_OK                             ErrorCodesEnum = 0
	ErrorCodesEnum_ERROR_UNKNOWN_CALLER           ErrorCodesEnum = 1
	ErrorCodesEnum_ERROR_WRONG_PROTO_FILE_VERSION ErrorCodesEnum = 2
	ErrorCodesEnum_ERROR_UNSPECIFIED              ErrorCodesEnum = 3
)

// Enum value maps for ErrorCodesEnum.
var (
	ErrorCodesEnum_name = map[int32]string{
		0: "OK",
		1: "ERROR_UNKNOWN_CALLER",
		2: "ERROR_WRONG_PROTO_FILE_VERSION",
		3: "ERROR_UNSPECIFIED",
	}
	ErrorCodesEnum_value = map[string]int32{
		"OK":                             0,
		"ERROR_UNKNOWN_CALLER":           1,
		"ERROR_WRONG_PROTO_FILE_VERSION": 2,
		"ERROR_UNSPECIFIED":              3,
	}
)

func (x ErrorCodesEnum) Enum() *ErrorCodesEnum {
	p := new(ErrorCodesEnum)
	*p = x
	return p
}

func (x ErrorCodesEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCodesEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes[1].Descriptor()
}

func (ErrorCodesEnum) Type() protoreflect.EnumType {
	return &file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes[1]
}

func (x ErrorCodesEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCodesEnum.Descriptor instead.
func (ErrorCodesEnum) EnumDescriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{1}
}

// How a TestInstructionContainer is processed
type TestInstructionContainerExecutionTypeEnum int32

const (
	TestInstructionContainerExecutionTypeEnum_PARALLELLED_PROCESSED TestInstructionContainerExecutionTypeEnum = 0 // Children in container is parallelled processed
	TestInstructionContainerExecutionTypeEnum_SERIAL_PROCESSED      TestInstructionContainerExecutionTypeEnum = 1 // Children in container is serial processed
)

// Enum value maps for TestInstructionContainerExecutionTypeEnum.
var (
	TestInstructionContainerExecutionTypeEnum_name = map[int32]string{
		0: "PARALLELLED_PROCESSED",
		1: "SERIAL_PROCESSED",
	}
	TestInstructionContainerExecutionTypeEnum_value = map[string]int32{
		"PARALLELLED_PROCESSED": 0,
		"SERIAL_PROCESSED":      1,
	}
)

func (x TestInstructionContainerExecutionTypeEnum) Enum() *TestInstructionContainerExecutionTypeEnum {
	p := new(TestInstructionContainerExecutionTypeEnum)
	*p = x
	return p
}

func (x TestInstructionContainerExecutionTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestInstructionContainerExecutionTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes[2].Descriptor()
}

func (TestInstructionContainerExecutionTypeEnum) Type() protoreflect.EnumType {
	return &file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes[2]
}

func (x TestInstructionContainerExecutionTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestInstructionContainerExecutionTypeEnum.Descriptor instead.
func (TestInstructionContainerExecutionTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{2}
}

// Parameter used for Empty inputs, only containing current proto-file version
type EmptyParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoFileVersionUsedByClient CurrentFenixTestDataProtoFileVersionEnum `protobuf:"varint,1,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
}

func (x *EmptyParameter) Reset() {
	*x = EmptyParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyParameter) ProtoMessage() {}

func (x *EmptyParameter) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyParameter.ProtoReflect.Descriptor instead.
func (*EmptyParameter) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{0}
}

func (x *EmptyParameter) GetProtoFileVersionUsedByClient() CurrentFenixTestDataProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_0
}

// Ack/Nack- Response message with comment
type AckNackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckNack    bool             `protobuf:"varint,1,opt,name=AckNack,proto3" json:"AckNack,omitempty"`                                                                    // True=Ack, False=Nack
	Comments   string           `protobuf:"bytes,2,opt,name=Comments,proto3" json:"Comments,omitempty"`                                                                   //Comments if needed
	ErrorCodes []ErrorCodesEnum `protobuf:"varint,3,rep,packed,name=ErrorCodes,proto3,enum=fenixTestCaseBuilderServerGrpcApi.ErrorCodesEnum" json:"ErrorCodes,omitempty"` // List of Error codes
}

func (x *AckNackResponse) Reset() {
	*x = AckNackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckNackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckNackResponse) ProtoMessage() {}

func (x *AckNackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckNackResponse.ProtoReflect.Descriptor instead.
func (*AckNackResponse) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{1}
}

func (x *AckNackResponse) GetAckNack() bool {
	if x != nil {
		return x.AckNack
	}
	return false
}

func (x *AckNackResponse) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *AckNackResponse) GetErrorCodes() []ErrorCodesEnum {
	if x != nil {
		return x.ErrorCodes
	}
	return nil
}

// Message Holding information about who is the calling client
type UserIdentificationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                       string                                   `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`                                                                                                                              // The Users Id, SEB S-id will be used for SEB
	ProtoFileVersionUsedByClient CurrentFenixTestDataProtoFileVersionEnum `protobuf:"varint,2,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
}

func (x *UserIdentificationMessage) Reset() {
	*x = UserIdentificationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdentificationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdentificationMessage) ProtoMessage() {}

func (x *UserIdentificationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdentificationMessage.ProtoReflect.Descriptor instead.
func (*UserIdentificationMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{2}
}

func (x *UserIdentificationMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserIdentificationMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestDataProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_0
}

// Message holding all supported TestInstructions and Pre-defined TestInstructionContainers that the user can use when building TestCases
type TestInstructionsAndTestContainersMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUuid                       string                             `protobuf:"bytes,1,opt,name=DomainUuid,proto3" json:"DomainUuid,omitempty"`                                             // The Domain, UUID, where the system resides
	DomainName                       string                             `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                             // The Domain, Name, where the system resides
	SystemUuid                       string                             `protobuf:"bytes,3,opt,name=SystemUuid,proto3" json:"SystemUuid,omitempty"`                                             // The System, UUID, where the TestInstructions and TestInstruction can be used
	SystemName                       string                             `protobuf:"bytes,4,opt,name=SystemName,proto3" json:"SystemName,omitempty"`                                             // The System, Name, where the TestInstructions and TestInstruction can be used
	TestInstructionMessages          []*TestInstructionMessage          `protobuf:"bytes,5,rep,name=TestInstructionMessages,proto3" json:"TestInstructionMessages,omitempty"`                   // List of all TestInstruction for the System
	TestInstructionContainerMessages []*TestInstructionContainerMessage `protobuf:"bytes,6,rep,name=TestInstructionContainerMessages,proto3" json:"TestInstructionContainerMessages,omitempty"` // List of all pre-defined TestInstructionContainers for the System
}

func (x *TestInstructionsAndTestContainersMessage) Reset() {
	*x = TestInstructionsAndTestContainersMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionsAndTestContainersMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionsAndTestContainersMessage) ProtoMessage() {}

func (x *TestInstructionsAndTestContainersMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionsAndTestContainersMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionsAndTestContainersMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{3}
}

func (x *TestInstructionsAndTestContainersMessage) GetDomainUuid() string {
	if x != nil {
		return x.DomainUuid
	}
	return ""
}

func (x *TestInstructionsAndTestContainersMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *TestInstructionsAndTestContainersMessage) GetSystemUuid() string {
	if x != nil {
		return x.SystemUuid
	}
	return ""
}

func (x *TestInstructionsAndTestContainersMessage) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

func (x *TestInstructionsAndTestContainersMessage) GetTestInstructionMessages() []*TestInstructionMessage {
	if x != nil {
		return x.TestInstructionMessages
	}
	return nil
}

func (x *TestInstructionsAndTestContainersMessage) GetTestInstructionContainerMessages() []*TestInstructionContainerMessage {
	if x != nil {
		return x.TestInstructionContainerMessages
	}
	return nil
}

// Message holding TestInstructions and Pre-defined TestInstructionContainers that the user can has pinned in the GUI
type PinnedTestInstructionsAndTestContainersMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                           string                                   `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`                                                                                                                              // The Users Id, SEB S-id will be used for SEB
	ProtoFileVersionUsedByClient     CurrentFenixTestDataProtoFileVersionEnum `protobuf:"varint,2,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
	DomainUuid                       string                                   `protobuf:"bytes,3,opt,name=DomainUuid,proto3" json:"DomainUuid,omitempty"`                                                                                                                      // The Domain, UUID, where the system resides
	DomainName                       string                                   `protobuf:"bytes,4,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                                                                                                      // The Domain, Name, where the system resides
	SystemUuid                       string                                   `protobuf:"bytes,5,opt,name=SystemUuid,proto3" json:"SystemUuid,omitempty"`                                                                                                                      // The System, UUID, where the TestInstructions and TestInstruction can be used
	SystemName                       string                                   `protobuf:"bytes,6,opt,name=SystemName,proto3" json:"SystemName,omitempty"`                                                                                                                      // The System, Name, where the TestInstructions and TestInstruction can be used
	TestInstructionMessages          []*TestInstructionMessage                `protobuf:"bytes,7,rep,name=TestInstructionMessages,proto3" json:"TestInstructionMessages,omitempty"`                                                                                            // List of all TestInstruction for the System
	TestInstructionContainerMessages []*TestInstructionContainerMessage       `protobuf:"bytes,8,rep,name=TestInstructionContainerMessages,proto3" json:"TestInstructionContainerMessages,omitempty"`                                                                          // List of all pre-defined TestInstructionContainers for the System
}

func (x *PinnedTestInstructionsAndTestContainersMessage) Reset() {
	*x = PinnedTestInstructionsAndTestContainersMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnedTestInstructionsAndTestContainersMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnedTestInstructionsAndTestContainersMessage) ProtoMessage() {}

func (x *PinnedTestInstructionsAndTestContainersMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnedTestInstructionsAndTestContainersMessage.ProtoReflect.Descriptor instead.
func (*PinnedTestInstructionsAndTestContainersMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{4}
}

func (x *PinnedTestInstructionsAndTestContainersMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PinnedTestInstructionsAndTestContainersMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestDataProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_0
}

func (x *PinnedTestInstructionsAndTestContainersMessage) GetDomainUuid() string {
	if x != nil {
		return x.DomainUuid
	}
	return ""
}

func (x *PinnedTestInstructionsAndTestContainersMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *PinnedTestInstructionsAndTestContainersMessage) GetSystemUuid() string {
	if x != nil {
		return x.SystemUuid
	}
	return ""
}

func (x *PinnedTestInstructionsAndTestContainersMessage) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

func (x *PinnedTestInstructionsAndTestContainersMessage) GetTestInstructionMessages() []*TestInstructionMessage {
	if x != nil {
		return x.TestInstructionMessages
	}
	return nil
}

func (x *PinnedTestInstructionsAndTestContainersMessage) GetTestInstructionContainerMessages() []*TestInstructionContainerMessage {
	if x != nil {
		return x.TestInstructionContainerMessages
	}
	return nil
}

// Message holding one TestInstruction
type TestInstructionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionUuid     string `protobuf:"bytes,1,opt,name=TestInstructionUuid,proto3" json:"TestInstructionUuid,omitempty"`         // TestInstruction UUID
	TestInstructionName     string `protobuf:"bytes,2,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"`         // TestInstruction Name
	TestInstructionTypeUuid string `protobuf:"bytes,3,opt,name=TestInstructionTypeUuid,proto3" json:"TestInstructionTypeUuid,omitempty"` // The Type(Group), Uuid, of TestInstruction
	TestInstructionTypeName string `protobuf:"bytes,4,opt,name=TestInstructionTypeName,proto3" json:"TestInstructionTypeName,omitempty"` // The Type(Group), Name, of TestInstruction
	Deprecated              bool   `protobuf:"varint,5,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`                          // Indicates that this TestInstruction shouldn't be used anymore
	Enabled                 bool   `protobuf:"varint,6,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                                // TestInstruction can be disabled when the user shouldn't use anymore
}

func (x *TestInstructionMessage) Reset() {
	*x = TestInstructionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionMessage) ProtoMessage() {}

func (x *TestInstructionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{5}
}

func (x *TestInstructionMessage) GetTestInstructionUuid() string {
	if x != nil {
		return x.TestInstructionUuid
	}
	return ""
}

func (x *TestInstructionMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

func (x *TestInstructionMessage) GetTestInstructionTypeUuid() string {
	if x != nil {
		return x.TestInstructionTypeUuid
	}
	return ""
}

func (x *TestInstructionMessage) GetTestInstructionTypeName() string {
	if x != nil {
		return x.TestInstructionTypeName
	}
	return ""
}

func (x *TestInstructionMessage) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *TestInstructionMessage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Message holding one TestInstructionContainer and reference to its children
type TestInstructionContainerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionContainerUuid          string                                    `protobuf:"bytes,1,opt,name=TestInstructionContainerUuid,proto3" json:"TestInstructionContainerUuid,omitempty"`                                                                                                     // TestInstructionContainer UUID
	TestInstructionContainerName          string                                    `protobuf:"bytes,2,opt,name=TestInstructionContainerName,proto3" json:"TestInstructionContainerName,omitempty"`                                                                                                     // TestInstructionContainer Name
	TestInstructionTypeUuid               string                                    `protobuf:"bytes,3,opt,name=TestInstructionTypeUuid,proto3" json:"TestInstructionTypeUuid,omitempty"`                                                                                                               // The Type(Group), Uuid, of TestInstructionContainer
	TestInstructionTypeName               string                                    `protobuf:"bytes,4,opt,name=TestInstructionTypeName,proto3" json:"TestInstructionTypeName,omitempty"`                                                                                                               // The Type(Group), Name, of TestInstructionContainer
	TestInstructionContainerExecutionType TestInstructionContainerExecutionTypeEnum `protobuf:"varint,5,opt,name=TestInstructionContainerExecutionType,proto3,enum=fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerExecutionTypeEnum" json:"TestInstructionContainerExecutionType,omitempty"` // Defines if the children of TestInstructionContainer is processed in parallel or in seral
	TestInstructionContainerChildren      []string                                  `protobuf:"bytes,6,rep,name=TestInstructionContainerChildren,proto3" json:"TestInstructionContainerChildren,omitempty"`                                                                                             // A list of the children in the this container. Can be TestInstructions or TestInstructionContainers. Order is specified by the order in the array
}

func (x *TestInstructionContainerMessage) Reset() {
	*x = TestInstructionContainerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionContainerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionContainerMessage) ProtoMessage() {}

func (x *TestInstructionContainerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionContainerMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionContainerMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{6}
}

func (x *TestInstructionContainerMessage) GetTestInstructionContainerUuid() string {
	if x != nil {
		return x.TestInstructionContainerUuid
	}
	return ""
}

func (x *TestInstructionContainerMessage) GetTestInstructionContainerName() string {
	if x != nil {
		return x.TestInstructionContainerName
	}
	return ""
}

func (x *TestInstructionContainerMessage) GetTestInstructionTypeUuid() string {
	if x != nil {
		return x.TestInstructionTypeUuid
	}
	return ""
}

func (x *TestInstructionContainerMessage) GetTestInstructionTypeName() string {
	if x != nil {
		return x.TestInstructionTypeName
	}
	return ""
}

func (x *TestInstructionContainerMessage) GetTestInstructionContainerExecutionType() TestInstructionContainerExecutionTypeEnum {
	if x != nil {
		return x.TestInstructionContainerExecutionType
	}
	return TestInstructionContainerExecutionTypeEnum_PARALLELLED_PROCESSED
}

func (x *TestInstructionContainerMessage) GetTestInstructionContainerChildren() []string {
	if x != nil {
		return x.TestInstructionContainerChildren
	}
	return nil
}

var File_fenixTestCaseBuilderServerGrpcApi_proto protoreflect.FileDescriptor

var file_fenixTestCaseBuilderServerGrpcApi_proto_rawDesc = []byte{
	0x0a, 0x27, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x22, 0xa2, 0x01, 0x0a,
	0x0e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x8f, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x22, 0x9a, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x0a, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xc5,
	0x01, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x8f, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xb0, 0x03, 0x0a, 0x28, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x73, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x20, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xe0, 0x04, 0x0a, 0x2e, 0x50, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x8f, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x73, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x20,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xaa, 0x02, 0x0a,
	0x16, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x8e, 0x04, 0x0a, 0x1f, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a,
	0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x38, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x25, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a,
	0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x2a, 0x50, 0x0a, 0x28, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x0b, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x30, 0x5f, 0x30, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x31, 0x10, 0x01, 0x2a, 0x6d, 0x0a, 0x0e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x22, 0x0a, 0x1e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x5c, 0x0a, 0x29, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x52, 0x41,
	0x4c, 0x4c, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x32, 0xb8, 0x05, 0x0a, 0x19, 0x46, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x47, 0x72, 0x70, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x76, 0x0a, 0x0b, 0x41, 0x72, 0x65, 0x59, 0x6f,
	0x75, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x31, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0x32, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63,
	0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xb3, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x4b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0xb9, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x4b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x12, 0xb0, 0x01, 0x0a, 0x25, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x51, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x32,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescOnce sync.Once
	file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescData = file_fenixTestCaseBuilderServerGrpcApi_proto_rawDesc
)

func file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP() []byte {
	file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescOnce.Do(func() {
		file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescData = protoimpl.X.CompressGZIP(file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescData)
	})
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescData
}

var file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_fenixTestCaseBuilderServerGrpcApi_proto_goTypes = []interface{}{
	(CurrentFenixTestDataProtoFileVersionEnum)(0),          // 0: fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum
	(ErrorCodesEnum)(0),                                    // 1: fenixTestCaseBuilderServerGrpcApi.ErrorCodesEnum
	(TestInstructionContainerExecutionTypeEnum)(0),         // 2: fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerExecutionTypeEnum
	(*EmptyParameter)(nil),                                 // 3: fenixTestCaseBuilderServerGrpcApi.EmptyParameter
	(*AckNackResponse)(nil),                                // 4: fenixTestCaseBuilderServerGrpcApi.AckNackResponse
	(*UserIdentificationMessage)(nil),                      // 5: fenixTestCaseBuilderServerGrpcApi.UserIdentificationMessage
	(*TestInstructionsAndTestContainersMessage)(nil),       // 6: fenixTestCaseBuilderServerGrpcApi.TestInstructionsAndTestContainersMessage
	(*PinnedTestInstructionsAndTestContainersMessage)(nil), // 7: fenixTestCaseBuilderServerGrpcApi.PinnedTestInstructionsAndTestContainersMessage
	(*TestInstructionMessage)(nil),                         // 8: fenixTestCaseBuilderServerGrpcApi.TestInstructionMessage
	(*TestInstructionContainerMessage)(nil),                // 9: fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerMessage
}
var file_fenixTestCaseBuilderServerGrpcApi_proto_depIdxs = []int32{
	0,  // 0: fenixTestCaseBuilderServerGrpcApi.EmptyParameter.ProtoFileVersionUsedByClient:type_name -> fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum
	1,  // 1: fenixTestCaseBuilderServerGrpcApi.AckNackResponse.ErrorCodes:type_name -> fenixTestCaseBuilderServerGrpcApi.ErrorCodesEnum
	0,  // 2: fenixTestCaseBuilderServerGrpcApi.UserIdentificationMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum
	8,  // 3: fenixTestCaseBuilderServerGrpcApi.TestInstructionsAndTestContainersMessage.TestInstructionMessages:type_name -> fenixTestCaseBuilderServerGrpcApi.TestInstructionMessage
	9,  // 4: fenixTestCaseBuilderServerGrpcApi.TestInstructionsAndTestContainersMessage.TestInstructionContainerMessages:type_name -> fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerMessage
	0,  // 5: fenixTestCaseBuilderServerGrpcApi.PinnedTestInstructionsAndTestContainersMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum
	8,  // 6: fenixTestCaseBuilderServerGrpcApi.PinnedTestInstructionsAndTestContainersMessage.TestInstructionMessages:type_name -> fenixTestCaseBuilderServerGrpcApi.TestInstructionMessage
	9,  // 7: fenixTestCaseBuilderServerGrpcApi.PinnedTestInstructionsAndTestContainersMessage.TestInstructionContainerMessages:type_name -> fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerMessage
	2,  // 8: fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerMessage.TestInstructionContainerExecutionType:type_name -> fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerExecutionTypeEnum
	3,  // 9: fenixTestCaseBuilderServerGrpcApi.FenixTestDataGrpcServices.AreYouAlive:input_type -> fenixTestCaseBuilderServerGrpcApi.EmptyParameter
	5,  // 10: fenixTestCaseBuilderServerGrpcApi.FenixTestDataGrpcServices.GetTestInstructionsAndTestContainers:input_type -> fenixTestCaseBuilderServerGrpcApi.UserIdentificationMessage
	5,  // 11: fenixTestCaseBuilderServerGrpcApi.FenixTestDataGrpcServices.GetPinnedTestInstructionsAndTestContainers:input_type -> fenixTestCaseBuilderServerGrpcApi.UserIdentificationMessage
	7,  // 12: fenixTestCaseBuilderServerGrpcApi.FenixTestDataGrpcServices.SendTestInstructionsAndTestContainers:input_type -> fenixTestCaseBuilderServerGrpcApi.PinnedTestInstructionsAndTestContainersMessage
	4,  // 13: fenixTestCaseBuilderServerGrpcApi.FenixTestDataGrpcServices.AreYouAlive:output_type -> fenixTestCaseBuilderServerGrpcApi.AckNackResponse
	6,  // 14: fenixTestCaseBuilderServerGrpcApi.FenixTestDataGrpcServices.GetTestInstructionsAndTestContainers:output_type -> fenixTestCaseBuilderServerGrpcApi.TestInstructionsAndTestContainersMessage
	6,  // 15: fenixTestCaseBuilderServerGrpcApi.FenixTestDataGrpcServices.GetPinnedTestInstructionsAndTestContainers:output_type -> fenixTestCaseBuilderServerGrpcApi.TestInstructionsAndTestContainersMessage
	4,  // 16: fenixTestCaseBuilderServerGrpcApi.FenixTestDataGrpcServices.SendTestInstructionsAndTestContainers:output_type -> fenixTestCaseBuilderServerGrpcApi.AckNackResponse
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_fenixTestCaseBuilderServerGrpcApi_proto_init() }
func file_fenixTestCaseBuilderServerGrpcApi_proto_init() {
	if File_fenixTestCaseBuilderServerGrpcApi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckNackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdentificationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionsAndTestContainersMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnedTestInstructionsAndTestContainersMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionContainerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fenixTestCaseBuilderServerGrpcApi_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fenixTestCaseBuilderServerGrpcApi_proto_goTypes,
		DependencyIndexes: file_fenixTestCaseBuilderServerGrpcApi_proto_depIdxs,
		EnumInfos:         file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes,
		MessageInfos:      file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes,
	}.Build()
	File_fenixTestCaseBuilderServerGrpcApi_proto = out.File
	file_fenixTestCaseBuilderServerGrpcApi_proto_rawDesc = nil
	file_fenixTestCaseBuilderServerGrpcApi_proto_goTypes = nil
	file_fenixTestCaseBuilderServerGrpcApi_proto_depIdxs = nil
}
