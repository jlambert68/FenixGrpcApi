// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: fenixTestCaseBuilderServerGrpcApi.proto

package go_grpc_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Used to have client and server in sync with using the same proto file version
type CurrentFenixTestCaseBuilderProtoFileVersionEnum int32

const (
	// Deprecated: Do not use.
	CurrentFenixTestCaseBuilderProtoFileVersionEnum_VERSION_0_0 CurrentFenixTestCaseBuilderProtoFileVersionEnum = 0
	CurrentFenixTestCaseBuilderProtoFileVersionEnum_VERSION_0_1 CurrentFenixTestCaseBuilderProtoFileVersionEnum = 1 // Current version // Current version
)

// Enum value maps for CurrentFenixTestCaseBuilderProtoFileVersionEnum.
var (
	CurrentFenixTestCaseBuilderProtoFileVersionEnum_name = map[int32]string{
		0: "VERSION_0_0",
		1: "VERSION_0_1",
	}
	CurrentFenixTestCaseBuilderProtoFileVersionEnum_value = map[string]int32{
		"VERSION_0_0": 0,
		"VERSION_0_1": 1,
	}
)

func (x CurrentFenixTestCaseBuilderProtoFileVersionEnum) Enum() *CurrentFenixTestCaseBuilderProtoFileVersionEnum {
	p := new(CurrentFenixTestCaseBuilderProtoFileVersionEnum)
	*p = x
	return p
}

func (x CurrentFenixTestCaseBuilderProtoFileVersionEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrentFenixTestCaseBuilderProtoFileVersionEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes[0].Descriptor()
}

func (CurrentFenixTestCaseBuilderProtoFileVersionEnum) Type() protoreflect.EnumType {
	return &file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes[0]
}

func (x CurrentFenixTestCaseBuilderProtoFileVersionEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrentFenixTestCaseBuilderProtoFileVersionEnum.Descriptor instead.
func (CurrentFenixTestCaseBuilderProtoFileVersionEnum) EnumDescriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{0}
}

// Error codes - for now a test
type ErrorCodesEnum int32

const (
	ErrorCodesEnum_OK                             ErrorCodesEnum = 0
	ErrorCodesEnum_ERROR_UNKNOWN_CALLER           ErrorCodesEnum = 1
	ErrorCodesEnum_ERROR_WRONG_PROTO_FILE_VERSION ErrorCodesEnum = 2
	ErrorCodesEnum_ERROR_UNSPECIFIED              ErrorCodesEnum = 3
	ErrorCodesEnum_ERROR_DATABASE_PROBLEM         ErrorCodesEnum = 4
)

// Enum value maps for ErrorCodesEnum.
var (
	ErrorCodesEnum_name = map[int32]string{
		0: "OK",
		1: "ERROR_UNKNOWN_CALLER",
		2: "ERROR_WRONG_PROTO_FILE_VERSION",
		3: "ERROR_UNSPECIFIED",
		4: "ERROR_DATABASE_PROBLEM",
	}
	ErrorCodesEnum_value = map[string]int32{
		"OK":                             0,
		"ERROR_UNKNOWN_CALLER":           1,
		"ERROR_WRONG_PROTO_FILE_VERSION": 2,
		"ERROR_UNSPECIFIED":              3,
		"ERROR_DATABASE_PROBLEM":         4,
	}
)

func (x ErrorCodesEnum) Enum() *ErrorCodesEnum {
	p := new(ErrorCodesEnum)
	*p = x
	return p
}

func (x ErrorCodesEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCodesEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes[1].Descriptor()
}

func (ErrorCodesEnum) Type() protoreflect.EnumType {
	return &file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes[1]
}

func (x ErrorCodesEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCodesEnum.Descriptor instead.
func (ErrorCodesEnum) EnumDescriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{1}
}

// How a TestInstructionContainer is processed
type TestInstructionContainerExecutionTypeEnum int32

const (
	TestInstructionContainerExecutionTypeEnum_PARALLELLED_PROCESSED TestInstructionContainerExecutionTypeEnum = 0 // Children in container is parallelled processed
	TestInstructionContainerExecutionTypeEnum_SERIAL_PROCESSED      TestInstructionContainerExecutionTypeEnum = 1 // Children in container is serial processed
)

// Enum value maps for TestInstructionContainerExecutionTypeEnum.
var (
	TestInstructionContainerExecutionTypeEnum_name = map[int32]string{
		0: "PARALLELLED_PROCESSED",
		1: "SERIAL_PROCESSED",
	}
	TestInstructionContainerExecutionTypeEnum_value = map[string]int32{
		"PARALLELLED_PROCESSED": 0,
		"SERIAL_PROCESSED":      1,
	}
)

func (x TestInstructionContainerExecutionTypeEnum) Enum() *TestInstructionContainerExecutionTypeEnum {
	p := new(TestInstructionContainerExecutionTypeEnum)
	*p = x
	return p
}

func (x TestInstructionContainerExecutionTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestInstructionContainerExecutionTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes[2].Descriptor()
}

func (TestInstructionContainerExecutionTypeEnum) Type() protoreflect.EnumType {
	return &file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes[2]
}

func (x TestInstructionContainerExecutionTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestInstructionContainerExecutionTypeEnum.Descriptor instead.
func (TestInstructionContainerExecutionTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{2}
}

// The TestInstructionAttribute can one of the folowing type: "TextBox", "ComboBox", "FileSelector", "FunctionSelector"
type TestInstructionAttribute_TestInstructionAttributeTypeEnum int32

const (
	TestInstructionAttribute_TEXTBOX         TestInstructionAttribute_TestInstructionAttributeTypeEnum = 0 // Defines that TestInstructionAttribute of type "TextBox"
	TestInstructionAttribute_COMBOBOX        TestInstructionAttribute_TestInstructionAttributeTypeEnum = 1 // Defines that TestInstructionAttriebute of type ComboBox
	TestInstructionAttribute_FILESELECTOR    TestInstructionAttribute_TestInstructionAttributeTypeEnum = 2 // Defines that TestInstructionAttribute of type FileSelector
	TestInstructionAttribute_FUNCTIONSLECTOR TestInstructionAttribute_TestInstructionAttributeTypeEnum = 3 // Defines that TestInstructionAttribute of type FunctionSelector
)

// Enum value maps for TestInstructionAttribute_TestInstructionAttributeTypeEnum.
var (
	TestInstructionAttribute_TestInstructionAttributeTypeEnum_name = map[int32]string{
		0: "TEXTBOX",
		1: "COMBOBOX",
		2: "FILESELECTOR",
		3: "FUNCTIONSLECTOR",
	}
	TestInstructionAttribute_TestInstructionAttributeTypeEnum_value = map[string]int32{
		"TEXTBOX":         0,
		"COMBOBOX":        1,
		"FILESELECTOR":    2,
		"FUNCTIONSLECTOR": 3,
	}
)

func (x TestInstructionAttribute_TestInstructionAttributeTypeEnum) Enum() *TestInstructionAttribute_TestInstructionAttributeTypeEnum {
	p := new(TestInstructionAttribute_TestInstructionAttributeTypeEnum)
	*p = x
	return p
}

func (x TestInstructionAttribute_TestInstructionAttributeTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestInstructionAttribute_TestInstructionAttributeTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes[3].Descriptor()
}

func (TestInstructionAttribute_TestInstructionAttributeTypeEnum) Type() protoreflect.EnumType {
	return &file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes[3]
}

func (x TestInstructionAttribute_TestInstructionAttributeTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestInstructionAttribute_TestInstructionAttributeTypeEnum.Descriptor instead.
func (TestInstructionAttribute_TestInstructionAttributeTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{10, 0}
}

// Parameter used for Empty inputs, only containing current proto-file version
type EmptyParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoFileVersionUsedByClient CurrentFenixTestCaseBuilderProtoFileVersionEnum `protobuf:"varint,1,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
}

func (x *EmptyParameter) Reset() {
	*x = EmptyParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyParameter) ProtoMessage() {}

func (x *EmptyParameter) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyParameter.ProtoReflect.Descriptor instead.
func (*EmptyParameter) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{0}
}

func (x *EmptyParameter) GetProtoFileVersionUsedByClient() CurrentFenixTestCaseBuilderProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestCaseBuilderProtoFileVersionEnum_VERSION_0_0
}

// Ack/Nack- Response message with comment
type AckNackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckNack    bool             `protobuf:"varint,1,opt,name=AckNack,proto3" json:"AckNack,omitempty"`                                                                    // True=Ack, False=Nack
	Comments   string           `protobuf:"bytes,2,opt,name=Comments,proto3" json:"Comments,omitempty"`                                                                   //Comments if needed
	ErrorCodes []ErrorCodesEnum `protobuf:"varint,3,rep,packed,name=ErrorCodes,proto3,enum=fenixTestCaseBuilderServerGrpcApi.ErrorCodesEnum" json:"ErrorCodes,omitempty"` // List of Error codes
}

func (x *AckNackResponse) Reset() {
	*x = AckNackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckNackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckNackResponse) ProtoMessage() {}

func (x *AckNackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckNackResponse.ProtoReflect.Descriptor instead.
func (*AckNackResponse) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{1}
}

func (x *AckNackResponse) GetAckNack() bool {
	if x != nil {
		return x.AckNack
	}
	return false
}

func (x *AckNackResponse) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *AckNackResponse) GetErrorCodes() []ErrorCodesEnum {
	if x != nil {
		return x.ErrorCodes
	}
	return nil
}

// Message Holding information about who is the calling client
type UserIdentificationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                       string                                          `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`                                                                                                                                     // The Users Id, SEB S-id will be used for SEB
	ProtoFileVersionUsedByClient CurrentFenixTestCaseBuilderProtoFileVersionEnum `protobuf:"varint,2,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
}

func (x *UserIdentificationMessage) Reset() {
	*x = UserIdentificationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdentificationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdentificationMessage) ProtoMessage() {}

func (x *UserIdentificationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdentificationMessage.ProtoReflect.Descriptor instead.
func (*UserIdentificationMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{2}
}

func (x *UserIdentificationMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserIdentificationMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestCaseBuilderProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestCaseBuilderProtoFileVersionEnum_VERSION_0_0
}

// Message holding all supported TestInstructions and Pre-defined TestInstructionContainers that the user can use when building TestCases
type TestInstructionsAndTestContainersMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionMessages          []*TestInstructionMessage          `protobuf:"bytes,1,rep,name=TestInstructionMessages,proto3" json:"TestInstructionMessages,omitempty"`                   // List of all TestInstruction
	TestInstructionContainerMessages []*TestInstructionContainerMessage `protobuf:"bytes,2,rep,name=TestInstructionContainerMessages,proto3" json:"TestInstructionContainerMessages,omitempty"` // List of all pre-defined TestInstructionContainers
	AckNackResponse                  *AckNackResponse                   `protobuf:"bytes,3,opt,name=ackNackResponse,proto3" json:"ackNackResponse,omitempty"`                                   // Hold all error messages, if there are any. Message also gives of everything was OK or not
}

func (x *TestInstructionsAndTestContainersMessage) Reset() {
	*x = TestInstructionsAndTestContainersMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionsAndTestContainersMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionsAndTestContainersMessage) ProtoMessage() {}

func (x *TestInstructionsAndTestContainersMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionsAndTestContainersMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionsAndTestContainersMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{3}
}

func (x *TestInstructionsAndTestContainersMessage) GetTestInstructionMessages() []*TestInstructionMessage {
	if x != nil {
		return x.TestInstructionMessages
	}
	return nil
}

func (x *TestInstructionsAndTestContainersMessage) GetTestInstructionContainerMessages() []*TestInstructionContainerMessage {
	if x != nil {
		return x.TestInstructionContainerMessages
	}
	return nil
}

func (x *TestInstructionsAndTestContainersMessage) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

// Message holding TestInstructions and Pre-defined TestInstructionContainers that the user can has pinned in the GUI
type PinnedTestInstructionsAndTestContainersMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                                 string                                          `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`                                                                                                                                     // The Users Id, SEB S-id will be used for SEB
	ProtoFileVersionUsedByClient           CurrentFenixTestCaseBuilderProtoFileVersionEnum `protobuf:"varint,2,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
	PinnedTestInstructionMessages          []*PinnedTestInstructionMessage                 `protobuf:"bytes,3,rep,name=PinnedTestInstructionMessages,proto3" json:"PinnedTestInstructionMessages,omitempty"`                                                                                       // List of all pinned, by user, TestInstructions
	PinnedTestInstructionContainerMessages []*PinnedTestInstructionContainerMessage        `protobuf:"bytes,4,rep,name=PinnedTestInstructionContainerMessages,proto3" json:"PinnedTestInstructionContainerMessages,omitempty"`                                                                     //  List of all pinned, by user, pre-defined TestInstructionContainers
}

func (x *PinnedTestInstructionsAndTestContainersMessage) Reset() {
	*x = PinnedTestInstructionsAndTestContainersMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnedTestInstructionsAndTestContainersMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnedTestInstructionsAndTestContainersMessage) ProtoMessage() {}

func (x *PinnedTestInstructionsAndTestContainersMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnedTestInstructionsAndTestContainersMessage.ProtoReflect.Descriptor instead.
func (*PinnedTestInstructionsAndTestContainersMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{4}
}

func (x *PinnedTestInstructionsAndTestContainersMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PinnedTestInstructionsAndTestContainersMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestCaseBuilderProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestCaseBuilderProtoFileVersionEnum_VERSION_0_0
}

func (x *PinnedTestInstructionsAndTestContainersMessage) GetPinnedTestInstructionMessages() []*PinnedTestInstructionMessage {
	if x != nil {
		return x.PinnedTestInstructionMessages
	}
	return nil
}

func (x *PinnedTestInstructionsAndTestContainersMessage) GetPinnedTestInstructionContainerMessages() []*PinnedTestInstructionContainerMessage {
	if x != nil {
		return x.PinnedTestInstructionContainerMessages
	}
	return nil
}

// Message holding one TestInstruction
type TestInstructionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUuid                   string                 `protobuf:"bytes,1,opt,name=DomainUuid,proto3" json:"DomainUuid,omitempty"`                                     // The Domain, UUID, to be tested with this TestInstruction
	DomainName                   string                 `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                     // The Domain, Name, to be tested with this TestInstruction
	TestInstructionUuid          string                 `protobuf:"bytes,3,opt,name=TestInstructionUuid,proto3" json:"TestInstructionUuid,omitempty"`                   // TestInstruction UUID
	TestInstructionName          string                 `protobuf:"bytes,4,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"`                   // TestInstruction Name
	TestInstructionTypeUuid      string                 `protobuf:"bytes,5,opt,name=TestInstructionTypeUuid,proto3" json:"TestInstructionTypeUuid,omitempty"`           // The Type(Group), Uuid, of TestInstruction
	TestInstructionTypeName      string                 `protobuf:"bytes,6,opt,name=TestInstructionTypeName,proto3" json:"TestInstructionTypeName,omitempty"`           // The Type(Group), Name, of TestInstruction
	TestInstructionDescription   string                 `protobuf:"bytes,7,opt,name=TestInstructionDescription,proto3" json:"TestInstructionDescription,omitempty"`     // The description of the TestInstruction
	TestInstructionMouseOverText string                 `protobuf:"bytes,8,opt,name=TestInstructionMouseOverText,proto3" json:"TestInstructionMouseOverText,omitempty"` // The mouse over text when hovering over TestInstruction
	Deprecated                   bool                   `protobuf:"varint,9,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`                                    // Indicates that this TestInstruction shouldn't be used anymore
	Enabled                      bool                   `protobuf:"varint,10,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                                         // TestInstruction can be disabled when the user shouldn't use it anymore
	MajorVersionNumber           uint32                 `protobuf:"varint,11,opt,name=MajorVersionNumber,proto3" json:"MajorVersionNumber,omitempty"`                   // Change in Major Version Number means that user must act on change
	MinorVersionNumber           uint32                 `protobuf:"varint,12,opt,name=MinorVersionNumber,proto3" json:"MinorVersionNumber,omitempty"`                   // Change in Minor Version Number means that user must NOT act on change
	UpdatedTimeStamp             *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=UpdatedTimeStamp,proto3" json:"UpdatedTimeStamp,omitempty"`                        // The TimeStamp when the TestInstruction was last updated
}

func (x *TestInstructionMessage) Reset() {
	*x = TestInstructionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionMessage) ProtoMessage() {}

func (x *TestInstructionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{5}
}

func (x *TestInstructionMessage) GetDomainUuid() string {
	if x != nil {
		return x.DomainUuid
	}
	return ""
}

func (x *TestInstructionMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *TestInstructionMessage) GetTestInstructionUuid() string {
	if x != nil {
		return x.TestInstructionUuid
	}
	return ""
}

func (x *TestInstructionMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

func (x *TestInstructionMessage) GetTestInstructionTypeUuid() string {
	if x != nil {
		return x.TestInstructionTypeUuid
	}
	return ""
}

func (x *TestInstructionMessage) GetTestInstructionTypeName() string {
	if x != nil {
		return x.TestInstructionTypeName
	}
	return ""
}

func (x *TestInstructionMessage) GetTestInstructionDescription() string {
	if x != nil {
		return x.TestInstructionDescription
	}
	return ""
}

func (x *TestInstructionMessage) GetTestInstructionMouseOverText() string {
	if x != nil {
		return x.TestInstructionMouseOverText
	}
	return ""
}

func (x *TestInstructionMessage) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *TestInstructionMessage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TestInstructionMessage) GetMajorVersionNumber() uint32 {
	if x != nil {
		return x.MajorVersionNumber
	}
	return 0
}

func (x *TestInstructionMessage) GetMinorVersionNumber() uint32 {
	if x != nil {
		return x.MinorVersionNumber
	}
	return 0
}

func (x *TestInstructionMessage) GetUpdatedTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedTimeStamp
	}
	return nil
}

// Message holding one TestInstructionContainer and reference to its children
type TestInstructionContainerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUuid                            string                                    `protobuf:"bytes,1,opt,name=DomainUuid,proto3" json:"DomainUuid,omitempty"`                                                                                                                                          // The Domain, UUID, to be tested with this TestInstruction
	DomainName                            string                                    `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                                                                                                                          // The Domain, Name, to be tested with this TestInstruction
	TestInstructionContainerUuid          string                                    `protobuf:"bytes,3,opt,name=TestInstructionContainerUuid,proto3" json:"TestInstructionContainerUuid,omitempty"`                                                                                                      // TestInstructionContainer UUID
	TestInstructionContainerName          string                                    `protobuf:"bytes,4,opt,name=TestInstructionContainerName,proto3" json:"TestInstructionContainerName,omitempty"`                                                                                                      // TestInstructionContainer Name
	TestInstructionContainerTypeUuid      string                                    `protobuf:"bytes,5,opt,name=TestInstructionContainerTypeUuid,proto3" json:"TestInstructionContainerTypeUuid,omitempty"`                                                                                              // The Type(Group), Uuid, of TestInstructionContainer
	TestInstructionContainerTypeName      string                                    `protobuf:"bytes,6,opt,name=TestInstructionContainerTypeName,proto3" json:"TestInstructionContainerTypeName,omitempty"`                                                                                              // The Type(Group), Name, of TestInstructionContainer
	TestInstructionContainerDescription   string                                    `protobuf:"bytes,7,opt,name=TestInstructionContainerDescription,proto3" json:"TestInstructionContainerDescription,omitempty"`                                                                                        // The description of the TestInstructionContainer
	TestInstructionContainerMouseOverText string                                    `protobuf:"bytes,8,opt,name=TestInstructionContainerMouseOverText,proto3" json:"TestInstructionContainerMouseOverText,omitempty"`                                                                                    // The mouse over text when hovering over TestInstructionContainer
	Deprecated                            bool                                      `protobuf:"varint,9,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`                                                                                                                                         // Indicates that this TestInstructionContainer shouldn't be used anymore
	Enabled                               bool                                      `protobuf:"varint,10,opt,name=Enabled,proto3" json:"Enabled,omitempty"`                                                                                                                                              // TestInstructionContainer can be disabled when the user shouldn't use it anymore
	MajorVersionNumber                    uint32                                    `protobuf:"varint,11,opt,name=MajorVersionNumber,proto3" json:"MajorVersionNumber,omitempty"`                                                                                                                        // Change in Major Version Number means that user must act on change
	MinorVersionNumber                    uint32                                    `protobuf:"varint,12,opt,name=MinorVersionNumber,proto3" json:"MinorVersionNumber,omitempty"`                                                                                                                        // Change in Minor Version Number means that user must NOT act on change
	UpdatedTimeStamp                      *timestamppb.Timestamp                    `protobuf:"bytes,13,opt,name=UpdatedTimeStamp,proto3" json:"UpdatedTimeStamp,omitempty"`                                                                                                                             // The TimeStamp when the TestInstructionContainer was last updated
	TestInstructionContainerExecutionType TestInstructionContainerExecutionTypeEnum `protobuf:"varint,14,opt,name=TestInstructionContainerExecutionType,proto3,enum=fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerExecutionTypeEnum" json:"TestInstructionContainerExecutionType,omitempty"` // Defines if the children of TestInstructionContainer is processed in parallel or in seral
	TestInstructionContainerChildren      []string                                  `protobuf:"bytes,15,rep,name=TestInstructionContainerChildren,proto3" json:"TestInstructionContainerChildren,omitempty"`                                                                                             // A list of the children[UUID's] in the this container. Can be TestInstructions or TestInstructionContainers. Order is specified by the order in the array
}

func (x *TestInstructionContainerMessage) Reset() {
	*x = TestInstructionContainerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionContainerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionContainerMessage) ProtoMessage() {}

func (x *TestInstructionContainerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionContainerMessage.ProtoReflect.Descriptor instead.
func (*TestInstructionContainerMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{6}
}

func (x *TestInstructionContainerMessage) GetDomainUuid() string {
	if x != nil {
		return x.DomainUuid
	}
	return ""
}

func (x *TestInstructionContainerMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *TestInstructionContainerMessage) GetTestInstructionContainerUuid() string {
	if x != nil {
		return x.TestInstructionContainerUuid
	}
	return ""
}

func (x *TestInstructionContainerMessage) GetTestInstructionContainerName() string {
	if x != nil {
		return x.TestInstructionContainerName
	}
	return ""
}

func (x *TestInstructionContainerMessage) GetTestInstructionContainerTypeUuid() string {
	if x != nil {
		return x.TestInstructionContainerTypeUuid
	}
	return ""
}

func (x *TestInstructionContainerMessage) GetTestInstructionContainerTypeName() string {
	if x != nil {
		return x.TestInstructionContainerTypeName
	}
	return ""
}

func (x *TestInstructionContainerMessage) GetTestInstructionContainerDescription() string {
	if x != nil {
		return x.TestInstructionContainerDescription
	}
	return ""
}

func (x *TestInstructionContainerMessage) GetTestInstructionContainerMouseOverText() string {
	if x != nil {
		return x.TestInstructionContainerMouseOverText
	}
	return ""
}

func (x *TestInstructionContainerMessage) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *TestInstructionContainerMessage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TestInstructionContainerMessage) GetMajorVersionNumber() uint32 {
	if x != nil {
		return x.MajorVersionNumber
	}
	return 0
}

func (x *TestInstructionContainerMessage) GetMinorVersionNumber() uint32 {
	if x != nil {
		return x.MinorVersionNumber
	}
	return 0
}

func (x *TestInstructionContainerMessage) GetUpdatedTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedTimeStamp
	}
	return nil
}

func (x *TestInstructionContainerMessage) GetTestInstructionContainerExecutionType() TestInstructionContainerExecutionTypeEnum {
	if x != nil {
		return x.TestInstructionContainerExecutionType
	}
	return TestInstructionContainerExecutionTypeEnum_PARALLELLED_PROCESSED
}

func (x *TestInstructionContainerMessage) GetTestInstructionContainerChildren() []string {
	if x != nil {
		return x.TestInstructionContainerChildren
	}
	return nil
}

// Message holding one Pinned TestInstruction
type PinnedTestInstructionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionUuid string `protobuf:"bytes,1,opt,name=TestInstructionUuid,proto3" json:"TestInstructionUuid,omitempty"` // TestInstruction UUID
	TestInstructionName string `protobuf:"bytes,2,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"` // TestInstruction Name
}

func (x *PinnedTestInstructionMessage) Reset() {
	*x = PinnedTestInstructionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnedTestInstructionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnedTestInstructionMessage) ProtoMessage() {}

func (x *PinnedTestInstructionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnedTestInstructionMessage.ProtoReflect.Descriptor instead.
func (*PinnedTestInstructionMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{7}
}

func (x *PinnedTestInstructionMessage) GetTestInstructionUuid() string {
	if x != nil {
		return x.TestInstructionUuid
	}
	return ""
}

func (x *PinnedTestInstructionMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

// Message holding one Pinned TestInstructionContainer
type PinnedTestInstructionContainerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionContainerUuid string `protobuf:"bytes,1,opt,name=TestInstructionContainerUuid,proto3" json:"TestInstructionContainerUuid,omitempty"` // TestInstruction UUID
	TestInstructionContainerName string `protobuf:"bytes,2,opt,name=TestInstructionContainerName,proto3" json:"TestInstructionContainerName,omitempty"` // TestInstruction Name
}

func (x *PinnedTestInstructionContainerMessage) Reset() {
	*x = PinnedTestInstructionContainerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnedTestInstructionContainerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnedTestInstructionContainerMessage) ProtoMessage() {}

func (x *PinnedTestInstructionContainerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnedTestInstructionContainerMessage.ProtoReflect.Descriptor instead.
func (*PinnedTestInstructionContainerMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{8}
}

func (x *PinnedTestInstructionContainerMessage) GetTestInstructionContainerUuid() string {
	if x != nil {
		return x.TestInstructionContainerUuid
	}
	return ""
}

func (x *PinnedTestInstructionContainerMessage) GetTestInstructionContainerName() string {
	if x != nil {
		return x.TestInstructionContainerName
	}
	return ""
}

// Message holding one Pinned TestInstructionContainer
type TestInstructionAttributeMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionAttributes []*TestInstructionAttribute `protobuf:"bytes,1,rep,name=TestInstructionAttributes,proto3" json:"TestInstructionAttributes,omitempty"` // A list of all TestInstructionAttributes that belongs to one TestInstruction
	AckNackResponse           *AckNackResponse            `protobuf:"bytes,2,opt,name=ackNackResponse,proto3" json:"ackNackResponse,omitempty"`                     // Hold all error messages, if there are any. Message also gives if everything was OK or not
}

func (x *TestInstructionAttributeMessages) Reset() {
	*x = TestInstructionAttributeMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionAttributeMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionAttributeMessages) ProtoMessage() {}

func (x *TestInstructionAttributeMessages) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionAttributeMessages.ProtoReflect.Descriptor instead.
func (*TestInstructionAttributeMessages) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{9}
}

func (x *TestInstructionAttributeMessages) GetTestInstructionAttributes() []*TestInstructionAttribute {
	if x != nil {
		return x.TestInstructionAttributes
	}
	return nil
}

func (x *TestInstructionAttributeMessages) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

// A specific Attribute for a Test Instruction
type TestInstructionAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionAttributeGuid                  string                                                                      `protobuf:"bytes,1,opt,name=TestInstructionAttributeGuid,proto3" json:"TestInstructionAttributeGuid,omitempty"`                                                                                                    // The unique guid for the TestInstructionAttribute, set by plugin
	TestInstructionAttributeName                  string                                                                      `protobuf:"bytes,2,opt,name=TestInstructionAttributeName,proto3" json:"TestInstructionAttributeName,omitempty"`                                                                                                    // The name of the TestInstructionAttribute
	TestInstructionAttributeTypeGuid              string                                                                      `protobuf:"bytes,3,opt,name=TestInstructionAttributeTypeGuid,proto3" json:"TestInstructionAttributeTypeGuid,omitempty"`                                                                                            // The unique guid for the TestInstructionAttribute-type, set by plugin
	TestInstructionAttributeTypeName              string                                                                      `protobuf:"bytes,4,opt,name=TestInstructionAttributeTypeName,proto3" json:"TestInstructionAttributeTypeName,omitempty"`                                                                                            // The name for the TestInstructionAttribute-type, set by plugin
	TestInstructionAttributeDescription           string                                                                      `protobuf:"bytes,5,opt,name=TestInstructionAttributeDescription,proto3" json:"TestInstructionAttributeDescription,omitempty"`                                                                                      // The description of the TestInstructionAttribute
	TestInstructionAttributeMouseOver             string                                                                      `protobuf:"bytes,6,opt,name=TestInstructionAttributeMouseOver,proto3" json:"TestInstructionAttributeMouseOver,omitempty"`                                                                                          // The mouse over text for the TestInstructionAttribute
	TestInstructionAttributeVisible               bool                                                                        `protobuf:"varint,7,opt,name=TestInstructionAttributeVisible,proto3" json:"TestInstructionAttributeVisible,omitempty"`                                                                                             // Should the TestInstructionAttribute be visible in attributes list in GUI or not
	TestInstructionAttributeEnable                bool                                                                        `protobuf:"varint,8,opt,name=TestInstructionAttributeEnable,proto3" json:"TestInstructionAttributeEnable,omitempty"`                                                                                               // Should the TestInstructionAttribute be enabled or not
	TestInstructionAttributeMandatory             bool                                                                        `protobuf:"varint,9,opt,name=TestInstructionAttributeMandatory,proto3" json:"TestInstructionAttributeMandatory,omitempty"`                                                                                         // Should the TestInstructionAttribute be mandatory or not
	TestInstructionAttributeVisibleInTestCaseArea bool                                                                        `protobuf:"varint,10,opt,name=TestInstructionAttributeVisibleInTestCaseArea,proto3" json:"TestInstructionAttributeVisibleInTestCaseArea,omitempty"`                                                                // Should the TestInstructionAttribute be visible in TestInstruction at TestCase Area in GUI or not
	TestInstructionAttributeIsDeprecated          bool                                                                        `protobuf:"varint,11,opt,name=TestInstructionAttributeIsDeprecated,proto3" json:"TestInstructionAttributeIsDeprecated,omitempty"`                                                                                  // Indicates that this TestInstruction attribute shouldn't be used anymore
	TestInstructionAttributeType                  TestInstructionAttribute_TestInstructionAttributeTypeEnum                   `protobuf:"varint,12,opt,name=TestInstructionAttributeType,proto3,enum=fenixTestCaseBuilderServerGrpcApi.TestInstructionAttribute_TestInstructionAttributeTypeEnum" json:"TestInstructionAttributeType,omitempty"` // The choosen Enum value for what type the instruction attribute should be
	InputTextBoxProperty                          *TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty      `protobuf:"bytes,13,opt,name=inputTextBoxProperty,proto3" json:"inputTextBoxProperty,omitempty"`                                                                                                                   // If the attribute is a textbox then all properties can be found in structure
	InputComboBoxProperty                         *TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty     `protobuf:"bytes,14,opt,name=InputComboBoxProperty,proto3" json:"InputComboBoxProperty,omitempty"`                                                                                                                 // If the attribute is a combobox then all properties can be found in structure
	InputFileSelectorProperty                     *TestInstructionAttribute_TestInstructionAttributeInputFileSelectorProperty `protobuf:"bytes,15,opt,name=InputFileSelectorProperty,proto3" json:"InputFileSelectorProperty,omitempty"`                                                                                                         // If the attribute is a combobox then all properties can be found in structure
}

func (x *TestInstructionAttribute) Reset() {
	*x = TestInstructionAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionAttribute) ProtoMessage() {}

func (x *TestInstructionAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionAttribute.ProtoReflect.Descriptor instead.
func (*TestInstructionAttribute) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{10}
}

func (x *TestInstructionAttribute) GetTestInstructionAttributeGuid() string {
	if x != nil {
		return x.TestInstructionAttributeGuid
	}
	return ""
}

func (x *TestInstructionAttribute) GetTestInstructionAttributeName() string {
	if x != nil {
		return x.TestInstructionAttributeName
	}
	return ""
}

func (x *TestInstructionAttribute) GetTestInstructionAttributeTypeGuid() string {
	if x != nil {
		return x.TestInstructionAttributeTypeGuid
	}
	return ""
}

func (x *TestInstructionAttribute) GetTestInstructionAttributeTypeName() string {
	if x != nil {
		return x.TestInstructionAttributeTypeName
	}
	return ""
}

func (x *TestInstructionAttribute) GetTestInstructionAttributeDescription() string {
	if x != nil {
		return x.TestInstructionAttributeDescription
	}
	return ""
}

func (x *TestInstructionAttribute) GetTestInstructionAttributeMouseOver() string {
	if x != nil {
		return x.TestInstructionAttributeMouseOver
	}
	return ""
}

func (x *TestInstructionAttribute) GetTestInstructionAttributeVisible() bool {
	if x != nil {
		return x.TestInstructionAttributeVisible
	}
	return false
}

func (x *TestInstructionAttribute) GetTestInstructionAttributeEnable() bool {
	if x != nil {
		return x.TestInstructionAttributeEnable
	}
	return false
}

func (x *TestInstructionAttribute) GetTestInstructionAttributeMandatory() bool {
	if x != nil {
		return x.TestInstructionAttributeMandatory
	}
	return false
}

func (x *TestInstructionAttribute) GetTestInstructionAttributeVisibleInTestCaseArea() bool {
	if x != nil {
		return x.TestInstructionAttributeVisibleInTestCaseArea
	}
	return false
}

func (x *TestInstructionAttribute) GetTestInstructionAttributeIsDeprecated() bool {
	if x != nil {
		return x.TestInstructionAttributeIsDeprecated
	}
	return false
}

func (x *TestInstructionAttribute) GetTestInstructionAttributeType() TestInstructionAttribute_TestInstructionAttributeTypeEnum {
	if x != nil {
		return x.TestInstructionAttributeType
	}
	return TestInstructionAttribute_TEXTBOX
}

func (x *TestInstructionAttribute) GetInputTextBoxProperty() *TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty {
	if x != nil {
		return x.InputTextBoxProperty
	}
	return nil
}

func (x *TestInstructionAttribute) GetInputComboBoxProperty() *TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty {
	if x != nil {
		return x.InputComboBoxProperty
	}
	return nil
}

func (x *TestInstructionAttribute) GetInputFileSelectorProperty() *TestInstructionAttribute_TestInstructionAttributeInputFileSelectorProperty {
	if x != nil {
		return x.InputFileSelectorProperty
	}
	return nil
}

// Properties for TextBox attribute
type TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionAttributeInputTextBoxGuid string `protobuf:"bytes,1,opt,name=TestInstructionAttributeInputTextBoxGuid,proto3" json:"TestInstructionAttributeInputTextBoxGuid,omitempty"` // The unique guid for the TestInstructionAttributeInputTextBoxProperties, set by plugin
	TestInstructionAttributeInputTextBoxName string `protobuf:"bytes,2,opt,name=TestInstructionAttributeInputTextBoxName,proto3" json:"TestInstructionAttributeInputTextBoxName,omitempty"` // The name of the TestInstructionAttributeInputTextBoxProperties
	TextBoxEditable                          bool   `protobuf:"varint,3,opt,name=TextBoxEditable,proto3" json:"TextBoxEditable,omitempty"`                                                  // Should the the TextBox be editable or not
	TextBoxInputMask                         string `protobuf:"bytes,4,opt,name=TextBoxInputMask,proto3" json:"TextBoxInputMask,omitempty"`                                                 // Input mask for the TextBox
	TextBoxAttributeTypeGuid                 string `protobuf:"bytes,5,opt,name=TextBoxAttributeTypeGuid,proto3" json:"TextBoxAttributeTypeGuid,omitempty"`                                 // The unique guid for the Type of the TextBox. Used for data manipulation
	TextBoxAttributeTypeName                 string `protobuf:"bytes,6,opt,name=TextBoxAttributeTypeName,proto3" json:"TextBoxAttributeTypeName,omitempty"`                                 // The Name for the Type of the TextBox.
	TextBoxAttributeValue                    string `protobuf:"bytes,7,opt,name=TextBoxAttributeValue,proto3" json:"TextBoxAttributeValue,omitempty"`                                       // The value for the the TextBox, used for preset values
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty) Reset() {
	*x = TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty) ProtoMessage() {}

func (x *TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty.ProtoReflect.Descriptor instead.
func (*TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{10, 0}
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty) GetTestInstructionAttributeInputTextBoxGuid() string {
	if x != nil {
		return x.TestInstructionAttributeInputTextBoxGuid
	}
	return ""
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty) GetTestInstructionAttributeInputTextBoxName() string {
	if x != nil {
		return x.TestInstructionAttributeInputTextBoxName
	}
	return ""
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty) GetTextBoxEditable() bool {
	if x != nil {
		return x.TextBoxEditable
	}
	return false
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty) GetTextBoxInputMask() string {
	if x != nil {
		return x.TextBoxInputMask
	}
	return ""
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty) GetTextBoxAttributeTypeGuid() string {
	if x != nil {
		return x.TextBoxAttributeTypeGuid
	}
	return ""
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty) GetTextBoxAttributeTypeName() string {
	if x != nil {
		return x.TextBoxAttributeTypeName
	}
	return ""
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty) GetTextBoxAttributeValue() string {
	if x != nil {
		return x.TextBoxAttributeValue
	}
	return ""
}

// Properties for ComboBox attribute
type TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionAttributeComboBoxGuid string `protobuf:"bytes,1,opt,name=TestInstructionAttributeComboBoxGuid,proto3" json:"TestInstructionAttributeComboBoxGuid,omitempty"` // The unique guid for the TestInstructionAttributeComboBoxProperties, set by plugin
	TestInstructionAttributeComboBoxName string `protobuf:"bytes,2,opt,name=TestInstructionAttributeComboBoxName,proto3" json:"TestInstructionAttributeComboBoxName,omitempty"` // The name of the TestInstructionAttributeComboBoxProperties
	ComboBoxEditable                     bool   `protobuf:"varint,3,opt,name=ComboBoxEditable,proto3" json:"ComboBoxEditable,omitempty"`                                        // Should the the ComboBox be editable or not
	ComboBoxInputMask                    string `protobuf:"bytes,4,opt,name=ComboBoxInputMask,proto3" json:"ComboBoxInputMask,omitempty"`                                       // Input mask for the ComboBox
	ComboBoxAttributeTypeGuid            string `protobuf:"bytes,5,opt,name=ComboBoxAttributeTypeGuid,proto3" json:"ComboBoxAttributeTypeGuid,omitempty"`                       // The unique guid for the Type of the ComboBox Used for data manipulation
	ComboBoxAttributeTypeName            string `protobuf:"bytes,6,opt,name=ComboBoxAttributeTypeName,proto3" json:"ComboBoxAttributeTypeName,omitempty"`                       // The Name for the Type of the ComboBox
	ComboBoxAttributeValueGuid           string `protobuf:"bytes,7,opt,name=ComboBoxAttributeValueGuid,proto3" json:"ComboBoxAttributeValueGuid,omitempty"`                     // The guid of the value for the the ComboBox, used for preset values
	ComboBoxAttributeValue               string `protobuf:"bytes,8,opt,name=ComboBoxAttributeValue,proto3" json:"ComboBoxAttributeValue,omitempty"`                             // The value for the the ComboBox, used for preset values
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty) Reset() {
	*x = TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty) ProtoMessage() {}

func (x *TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty.ProtoReflect.Descriptor instead.
func (*TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{10, 1}
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty) GetTestInstructionAttributeComboBoxGuid() string {
	if x != nil {
		return x.TestInstructionAttributeComboBoxGuid
	}
	return ""
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty) GetTestInstructionAttributeComboBoxName() string {
	if x != nil {
		return x.TestInstructionAttributeComboBoxName
	}
	return ""
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty) GetComboBoxEditable() bool {
	if x != nil {
		return x.ComboBoxEditable
	}
	return false
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty) GetComboBoxInputMask() string {
	if x != nil {
		return x.ComboBoxInputMask
	}
	return ""
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty) GetComboBoxAttributeTypeGuid() string {
	if x != nil {
		return x.ComboBoxAttributeTypeGuid
	}
	return ""
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty) GetComboBoxAttributeTypeName() string {
	if x != nil {
		return x.ComboBoxAttributeTypeName
	}
	return ""
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty) GetComboBoxAttributeValueGuid() string {
	if x != nil {
		return x.ComboBoxAttributeValueGuid
	}
	return ""
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty) GetComboBoxAttributeValue() string {
	if x != nil {
		return x.ComboBoxAttributeValue
	}
	return ""
}

// Properties for FileSelector attribute
type TestInstructionAttribute_TestInstructionAttributeInputFileSelectorProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionAttributeFileSelectorGuid string `protobuf:"bytes,1,opt,name=TestInstructionAttributeFileSelectorGuid,proto3" json:"TestInstructionAttributeFileSelectorGuid,omitempty"` // The unique guid for the TestInstructionAttributeFileSelectorProperties, set by plugin
	TestInstructionAttributeFileSelectorName string `protobuf:"bytes,2,opt,name=TestInstructionAttributeFileSelectorName,proto3" json:"TestInstructionAttributeFileSelectorName,omitempty"` // The name of the TestInstructionAttributeFileSelectorProperties
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputFileSelectorProperty) Reset() {
	*x = TestInstructionAttribute_TestInstructionAttributeInputFileSelectorProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputFileSelectorProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestInstructionAttribute_TestInstructionAttributeInputFileSelectorProperty) ProtoMessage() {}

func (x *TestInstructionAttribute_TestInstructionAttributeInputFileSelectorProperty) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestInstructionAttribute_TestInstructionAttributeInputFileSelectorProperty.ProtoReflect.Descriptor instead.
func (*TestInstructionAttribute_TestInstructionAttributeInputFileSelectorProperty) Descriptor() ([]byte, []int) {
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP(), []int{10, 2}
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputFileSelectorProperty) GetTestInstructionAttributeFileSelectorGuid() string {
	if x != nil {
		return x.TestInstructionAttributeFileSelectorGuid
	}
	return ""
}

func (x *TestInstructionAttribute_TestInstructionAttributeInputFileSelectorProperty) GetTestInstructionAttributeFileSelectorName() string {
	if x != nil {
		return x.TestInstructionAttributeFileSelectorName
	}
	return ""
}

var File_fenixTestCaseBuilderServerGrpcApi_proto protoreflect.FileDescriptor

var file_fenixTestCaseBuilderServerGrpcApi_proto_rawDesc = []byte{
	0x0a, 0x27, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x01,
	0x0a, 0x0e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x96, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65,
	0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x0f, 0x41, 0x63,
	0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x96, 0x01, 0x0a,
	0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x03, 0x0a, 0x28, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x73, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x17,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x4e,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x04, 0x0a, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x96, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x1d, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x1d, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x26, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x26, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x96, 0x05, 0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x38,
	0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x75, 0x73, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xfc,
	0x07, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x50, 0x0a, 0x23, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x23, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x75,
	0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0xa2, 0x01, 0x0a,
	0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x25, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x20, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x82, 0x01,
	0x0a, 0x1c, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x25, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x1c,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x79, 0x0a, 0x19, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x19, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xef, 0x16, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x50, 0x0a, 0x23, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4c, 0x0a, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x75,
	0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x4c, 0x0a, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x64, 0x0a, 0x2d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x52, 0x0a, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x49, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x73, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0xa0, 0x01, 0x0a, 0x1c, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x5c, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x9c, 0x01, 0x0a,
	0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x42, 0x6f, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x9f, 0x01, 0x0a, 0x15,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x15, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d,
	0x62, 0x6f, 0x42, 0x6f, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0xab, 0x01,
	0x0a, 0x19, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x6d, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x19, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x1a, 0xea, 0x03, 0x0a, 0x2c,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x42, 0x6f, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x28,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x42, 0x6f, 0x78, 0x47, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x28,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x42, 0x6f, 0x78, 0x47, 0x75, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x28, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x28, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x45,
	0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x54,
	0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61,
	0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f,
	0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x65,
	0x78, 0x74, 0x42, 0x6f, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x47, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x54, 0x65,
	0x78, 0x74, 0x42, 0x6f, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f,
	0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f,
	0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa5, 0x04, 0x0a, 0x2d, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42,
	0x6f, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x24, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x47, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x47, 0x75, 0x69, 0x64, 0x12, 0x52,
	0x0a, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42,
	0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x45, 0x64,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x43, 0x6f,
	0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d,
	0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x6d, 0x62, 0x6f,
	0x42, 0x6f, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3c, 0x0a, 0x19,
	0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x43, 0x6f,
	0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x43,
	0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x62,
	0x6f, 0x42, 0x6f, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x47, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x43, 0x6f,
	0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x62,
	0x6f, 0x42, 0x6f, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42,
	0x6f, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0xeb, 0x01, 0x0a, 0x31, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x28, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x47, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x28, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x47, 0x75,
	0x69, 0x64, 0x12, 0x5a, 0x0a, 0x28, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x28, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x64,
	0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x45, 0x58, 0x54, 0x42, 0x4f, 0x58, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x42, 0x4f, 0x42, 0x4f, 0x58, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x4c, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x10, 0x03, 0x2a, 0x57, 0x0a, 0x2f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x0b, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x30, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x31, 0x10, 0x01, 0x2a, 0x89, 0x01,
	0x0a, 0x0e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x57, 0x52, 0x4f, 0x4e,
	0x47, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x10, 0x04, 0x2a, 0x5c, 0x0a, 0x29, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x32, 0xf1, 0x06, 0x0a, 0x26, 0x46, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x76, 0x0a, 0x0b, 0x41, 0x72, 0x65, 0x59, 0x6f, 0x75, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x12, 0x31, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x1a, 0x32, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb3, 0x01, 0x0a, 0x24, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x3c, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x4b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0xb9, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x3c, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x4b, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0xa3, 0x01, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x43, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x00, 0x12, 0xb6, 0x01, 0x0a, 0x2b, 0x53, 0x61, 0x76, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x51, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x32, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x2e,
	0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescOnce sync.Once
	file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescData = file_fenixTestCaseBuilderServerGrpcApi_proto_rawDesc
)

func file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescGZIP() []byte {
	file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescOnce.Do(func() {
		file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescData = protoimpl.X.CompressGZIP(file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescData)
	})
	return file_fenixTestCaseBuilderServerGrpcApi_proto_rawDescData
}

var file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_fenixTestCaseBuilderServerGrpcApi_proto_goTypes = []interface{}{
	(CurrentFenixTestCaseBuilderProtoFileVersionEnum)(0), // 0: fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum
	(ErrorCodesEnum)(0),                                                                // 1: fenixTestCaseBuilderServerGrpcApi.ErrorCodesEnum
	(TestInstructionContainerExecutionTypeEnum)(0),                                     // 2: fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerExecutionTypeEnum
	(TestInstructionAttribute_TestInstructionAttributeTypeEnum)(0),                     // 3: fenixTestCaseBuilderServerGrpcApi.TestInstructionAttribute.TestInstructionAttributeTypeEnum
	(*EmptyParameter)(nil),                                                             // 4: fenixTestCaseBuilderServerGrpcApi.EmptyParameter
	(*AckNackResponse)(nil),                                                            // 5: fenixTestCaseBuilderServerGrpcApi.AckNackResponse
	(*UserIdentificationMessage)(nil),                                                  // 6: fenixTestCaseBuilderServerGrpcApi.UserIdentificationMessage
	(*TestInstructionsAndTestContainersMessage)(nil),                                   // 7: fenixTestCaseBuilderServerGrpcApi.TestInstructionsAndTestContainersMessage
	(*PinnedTestInstructionsAndTestContainersMessage)(nil),                             // 8: fenixTestCaseBuilderServerGrpcApi.PinnedTestInstructionsAndTestContainersMessage
	(*TestInstructionMessage)(nil),                                                     // 9: fenixTestCaseBuilderServerGrpcApi.TestInstructionMessage
	(*TestInstructionContainerMessage)(nil),                                            // 10: fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerMessage
	(*PinnedTestInstructionMessage)(nil),                                               // 11: fenixTestCaseBuilderServerGrpcApi.PinnedTestInstructionMessage
	(*PinnedTestInstructionContainerMessage)(nil),                                      // 12: fenixTestCaseBuilderServerGrpcApi.PinnedTestInstructionContainerMessage
	(*TestInstructionAttributeMessages)(nil),                                           // 13: fenixTestCaseBuilderServerGrpcApi.TestInstructionAttributeMessages
	(*TestInstructionAttribute)(nil),                                                   // 14: fenixTestCaseBuilderServerGrpcApi.TestInstructionAttribute
	(*TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty)(nil),      // 15: fenixTestCaseBuilderServerGrpcApi.TestInstructionAttribute.TestInstructionAttributeInputTextBoxProperty
	(*TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty)(nil),     // 16: fenixTestCaseBuilderServerGrpcApi.TestInstructionAttribute.TestInstructionAttributeInputComboBoxProperty
	(*TestInstructionAttribute_TestInstructionAttributeInputFileSelectorProperty)(nil), // 17: fenixTestCaseBuilderServerGrpcApi.TestInstructionAttribute.TestInstructionAttributeInputFileSelectorProperty
	(*timestamppb.Timestamp)(nil),                                                      // 18: google.protobuf.Timestamp
}
var file_fenixTestCaseBuilderServerGrpcApi_proto_depIdxs = []int32{
	0,  // 0: fenixTestCaseBuilderServerGrpcApi.EmptyParameter.ProtoFileVersionUsedByClient:type_name -> fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum
	1,  // 1: fenixTestCaseBuilderServerGrpcApi.AckNackResponse.ErrorCodes:type_name -> fenixTestCaseBuilderServerGrpcApi.ErrorCodesEnum
	0,  // 2: fenixTestCaseBuilderServerGrpcApi.UserIdentificationMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum
	9,  // 3: fenixTestCaseBuilderServerGrpcApi.TestInstructionsAndTestContainersMessage.TestInstructionMessages:type_name -> fenixTestCaseBuilderServerGrpcApi.TestInstructionMessage
	10, // 4: fenixTestCaseBuilderServerGrpcApi.TestInstructionsAndTestContainersMessage.TestInstructionContainerMessages:type_name -> fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerMessage
	5,  // 5: fenixTestCaseBuilderServerGrpcApi.TestInstructionsAndTestContainersMessage.ackNackResponse:type_name -> fenixTestCaseBuilderServerGrpcApi.AckNackResponse
	0,  // 6: fenixTestCaseBuilderServerGrpcApi.PinnedTestInstructionsAndTestContainersMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum
	11, // 7: fenixTestCaseBuilderServerGrpcApi.PinnedTestInstructionsAndTestContainersMessage.PinnedTestInstructionMessages:type_name -> fenixTestCaseBuilderServerGrpcApi.PinnedTestInstructionMessage
	12, // 8: fenixTestCaseBuilderServerGrpcApi.PinnedTestInstructionsAndTestContainersMessage.PinnedTestInstructionContainerMessages:type_name -> fenixTestCaseBuilderServerGrpcApi.PinnedTestInstructionContainerMessage
	18, // 9: fenixTestCaseBuilderServerGrpcApi.TestInstructionMessage.UpdatedTimeStamp:type_name -> google.protobuf.Timestamp
	18, // 10: fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerMessage.UpdatedTimeStamp:type_name -> google.protobuf.Timestamp
	2,  // 11: fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerMessage.TestInstructionContainerExecutionType:type_name -> fenixTestCaseBuilderServerGrpcApi.TestInstructionContainerExecutionTypeEnum
	14, // 12: fenixTestCaseBuilderServerGrpcApi.TestInstructionAttributeMessages.TestInstructionAttributes:type_name -> fenixTestCaseBuilderServerGrpcApi.TestInstructionAttribute
	5,  // 13: fenixTestCaseBuilderServerGrpcApi.TestInstructionAttributeMessages.ackNackResponse:type_name -> fenixTestCaseBuilderServerGrpcApi.AckNackResponse
	3,  // 14: fenixTestCaseBuilderServerGrpcApi.TestInstructionAttribute.TestInstructionAttributeType:type_name -> fenixTestCaseBuilderServerGrpcApi.TestInstructionAttribute.TestInstructionAttributeTypeEnum
	15, // 15: fenixTestCaseBuilderServerGrpcApi.TestInstructionAttribute.inputTextBoxProperty:type_name -> fenixTestCaseBuilderServerGrpcApi.TestInstructionAttribute.TestInstructionAttributeInputTextBoxProperty
	16, // 16: fenixTestCaseBuilderServerGrpcApi.TestInstructionAttribute.InputComboBoxProperty:type_name -> fenixTestCaseBuilderServerGrpcApi.TestInstructionAttribute.TestInstructionAttributeInputComboBoxProperty
	17, // 17: fenixTestCaseBuilderServerGrpcApi.TestInstructionAttribute.InputFileSelectorProperty:type_name -> fenixTestCaseBuilderServerGrpcApi.TestInstructionAttribute.TestInstructionAttributeInputFileSelectorProperty
	4,  // 18: fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices.AreYouAlive:input_type -> fenixTestCaseBuilderServerGrpcApi.EmptyParameter
	6,  // 19: fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices.GetTestInstructionsAndTestContainers:input_type -> fenixTestCaseBuilderServerGrpcApi.UserIdentificationMessage
	6,  // 20: fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices.GetPinnedTestInstructionsAndTestContainers:input_type -> fenixTestCaseBuilderServerGrpcApi.UserIdentificationMessage
	6,  // 21: fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices.GetTestInstructionAttributes:input_type -> fenixTestCaseBuilderServerGrpcApi.UserIdentificationMessage
	8,  // 22: fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices.SavePinnedTestInstructionsAndTestContainers:input_type -> fenixTestCaseBuilderServerGrpcApi.PinnedTestInstructionsAndTestContainersMessage
	5,  // 23: fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices.AreYouAlive:output_type -> fenixTestCaseBuilderServerGrpcApi.AckNackResponse
	7,  // 24: fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices.GetTestInstructionsAndTestContainers:output_type -> fenixTestCaseBuilderServerGrpcApi.TestInstructionsAndTestContainersMessage
	7,  // 25: fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices.GetPinnedTestInstructionsAndTestContainers:output_type -> fenixTestCaseBuilderServerGrpcApi.TestInstructionsAndTestContainersMessage
	13, // 26: fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices.GetTestInstructionAttributes:output_type -> fenixTestCaseBuilderServerGrpcApi.TestInstructionAttributeMessages
	5,  // 27: fenixTestCaseBuilderServerGrpcApi.FenixTestCaseBuilderServerGrpcServices.SavePinnedTestInstructionsAndTestContainers:output_type -> fenixTestCaseBuilderServerGrpcApi.AckNackResponse
	23, // [23:28] is the sub-list for method output_type
	18, // [18:23] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_fenixTestCaseBuilderServerGrpcApi_proto_init() }
func file_fenixTestCaseBuilderServerGrpcApi_proto_init() {
	if File_fenixTestCaseBuilderServerGrpcApi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckNackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdentificationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionsAndTestContainersMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnedTestInstructionsAndTestContainersMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionContainerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnedTestInstructionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnedTestInstructionContainerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionAttributeMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionAttribute_TestInstructionAttributeInputTextBoxProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionAttribute_TestInstructionAttributeInputComboBoxProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestInstructionAttribute_TestInstructionAttributeInputFileSelectorProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fenixTestCaseBuilderServerGrpcApi_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fenixTestCaseBuilderServerGrpcApi_proto_goTypes,
		DependencyIndexes: file_fenixTestCaseBuilderServerGrpcApi_proto_depIdxs,
		EnumInfos:         file_fenixTestCaseBuilderServerGrpcApi_proto_enumTypes,
		MessageInfos:      file_fenixTestCaseBuilderServerGrpcApi_proto_msgTypes,
	}.Build()
	File_fenixTestCaseBuilderServerGrpcApi_proto = out.File
	file_fenixTestCaseBuilderServerGrpcApi_proto_rawDesc = nil
	file_fenixTestCaseBuilderServerGrpcApi_proto_goTypes = nil
	file_fenixTestCaseBuilderServerGrpcApi_proto_depIdxs = nil
}
