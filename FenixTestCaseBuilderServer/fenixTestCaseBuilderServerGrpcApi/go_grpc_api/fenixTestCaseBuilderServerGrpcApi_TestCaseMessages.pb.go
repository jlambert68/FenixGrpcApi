// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_TestCaseMessages.proto

package go_grpc_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message holding information about who is the user and which TestCase that is requested
type GetTestCaseRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                       string                                          `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`                                                                                                                                     // The Users Id, SEB S-id will be used for SEB
	ProtoFileVersionUsedByClient CurrentFenixTestCaseBuilderProtoFileVersionEnum `protobuf:"varint,2,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
	TestCaseUuid                 string                                          `protobuf:"bytes,3,opt,name=TestCaseUuid,proto3" json:"TestCaseUuid,omitempty"`                                                                                                                         // The TestCase, UUID, that is requested from DB-Server
}

func (x *GetTestCaseRequestMessage) Reset() {
	*x = GetTestCaseRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestCaseRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestCaseRequestMessage) ProtoMessage() {}

func (x *GetTestCaseRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestCaseRequestMessage.ProtoReflect.Descriptor instead.
func (*GetTestCaseRequestMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescGZIP(), []int{0}
}

func (x *GetTestCaseRequestMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetTestCaseRequestMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestCaseBuilderProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestCaseBuilderProtoFileVersionEnum_VERSION_0_0
}

func (x *GetTestCaseRequestMessage) GetTestCaseUuid() string {
	if x != nil {
		return x.TestCaseUuid
	}
	return ""
}

// Message holding information about who is the user and which TestCase that is requested
type ListTestCasesRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                       string                                          `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`                                                                                                                                     // The Users Id, SEB S-id will be used for SEB
	ProtoFileVersionUsedByClient CurrentFenixTestCaseBuilderProtoFileVersionEnum `protobuf:"varint,2,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
}

func (x *ListTestCasesRequestMessage) Reset() {
	*x = ListTestCasesRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestCasesRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestCasesRequestMessage) ProtoMessage() {}

func (x *ListTestCasesRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestCasesRequestMessage.ProtoReflect.Descriptor instead.
func (*ListTestCasesRequestMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescGZIP(), []int{1}
}

func (x *ListTestCasesRequestMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListTestCasesRequestMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestCaseBuilderProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestCaseBuilderProtoFileVersionEnum_VERSION_0_0
}

// Message a list of TestCase
type ListTestCasesResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicTestCaseInformation []*BasicTestCaseInformationMessage `protobuf:"bytes,1,rep,name=BasicTestCaseInformation,proto3" json:"BasicTestCaseInformation,omitempty"` // List of TestCases with their Basic information
}

func (x *ListTestCasesResponseMessage) Reset() {
	*x = ListTestCasesResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestCasesResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestCasesResponseMessage) ProtoMessage() {}

func (x *ListTestCasesResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestCasesResponseMessage.ProtoReflect.Descriptor instead.
func (*ListTestCasesResponseMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescGZIP(), []int{2}
}

func (x *ListTestCasesResponseMessage) GetBasicTestCaseInformation() []*BasicTestCaseInformationMessage {
	if x != nil {
		return x.BasicTestCaseInformation
	}
	return nil
}

// Message holding information about who is the user and from which Domain and System to request the MetaDataItems
type GetTestCaseMetaDataItemsRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                       string                                          `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`                                                                                                                                     // The Users Id, SEB S-id will be used for SEB
	ProtoFileVersionUsedByClient CurrentFenixTestCaseBuilderProtoFileVersionEnum `protobuf:"varint,2,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
	DomainUuid                   string                                          `protobuf:"bytes,3,opt,name=DomainUuid,proto3" json:"DomainUuid,omitempty"`                                                                                                                             // The Domain, UUID, who has the MetaDataItems
	DomainName                   string                                          `protobuf:"bytes,4,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                                                                                                             // The Domain, Name, who has the MetaDataItems
}

func (x *GetTestCaseMetaDataItemsRequestMessage) Reset() {
	*x = GetTestCaseMetaDataItemsRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestCaseMetaDataItemsRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestCaseMetaDataItemsRequestMessage) ProtoMessage() {}

func (x *GetTestCaseMetaDataItemsRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestCaseMetaDataItemsRequestMessage.ProtoReflect.Descriptor instead.
func (*GetTestCaseMetaDataItemsRequestMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescGZIP(), []int{3}
}

func (x *GetTestCaseMetaDataItemsRequestMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetTestCaseMetaDataItemsRequestMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestCaseBuilderProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestCaseBuilderProtoFileVersionEnum_VERSION_0_0
}

func (x *GetTestCaseMetaDataItemsRequestMessage) GetDomainUuid() string {
	if x != nil {
		return x.DomainUuid
	}
	return ""
}

func (x *GetTestCaseMetaDataItemsRequestMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

// Message holding all MetaDataItems for a specific Domain
type GetTestCaseMetaDataItemsResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseMetaData *TestCaseMetaDataMessage `protobuf:"bytes,1,opt,name=TestCaseMetaData,proto3" json:"TestCaseMetaData,omitempty"` // A list of all available MetaData that must be filled in by the user
}

func (x *GetTestCaseMetaDataItemsResponseMessage) Reset() {
	*x = GetTestCaseMetaDataItemsResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestCaseMetaDataItemsResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestCaseMetaDataItemsResponseMessage) ProtoMessage() {}

func (x *GetTestCaseMetaDataItemsResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestCaseMetaDataItemsResponseMessage.ProtoReflect.Descriptor instead.
func (*GetTestCaseMetaDataItemsResponseMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescGZIP(), []int{4}
}

func (x *GetTestCaseMetaDataItemsResponseMessage) GetTestCaseMetaData() *TestCaseMetaDataMessage {
	if x != nil {
		return x.TestCaseMetaData
	}
	return nil
}

// A message holding one TestCase
type TestCaseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicTestCaseInformation     *BasicTestCaseInformationMessage                     `protobuf:"bytes,1,opt,name=BasicTestCaseInformation,proto3" json:"BasicTestCaseInformation,omitempty"`         // All Basic information about the TestCase
	CreatedAndUpdatedInformation *TestCaseMessage_CreatedAndUpdatedInformationMessage `protobuf:"bytes,2,opt,name=CreatedAndUpdatedInformation,proto3" json:"CreatedAndUpdatedInformation,omitempty"` // Information regarding who did what and when
	TestCaseModel                *TestCaseModelMessage                                `protobuf:"bytes,3,opt,name=TestCaseModel,proto3" json:"TestCaseModel,omitempty"`                               // Hold the model of how the TestCase is constructed
	TestCaseMetaData             *TestCaseMetaDataMessage                             `protobuf:"bytes,4,opt,name=TestCaseMetaData,proto3" json:"TestCaseMetaData,omitempty"`                         // Holds the metadata for the TestCase, set by the user to classify the TestCase
	TestCaseFiles                *TestCaseFilesMessage                                `protobuf:"bytes,5,opt,name=TestCaseFiles,proto3" json:"TestCaseFiles,omitempty"`                               // All files connected to the TestCase
}

func (x *TestCaseMessage) Reset() {
	*x = TestCaseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseMessage) ProtoMessage() {}

func (x *TestCaseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseMessage.ProtoReflect.Descriptor instead.
func (*TestCaseMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescGZIP(), []int{5}
}

func (x *TestCaseMessage) GetBasicTestCaseInformation() *BasicTestCaseInformationMessage {
	if x != nil {
		return x.BasicTestCaseInformation
	}
	return nil
}

func (x *TestCaseMessage) GetCreatedAndUpdatedInformation() *TestCaseMessage_CreatedAndUpdatedInformationMessage {
	if x != nil {
		return x.CreatedAndUpdatedInformation
	}
	return nil
}

func (x *TestCaseMessage) GetTestCaseModel() *TestCaseModelMessage {
	if x != nil {
		return x.TestCaseModel
	}
	return nil
}

func (x *TestCaseMessage) GetTestCaseMetaData() *TestCaseMetaDataMessage {
	if x != nil {
		return x.TestCaseMetaData
	}
	return nil
}

func (x *TestCaseMessage) GetTestCaseFiles() *TestCaseFilesMessage {
	if x != nil {
		return x.TestCaseFiles
	}
	return nil
}

// Message holding Basic information for one TestCase
type BasicTestCaseInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NonEditableInformation *BasicTestCaseInformationMessage_NonEditableBasicInformationMessage `protobuf:"bytes,1,opt,name=NonEditableInformation,proto3" json:"NonEditableInformation,omitempty"` // All Basic information that can be shown in GUI but can't be changed by the user
	EditableInformation    *BasicTestCaseInformationMessage_EditableBasicInformationMessage    `protobuf:"bytes,2,opt,name=EditableInformation,proto3" json:"EditableInformation,omitempty"`       // All Basic information that can be shown in GUI and can be changed by the user
}

func (x *BasicTestCaseInformationMessage) Reset() {
	*x = BasicTestCaseInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicTestCaseInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicTestCaseInformationMessage) ProtoMessage() {}

func (x *BasicTestCaseInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicTestCaseInformationMessage.ProtoReflect.Descriptor instead.
func (*BasicTestCaseInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescGZIP(), []int{6}
}

func (x *BasicTestCaseInformationMessage) GetNonEditableInformation() *BasicTestCaseInformationMessage_NonEditableBasicInformationMessage {
	if x != nil {
		return x.NonEditableInformation
	}
	return nil
}

func (x *BasicTestCaseInformationMessage) GetEditableInformation() *BasicTestCaseInformationMessage_EditableBasicInformationMessage {
	if x != nil {
		return x.EditableInformation
	}
	return nil
}

// Message holding all MetaDataparameters for the TestCase
type TestCaseMetaDataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetaDataItems []*TestCaseMetaDataMessage_MetaDataItemMessage `protobuf:"bytes,1,rep,name=MetaDataItems,proto3" json:"MetaDataItems,omitempty"` // List of all MetaDataItems with their values
}

func (x *TestCaseMetaDataMessage) Reset() {
	*x = TestCaseMetaDataMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseMetaDataMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseMetaDataMessage) ProtoMessage() {}

func (x *TestCaseMetaDataMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseMetaDataMessage.ProtoReflect.Descriptor instead.
func (*TestCaseMetaDataMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescGZIP(), []int{7}
}

func (x *TestCaseMetaDataMessage) GetMetaDataItems() []*TestCaseMetaDataMessage_MetaDataItemMessage {
	if x != nil {
		return x.MetaDataItems
	}
	return nil
}

// Message holding all that is added to the TestCase, either using 'File picker' or add in some other way
type TestCaseFilesMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseFiles                []*TestCaseFilesMessage_TestCaseFileMessage               `protobuf:"bytes,1,rep,name=TestCaseFiles,proto3" json:"TestCaseFiles,omitempty"`                               // A list of files that is added to the TestCase, in some way
	CreatedAndUpdatedInformation *TestCaseFilesMessage_CreatedAndUpdatedInformationMessage `protobuf:"bytes,2,opt,name=CreatedAndUpdatedInformation,proto3" json:"CreatedAndUpdatedInformation,omitempty"` // Information regarding who did what and when
}

func (x *TestCaseFilesMessage) Reset() {
	*x = TestCaseFilesMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseFilesMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseFilesMessage) ProtoMessage() {}

func (x *TestCaseFilesMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseFilesMessage.ProtoReflect.Descriptor instead.
func (*TestCaseFilesMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescGZIP(), []int{8}
}

func (x *TestCaseFilesMessage) GetTestCaseFiles() []*TestCaseFilesMessage_TestCaseFileMessage {
	if x != nil {
		return x.TestCaseFiles
	}
	return nil
}

func (x *TestCaseFilesMessage) GetCreatedAndUpdatedInformation() *TestCaseFilesMessage_CreatedAndUpdatedInformationMessage {
	if x != nil {
		return x.CreatedAndUpdatedInformation
	}
	return nil
}

// Message holding information about changes to the TestCase, who and when
type TestCaseMessage_CreatedAndUpdatedInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddedToTestCaseTimeStamp       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=AddedToTestCaseTimeStamp,proto3" json:"AddedToTestCaseTimeStamp,omitempty"`             // The TimeStamp when the TestCase was first created
	AddedToTestCaseByUserId        string                 `protobuf:"bytes,2,opt,name=AddedToTestCaseByUserId,proto3" json:"AddedToTestCaseByUserId,omitempty"`               // Which user added the TestCase
	LastUpdatedInTestCaseTimeStamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=LastUpdatedInTestCaseTimeStamp,proto3" json:"LastUpdatedInTestCaseTimeStamp,omitempty"` // The TimeStamp when the TestCase was updated
	LastUpdatedInTestCaseByUserId  string                 `protobuf:"bytes,4,opt,name=LastUpdatedInTestCaseByUserId,proto3" json:"LastUpdatedInTestCaseByUserId,omitempty"`   // Which user was the last to update the TestCase
	DeletedFromTestCaseTimeStamp   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=DeletedFromTestCaseTimeStamp,proto3" json:"DeletedFromTestCaseTimeStamp,omitempty"`     // The TimeStamp when the TestCase was deleted
	DeletedFromTestCaseByUserId    string                 `protobuf:"bytes,6,opt,name=DeletedFromTestCaseByUserId,proto3" json:"DeletedFromTestCaseByUserId,omitempty"`       // Which user deleted the the TestCase
}

func (x *TestCaseMessage_CreatedAndUpdatedInformationMessage) Reset() {
	*x = TestCaseMessage_CreatedAndUpdatedInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseMessage_CreatedAndUpdatedInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseMessage_CreatedAndUpdatedInformationMessage) ProtoMessage() {}

func (x *TestCaseMessage_CreatedAndUpdatedInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseMessage_CreatedAndUpdatedInformationMessage.ProtoReflect.Descriptor instead.
func (*TestCaseMessage_CreatedAndUpdatedInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescGZIP(), []int{5, 0}
}

func (x *TestCaseMessage_CreatedAndUpdatedInformationMessage) GetAddedToTestCaseTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.AddedToTestCaseTimeStamp
	}
	return nil
}

func (x *TestCaseMessage_CreatedAndUpdatedInformationMessage) GetAddedToTestCaseByUserId() string {
	if x != nil {
		return x.AddedToTestCaseByUserId
	}
	return ""
}

func (x *TestCaseMessage_CreatedAndUpdatedInformationMessage) GetLastUpdatedInTestCaseTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedInTestCaseTimeStamp
	}
	return nil
}

func (x *TestCaseMessage_CreatedAndUpdatedInformationMessage) GetLastUpdatedInTestCaseByUserId() string {
	if x != nil {
		return x.LastUpdatedInTestCaseByUserId
	}
	return ""
}

func (x *TestCaseMessage_CreatedAndUpdatedInformationMessage) GetDeletedFromTestCaseTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedFromTestCaseTimeStamp
	}
	return nil
}

func (x *TestCaseMessage_CreatedAndUpdatedInformationMessage) GetDeletedFromTestCaseByUserId() string {
	if x != nil {
		return x.DeletedFromTestCaseByUserId
	}
	return ""
}

// Message holding All basic information that can be shown in GUI but can't be changed by the user
type BasicTestCaseInformationMessage_NonEditableBasicInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseUuid    string `protobuf:"bytes,1,opt,name=TestCaseUuid,proto3" json:"TestCaseUuid,omitempty"`        // The TestCase, UUID, set by TestCase-builder
	TestCaseName    string `protobuf:"bytes,2,opt,name=TestCaseName,proto3" json:"TestCaseName,omitempty"`        // The TestCase, Name, set in TestCase-builder
	DomainUuid      string `protobuf:"bytes,3,opt,name=DomainUuid,proto3" json:"DomainUuid,omitempty"`            // The Domain, UUID, where the TestCase 'has its home'
	DomainName      string `protobuf:"bytes,4,opt,name=DomainName,proto3" json:"DomainName,omitempty"`            // The Domain, Name, where the TestCase 'has its home'
	TestCaseVersion uint32 `protobuf:"varint,6,opt,name=TestCaseVersion,proto3" json:"TestCaseVersion,omitempty"` // Each time a TestCase is saved then the 'TestCaseVersion' will be incremented by +1
}

func (x *BasicTestCaseInformationMessage_NonEditableBasicInformationMessage) Reset() {
	*x = BasicTestCaseInformationMessage_NonEditableBasicInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicTestCaseInformationMessage_NonEditableBasicInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicTestCaseInformationMessage_NonEditableBasicInformationMessage) ProtoMessage() {}

func (x *BasicTestCaseInformationMessage_NonEditableBasicInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicTestCaseInformationMessage_NonEditableBasicInformationMessage.ProtoReflect.Descriptor instead.
func (*BasicTestCaseInformationMessage_NonEditableBasicInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescGZIP(), []int{6, 0}
}

func (x *BasicTestCaseInformationMessage_NonEditableBasicInformationMessage) GetTestCaseUuid() string {
	if x != nil {
		return x.TestCaseUuid
	}
	return ""
}

func (x *BasicTestCaseInformationMessage_NonEditableBasicInformationMessage) GetTestCaseName() string {
	if x != nil {
		return x.TestCaseName
	}
	return ""
}

func (x *BasicTestCaseInformationMessage_NonEditableBasicInformationMessage) GetDomainUuid() string {
	if x != nil {
		return x.DomainUuid
	}
	return ""
}

func (x *BasicTestCaseInformationMessage_NonEditableBasicInformationMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *BasicTestCaseInformationMessage_NonEditableBasicInformationMessage) GetTestCaseVersion() uint32 {
	if x != nil {
		return x.TestCaseVersion
	}
	return 0
}

// Message holding all Basic information that can be shown in GUI and can be changed by the user
type BasicTestCaseInformationMessage_EditableBasicInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseDescription string `protobuf:"bytes,1,opt,name=TestCaseDescription,proto3" json:"TestCaseDescription,omitempty"` // The description of the TestCase
}

func (x *BasicTestCaseInformationMessage_EditableBasicInformationMessage) Reset() {
	*x = BasicTestCaseInformationMessage_EditableBasicInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicTestCaseInformationMessage_EditableBasicInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicTestCaseInformationMessage_EditableBasicInformationMessage) ProtoMessage() {}

func (x *BasicTestCaseInformationMessage_EditableBasicInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicTestCaseInformationMessage_EditableBasicInformationMessage.ProtoReflect.Descriptor instead.
func (*BasicTestCaseInformationMessage_EditableBasicInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescGZIP(), []int{6, 1}
}

func (x *BasicTestCaseInformationMessage_EditableBasicInformationMessage) GetTestCaseDescription() string {
	if x != nil {
		return x.TestCaseDescription
	}
	return ""
}

type TestCaseMetaDataMessage_MetaDataItemMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetaDataUuid           string                                                             `protobuf:"bytes,1,opt,name=MetaDataUuid,proto3" json:"MetaDataUuid,omitempty"`                     // UUID for this MetaDataItem
	MetaDataName           string                                                             `protobuf:"bytes,2,opt,name=MetaDataName,proto3" json:"MetaDataName,omitempty"`                     // Name for this MetaDataItem
	MetaDataGroupUuid      string                                                             `protobuf:"bytes,3,opt,name=MetaDataGroupUuid,proto3" json:"MetaDataGroupUuid,omitempty"`           // The group, UUID,  for this MetaDataItem, used to group stuff in the GUI
	MetaDataGroupName      string                                                             `protobuf:"bytes,4,opt,name=MetaDataGroupName,proto3" json:"MetaDataGroupName,omitempty"`           // The group, Name  for this MetaDataItem, used as Label for the group in the GUI
	AvailableMetaDataItems []*TestCaseMetaDataMessage_MetaDataItemMessage_MetaDataItemMessage `protobuf:"bytes,5,rep,name=AvailableMetaDataItems,proto3" json:"AvailableMetaDataItems,omitempty"` // A list of the available MetaDataItems that the user can chose from
	ChosenMetaDataItem     *TestCaseMetaDataMessage_MetaDataItemMessage_MetaDataItemMessage   `protobuf:"bytes,6,opt,name=ChosenMetaDataItem,proto3" json:"ChosenMetaDataItem,omitempty"`         // The chosen, by user, MetaDataItems
}

func (x *TestCaseMetaDataMessage_MetaDataItemMessage) Reset() {
	*x = TestCaseMetaDataMessage_MetaDataItemMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseMetaDataMessage_MetaDataItemMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseMetaDataMessage_MetaDataItemMessage) ProtoMessage() {}

func (x *TestCaseMetaDataMessage_MetaDataItemMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseMetaDataMessage_MetaDataItemMessage.ProtoReflect.Descriptor instead.
func (*TestCaseMetaDataMessage_MetaDataItemMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescGZIP(), []int{7, 0}
}

func (x *TestCaseMetaDataMessage_MetaDataItemMessage) GetMetaDataUuid() string {
	if x != nil {
		return x.MetaDataUuid
	}
	return ""
}

func (x *TestCaseMetaDataMessage_MetaDataItemMessage) GetMetaDataName() string {
	if x != nil {
		return x.MetaDataName
	}
	return ""
}

func (x *TestCaseMetaDataMessage_MetaDataItemMessage) GetMetaDataGroupUuid() string {
	if x != nil {
		return x.MetaDataGroupUuid
	}
	return ""
}

func (x *TestCaseMetaDataMessage_MetaDataItemMessage) GetMetaDataGroupName() string {
	if x != nil {
		return x.MetaDataGroupName
	}
	return ""
}

func (x *TestCaseMetaDataMessage_MetaDataItemMessage) GetAvailableMetaDataItems() []*TestCaseMetaDataMessage_MetaDataItemMessage_MetaDataItemMessage {
	if x != nil {
		return x.AvailableMetaDataItems
	}
	return nil
}

func (x *TestCaseMetaDataMessage_MetaDataItemMessage) GetChosenMetaDataItem() *TestCaseMetaDataMessage_MetaDataItemMessage_MetaDataItemMessage {
	if x != nil {
		return x.ChosenMetaDataItem
	}
	return nil
}

// Message holding one MetaDataItem
type TestCaseMetaDataMessage_MetaDataItemMessage_MetaDataItemMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetaDataItemUuid  string `protobuf:"bytes,1,opt,name=MetaDataItemUuid,proto3" json:"MetaDataItemUuid,omitempty"`    // Unique UUID for the MetaDataItem
	MetaDataItemValue string `protobuf:"bytes,2,opt,name=MetaDataItemValue,proto3" json:"MetaDataItemValue,omitempty"`  // The value presented in the GUI and for the user to pick
	MetaDataItemIndex uint32 `protobuf:"varint,3,opt,name=MetaDataItemIndex,proto3" json:"MetaDataItemIndex,omitempty"` // A number deciding the presentation order
}

func (x *TestCaseMetaDataMessage_MetaDataItemMessage_MetaDataItemMessage) Reset() {
	*x = TestCaseMetaDataMessage_MetaDataItemMessage_MetaDataItemMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseMetaDataMessage_MetaDataItemMessage_MetaDataItemMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseMetaDataMessage_MetaDataItemMessage_MetaDataItemMessage) ProtoMessage() {}

func (x *TestCaseMetaDataMessage_MetaDataItemMessage_MetaDataItemMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseMetaDataMessage_MetaDataItemMessage_MetaDataItemMessage.ProtoReflect.Descriptor instead.
func (*TestCaseMetaDataMessage_MetaDataItemMessage_MetaDataItemMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescGZIP(), []int{7, 0, 0}
}

func (x *TestCaseMetaDataMessage_MetaDataItemMessage_MetaDataItemMessage) GetMetaDataItemUuid() string {
	if x != nil {
		return x.MetaDataItemUuid
	}
	return ""
}

func (x *TestCaseMetaDataMessage_MetaDataItemMessage_MetaDataItemMessage) GetMetaDataItemValue() string {
	if x != nil {
		return x.MetaDataItemValue
	}
	return ""
}

func (x *TestCaseMetaDataMessage_MetaDataItemMessage_MetaDataItemMessage) GetMetaDataItemIndex() uint32 {
	if x != nil {
		return x.MetaDataItemIndex
	}
	return 0
}

// Message holding one file and information about who did what and when
type TestCaseFilesMessage_TestCaseFileMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileReferenceUuid string   `protobuf:"bytes,1,opt,name=FileReferenceUuid,proto3" json:"FileReferenceUuid,omitempty"` // A unique, UUID, for file
	FileReferenceName string   `protobuf:"bytes,2,opt,name=FileReferenceName,proto3" json:"FileReferenceName,omitempty"` // A Name, for the file
	FileAsByteArray   [][]byte `protobuf:"bytes,3,rep,name=FileAsByteArray,proto3" json:"FileAsByteArray,omitempty"`     // The file encoded as byte array
}

func (x *TestCaseFilesMessage_TestCaseFileMessage) Reset() {
	*x = TestCaseFilesMessage_TestCaseFileMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseFilesMessage_TestCaseFileMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseFilesMessage_TestCaseFileMessage) ProtoMessage() {}

func (x *TestCaseFilesMessage_TestCaseFileMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseFilesMessage_TestCaseFileMessage.ProtoReflect.Descriptor instead.
func (*TestCaseFilesMessage_TestCaseFileMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescGZIP(), []int{8, 0}
}

func (x *TestCaseFilesMessage_TestCaseFileMessage) GetFileReferenceUuid() string {
	if x != nil {
		return x.FileReferenceUuid
	}
	return ""
}

func (x *TestCaseFilesMessage_TestCaseFileMessage) GetFileReferenceName() string {
	if x != nil {
		return x.FileReferenceName
	}
	return ""
}

func (x *TestCaseFilesMessage_TestCaseFileMessage) GetFileAsByteArray() [][]byte {
	if x != nil {
		return x.FileAsByteArray
	}
	return nil
}

// Message holding information about changes to the File, who and when
type TestCaseFilesMessage_CreatedAndUpdatedInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddedToTestCaseTimeStamp       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=AddedToTestCaseTimeStamp,proto3" json:"AddedToTestCaseTimeStamp,omitempty"`             // The TimeStamp when the File was first added to the TestCase
	AddedToTestCaseByUserId        string                 `protobuf:"bytes,2,opt,name=AddedToTestCaseByUserId,proto3" json:"AddedToTestCaseByUserId,omitempty"`               // Which user added the File to the TestCase
	LastUpdatedInTestCaseTimeStamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=LastUpdatedInTestCaseTimeStamp,proto3" json:"LastUpdatedInTestCaseTimeStamp,omitempty"` // The TimeStamp when the File was updated in the TestCase
	LastUpdatedInTestCaseByUserId  string                 `protobuf:"bytes,4,opt,name=LastUpdatedInTestCaseByUserId,proto3" json:"LastUpdatedInTestCaseByUserId,omitempty"`   // Which user was the last to update the File in the TestCase
	DeletedFromTestCaseTimeStamp   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=DeletedFromTestCaseTimeStamp,proto3" json:"DeletedFromTestCaseTimeStamp,omitempty"`     // The TimeStamp when the File was deleted from the TestCase
	DeletedFromTestCaseByUserId    string                 `protobuf:"bytes,6,opt,name=DeletedFromTestCaseByUserId,proto3" json:"DeletedFromTestCaseByUserId,omitempty"`       // Which user deleted the File from the TestCase
}

func (x *TestCaseFilesMessage_CreatedAndUpdatedInformationMessage) Reset() {
	*x = TestCaseFilesMessage_CreatedAndUpdatedInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseFilesMessage_CreatedAndUpdatedInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseFilesMessage_CreatedAndUpdatedInformationMessage) ProtoMessage() {}

func (x *TestCaseFilesMessage_CreatedAndUpdatedInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseFilesMessage_CreatedAndUpdatedInformationMessage.ProtoReflect.Descriptor instead.
func (*TestCaseFilesMessage_CreatedAndUpdatedInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescGZIP(), []int{8, 1}
}

func (x *TestCaseFilesMessage_CreatedAndUpdatedInformationMessage) GetAddedToTestCaseTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.AddedToTestCaseTimeStamp
	}
	return nil
}

func (x *TestCaseFilesMessage_CreatedAndUpdatedInformationMessage) GetAddedToTestCaseByUserId() string {
	if x != nil {
		return x.AddedToTestCaseByUserId
	}
	return ""
}

func (x *TestCaseFilesMessage_CreatedAndUpdatedInformationMessage) GetLastUpdatedInTestCaseTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedInTestCaseTimeStamp
	}
	return nil
}

func (x *TestCaseFilesMessage_CreatedAndUpdatedInformationMessage) GetLastUpdatedInTestCaseByUserId() string {
	if x != nil {
		return x.LastUpdatedInTestCaseByUserId
	}
	return ""
}

func (x *TestCaseFilesMessage_CreatedAndUpdatedInformationMessage) GetDeletedFromTestCaseTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedFromTestCaseTimeStamp
	}
	return nil
}

func (x *TestCaseFilesMessage_CreatedAndUpdatedInformationMessage) GetDeletedFromTestCaseByUserId() string {
	if x != nil {
		return x.DeletedFromTestCaseByUserId
	}
	return ""
}

var File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto protoreflect.FileDescriptor

var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDesc = []byte{
	0x0a, 0x75, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x5f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x7c, 0x46, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x7a, 0x46, 0x65, 0x6e, 0x69, 0x78,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x1c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x52, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x96, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65,
	0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x1c, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7e, 0x0a, 0x18, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x18, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x02, 0x0a, 0x26, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x96, 0x01,
	0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x66, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0xda, 0x08, 0x0a, 0x0f, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7e,
	0x0a, 0x18, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x18, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9a,
	0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x0d, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x66, 0x0a, 0x10, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x10, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x5d, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x1a, 0x83, 0x04, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x18, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x18, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x6f,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x38, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x1e, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x1e, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x44, 0x0a, 0x1d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x86, 0x05, 0x0a, 0x1f, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x16,
	0x4e, 0x6f, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4e, 0x6f, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x16, 0x4e, 0x6f, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x94, 0x01, 0x0a, 0x13,
	0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x64,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x13, 0x45,
	0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xd6, 0x01, 0x0a, 0x22, 0x4e, 0x6f, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x53, 0x0a, 0x1f, 0x45,
	0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x9d, 0x06, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x74, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x1a, 0x8b, 0x05, 0x0a, 0x13, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x9a,
	0x01, 0x0a, 0x16, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x62, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x16, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x12,
	0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x43, 0x68,
	0x6f, 0x73, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x1a, 0x9d, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xcf, 0x07, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x71, 0x0a, 0x0d, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x9f, 0x01, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9b,
	0x01, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x73, 0x42, 0x79, 0x74, 0x65,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x46, 0x69, 0x6c,
	0x65, 0x41, 0x73, 0x42, 0x79, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a, 0x83, 0x04, 0x0a,
	0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x18, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x17,
	0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x41,
	0x64, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x1e, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1e, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a, 0x1d, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x5e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x40, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescOnce sync.Once
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescData = file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDesc
)

func file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescGZIP() []byte {
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescOnce.Do(func() {
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescData)
	})
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDescData
}

var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_goTypes = []interface{}{
	(*GetTestCaseRequestMessage)(nil),                                          // 0: fenixTestCaseBuilderServerGrpcApi.GetTestCaseRequestMessage
	(*ListTestCasesRequestMessage)(nil),                                        // 1: fenixTestCaseBuilderServerGrpcApi.ListTestCasesRequestMessage
	(*ListTestCasesResponseMessage)(nil),                                       // 2: fenixTestCaseBuilderServerGrpcApi.ListTestCasesResponseMessage
	(*GetTestCaseMetaDataItemsRequestMessage)(nil),                             // 3: fenixTestCaseBuilderServerGrpcApi.GetTestCaseMetaDataItemsRequestMessage
	(*GetTestCaseMetaDataItemsResponseMessage)(nil),                            // 4: fenixTestCaseBuilderServerGrpcApi.GetTestCaseMetaDataItemsResponseMessage
	(*TestCaseMessage)(nil),                                                    // 5: fenixTestCaseBuilderServerGrpcApi.TestCaseMessage
	(*BasicTestCaseInformationMessage)(nil),                                    // 6: fenixTestCaseBuilderServerGrpcApi.BasicTestCaseInformationMessage
	(*TestCaseMetaDataMessage)(nil),                                            // 7: fenixTestCaseBuilderServerGrpcApi.TestCaseMetaDataMessage
	(*TestCaseFilesMessage)(nil),                                               // 8: fenixTestCaseBuilderServerGrpcApi.TestCaseFilesMessage
	(*TestCaseMessage_CreatedAndUpdatedInformationMessage)(nil),                // 9: fenixTestCaseBuilderServerGrpcApi.TestCaseMessage.CreatedAndUpdatedInformationMessage
	(*BasicTestCaseInformationMessage_NonEditableBasicInformationMessage)(nil), // 10: fenixTestCaseBuilderServerGrpcApi.BasicTestCaseInformationMessage.NonEditableBasicInformationMessage
	(*BasicTestCaseInformationMessage_EditableBasicInformationMessage)(nil),    // 11: fenixTestCaseBuilderServerGrpcApi.BasicTestCaseInformationMessage.EditableBasicInformationMessage
	(*TestCaseMetaDataMessage_MetaDataItemMessage)(nil),                        // 12: fenixTestCaseBuilderServerGrpcApi.TestCaseMetaDataMessage.MetaDataItemMessage
	(*TestCaseMetaDataMessage_MetaDataItemMessage_MetaDataItemMessage)(nil),    // 13: fenixTestCaseBuilderServerGrpcApi.TestCaseMetaDataMessage.MetaDataItemMessage.MetaDataItemMessage
	(*TestCaseFilesMessage_TestCaseFileMessage)(nil),                           // 14: fenixTestCaseBuilderServerGrpcApi.TestCaseFilesMessage.TestCaseFileMessage
	(*TestCaseFilesMessage_CreatedAndUpdatedInformationMessage)(nil),           // 15: fenixTestCaseBuilderServerGrpcApi.TestCaseFilesMessage.CreatedAndUpdatedInformationMessage
	(CurrentFenixTestCaseBuilderProtoFileVersionEnum)(0),                       // 16: fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum
	(*TestCaseModelMessage)(nil),                                               // 17: fenixTestCaseBuilderServerGrpcApi.TestCaseModelMessage
	(*timestamppb.Timestamp)(nil),                                              // 18: google.protobuf.Timestamp
}
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_depIdxs = []int32{
	16, // 0: fenixTestCaseBuilderServerGrpcApi.GetTestCaseRequestMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum
	16, // 1: fenixTestCaseBuilderServerGrpcApi.ListTestCasesRequestMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum
	6,  // 2: fenixTestCaseBuilderServerGrpcApi.ListTestCasesResponseMessage.BasicTestCaseInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.BasicTestCaseInformationMessage
	16, // 3: fenixTestCaseBuilderServerGrpcApi.GetTestCaseMetaDataItemsRequestMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum
	7,  // 4: fenixTestCaseBuilderServerGrpcApi.GetTestCaseMetaDataItemsResponseMessage.TestCaseMetaData:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCaseMetaDataMessage
	6,  // 5: fenixTestCaseBuilderServerGrpcApi.TestCaseMessage.BasicTestCaseInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.BasicTestCaseInformationMessage
	9,  // 6: fenixTestCaseBuilderServerGrpcApi.TestCaseMessage.CreatedAndUpdatedInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCaseMessage.CreatedAndUpdatedInformationMessage
	17, // 7: fenixTestCaseBuilderServerGrpcApi.TestCaseMessage.TestCaseModel:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCaseModelMessage
	7,  // 8: fenixTestCaseBuilderServerGrpcApi.TestCaseMessage.TestCaseMetaData:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCaseMetaDataMessage
	8,  // 9: fenixTestCaseBuilderServerGrpcApi.TestCaseMessage.TestCaseFiles:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCaseFilesMessage
	10, // 10: fenixTestCaseBuilderServerGrpcApi.BasicTestCaseInformationMessage.NonEditableInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.BasicTestCaseInformationMessage.NonEditableBasicInformationMessage
	11, // 11: fenixTestCaseBuilderServerGrpcApi.BasicTestCaseInformationMessage.EditableInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.BasicTestCaseInformationMessage.EditableBasicInformationMessage
	12, // 12: fenixTestCaseBuilderServerGrpcApi.TestCaseMetaDataMessage.MetaDataItems:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCaseMetaDataMessage.MetaDataItemMessage
	14, // 13: fenixTestCaseBuilderServerGrpcApi.TestCaseFilesMessage.TestCaseFiles:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCaseFilesMessage.TestCaseFileMessage
	15, // 14: fenixTestCaseBuilderServerGrpcApi.TestCaseFilesMessage.CreatedAndUpdatedInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCaseFilesMessage.CreatedAndUpdatedInformationMessage
	18, // 15: fenixTestCaseBuilderServerGrpcApi.TestCaseMessage.CreatedAndUpdatedInformationMessage.AddedToTestCaseTimeStamp:type_name -> google.protobuf.Timestamp
	18, // 16: fenixTestCaseBuilderServerGrpcApi.TestCaseMessage.CreatedAndUpdatedInformationMessage.LastUpdatedInTestCaseTimeStamp:type_name -> google.protobuf.Timestamp
	18, // 17: fenixTestCaseBuilderServerGrpcApi.TestCaseMessage.CreatedAndUpdatedInformationMessage.DeletedFromTestCaseTimeStamp:type_name -> google.protobuf.Timestamp
	13, // 18: fenixTestCaseBuilderServerGrpcApi.TestCaseMetaDataMessage.MetaDataItemMessage.AvailableMetaDataItems:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCaseMetaDataMessage.MetaDataItemMessage.MetaDataItemMessage
	13, // 19: fenixTestCaseBuilderServerGrpcApi.TestCaseMetaDataMessage.MetaDataItemMessage.ChosenMetaDataItem:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCaseMetaDataMessage.MetaDataItemMessage.MetaDataItemMessage
	18, // 20: fenixTestCaseBuilderServerGrpcApi.TestCaseFilesMessage.CreatedAndUpdatedInformationMessage.AddedToTestCaseTimeStamp:type_name -> google.protobuf.Timestamp
	18, // 21: fenixTestCaseBuilderServerGrpcApi.TestCaseFilesMessage.CreatedAndUpdatedInformationMessage.LastUpdatedInTestCaseTimeStamp:type_name -> google.protobuf.Timestamp
	18, // 22: fenixTestCaseBuilderServerGrpcApi.TestCaseFilesMessage.CreatedAndUpdatedInformationMessage.DeletedFromTestCaseTimeStamp:type_name -> google.protobuf.Timestamp
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() {
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_init()
}
func file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_init() {
	if File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto != nil {
		return
	}
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_init()
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseModelMessages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestCaseRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestCasesRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestCasesResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestCaseMetaDataItemsRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestCaseMetaDataItemsResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicTestCaseInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseMetaDataMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseFilesMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseMessage_CreatedAndUpdatedInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicTestCaseInformationMessage_NonEditableBasicInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicTestCaseInformationMessage_EditableBasicInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseMetaDataMessage_MetaDataItemMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseMetaDataMessage_MetaDataItemMessage_MetaDataItemMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseFilesMessage_TestCaseFileMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseFilesMessage_CreatedAndUpdatedInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_goTypes,
		DependencyIndexes: file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_depIdxs,
		MessageInfos:      file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_msgTypes,
	}.Build()
	File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto = out.File
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_rawDesc = nil
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_goTypes = nil
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseMessages_proto_depIdxs = nil
}
