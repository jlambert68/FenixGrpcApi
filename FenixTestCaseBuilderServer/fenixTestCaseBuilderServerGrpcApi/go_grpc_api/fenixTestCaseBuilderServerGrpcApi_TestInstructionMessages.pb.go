// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages.proto

package go_grpc_api

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum int32

const (
	ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum_DEFAULT_NOT_SET ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum = 0 //Value used for when the variable is not actively set
	ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_USE_DROPZONE_VALUE_FOR_ATTRIBUTE           ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum = 1 // The Attributes value will be used when adding the TestInstruction to the TestCase-model
	ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_REMOVE_ATTRIBUTE_FROM_TESTINSTRUCTION      ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum = 2 // Removes the attributes from the TestInstruction
)

// Enum value maps for ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum.
var (
	ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum_name = map[int32]string{
		0: "AttributeActionCommandEnum_DEFAULT_NOT_SET",
		1: "USE_DROPZONE_VALUE_FOR_ATTRIBUTE",
		2: "REMOVE_ATTRIBUTE_FROM_TESTINSTRUCTION",
	}
	ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum_value = map[string]int32{
		"AttributeActionCommandEnum_DEFAULT_NOT_SET": 0,
		"USE_DROPZONE_VALUE_FOR_ATTRIBUTE":           1,
		"REMOVE_ATTRIBUTE_FROM_TESTINSTRUCTION":      2,
	}
)

func (x ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum) Enum() *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum {
	p := new(ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum)
	*p = x
	return p
}

func (x ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_enumTypes[0].Descriptor()
}

func (ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum) Type() protoreflect.EnumType {
	return &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_enumTypes[0]
}

func (x ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum.Descriptor instead.
func (ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum) EnumDescriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{5, 0, 0, 0}
}

// Message holding information about who is the user and which TestCase that the TestInstructions belong to
type ListAllTestInstructionsForSpecificTestCaseRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdOnComputer             string                                          `protobuf:"bytes,1,opt,name=UserIdOnComputer,proto3" json:"UserIdOnComputer,omitempty"`                                                                                                                 // The Users Id, SEB S-id will be used for SEB
	GCPAuthenticatedUser         string                                          `protobuf:"bytes,2,opt,name=GCPAuthenticatedUser,proto3" json:"GCPAuthenticatedUser,omitempty"`                                                                                                         // The User that was identified towards GCP; the e-mail address
	ProtoFileVersionUsedByClient CurrentFenixTestCaseBuilderProtoFileVersionEnum `protobuf:"varint,3,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
	TestCaseUuid                 string                                          `protobuf:"bytes,4,opt,name=TestCaseUuid,proto3" json:"TestCaseUuid,omitempty"`                                                                                                                         // The TestCase, UUID, that is TestInstructions belong to
}

func (x *ListAllTestInstructionsForSpecificTestCaseRequestMessage) Reset() {
	*x = ListAllTestInstructionsForSpecificTestCaseRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllTestInstructionsForSpecificTestCaseRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllTestInstructionsForSpecificTestCaseRequestMessage) ProtoMessage() {}

func (x *ListAllTestInstructionsForSpecificTestCaseRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllTestInstructionsForSpecificTestCaseRequestMessage.ProtoReflect.Descriptor instead.
func (*ListAllTestInstructionsForSpecificTestCaseRequestMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{0}
}

func (x *ListAllTestInstructionsForSpecificTestCaseRequestMessage) GetUserIdOnComputer() string {
	if x != nil {
		return x.UserIdOnComputer
	}
	return ""
}

func (x *ListAllTestInstructionsForSpecificTestCaseRequestMessage) GetGCPAuthenticatedUser() string {
	if x != nil {
		return x.GCPAuthenticatedUser
	}
	return ""
}

func (x *ListAllTestInstructionsForSpecificTestCaseRequestMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestCaseBuilderProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestCaseBuilderProtoFileVersionEnum_CurrentFenixTestCaseBuilderProtoFileVersionEnum_DEFAULT_NOT_SET
}

func (x *ListAllTestInstructionsForSpecificTestCaseRequestMessage) GetTestCaseUuid() string {
	if x != nil {
		return x.TestCaseUuid
	}
	return ""
}

// Message holding information about user, TestCaseUUID and the TestInstructions
type SaveAllTestInstructionsForSpecificTestCaseRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdOnComputer             string                                          `protobuf:"bytes,1,opt,name=UserIdOnComputer,proto3" json:"UserIdOnComputer,omitempty"`                                                                                                                 // The Users Id, SEB S-id will be used for SEB
	GCPAuthenticatedUser         string                                          `protobuf:"bytes,2,opt,name=GCPAuthenticatedUser,proto3" json:"GCPAuthenticatedUser,omitempty"`                                                                                                         // The User that was identified towards GCP; the e-mail address
	ProtoFileVersionUsedByClient CurrentFenixTestCaseBuilderProtoFileVersionEnum `protobuf:"varint,3,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
	TestCaseUuid                 string                                          `protobuf:"bytes,4,opt,name=TestCaseUuid,proto3" json:"TestCaseUuid,omitempty"`                                                                                                                         // The TestCase, UUID, that is TestInstructions belong to
	MatureTestInstructions       *MatureTestInstructionsMessage                  `protobuf:"bytes,5,opt,name=MatureTestInstructions,proto3" json:"MatureTestInstructions,omitempty"`                                                                                                     // All TestInstructions to be saved
}

func (x *SaveAllTestInstructionsForSpecificTestCaseRequestMessage) Reset() {
	*x = SaveAllTestInstructionsForSpecificTestCaseRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveAllTestInstructionsForSpecificTestCaseRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAllTestInstructionsForSpecificTestCaseRequestMessage) ProtoMessage() {}

func (x *SaveAllTestInstructionsForSpecificTestCaseRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAllTestInstructionsForSpecificTestCaseRequestMessage.ProtoReflect.Descriptor instead.
func (*SaveAllTestInstructionsForSpecificTestCaseRequestMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{1}
}

func (x *SaveAllTestInstructionsForSpecificTestCaseRequestMessage) GetUserIdOnComputer() string {
	if x != nil {
		return x.UserIdOnComputer
	}
	return ""
}

func (x *SaveAllTestInstructionsForSpecificTestCaseRequestMessage) GetGCPAuthenticatedUser() string {
	if x != nil {
		return x.GCPAuthenticatedUser
	}
	return ""
}

func (x *SaveAllTestInstructionsForSpecificTestCaseRequestMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestCaseBuilderProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestCaseBuilderProtoFileVersionEnum_CurrentFenixTestCaseBuilderProtoFileVersionEnum_DEFAULT_NOT_SET
}

func (x *SaveAllTestInstructionsForSpecificTestCaseRequestMessage) GetTestCaseUuid() string {
	if x != nil {
		return x.TestCaseUuid
	}
	return ""
}

func (x *SaveAllTestInstructionsForSpecificTestCaseRequestMessage) GetMatureTestInstructions() *MatureTestInstructionsMessage {
	if x != nil {
		return x.MatureTestInstructions
	}
	return nil
}

// Message holding one Immature TestInstruction which is Dragged n Dropped into the TestCase
type ImmatureTestInstructionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicTestInstructionInformation    *BasicTestInstructionInformationMessage    `protobuf:"bytes,1,opt,name=BasicTestInstructionInformation,proto3" json:"BasicTestInstructionInformation,omitempty"`       // Data is used to describe the basic information for the TestInstruction
	ImmatureTestInstructionInformation *ImmatureTestInstructionInformationMessage `protobuf:"bytes,2,opt,name=ImmatureTestInstructionInformation,proto3" json:"ImmatureTestInstructionInformation,omitempty"` // The immature information for the TestInstruction
	ImmatureSubTestCaseModel           *ImmatureElementModelMessage               `protobuf:"bytes,3,opt,name=ImmatureSubTestCaseModel,proto3" json:"ImmatureSubTestCaseModel,omitempty"`                     // The immature element model for this TestInstruction
}

func (x *ImmatureTestInstructionMessage) Reset() {
	*x = ImmatureTestInstructionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmatureTestInstructionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmatureTestInstructionMessage) ProtoMessage() {}

func (x *ImmatureTestInstructionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmatureTestInstructionMessage.ProtoReflect.Descriptor instead.
func (*ImmatureTestInstructionMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{2}
}

func (x *ImmatureTestInstructionMessage) GetBasicTestInstructionInformation() *BasicTestInstructionInformationMessage {
	if x != nil {
		return x.BasicTestInstructionInformation
	}
	return nil
}

func (x *ImmatureTestInstructionMessage) GetImmatureTestInstructionInformation() *ImmatureTestInstructionInformationMessage {
	if x != nil {
		return x.ImmatureTestInstructionInformation
	}
	return nil
}

func (x *ImmatureTestInstructionMessage) GetImmatureSubTestCaseModel() *ImmatureElementModelMessage {
	if x != nil {
		return x.ImmatureSubTestCaseModel
	}
	return nil
}

// Message holding a list of TestInstructions, received from DB or to be sent to DB
type MatureTestInstructionsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatureTestInstructions []*MatureTestInstructionsMessage_MatureTestInstructionMessage `protobuf:"bytes,1,rep,name=MatureTestInstructions,proto3" json:"MatureTestInstructions,omitempty"` // A list of list of TestInstructions, received from DB or to be sent to DB
}

func (x *MatureTestInstructionsMessage) Reset() {
	*x = MatureTestInstructionsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatureTestInstructionsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatureTestInstructionsMessage) ProtoMessage() {}

func (x *MatureTestInstructionsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatureTestInstructionsMessage.ProtoReflect.Descriptor instead.
func (*MatureTestInstructionsMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{3}
}

func (x *MatureTestInstructionsMessage) GetMatureTestInstructions() []*MatureTestInstructionsMessage_MatureTestInstructionMessage {
	if x != nil {
		return x.MatureTestInstructions
	}
	return nil
}

// Message holding Basic information for one TestInstruction
type BasicTestInstructionInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NonEditableInformation    *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage `protobuf:"bytes,1,opt,name=NonEditableInformation,proto3" json:"NonEditableInformation,omitempty"`       // All Basic information that can be shown in GUI but can't be changed by the user
	EditableInformation       *BasicTestInstructionInformationMessage_EditableBasicInformationMessage    `protobuf:"bytes,2,opt,name=EditableInformation,proto3" json:"EditableInformation,omitempty"`             // All Basic information that can be shown in GUI and can be changed by the user
	InvisibleBasicInformation *BasicTestInstructionInformationMessage_InvisibleBasicInformationMessage   `protobuf:"bytes,3,opt,name=InvisibleBasicInformation,proto3" json:"InvisibleBasicInformation,omitempty"` // All Basic information that is not directly shown in GUI and can't be changed by the user
}

func (x *BasicTestInstructionInformationMessage) Reset() {
	*x = BasicTestInstructionInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicTestInstructionInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicTestInstructionInformationMessage) ProtoMessage() {}

func (x *BasicTestInstructionInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicTestInstructionInformationMessage.ProtoReflect.Descriptor instead.
func (*BasicTestInstructionInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{4}
}

func (x *BasicTestInstructionInformationMessage) GetNonEditableInformation() *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage {
	if x != nil {
		return x.NonEditableInformation
	}
	return nil
}

func (x *BasicTestInstructionInformationMessage) GetEditableInformation() *BasicTestInstructionInformationMessage_EditableBasicInformationMessage {
	if x != nil {
		return x.EditableInformation
	}
	return nil
}

func (x *BasicTestInstructionInformationMessage) GetInvisibleBasicInformation() *BasicTestInstructionInformationMessage_InvisibleBasicInformationMessage {
	if x != nil {
		return x.InvisibleBasicInformation
	}
	return nil
}

// Message holding the information about the Immature TestInstruction
type ImmatureTestInstructionInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableDropZones []*ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage `protobuf:"bytes,18,rep,name=AvailableDropZones,proto3" json:"AvailableDropZones,omitempty"` // A list of DropZone for this Immature TestInstruction. A DropZone is a collection of pre-defined values that the TestInstruction will get when placed in TestCase
}

func (x *ImmatureTestInstructionInformationMessage) Reset() {
	*x = ImmatureTestInstructionInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmatureTestInstructionInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmatureTestInstructionInformationMessage) ProtoMessage() {}

func (x *ImmatureTestInstructionInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmatureTestInstructionInformationMessage.ProtoReflect.Descriptor instead.
func (*ImmatureTestInstructionInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{5}
}

func (x *ImmatureTestInstructionInformationMessage) GetAvailableDropZones() []*ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage {
	if x != nil {
		return x.AvailableDropZones
	}
	return nil
}

// Message holding all data that is set for the Mature TestInstruction
type MatureTestInstructionInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatureBasicTestInstructionInformation *MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage `protobuf:"bytes,1,opt,name=MatureBasicTestInstructionInformation,proto3" json:"MatureBasicTestInstructionInformation,omitempty"` // The Basic information for the Matures TestInstruction
	CreatedAndUpdatedInformation          *MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage          `protobuf:"bytes,2,opt,name=CreatedAndUpdatedInformation,proto3" json:"CreatedAndUpdatedInformation,omitempty"`                   // Information regarding who did what and when
	TestInstructionAttributesList         []*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage            `protobuf:"bytes,3,rep,name=TestInstructionAttributesList,proto3" json:"TestInstructionAttributesList,omitempty"`                 // All attributes that belongs to the TestInstruction
}

func (x *MatureTestInstructionInformationMessage) Reset() {
	*x = MatureTestInstructionInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatureTestInstructionInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatureTestInstructionInformationMessage) ProtoMessage() {}

func (x *MatureTestInstructionInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatureTestInstructionInformationMessage.ProtoReflect.Descriptor instead.
func (*MatureTestInstructionInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{6}
}

func (x *MatureTestInstructionInformationMessage) GetMatureBasicTestInstructionInformation() *MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage {
	if x != nil {
		return x.MatureBasicTestInstructionInformation
	}
	return nil
}

func (x *MatureTestInstructionInformationMessage) GetCreatedAndUpdatedInformation() *MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage {
	if x != nil {
		return x.CreatedAndUpdatedInformation
	}
	return nil
}

func (x *MatureTestInstructionInformationMessage) GetTestInstructionAttributesList() []*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage {
	if x != nil {
		return x.TestInstructionAttributesList
	}
	return nil
}

// Message holding all attribute data for all Immature TestInstructions
type ImmatureTestInstructionAttributesMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionAttributesList []*ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage `protobuf:"bytes,1,rep,name=TestInstructionAttributesList,proto3" json:"TestInstructionAttributesList,omitempty"` // All attributes that belongs to all TestInstructions
	AckNackResponse               *AckNackResponse                                                            `protobuf:"bytes,2,opt,name=ackNackResponse,proto3" json:"ackNackResponse,omitempty"`                             // Hold all error messages, if there are any. Message also gives of everything was OK or not
}

func (x *ImmatureTestInstructionAttributesMessage) Reset() {
	*x = ImmatureTestInstructionAttributesMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmatureTestInstructionAttributesMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmatureTestInstructionAttributesMessage) ProtoMessage() {}

func (x *ImmatureTestInstructionAttributesMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmatureTestInstructionAttributesMessage.ProtoReflect.Descriptor instead.
func (*ImmatureTestInstructionAttributesMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{7}
}

func (x *ImmatureTestInstructionAttributesMessage) GetTestInstructionAttributesList() []*ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage {
	if x != nil {
		return x.TestInstructionAttributesList
	}
	return nil
}

func (x *ImmatureTestInstructionAttributesMessage) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

// Message holding one Mature TestInstruction which exist in a TestCase
type MatureTestInstructionsMessage_MatureTestInstructionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicTestInstructionInformation  *BasicTestInstructionInformationMessage  `protobuf:"bytes,1,opt,name=BasicTestInstructionInformation,proto3" json:"BasicTestInstructionInformation,omitempty"`   // Data is used to describe the basic information for the TestInstruction
	MatureTestInstructionInformation *MatureTestInstructionInformationMessage `protobuf:"bytes,2,opt,name=MatureTestInstructionInformation,proto3" json:"MatureTestInstructionInformation,omitempty"` // Information about the Mature TestInstruction
}

func (x *MatureTestInstructionsMessage_MatureTestInstructionMessage) Reset() {
	*x = MatureTestInstructionsMessage_MatureTestInstructionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatureTestInstructionsMessage_MatureTestInstructionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatureTestInstructionsMessage_MatureTestInstructionMessage) ProtoMessage() {}

func (x *MatureTestInstructionsMessage_MatureTestInstructionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatureTestInstructionsMessage_MatureTestInstructionMessage.ProtoReflect.Descriptor instead.
func (*MatureTestInstructionsMessage_MatureTestInstructionMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{3, 0}
}

func (x *MatureTestInstructionsMessage_MatureTestInstructionMessage) GetBasicTestInstructionInformation() *BasicTestInstructionInformationMessage {
	if x != nil {
		return x.BasicTestInstructionInformation
	}
	return nil
}

func (x *MatureTestInstructionsMessage_MatureTestInstructionMessage) GetMatureTestInstructionInformation() *MatureTestInstructionInformationMessage {
	if x != nil {
		return x.MatureTestInstructionInformation
	}
	return nil
}

// Message holding All basic information that can be shown in GUI but can't be changed by the user
type BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUuid                  string               `protobuf:"bytes,1,opt,name=DomainUuid,proto3" json:"DomainUuid,omitempty"`                                   // The Domain, UUID, to be tested with this TestInstruction
	DomainName                  string               `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                   // The Domain, Name, to be tested with this TestInstruction
	TestInstructionOrignalUuid  string               `protobuf:"bytes,3,opt,name=TestInstructionOrignalUuid,proto3" json:"TestInstructionOrignalUuid,omitempty"`   // TestInstruction UUID, set by Client system
	TestInstructionOriginalName string               `protobuf:"bytes,4,opt,name=TestInstructionOriginalName,proto3" json:"TestInstructionOriginalName,omitempty"` // TestInstruction Name, set by Client system
	TestInstructionTypeUuid     string               `protobuf:"bytes,5,opt,name=TestInstructionTypeUuid,proto3" json:"TestInstructionTypeUuid,omitempty"`         // The Type(Group), Uuid, of TestInstruction
	TestInstructionTypeName     string               `protobuf:"bytes,6,opt,name=TestInstructionTypeName,proto3" json:"TestInstructionTypeName,omitempty"`         // The Type(Group), Name, of TestInstruction
	Deprecated                  bool                 `protobuf:"varint,7,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`                                  // Indicates that this TestInstruction shouldn't be used anymore
	MajorVersionNumber          uint32               `protobuf:"varint,8,opt,name=MajorVersionNumber,proto3" json:"MajorVersionNumber,omitempty"`                  // Change in Major Version Number means that user must act on change
	MinorVersionNumber          uint32               `protobuf:"varint,9,opt,name=MinorVersionNumber,proto3" json:"MinorVersionNumber,omitempty"`                  // Change in Minor Version Number means that user must NOT act on change
	UpdatedTimeStamp            *timestamp.Timestamp `protobuf:"bytes,10,opt,name=UpdatedTimeStamp,proto3" json:"UpdatedTimeStamp,omitempty"`                      // The TimeStamp when the TestInstruction was last updated by the client system
	TestInstructionColor        string               `protobuf:"bytes,11,opt,name=TestInstructionColor,proto3" json:"TestInstructionColor,omitempty"`              // The color used for presenting the TestInstruction, e.g. #FAF437
	TCRuleDeletion              string               `protobuf:"bytes,14,opt,name=TCRuleDeletion,proto3" json:"TCRuleDeletion,omitempty"`                          // The Deletion Rule for this TestInstruction
	TCRuleSwap                  string               `protobuf:"bytes,15,opt,name=TCRuleSwap,proto3" json:"TCRuleSwap,omitempty"`                                  // The Swap Rule for this TestInstruction
}

func (x *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) Reset() {
	*x = BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) ProtoMessage() {}

func (x *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage.ProtoReflect.Descriptor instead.
func (*BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{4, 0}
}

func (x *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) GetDomainUuid() string {
	if x != nil {
		return x.DomainUuid
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) GetTestInstructionOrignalUuid() string {
	if x != nil {
		return x.TestInstructionOrignalUuid
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) GetTestInstructionOriginalName() string {
	if x != nil {
		return x.TestInstructionOriginalName
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) GetTestInstructionTypeUuid() string {
	if x != nil {
		return x.TestInstructionTypeUuid
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) GetTestInstructionTypeName() string {
	if x != nil {
		return x.TestInstructionTypeName
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) GetMajorVersionNumber() uint32 {
	if x != nil {
		return x.MajorVersionNumber
	}
	return 0
}

func (x *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) GetMinorVersionNumber() uint32 {
	if x != nil {
		return x.MinorVersionNumber
	}
	return 0
}

func (x *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) GetUpdatedTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedTimeStamp
	}
	return nil
}

func (x *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) GetTestInstructionColor() string {
	if x != nil {
		return x.TestInstructionColor
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) GetTCRuleDeletion() string {
	if x != nil {
		return x.TCRuleDeletion
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage) GetTCRuleSwap() string {
	if x != nil {
		return x.TCRuleSwap
	}
	return ""
}

// Message holding all Basic information that can be shown in GUI and can be changed by the user
type BasicTestInstructionInformationMessage_EditableBasicInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionDescription   string `protobuf:"bytes,1,opt,name=TestInstructionDescription,proto3" json:"TestInstructionDescription,omitempty"`     // The description of the TestInstruction
	TestInstructionMouseOverText string `protobuf:"bytes,2,opt,name=TestInstructionMouseOverText,proto3" json:"TestInstructionMouseOverText,omitempty"` // The mouse over text when hovering over TestInstruction
}

func (x *BasicTestInstructionInformationMessage_EditableBasicInformationMessage) Reset() {
	*x = BasicTestInstructionInformationMessage_EditableBasicInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicTestInstructionInformationMessage_EditableBasicInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicTestInstructionInformationMessage_EditableBasicInformationMessage) ProtoMessage() {}

func (x *BasicTestInstructionInformationMessage_EditableBasicInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicTestInstructionInformationMessage_EditableBasicInformationMessage.ProtoReflect.Descriptor instead.
func (*BasicTestInstructionInformationMessage_EditableBasicInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{4, 1}
}

func (x *BasicTestInstructionInformationMessage_EditableBasicInformationMessage) GetTestInstructionDescription() string {
	if x != nil {
		return x.TestInstructionDescription
	}
	return ""
}

func (x *BasicTestInstructionInformationMessage_EditableBasicInformationMessage) GetTestInstructionMouseOverText() string {
	if x != nil {
		return x.TestInstructionMouseOverText
	}
	return ""
}

// Message holding all Basic information that is not directly shown in GUI and can't be changed by the user
type BasicTestInstructionInformationMessage_InvisibleBasicInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=Enabled,proto3" json:"Enabled,omitempty"` // TestInstruction can be disabled when the user shouldn't use it anymore
}

func (x *BasicTestInstructionInformationMessage_InvisibleBasicInformationMessage) Reset() {
	*x = BasicTestInstructionInformationMessage_InvisibleBasicInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicTestInstructionInformationMessage_InvisibleBasicInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicTestInstructionInformationMessage_InvisibleBasicInformationMessage) ProtoMessage() {}

func (x *BasicTestInstructionInformationMessage_InvisibleBasicInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicTestInstructionInformationMessage_InvisibleBasicInformationMessage.ProtoReflect.Descriptor instead.
func (*BasicTestInstructionInformationMessage_InvisibleBasicInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{4, 2}
}

func (x *BasicTestInstructionInformationMessage_InvisibleBasicInformationMessage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Message holding one DropZone
type ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropZoneUuid                            string                                                                                                              `protobuf:"bytes,1,opt,name=DropZoneUuid,proto3" json:"DropZoneUuid,omitempty"`                                                       // A DropZone, UUID, for the TestInstruction
	DropZoneName                            string                                                                                                              `protobuf:"bytes,2,opt,name=DropZoneName,proto3" json:"DropZoneName,omitempty"`                                                       // A DropZone, Name, for the TestInstruction
	DropZoneDescription                     string                                                                                                              `protobuf:"bytes,3,opt,name=DropZoneDescription,proto3" json:"DropZoneDescription,omitempty"`                                         // Description of the DropZone
	DropZoneMouseOver                       string                                                                                                              `protobuf:"bytes,4,opt,name=DropZoneMouseOver,proto3" json:"DropZoneMouseOver,omitempty"`                                             // The mouse over text for the DropZone
	DropZoneColor                           string                                                                                                              `protobuf:"bytes,5,opt,name=DropZoneColor,proto3" json:"DropZoneColor,omitempty"`                                                     // The color used for presenting the DropsZone, e.g. #FAF437
	DropZonePreSetTestInstructionAttributes []*ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage `protobuf:"bytes,6,rep,name=DropZonePreSetTestInstructionAttributes,proto3" json:"DropZonePreSetTestInstructionAttributes,omitempty"` // A list of the attributes and their pre-set values
}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage) Reset() {
	*x = ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage) ProtoMessage() {}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage.ProtoReflect.Descriptor instead.
func (*ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage) GetDropZoneUuid() string {
	if x != nil {
		return x.DropZoneUuid
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage) GetDropZoneName() string {
	if x != nil {
		return x.DropZoneName
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage) GetDropZoneDescription() string {
	if x != nil {
		return x.DropZoneDescription
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage) GetDropZoneMouseOver() string {
	if x != nil {
		return x.DropZoneMouseOver
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage) GetDropZoneColor() string {
	if x != nil {
		return x.DropZoneColor
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage) GetDropZonePreSetTestInstructionAttributes() []*ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage {
	if x != nil {
		return x.DropZonePreSetTestInstructionAttributes
	}
	return nil
}

// Message holding one attribute with its pre-set value
type ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionAttributeType TestInstructionAttributeTypeEnum                                                                                                            `protobuf:"varint,1,opt,name=TestInstructionAttributeType,proto3,enum=fenixTestCaseBuilderServerGrpcApi.TestInstructionAttributeTypeEnum" json:"TestInstructionAttributeType,omitempty"`                                                                                                // Defines witch type attribute; TEXTBOX, COMBOBOX...
	TestInstructionAttributeUuid string                                                                                                                                      `protobuf:"bytes,2,opt,name=TestInstructionAttributeUuid,proto3" json:"TestInstructionAttributeUuid,omitempty"`                                                                                                                                                                         // The unique uuid for the TestInstructionAttribute, set by client system
	TestInstructionAttributeName string                                                                                                                                      `protobuf:"bytes,3,opt,name=TestInstructionAttributeName,proto3" json:"TestInstructionAttributeName,omitempty"`                                                                                                                                                                         // The name of the TestInstructionAttribute
	AttributeValueAsString       string                                                                                                                                      `protobuf:"bytes,4,opt,name=AttributeValueAsString,proto3" json:"AttributeValueAsString,omitempty"`                                                                                                                                                                                     // The String-representation of the value
	AttributeValueUuid           string                                                                                                                                      `protobuf:"bytes,5,opt,name=AttributeValueUuid,proto3" json:"AttributeValueUuid,omitempty"`                                                                                                                                                                                             // Combo-boxes can us a UUID as unique value behind the text visible in the combo-box
	AttributeActionCommand       ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum `protobuf:"varint,6,opt,name=AttributeActionCommand,proto3,enum=fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum" json:"AttributeActionCommand,omitempty"` // Decides what to do with Attribute
}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage) Reset() {
	*x = ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage) ProtoMessage() {
}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage.ProtoReflect.Descriptor instead.
func (*ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage) GetTestInstructionAttributeType() TestInstructionAttributeTypeEnum {
	if x != nil {
		return x.TestInstructionAttributeType
	}
	return TestInstructionAttributeTypeEnum_TestInstructionAttributeTypeEnum_DEFAULT_NOT_SET
}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage) GetTestInstructionAttributeUuid() string {
	if x != nil {
		return x.TestInstructionAttributeUuid
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage) GetTestInstructionAttributeName() string {
	if x != nil {
		return x.TestInstructionAttributeName
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage) GetAttributeValueAsString() string {
	if x != nil {
		return x.AttributeValueAsString
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage) GetAttributeValueUuid() string {
	if x != nil {
		return x.AttributeValueUuid
	}
	return ""
}

func (x *ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage) GetAttributeActionCommand() ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum {
	if x != nil {
		return x.AttributeActionCommand
	}
	return ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum_DEFAULT_NOT_SET
}

// Message holding the mature basic information about the TestInstruction
type MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseUuid                             string                       `protobuf:"bytes,1,opt,name=TestCaseUuid,proto3" json:"TestCaseUuid,omitempty"`                                                                                    // Reference to the TestCase where this TestInstruction exists
	TestInstructionMatureUuid                string                       `protobuf:"bytes,2,opt,name=TestInstructionMatureUuid,proto3" json:"TestInstructionMatureUuid,omitempty"`                                                          // The Mature UUID that the TestInstruction gets when it is added to the TestCase
	ParentTestInstructionContainerUuid       string                       `protobuf:"bytes,3,opt,name=ParentTestInstructionContainerUuid,proto3" json:"ParentTestInstructionContainerUuid,omitempty"`                                        // A UUID-reference to TestInstructionContainer where this TestInstruction exists
	ParentTestInstructionContainerMatureUuid string                       `protobuf:"bytes,4,opt,name=ParentTestInstructionContainerMatureUuid,proto3" json:"ParentTestInstructionContainerMatureUuid,omitempty"`                            // A Mature-UUID-reference to TestInstructionContainer where this TestInstruction exists
	ChosenDropZoneUuid                       string                       `protobuf:"bytes,5,opt,name=ChosenDropZoneUuid,proto3" json:"ChosenDropZoneUuid,omitempty"`                                                                        // The chosen dropzone, UUID, which set the attributes in TestInstruction when it was added to the TestCase
	ChosenDropZoneName                       string                       `protobuf:"bytes,6,opt,name=ChosenDropZoneName,proto3" json:"ChosenDropZoneName,omitempty"`                                                                        // The chosen dropzone, Name, which set the attributes in TestInstruction when it was added to the TestCase
	ChosenDropZoneColor                      string                       `protobuf:"bytes,7,opt,name=ChosenDropZoneColor,proto3" json:"ChosenDropZoneColor,omitempty"`                                                                      // The chosen dropzone, Color, which set the attributes in TestInstruction when it was added to the TestCase
	TestInstructionType                      TestCaseModelElementTypeEnum `protobuf:"varint,8,opt,name=TestInstructionType,proto3,enum=fenixTestCaseBuilderServerGrpcApi.TestCaseModelElementTypeEnum" json:"TestInstructionType,omitempty"` // Is the TestInstruction of TI-type or TIx-type
}

func (x *MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage) Reset() {
	*x = MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage) ProtoMessage() {
}

func (x *MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage.ProtoReflect.Descriptor instead.
func (*MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{6, 0}
}

func (x *MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage) GetTestCaseUuid() string {
	if x != nil {
		return x.TestCaseUuid
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage) GetTestInstructionMatureUuid() string {
	if x != nil {
		return x.TestInstructionMatureUuid
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage) GetParentTestInstructionContainerUuid() string {
	if x != nil {
		return x.ParentTestInstructionContainerUuid
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage) GetParentTestInstructionContainerMatureUuid() string {
	if x != nil {
		return x.ParentTestInstructionContainerMatureUuid
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage) GetChosenDropZoneUuid() string {
	if x != nil {
		return x.ChosenDropZoneUuid
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage) GetChosenDropZoneName() string {
	if x != nil {
		return x.ChosenDropZoneName
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage) GetChosenDropZoneColor() string {
	if x != nil {
		return x.ChosenDropZoneColor
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage) GetTestInstructionType() TestCaseModelElementTypeEnum {
	if x != nil {
		return x.TestInstructionType
	}
	return TestCaseModelElementTypeEnum_TestCaseModelElementTypeEnum_DEFAULT_NOT_SET
}

// Message holding information about changes to the TestInstruction, who and when
type MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddedToTestCaseTimeStamp       *timestamp.Timestamp `protobuf:"bytes,1,opt,name=AddedToTestCaseTimeStamp,proto3" json:"AddedToTestCaseTimeStamp,omitempty"`             // The TimeStamp when the TestInstruction was first added to the TestCase
	AddedToTestCaseByUserId        string               `protobuf:"bytes,2,opt,name=AddedToTestCaseByUserId,proto3" json:"AddedToTestCaseByUserId,omitempty"`               // Which user added the TestInstruction to the TestCase
	LastUpdatedInTestCaseTimeStamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=LastUpdatedInTestCaseTimeStamp,proto3" json:"LastUpdatedInTestCaseTimeStamp,omitempty"` // The TimeStamp when the TestInstruction was updated in the TestCase
	LastUpdatedInTestCaseByUserId  string               `protobuf:"bytes,4,opt,name=LastUpdatedInTestCaseByUserId,proto3" json:"LastUpdatedInTestCaseByUserId,omitempty"`   // Which user was the last to update the TestInstruction in the TestCase
	DeletedFromTestCaseTimeStamp   *timestamp.Timestamp `protobuf:"bytes,5,opt,name=DeletedFromTestCaseTimeStamp,proto3" json:"DeletedFromTestCaseTimeStamp,omitempty"`     // The TimeStamp when the TestInstruction was deleted from the TestCase
	DeletedFromTestCaseByUserId    string               `protobuf:"bytes,6,opt,name=DeletedFromTestCaseByUserId,proto3" json:"DeletedFromTestCaseByUserId,omitempty"`       // Which user deleted the TestInstruction from the TestCase
}

func (x *MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage) Reset() {
	*x = MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage) ProtoMessage() {}

func (x *MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage.ProtoReflect.Descriptor instead.
func (*MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{6, 1}
}

func (x *MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage) GetAddedToTestCaseTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.AddedToTestCaseTimeStamp
	}
	return nil
}

func (x *MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage) GetAddedToTestCaseByUserId() string {
	if x != nil {
		return x.AddedToTestCaseByUserId
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage) GetLastUpdatedInTestCaseTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.LastUpdatedInTestCaseTimeStamp
	}
	return nil
}

func (x *MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage) GetLastUpdatedInTestCaseByUserId() string {
	if x != nil {
		return x.LastUpdatedInTestCaseByUserId
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage) GetDeletedFromTestCaseTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.DeletedFromTestCaseTimeStamp
	}
	return nil
}

func (x *MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage) GetDeletedFromTestCaseByUserId() string {
	if x != nil {
		return x.DeletedFromTestCaseByUserId
	}
	return ""
}

// Message holding one Attribute for a Test Instruction
type MatureTestInstructionInformationMessage_TestInstructionAttributeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAttributeInformation *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage `protobuf:"bytes,1,opt,name=BaseAttributeInformation,proto3" json:"BaseAttributeInformation,omitempty"` // The information set from Client system about the Attribute
	AttributeInformation     *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage     `protobuf:"bytes,2,opt,name=AttributeInformation,proto3" json:"AttributeInformation,omitempty"`         // Have the ability to store all different Attribute type, but only one should be used
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage) Reset() {
	*x = MatureTestInstructionInformationMessage_TestInstructionAttributeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage) ProtoMessage() {}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatureTestInstructionInformationMessage_TestInstructionAttributeMessage.ProtoReflect.Descriptor instead.
func (*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{6, 2}
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage) GetBaseAttributeInformation() *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage {
	if x != nil {
		return x.BaseAttributeInformation
	}
	return nil
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage) GetAttributeInformation() *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage {
	if x != nil {
		return x.AttributeInformation
	}
	return nil
}

type MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionAttributeUuid                  string                           `protobuf:"bytes,1,opt,name=TestInstructionAttributeUuid,proto3" json:"TestInstructionAttributeUuid,omitempty"`                                                                           // The unique uuid for the TestInstructionAttribute, set by plugin
	TestInstructionAttributeName                  string                           `protobuf:"bytes,2,opt,name=TestInstructionAttributeName,proto3" json:"TestInstructionAttributeName,omitempty"`                                                                           // The name of the TestInstructionAttribute
	TestInstructionAttributeTypeUuid              string                           `protobuf:"bytes,3,opt,name=TestInstructionAttributeTypeUuid,proto3" json:"TestInstructionAttributeTypeUuid,omitempty"`                                                                   // The unique uuid for the TestInstructionAttribute-type
	TestInstructionAttributeTypeName              string                           `protobuf:"bytes,4,opt,name=TestInstructionAttributeTypeName,proto3" json:"TestInstructionAttributeTypeName,omitempty"`                                                                   // The name for the TestInstructionAttribute-type, used to group attributes in GUI
	TestInstructionAttributeDescription           string                           `protobuf:"bytes,5,opt,name=TestInstructionAttributeDescription,proto3" json:"TestInstructionAttributeDescription,omitempty"`                                                             // The description of the TestInstructionAttribute
	TestInstructionAttributeMouseOver             string                           `protobuf:"bytes,6,opt,name=TestInstructionAttributeMouseOver,proto3" json:"TestInstructionAttributeMouseOver,omitempty"`                                                                 // The mouse over text for the TestInstructionAttribute
	TestInstructionAttributeVisible               bool                             `protobuf:"varint,7,opt,name=TestInstructionAttributeVisible,proto3" json:"TestInstructionAttributeVisible,omitempty"`                                                                    // Should the TestInstructionAttribute be visible in attributes list in GUI or not
	TestInstructionAttributeEnable                bool                             `protobuf:"varint,8,opt,name=TestInstructionAttributeEnable,proto3" json:"TestInstructionAttributeEnable,omitempty"`                                                                      // Should the TestInstructionAttribute be enabled or not
	TestInstructionAttributeMandatory             bool                             `protobuf:"varint,9,opt,name=TestInstructionAttributeMandatory,proto3" json:"TestInstructionAttributeMandatory,omitempty"`                                                                // Should the TestInstructionAttribute be mandatory or not
	TestInstructionAttributeVisibleInTestCaseArea bool                             `protobuf:"varint,10,opt,name=TestInstructionAttributeVisibleInTestCaseArea,proto3" json:"TestInstructionAttributeVisibleInTestCaseArea,omitempty"`                                       // Should the TestInstructionAttribute be visible in TestInstruction at TestCaseModel- Area in GUI or not
	TestInstructionAttributeIsDeprecated          bool                             `protobuf:"varint,11,opt,name=TestInstructionAttributeIsDeprecated,proto3" json:"TestInstructionAttributeIsDeprecated,omitempty"`                                                         // Indicates that this TestInstruction attribute shouldn't be used anymore
	TestInstructionAttributeType                  TestInstructionAttributeTypeEnum `protobuf:"varint,12,opt,name=TestInstructionAttributeType,proto3,enum=fenixTestCaseBuilderServerGrpcApi.TestInstructionAttributeTypeEnum" json:"TestInstructionAttributeType,omitempty"` // The chosen Enum value for what type the instruction attribute should be
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage) Reset() {
	*x = MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage) ProtoMessage() {
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage.ProtoReflect.Descriptor instead.
func (*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{6, 2, 0}
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage) GetTestInstructionAttributeUuid() string {
	if x != nil {
		return x.TestInstructionAttributeUuid
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage) GetTestInstructionAttributeName() string {
	if x != nil {
		return x.TestInstructionAttributeName
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage) GetTestInstructionAttributeTypeUuid() string {
	if x != nil {
		return x.TestInstructionAttributeTypeUuid
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage) GetTestInstructionAttributeTypeName() string {
	if x != nil {
		return x.TestInstructionAttributeTypeName
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage) GetTestInstructionAttributeDescription() string {
	if x != nil {
		return x.TestInstructionAttributeDescription
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage) GetTestInstructionAttributeMouseOver() string {
	if x != nil {
		return x.TestInstructionAttributeMouseOver
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage) GetTestInstructionAttributeVisible() bool {
	if x != nil {
		return x.TestInstructionAttributeVisible
	}
	return false
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage) GetTestInstructionAttributeEnable() bool {
	if x != nil {
		return x.TestInstructionAttributeEnable
	}
	return false
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage) GetTestInstructionAttributeMandatory() bool {
	if x != nil {
		return x.TestInstructionAttributeMandatory
	}
	return false
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage) GetTestInstructionAttributeVisibleInTestCaseArea() bool {
	if x != nil {
		return x.TestInstructionAttributeVisibleInTestCaseArea
	}
	return false
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage) GetTestInstructionAttributeIsDeprecated() bool {
	if x != nil {
		return x.TestInstructionAttributeIsDeprecated
	}
	return false
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage) GetTestInstructionAttributeType() TestInstructionAttributeTypeEnum {
	if x != nil {
		return x.TestInstructionAttributeType
	}
	return TestInstructionAttributeTypeEnum_TestInstructionAttributeTypeEnum_DEFAULT_NOT_SET
}

// Message holding one attribute. It has the ability to hold different types of attribute but only one should be used
type MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputTextBoxProperty      *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty      `protobuf:"bytes,1,opt,name=inputTextBoxProperty,proto3" json:"inputTextBoxProperty,omitempty"`           // If the attribute is a textbox then all properties can be found in structure
	InputComboBoxProperty     *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty     `protobuf:"bytes,2,opt,name=InputComboBoxProperty,proto3" json:"InputComboBoxProperty,omitempty"`         // If the attribute is a combobox then all properties can be found in structure
	InputFileSelectorProperty *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputFileSelectorProperty `protobuf:"bytes,3,opt,name=InputFileSelectorProperty,proto3" json:"InputFileSelectorProperty,omitempty"` // If the attribute is a combobox then all properties can be found in structure
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage) Reset() {
	*x = MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage) ProtoMessage() {
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage.ProtoReflect.Descriptor instead.
func (*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{6, 2, 1}
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage) GetInputTextBoxProperty() *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty {
	if x != nil {
		return x.InputTextBoxProperty
	}
	return nil
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage) GetInputComboBoxProperty() *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty {
	if x != nil {
		return x.InputComboBoxProperty
	}
	return nil
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage) GetInputFileSelectorProperty() *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputFileSelectorProperty {
	if x != nil {
		return x.InputFileSelectorProperty
	}
	return nil
}

// Properties if it is a TextBox attribute
type MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionAttributeInputTextBoUuid  string `protobuf:"bytes,1,opt,name=TestInstructionAttributeInputTextBoUuid,proto3" json:"TestInstructionAttributeInputTextBoUuid,omitempty"`   // The unique uuid for the TestInstructionAttributeInputTextBoxProperties
	TestInstructionAttributeInputTextBoxName string `protobuf:"bytes,2,opt,name=TestInstructionAttributeInputTextBoxName,proto3" json:"TestInstructionAttributeInputTextBoxName,omitempty"` // The name of the TestInstructionAttributeInputTextBoxProperties
	TextBoxEditable                          bool   `protobuf:"varint,3,opt,name=TextBoxEditable,proto3" json:"TextBoxEditable,omitempty"`                                                  // Should the the TextBox be editable or not
	TextBoxInputMask                         string `protobuf:"bytes,4,opt,name=TextBoxInputMask,proto3" json:"TextBoxInputMask,omitempty"`                                                 // Input mask for the TextBox
	TextBoxAttributeTypeUuid                 string `protobuf:"bytes,5,opt,name=TextBoxAttributeTypeUuid,proto3" json:"TextBoxAttributeTypeUuid,omitempty"`                                 // The unique uuid for the Type of the TextBox. Used for data manipulation
	TextBoxAttributeTypeName                 string `protobuf:"bytes,6,opt,name=TextBoxAttributeTypeName,proto3" json:"TextBoxAttributeTypeName,omitempty"`                                 // The Name for the Type of the TextBox.
	TextBoxAttributeValue                    string `protobuf:"bytes,7,opt,name=TextBoxAttributeValue,proto3" json:"TextBoxAttributeValue,omitempty"`                                       // The value for the the TextBox, used for preset values
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty) Reset() {
	*x = MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty) ProtoMessage() {
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty.ProtoReflect.Descriptor instead.
func (*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{6, 2, 1, 0}
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty) GetTestInstructionAttributeInputTextBoUuid() string {
	if x != nil {
		return x.TestInstructionAttributeInputTextBoUuid
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty) GetTestInstructionAttributeInputTextBoxName() string {
	if x != nil {
		return x.TestInstructionAttributeInputTextBoxName
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty) GetTextBoxEditable() bool {
	if x != nil {
		return x.TextBoxEditable
	}
	return false
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty) GetTextBoxInputMask() string {
	if x != nil {
		return x.TextBoxInputMask
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty) GetTextBoxAttributeTypeUuid() string {
	if x != nil {
		return x.TextBoxAttributeTypeUuid
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty) GetTextBoxAttributeTypeName() string {
	if x != nil {
		return x.TextBoxAttributeTypeName
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty) GetTextBoxAttributeValue() string {
	if x != nil {
		return x.TextBoxAttributeValue
	}
	return ""
}

// Properties if it is a ComboBox attribute
type MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionAttributeComboBoxUuid string `protobuf:"bytes,1,opt,name=TestInstructionAttributeComboBoxUuid,proto3" json:"TestInstructionAttributeComboBoxUuid,omitempty"` // The unique uuid for the TestInstructionAttributeComboBoxProperties
	TestInstructionAttributeComboBoxName string `protobuf:"bytes,2,opt,name=TestInstructionAttributeComboBoxName,proto3" json:"TestInstructionAttributeComboBoxName,omitempty"` // The name of the TestInstructionAttributeComboBoxProperties
	ComboBoxEditable                     bool   `protobuf:"varint,3,opt,name=ComboBoxEditable,proto3" json:"ComboBoxEditable,omitempty"`                                        // Should the the ComboBox be editable or not
	ComboBoxInputMask                    string `protobuf:"bytes,4,opt,name=ComboBoxInputMask,proto3" json:"ComboBoxInputMask,omitempty"`                                       // Input mask for the ComboBox
	ComboBoxAttributeTypeUuid            string `protobuf:"bytes,5,opt,name=ComboBoxAttributeTypeUuid,proto3" json:"ComboBoxAttributeTypeUuid,omitempty"`                       // The unique uuid for the Type of the ComboBox Used for data manipulation
	ComboBoxAttributeTypeName            string `protobuf:"bytes,6,opt,name=ComboBoxAttributeTypeName,proto3" json:"ComboBoxAttributeTypeName,omitempty"`                       // The Name for the Type of the ComboBox
	ComboBoxAttributeValueUuid           string `protobuf:"bytes,7,opt,name=ComboBoxAttributeValueUuid,proto3" json:"ComboBoxAttributeValueUuid,omitempty"`                     // The uuid of the value for the the ComboBox, used for showing one value but have a unique value behind the scene
	ComboBoxAttributeValue               string `protobuf:"bytes,8,opt,name=ComboBoxAttributeValue,proto3" json:"ComboBoxAttributeValue,omitempty"`                             // The value for the the ComboBox, used for preset values
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty) Reset() {
	*x = MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty) ProtoMessage() {
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty.ProtoReflect.Descriptor instead.
func (*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{6, 2, 1, 1}
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty) GetTestInstructionAttributeComboBoxUuid() string {
	if x != nil {
		return x.TestInstructionAttributeComboBoxUuid
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty) GetTestInstructionAttributeComboBoxName() string {
	if x != nil {
		return x.TestInstructionAttributeComboBoxName
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty) GetComboBoxEditable() bool {
	if x != nil {
		return x.ComboBoxEditable
	}
	return false
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty) GetComboBoxInputMask() string {
	if x != nil {
		return x.ComboBoxInputMask
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty) GetComboBoxAttributeTypeUuid() string {
	if x != nil {
		return x.ComboBoxAttributeTypeUuid
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty) GetComboBoxAttributeTypeName() string {
	if x != nil {
		return x.ComboBoxAttributeTypeName
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty) GetComboBoxAttributeValueUuid() string {
	if x != nil {
		return x.ComboBoxAttributeValueUuid
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty) GetComboBoxAttributeValue() string {
	if x != nil {
		return x.ComboBoxAttributeValue
	}
	return ""
}

// Properties if it is a FileSelector attribute
type MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputFileSelectorProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionAttributeFileSelectorUuid  string `protobuf:"bytes,1,opt,name=TestInstructionAttributeFileSelectorUuid,proto3" json:"TestInstructionAttributeFileSelectorUuid,omitempty"`   // The unique Uuid for the TestInstructionAttributeFileSelectorProperties
	TestInstructionAttributeFileSelectorName  string `protobuf:"bytes,2,opt,name=TestInstructionAttributeFileSelectorName,proto3" json:"TestInstructionAttributeFileSelectorName,omitempty"`   // The name of the TestInstructionAttributeFileSelectorProperties
	TestInstructionAttributeFileReferenceUuid string `protobuf:"bytes,3,opt,name=TestInstructionAttributeFileReferenceUuid,proto3" json:"TestInstructionAttributeFileReferenceUuid,omitempty"` // A reference, UUID, to a chosen file, that has been added to the TestCase
	TestInstructionAttributeFileReferenceName string `protobuf:"bytes,4,opt,name=TestInstructionAttributeFileReferenceName,proto3" json:"TestInstructionAttributeFileReferenceName,omitempty"` // A reference, Name, to a chosen file, that has been added to the TestCase
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputFileSelectorProperty) Reset() {
	*x = MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputFileSelectorProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputFileSelectorProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputFileSelectorProperty) ProtoMessage() {
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputFileSelectorProperty) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputFileSelectorProperty.ProtoReflect.Descriptor instead.
func (*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputFileSelectorProperty) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{6, 2, 1, 2}
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputFileSelectorProperty) GetTestInstructionAttributeFileSelectorUuid() string {
	if x != nil {
		return x.TestInstructionAttributeFileSelectorUuid
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputFileSelectorProperty) GetTestInstructionAttributeFileSelectorName() string {
	if x != nil {
		return x.TestInstructionAttributeFileSelectorName
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputFileSelectorProperty) GetTestInstructionAttributeFileReferenceUuid() string {
	if x != nil {
		return x.TestInstructionAttributeFileReferenceUuid
	}
	return ""
}

func (x *MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputFileSelectorProperty) GetTestInstructionAttributeFileReferenceName() string {
	if x != nil {
		return x.TestInstructionAttributeFileReferenceName
	}
	return ""
}

// Message holding one Attribute for one TestInstruction
type ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainUuid                                    string `protobuf:"bytes,1,opt,name=DomainUuid,proto3" json:"DomainUuid,omitempty"`                                                                         // The Domain, UUID, to be tested with this TestInstruction
	DomainName                                    string `protobuf:"bytes,2,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                                                         // The Domain, Name, to be tested with this TestInstruction
	TestInstructionUuid                           string `protobuf:"bytes,3,opt,name=TestInstructionUuid,proto3" json:"TestInstructionUuid,omitempty"`                                                       // TestInstruction UUID, set by Client system
	TestInstructionName                           string `protobuf:"bytes,4,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"`                                                       // TestInstruction Name, set by Client system
	TestInstructionAttributeUuid                  string `protobuf:"bytes,5,opt,name=TestInstructionAttributeUuid,proto3" json:"TestInstructionAttributeUuid,omitempty"`                                     // The unique uuid for the TestInstructionAttribute, set by plugin
	TestInstructionAttributeName                  string `protobuf:"bytes,6,opt,name=TestInstructionAttributeName,proto3" json:"TestInstructionAttributeName,omitempty"`                                     // The name of the TestInstructionAttribute
	TestInstructionAttributeTypeUuid              string `protobuf:"bytes,7,opt,name=TestInstructionAttributeTypeUuid,proto3" json:"TestInstructionAttributeTypeUuid,omitempty"`                             // The unique uuid for the TestInstructionAttribute-type
	TestInstructionAttributeTypeName              string `protobuf:"bytes,8,opt,name=TestInstructionAttributeTypeName,proto3" json:"TestInstructionAttributeTypeName,omitempty"`                             // The name for the TestInstructionAttribute-type, used to group attributes in GUI
	TestInstructionAttributeDescription           string `protobuf:"bytes,9,opt,name=TestInstructionAttributeDescription,proto3" json:"TestInstructionAttributeDescription,omitempty"`                       // The description of the TestInstructionAttribute
	TestInstructionAttributeMouseOver             string `protobuf:"bytes,10,opt,name=TestInstructionAttributeMouseOver,proto3" json:"TestInstructionAttributeMouseOver,omitempty"`                          // The mouse over text for the TestInstructionAttribute
	TestInstructionAttributeVisible               bool   `protobuf:"varint,11,opt,name=TestInstructionAttributeVisible,proto3" json:"TestInstructionAttributeVisible,omitempty"`                             // Should the TestInstructionAttribute be visible in attributes list in GUI or not
	TestInstructionAttributeEnable                bool   `protobuf:"varint,12,opt,name=TestInstructionAttributeEnable,proto3" json:"TestInstructionAttributeEnable,omitempty"`                               // Should the TestInstructionAttribute be enabled or not
	TestInstructionAttributeMandatory             bool   `protobuf:"varint,13,opt,name=TestInstructionAttributeMandatory,proto3" json:"TestInstructionAttributeMandatory,omitempty"`                         // Should the TestInstructionAttribute be mandatory or not
	TestInstructionAttributeVisibleInTestCaseArea bool   `protobuf:"varint,14,opt,name=TestInstructionAttributeVisibleInTestCaseArea,proto3" json:"TestInstructionAttributeVisibleInTestCaseArea,omitempty"` // Should the TestInstructionAttribute be visible in TestInstruction at TestCaseModel- Area in GUI or not
	TestInstructionAttributeIsDeprecated          bool   `protobuf:"varint,15,opt,name=TestInstructionAttributeIsDeprecated,proto3" json:"TestInstructionAttributeIsDeprecated,omitempty"`                   // Indicates that this TestInstruction attribute shouldn't be used anymore
	TestInstructionAttributeValueAsString         string `protobuf:"bytes,16,opt,name=TestInstructionAttributeValueAsString,proto3" json:"TestInstructionAttributeValueAsString,omitempty"`                  // The string representation of the value for the attribute
	TestInstructionAttributeValueUuid             string `protobuf:"bytes,17,opt,name=TestInstructionAttributeValueUuid,proto3" json:"TestInstructionAttributeValueUuid,omitempty"`                          // The UUID for the value, when Combobox is used
	TestInstructionAttributeUIType                string `protobuf:"bytes,18,opt,name=TestInstructionAttributeUIType,proto3" json:"TestInstructionAttributeUIType,omitempty"`                                // The type that should be presented in GUI, TEXTBOX, COMBOBOX....
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) Reset() {
	*x = ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) ProtoMessage() {}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage.ProtoReflect.Descriptor instead.
func (*ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetDomainUuid() string {
	if x != nil {
		return x.DomainUuid
	}
	return ""
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetTestInstructionUuid() string {
	if x != nil {
		return x.TestInstructionUuid
	}
	return ""
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetTestInstructionAttributeUuid() string {
	if x != nil {
		return x.TestInstructionAttributeUuid
	}
	return ""
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetTestInstructionAttributeName() string {
	if x != nil {
		return x.TestInstructionAttributeName
	}
	return ""
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetTestInstructionAttributeTypeUuid() string {
	if x != nil {
		return x.TestInstructionAttributeTypeUuid
	}
	return ""
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetTestInstructionAttributeTypeName() string {
	if x != nil {
		return x.TestInstructionAttributeTypeName
	}
	return ""
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetTestInstructionAttributeDescription() string {
	if x != nil {
		return x.TestInstructionAttributeDescription
	}
	return ""
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetTestInstructionAttributeMouseOver() string {
	if x != nil {
		return x.TestInstructionAttributeMouseOver
	}
	return ""
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetTestInstructionAttributeVisible() bool {
	if x != nil {
		return x.TestInstructionAttributeVisible
	}
	return false
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetTestInstructionAttributeEnable() bool {
	if x != nil {
		return x.TestInstructionAttributeEnable
	}
	return false
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetTestInstructionAttributeMandatory() bool {
	if x != nil {
		return x.TestInstructionAttributeMandatory
	}
	return false
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetTestInstructionAttributeVisibleInTestCaseArea() bool {
	if x != nil {
		return x.TestInstructionAttributeVisibleInTestCaseArea
	}
	return false
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetTestInstructionAttributeIsDeprecated() bool {
	if x != nil {
		return x.TestInstructionAttributeIsDeprecated
	}
	return false
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetTestInstructionAttributeValueAsString() string {
	if x != nil {
		return x.TestInstructionAttributeValueAsString
	}
	return ""
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetTestInstructionAttributeValueUuid() string {
	if x != nil {
		return x.TestInstructionAttributeValueUuid
	}
	return ""
}

func (x *ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage) GetTestInstructionAttributeUIType() string {
	if x != nil {
		return x.TestInstructionAttributeUIType
	}
	return ""
}

var File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto protoreflect.FileDescriptor

var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDesc = []byte{
	0x0a, 0x7c, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x5f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x7c, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x7a, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x5f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x02, 0x0a,
	0x38, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x47, 0x43, 0x50, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x47, 0x43, 0x50, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x96, 0x01, 0x0a, 0x1c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x52, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0xd1, 0x03, 0x0a, 0x38, 0x53, 0x61, 0x76, 0x65, 0x41,
	0x6c, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x14, 0x47, 0x43, 0x50, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x47,
	0x43, 0x50, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x96, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x78, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x16, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd1, 0x03, 0x0a, 0x1e, 0x49,
	0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x93, 0x01,
	0x0a, 0x1f, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x1f, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x9c, 0x01, 0x0a, 0x22, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4c, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x22,
	0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x18, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x75,
	0x62, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x18, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x75,
	0x62, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x87,
	0x04, 0x0a, 0x1d, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x95, 0x01, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x5d, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x16, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xcd, 0x02, 0x0a, 0x1c, 0x4d, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x1f, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1f,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x96, 0x01, 0x0a, 0x20, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x20, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x0b, 0x0a, 0x26, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x16, 0x4e, 0x6f, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4e, 0x6f, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x16, 0x4e, 0x6f, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9b, 0x01, 0x0a, 0x13, 0x45,
	0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x13, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa8, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x19, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x9e, 0x05, 0x0a, 0x22, 0x4e, 0x6f, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1b, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4d, 0x61,
	0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4d, 0x69,
	0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x54, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x77,
	0x61, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x43, 0x52, 0x75, 0x6c, 0x65,
	0x53, 0x77, 0x61, 0x70, 0x1a, 0xa5, 0x01, 0x0a, 0x1f, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x75, 0x73, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x1a, 0x3c, 0x0a, 0x20,
	0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xd5, 0x0b, 0x0a, 0x29, 0x49,
	0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x12, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x6f,
	0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x73,
	0x1a, 0x8f, 0x0a, 0x0a, 0x18, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72,
	0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x72, 0x6f, 0x70, 0x5a,
	0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x75, 0x73,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x72,
	0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0xee, 0x01, 0x0a, 0x27,
	0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x65, 0x53, 0x65, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x93, 0x01,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x72,
	0x65, 0x53, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x27, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x65,
	0x53, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xb3, 0x06, 0x0a,
	0x2d, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x65, 0x53, 0x65, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x87,
	0x01, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x1c,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0xe7, 0x01, 0x0a, 0x16, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0xae, 0x01, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x49,
	0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x65, 0x53, 0x65, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x16, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x1a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5a, 0x4f, 0x4e,
	0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x22, 0x8f, 0x2a, 0x0a, 0x27, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0xcd,
	0x01, 0x0a, 0x25, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x77,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x25, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb2,
	0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xb0, 0x01, 0x0a, 0x1d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xc1, 0x04, 0x0a, 0x2c, 0x4d, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x22, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x28, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x28, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x44,
	0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x44,
	0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x44,
	0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x5a, 0x6f,
	0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x71, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x83, 0x04, 0x0a, 0x23, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x56, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x18, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x17, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x1e, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1e, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a, 0x1d, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5e,
	0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40,
	0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x1a, 0xe1, 0x1c, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x18, 0x42, 0x61, 0x73, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8a, 0x01, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x18, 0x42, 0x61, 0x73, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xbb,
	0x01, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x86, 0x01,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x85, 0x08, 0x0a,
	0x1f, 0x42, 0x61, 0x73, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x50, 0x0a, 0x23, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x6f,
	0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x12, 0x48, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x64, 0x0a, 0x2d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x52, 0x0a, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x49, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x73,
	0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x1c, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x43, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0xad, 0x11, 0x0a, 0x1b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0xe8, 0x01, 0x0a, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x42, 0x6f, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0xb3, 0x01, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f,
	0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0xeb, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f,
	0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0xb4, 0x01, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x15, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d,
	0x62, 0x6f, 0x42, 0x6f, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0xf7, 0x01,
	0x0a, 0x19, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0xb8, 0x01, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x19, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x1a, 0xe8, 0x03, 0x0a, 0x2c, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x27, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x27, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x5a, 0x0a, 0x28, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x28, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78,
	0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x74,
	0x42, 0x6f, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x3a, 0x0a, 0x18, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15,
	0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x54, 0x65, 0x78,
	0x74, 0x42, 0x6f, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xa5, 0x04, 0x0a, 0x2d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x62,
	0x6f, 0x42, 0x6f, 0x78, 0x55, 0x75, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x24, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78,
	0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x62,
	0x6f, 0x42, 0x6f, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3c, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42,
	0x6f, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x43, 0x6f, 0x6d, 0x62, 0x6f,
	0x42, 0x6f, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f,
	0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x6f, 0x78, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa7, 0x03, 0x0a, 0x31, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x5a, 0x0a, 0x28, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x28, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x28,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x28,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x29, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x29, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x29, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x29, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xca, 0x0c, 0x0a, 0x28, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0xb1, 0x01, 0x0a, 0x1d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x49, 0x6d,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x1a, 0x8b, 0x0a, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x4a, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x23, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a,
	0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x1f, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4c, 0x0a,
	0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x64, 0x0a, 0x2d, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x2d, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x52, 0x0a, 0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x73, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x24, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x21, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x1e, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x49, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x49, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescOnce sync.Once
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescData = file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDesc
)

func file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescGZIP() []byte {
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescOnce.Do(func() {
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescData)
	})
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDescData
}

var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_goTypes = []interface{}{
	(ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage_AttributeActionCommandEnum)(0),              // 0: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionInformationMessage.AvailableDropZoneMessage.DropZonePreSetTestInstructionAttributeMessage.AttributeActionCommandEnum
	(*ListAllTestInstructionsForSpecificTestCaseRequestMessage)(nil),                                                                                              // 1: fenixTestCaseBuilderServerGrpcApi.ListAllTestInstructionsForSpecificTestCaseRequestMessage
	(*SaveAllTestInstructionsForSpecificTestCaseRequestMessage)(nil),                                                                                              // 2: fenixTestCaseBuilderServerGrpcApi.SaveAllTestInstructionsForSpecificTestCaseRequestMessage
	(*ImmatureTestInstructionMessage)(nil),                                                                                                                        // 3: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionMessage
	(*MatureTestInstructionsMessage)(nil),                                                                                                                         // 4: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionsMessage
	(*BasicTestInstructionInformationMessage)(nil),                                                                                                                // 5: fenixTestCaseBuilderServerGrpcApi.BasicTestInstructionInformationMessage
	(*ImmatureTestInstructionInformationMessage)(nil),                                                                                                             // 6: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionInformationMessage
	(*MatureTestInstructionInformationMessage)(nil),                                                                                                               // 7: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage
	(*ImmatureTestInstructionAttributesMessage)(nil),                                                                                                              // 8: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionAttributesMessage
	(*MatureTestInstructionsMessage_MatureTestInstructionMessage)(nil),                                                                                            // 9: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionsMessage.MatureTestInstructionMessage
	(*BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage)(nil),                                                                             // 10: fenixTestCaseBuilderServerGrpcApi.BasicTestInstructionInformationMessage.NonEditableBasicInformationMessage
	(*BasicTestInstructionInformationMessage_EditableBasicInformationMessage)(nil),                                                                                // 11: fenixTestCaseBuilderServerGrpcApi.BasicTestInstructionInformationMessage.EditableBasicInformationMessage
	(*BasicTestInstructionInformationMessage_InvisibleBasicInformationMessage)(nil),                                                                               // 12: fenixTestCaseBuilderServerGrpcApi.BasicTestInstructionInformationMessage.InvisibleBasicInformationMessage
	(*ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage)(nil),                                                                                    // 13: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionInformationMessage.AvailableDropZoneMessage
	(*ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage)(nil),                                      // 14: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionInformationMessage.AvailableDropZoneMessage.DropZonePreSetTestInstructionAttributeMessage
	(*MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage)(nil),                                                                  // 15: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.MatureBasicTestInstructionInformationMessage
	(*MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage)(nil),                                                                           // 16: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.CreatedAndUpdatedInformationMessage
	(*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage)(nil),                                                                               // 17: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage
	(*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage)(nil),                                               // 18: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage.BaseAttributeInformationMessage
	(*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage)(nil),                                                   // 19: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage.AttributeInformationMessage
	(*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty)(nil),      // 20: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage.AttributeInformationMessage.TestInstructionAttributeInputTextBoxProperty
	(*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty)(nil),     // 21: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage.AttributeInformationMessage.TestInstructionAttributeInputComboBoxProperty
	(*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputFileSelectorProperty)(nil), // 22: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage.AttributeInformationMessage.TestInstructionAttributeInputFileSelectorProperty
	(*ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage)(nil),                                                                              // 23: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionAttributesMessage.TestInstructionAttributeMessage
	(CurrentFenixTestCaseBuilderProtoFileVersionEnum)(0),                                                                                                          // 24: fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum
	(*ImmatureElementModelMessage)(nil),                                                                                                                           // 25: fenixTestCaseBuilderServerGrpcApi.ImmatureElementModelMessage
	(*AckNackResponse)(nil),                                                                                                                                       // 26: fenixTestCaseBuilderServerGrpcApi.AckNackResponse
	(*timestamp.Timestamp)(nil),                                                                                                                                   // 27: google.protobuf.Timestamp
	(TestInstructionAttributeTypeEnum)(0),                                                                                                                         // 28: fenixTestCaseBuilderServerGrpcApi.TestInstructionAttributeTypeEnum
	(TestCaseModelElementTypeEnum)(0),                                                                                                                             // 29: fenixTestCaseBuilderServerGrpcApi.TestCaseModelElementTypeEnum
}
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_depIdxs = []int32{
	24, // 0: fenixTestCaseBuilderServerGrpcApi.ListAllTestInstructionsForSpecificTestCaseRequestMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum
	24, // 1: fenixTestCaseBuilderServerGrpcApi.SaveAllTestInstructionsForSpecificTestCaseRequestMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum
	4,  // 2: fenixTestCaseBuilderServerGrpcApi.SaveAllTestInstructionsForSpecificTestCaseRequestMessage.MatureTestInstructions:type_name -> fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionsMessage
	5,  // 3: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionMessage.BasicTestInstructionInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.BasicTestInstructionInformationMessage
	6,  // 4: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionMessage.ImmatureTestInstructionInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionInformationMessage
	25, // 5: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionMessage.ImmatureSubTestCaseModel:type_name -> fenixTestCaseBuilderServerGrpcApi.ImmatureElementModelMessage
	9,  // 6: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionsMessage.MatureTestInstructions:type_name -> fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionsMessage.MatureTestInstructionMessage
	10, // 7: fenixTestCaseBuilderServerGrpcApi.BasicTestInstructionInformationMessage.NonEditableInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.BasicTestInstructionInformationMessage.NonEditableBasicInformationMessage
	11, // 8: fenixTestCaseBuilderServerGrpcApi.BasicTestInstructionInformationMessage.EditableInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.BasicTestInstructionInformationMessage.EditableBasicInformationMessage
	12, // 9: fenixTestCaseBuilderServerGrpcApi.BasicTestInstructionInformationMessage.InvisibleBasicInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.BasicTestInstructionInformationMessage.InvisibleBasicInformationMessage
	13, // 10: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionInformationMessage.AvailableDropZones:type_name -> fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionInformationMessage.AvailableDropZoneMessage
	15, // 11: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.MatureBasicTestInstructionInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.MatureBasicTestInstructionInformationMessage
	16, // 12: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.CreatedAndUpdatedInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.CreatedAndUpdatedInformationMessage
	17, // 13: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributesList:type_name -> fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage
	23, // 14: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionAttributesMessage.TestInstructionAttributesList:type_name -> fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionAttributesMessage.TestInstructionAttributeMessage
	26, // 15: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionAttributesMessage.ackNackResponse:type_name -> fenixTestCaseBuilderServerGrpcApi.AckNackResponse
	5,  // 16: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionsMessage.MatureTestInstructionMessage.BasicTestInstructionInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.BasicTestInstructionInformationMessage
	7,  // 17: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionsMessage.MatureTestInstructionMessage.MatureTestInstructionInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage
	27, // 18: fenixTestCaseBuilderServerGrpcApi.BasicTestInstructionInformationMessage.NonEditableBasicInformationMessage.UpdatedTimeStamp:type_name -> google.protobuf.Timestamp
	14, // 19: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionInformationMessage.AvailableDropZoneMessage.DropZonePreSetTestInstructionAttributes:type_name -> fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionInformationMessage.AvailableDropZoneMessage.DropZonePreSetTestInstructionAttributeMessage
	28, // 20: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionInformationMessage.AvailableDropZoneMessage.DropZonePreSetTestInstructionAttributeMessage.TestInstructionAttributeType:type_name -> fenixTestCaseBuilderServerGrpcApi.TestInstructionAttributeTypeEnum
	0,  // 21: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionInformationMessage.AvailableDropZoneMessage.DropZonePreSetTestInstructionAttributeMessage.AttributeActionCommand:type_name -> fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionInformationMessage.AvailableDropZoneMessage.DropZonePreSetTestInstructionAttributeMessage.AttributeActionCommandEnum
	29, // 22: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.MatureBasicTestInstructionInformationMessage.TestInstructionType:type_name -> fenixTestCaseBuilderServerGrpcApi.TestCaseModelElementTypeEnum
	27, // 23: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.CreatedAndUpdatedInformationMessage.AddedToTestCaseTimeStamp:type_name -> google.protobuf.Timestamp
	27, // 24: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.CreatedAndUpdatedInformationMessage.LastUpdatedInTestCaseTimeStamp:type_name -> google.protobuf.Timestamp
	27, // 25: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.CreatedAndUpdatedInformationMessage.DeletedFromTestCaseTimeStamp:type_name -> google.protobuf.Timestamp
	18, // 26: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage.BaseAttributeInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage.BaseAttributeInformationMessage
	19, // 27: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage.AttributeInformation:type_name -> fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage.AttributeInformationMessage
	28, // 28: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage.BaseAttributeInformationMessage.TestInstructionAttributeType:type_name -> fenixTestCaseBuilderServerGrpcApi.TestInstructionAttributeTypeEnum
	20, // 29: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage.AttributeInformationMessage.inputTextBoxProperty:type_name -> fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage.AttributeInformationMessage.TestInstructionAttributeInputTextBoxProperty
	21, // 30: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage.AttributeInformationMessage.InputComboBoxProperty:type_name -> fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage.AttributeInformationMessage.TestInstructionAttributeInputComboBoxProperty
	22, // 31: fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage.AttributeInformationMessage.InputFileSelectorProperty:type_name -> fenixTestCaseBuilderServerGrpcApi.MatureTestInstructionInformationMessage.TestInstructionAttributeMessage.AttributeInformationMessage.TestInstructionAttributeInputFileSelectorProperty
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() {
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_init()
}
func file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_init() {
	if File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto != nil {
		return
	}
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_init()
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestCaseModelMessages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllTestInstructionsForSpecificTestCaseRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveAllTestInstructionsForSpecificTestCaseRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmatureTestInstructionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatureTestInstructionsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicTestInstructionInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmatureTestInstructionInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatureTestInstructionInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmatureTestInstructionAttributesMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatureTestInstructionsMessage_MatureTestInstructionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicTestInstructionInformationMessage_NonEditableBasicInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicTestInstructionInformationMessage_EditableBasicInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicTestInstructionInformationMessage_InvisibleBasicInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmatureTestInstructionInformationMessage_AvailableDropZoneMessage_DropZonePreSetTestInstructionAttributeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatureTestInstructionInformationMessage_MatureBasicTestInstructionInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatureTestInstructionInformationMessage_CreatedAndUpdatedInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_BaseAttributeInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputTextBoxProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputComboBoxProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatureTestInstructionInformationMessage_TestInstructionAttributeMessage_AttributeInformationMessage_TestInstructionAttributeInputFileSelectorProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmatureTestInstructionAttributesMessage_TestInstructionAttributeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_goTypes,
		DependencyIndexes: file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_depIdxs,
		EnumInfos:         file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_enumTypes,
		MessageInfos:      file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_msgTypes,
	}.Build()
	File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto = out.File
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_rawDesc = nil
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_goTypes = nil
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_depIdxs = nil
}
