// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_AvailableMessages.proto

package go_grpc_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message holding all supported TestInstructions and Pre-defined TestInstructionContainers that the user can use when building TestCases
type AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImmatureTestInstructions          []*ImmatureTestInstructionMessage          `protobuf:"bytes,1,rep,name=ImmatureTestInstructions,proto3" json:"ImmatureTestInstructions,omitempty"`                   // List of all TestInstruction
	ImmatureTestInstructionContainers []*ImmatureTestInstructionContainerMessage `protobuf:"bytes,2,rep,name=ImmatureTestInstructionContainers,proto3" json:"ImmatureTestInstructionContainers,omitempty"` // List of all pre-defined TestInstructionContainers
	AckNackResponse                   *AckNackResponse                           `protobuf:"bytes,3,opt,name=ackNackResponse,proto3" json:"ackNackResponse,omitempty"`                                     // Hold all error messages, if there are any. Message also gives of everything was OK or not
}

func (x *AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) Reset() {
	*x = AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) ProtoMessage() {
}

func (x *AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage.ProtoReflect.Descriptor instead.
func (*AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_rawDescGZIP(), []int{0}
}

func (x *AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) GetImmatureTestInstructions() []*ImmatureTestInstructionMessage {
	if x != nil {
		return x.ImmatureTestInstructions
	}
	return nil
}

func (x *AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) GetImmatureTestInstructionContainers() []*ImmatureTestInstructionContainerMessage {
	if x != nil {
		return x.ImmatureTestInstructionContainers
	}
	return nil
}

func (x *AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

// Message holding TestInstructions and Pre-defined TestInstructionContainers that the user has pinned in the GUI
type AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailablePinnedTestInstructions                    []*AvailablePinnedTestInstructionMessage                    `protobuf:"bytes,1,rep,name=AvailablePinnedTestInstructions,proto3" json:"AvailablePinnedTestInstructions,omitempty"`                                       // List of all pinned, by user, TestInstructions
	AvailablePinnedPreCreatedTestInstructionContainers []*AvailablePinnedPreCreatedTestInstructionContainerMessage `protobuf:"bytes,2,rep,name=AvailablePinnedPreCreatedTestInstructionContainers,proto3" json:"AvailablePinnedPreCreatedTestInstructionContainers,omitempty"` //  List of all pinned, by user, pre-defined TestInstructionContainers
	AckNackResponse                                    *AckNackResponse                                            `protobuf:"bytes,3,opt,name=ackNackResponse,proto3" json:"ackNackResponse,omitempty"`                                                                       // Hold all error messages, if there are any. Message also gives of everything was OK or not
}

func (x *AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) Reset() {
	*x = AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) ProtoMessage() {
}

func (x *AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage.ProtoReflect.Descriptor instead.
func (*AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_rawDescGZIP(), []int{1}
}

func (x *AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) GetAvailablePinnedTestInstructions() []*AvailablePinnedTestInstructionMessage {
	if x != nil {
		return x.AvailablePinnedTestInstructions
	}
	return nil
}

func (x *AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) GetAvailablePinnedPreCreatedTestInstructionContainers() []*AvailablePinnedPreCreatedTestInstructionContainerMessage {
	if x != nil {
		return x.AvailablePinnedPreCreatedTestInstructionContainers
	}
	return nil
}

func (x *AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) GetAckNackResponse() *AckNackResponse {
	if x != nil {
		return x.AckNackResponse
	}
	return nil
}

// Message holding TestInstructions and Pre-defined TestInstructionContainers that the user has pinned in the GUI
type SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                                             string                                                      `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`                                                                                                                                     // The Users Id, SEB S-id will be used for SEB
	ProtoFileVersionUsedByClient                       CurrentFenixTestCaseBuilderProtoFileVersionEnum             `protobuf:"varint,2,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"` // The latest proto file version number to be used
	AvailablePinnedTestInstructions                    []*AvailablePinnedTestInstructionMessage                    `protobuf:"bytes,3,rep,name=AvailablePinnedTestInstructions,proto3" json:"AvailablePinnedTestInstructions,omitempty"`                                                                                   // List of all pinned, by user, TestInstructions
	AvailablePinnedPreCreatedTestInstructionContainers []*AvailablePinnedPreCreatedTestInstructionContainerMessage `protobuf:"bytes,4,rep,name=AvailablePinnedPreCreatedTestInstructionContainers,proto3" json:"AvailablePinnedPreCreatedTestInstructionContainers,omitempty"`                                             //  List of all pinned, by user, pre-defined TestInstructionContainers
}

func (x *SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage) Reset() {
	*x = SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage) ProtoMessage() {}

func (x *SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage.ProtoReflect.Descriptor instead.
func (*SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_rawDescGZIP(), []int{2}
}

func (x *SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestCaseBuilderProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestCaseBuilderProtoFileVersionEnum_VERSION_0_0
}

func (x *SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage) GetAvailablePinnedTestInstructions() []*AvailablePinnedTestInstructionMessage {
	if x != nil {
		return x.AvailablePinnedTestInstructions
	}
	return nil
}

func (x *SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage) GetAvailablePinnedPreCreatedTestInstructionContainers() []*AvailablePinnedPreCreatedTestInstructionContainerMessage {
	if x != nil {
		return x.AvailablePinnedPreCreatedTestInstructionContainers
	}
	return nil
}

// Message holding one Pinned TestInstruction
type AvailablePinnedTestInstructionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionUuid string `protobuf:"bytes,1,opt,name=TestInstructionUuid,proto3" json:"TestInstructionUuid,omitempty"` // TestInstruction UUID
	TestInstructionName string `protobuf:"bytes,2,opt,name=TestInstructionName,proto3" json:"TestInstructionName,omitempty"` // TestInstruction Name
}

func (x *AvailablePinnedTestInstructionMessage) Reset() {
	*x = AvailablePinnedTestInstructionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailablePinnedTestInstructionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailablePinnedTestInstructionMessage) ProtoMessage() {}

func (x *AvailablePinnedTestInstructionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailablePinnedTestInstructionMessage.ProtoReflect.Descriptor instead.
func (*AvailablePinnedTestInstructionMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_rawDescGZIP(), []int{3}
}

func (x *AvailablePinnedTestInstructionMessage) GetTestInstructionUuid() string {
	if x != nil {
		return x.TestInstructionUuid
	}
	return ""
}

func (x *AvailablePinnedTestInstructionMessage) GetTestInstructionName() string {
	if x != nil {
		return x.TestInstructionName
	}
	return ""
}

// Message holding one Pinned TestInstructionContainer
type AvailablePinnedPreCreatedTestInstructionContainerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestInstructionContainerUuid string `protobuf:"bytes,1,opt,name=TestInstructionContainerUuid,proto3" json:"TestInstructionContainerUuid,omitempty"` // TestInstruction UUID
	TestInstructionContainerName string `protobuf:"bytes,2,opt,name=TestInstructionContainerName,proto3" json:"TestInstructionContainerName,omitempty"` // TestInstruction Name
}

func (x *AvailablePinnedPreCreatedTestInstructionContainerMessage) Reset() {
	*x = AvailablePinnedPreCreatedTestInstructionContainerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailablePinnedPreCreatedTestInstructionContainerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailablePinnedPreCreatedTestInstructionContainerMessage) ProtoMessage() {}

func (x *AvailablePinnedPreCreatedTestInstructionContainerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailablePinnedPreCreatedTestInstructionContainerMessage.ProtoReflect.Descriptor instead.
func (*AvailablePinnedPreCreatedTestInstructionContainerMessage) Descriptor() ([]byte, []int) {
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_rawDescGZIP(), []int{4}
}

func (x *AvailablePinnedPreCreatedTestInstructionContainerMessage) GetTestInstructionContainerUuid() string {
	if x != nil {
		return x.TestInstructionContainerUuid
	}
	return ""
}

func (x *AvailablePinnedPreCreatedTestInstructionContainerMessage) GetTestInstructionContainerName() string {
	if x != nil {
		return x.TestInstructionContainerName
	}
	return ""
}

var File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto protoreflect.FileDescriptor

var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_rawDesc = []byte{
	0x0a, 0x76, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x5f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x1a, 0x7c, 0x46, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x7c, 0x46, 0x65, 0x6e, 0x69, 0x78,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x85, 0x01, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2f, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc8, 0x03, 0x0a, 0x4e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64,
	0x50, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x7d, 0x0a, 0x18, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x18, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x98, 0x01, 0x0a, 0x21, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x49, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x21, 0x49, 0x6d, 0x6d, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x0f,
	0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x04, 0x0a, 0x54, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e,
	0x64, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x1f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xcb, 0x01, 0x0a, 0x32, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x32, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdd, 0x04, 0x0a, 0x47, 0x53, 0x61, 0x76, 0x65, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65,
	0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x52, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x92, 0x01, 0x0a, 0x1f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xcb, 0x01, 0x0a, 0x32, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x32, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x25, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x38, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x6f, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_rawDescOnce sync.Once
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_rawDescData = file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_rawDesc
)

func file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_rawDescGZIP() []byte {
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_rawDescOnce.Do(func() {
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_rawDescData)
	})
	return file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_rawDescData
}

var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_goTypes = []interface{}{
	(*AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage)(nil),       // 0: fenixTestCaseBuilderServerGrpcApi.AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage
	(*AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage)(nil), // 1: fenixTestCaseBuilderServerGrpcApi.AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage
	(*SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage)(nil),              // 2: fenixTestCaseBuilderServerGrpcApi.SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage
	(*AvailablePinnedTestInstructionMessage)(nil),                                                // 3: fenixTestCaseBuilderServerGrpcApi.AvailablePinnedTestInstructionMessage
	(*AvailablePinnedPreCreatedTestInstructionContainerMessage)(nil),                             // 4: fenixTestCaseBuilderServerGrpcApi.AvailablePinnedPreCreatedTestInstructionContainerMessage
	(*ImmatureTestInstructionMessage)(nil),                                                       // 5: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionMessage
	(*ImmatureTestInstructionContainerMessage)(nil),                                              // 6: fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionContainerMessage
	(*AckNackResponse)(nil),                              // 7: fenixTestCaseBuilderServerGrpcApi.AckNackResponse
	(CurrentFenixTestCaseBuilderProtoFileVersionEnum)(0), // 8: fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum
}
var file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_depIdxs = []int32{
	5, // 0: fenixTestCaseBuilderServerGrpcApi.AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage.ImmatureTestInstructions:type_name -> fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionMessage
	6, // 1: fenixTestCaseBuilderServerGrpcApi.AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage.ImmatureTestInstructionContainers:type_name -> fenixTestCaseBuilderServerGrpcApi.ImmatureTestInstructionContainerMessage
	7, // 2: fenixTestCaseBuilderServerGrpcApi.AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage.ackNackResponse:type_name -> fenixTestCaseBuilderServerGrpcApi.AckNackResponse
	3, // 3: fenixTestCaseBuilderServerGrpcApi.AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage.AvailablePinnedTestInstructions:type_name -> fenixTestCaseBuilderServerGrpcApi.AvailablePinnedTestInstructionMessage
	4, // 4: fenixTestCaseBuilderServerGrpcApi.AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage.AvailablePinnedPreCreatedTestInstructionContainers:type_name -> fenixTestCaseBuilderServerGrpcApi.AvailablePinnedPreCreatedTestInstructionContainerMessage
	7, // 5: fenixTestCaseBuilderServerGrpcApi.AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage.ackNackResponse:type_name -> fenixTestCaseBuilderServerGrpcApi.AckNackResponse
	8, // 6: fenixTestCaseBuilderServerGrpcApi.SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestCaseBuilderServerGrpcApi.CurrentFenixTestCaseBuilderProtoFileVersionEnum
	3, // 7: fenixTestCaseBuilderServerGrpcApi.SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage.AvailablePinnedTestInstructions:type_name -> fenixTestCaseBuilderServerGrpcApi.AvailablePinnedTestInstructionMessage
	4, // 8: fenixTestCaseBuilderServerGrpcApi.SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage.AvailablePinnedPreCreatedTestInstructionContainers:type_name -> fenixTestCaseBuilderServerGrpcApi.AvailablePinnedPreCreatedTestInstructionContainerMessage
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() {
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_init()
}
func file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_init() {
	if File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto != nil {
		return
	}
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums_proto_init()
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionMessages_proto_init()
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_TestInstructionContainerMessages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailablePinnedTestInstructionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailablePinnedPreCreatedTestInstructionContainerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_goTypes,
		DependencyIndexes: file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_depIdxs,
		MessageInfos:      file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_msgTypes,
	}.Build()
	File_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto = out.File
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_rawDesc = nil
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_goTypes = nil
	file_FenixTestCaseBuilderServer_fenixTestCaseBuilderServerGrpcApi_fenixTestCaseBuilderServerGrpcApi_AvailableMessages_proto_depIdxs = nil
}
