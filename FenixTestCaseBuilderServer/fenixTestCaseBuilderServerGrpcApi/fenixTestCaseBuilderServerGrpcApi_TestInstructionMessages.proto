syntax = "proto3";
package fenixTestCaseBuilderServerGrpcApi;
option go_package = "./go_grpc_api";
import "google/protobuf/timestamp.proto";
import "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums.proto";
import "FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_TestCaseModelMessages.proto";

// All messages in this file is used to define a TestInstruction, both Immature TestInstructions that are available to chose from, and Mature TestInstructions that exits in the TestCase

// ****************************************************************************************************
// ListAllTestInstructionsForSpecificTestCaseRequestMessage

// Message holding information about who is the user and which TestCase that the TestInstructions belong to
message ListAllTestInstructionsForSpecificTestCaseRequestMessage {
  string UserId = 1; // The Users Id, SEB S-id will be used for SEB
  CurrentFenixTestCaseBuilderProtoFileVersionEnum ProtoFileVersionUsedByClient = 2; // The latest proto file version number to be used
  string TestCaseUuid = 3; // The TestCase, UUID, that is TestInstructions belong to
}

// ****************************************************************************************************
// SaveAllTestInstructionsForSpecificTestCaseRequestMessage

// Message holding information about user, TestCaseUUID and the TestInstructions
message SaveAllTestInstructionsForSpecificTestCaseRequestMessage {
  string UserId = 1; // The Users Id, SEB S-id will be used for SEB
  CurrentFenixTestCaseBuilderProtoFileVersionEnum ProtoFileVersionUsedByClient = 2; // The latest proto file version number to be used
  string TestCaseUuid = 3; // The TestCase, UUID, that is TestInstructions belong to
  MatureTestInstructionsMessage MatureTestInstructions = 4; // All TestInstructions to be saved
}

// ****************************************************************************************************
// ImmatureTestInstructionMessage

// Message holding one Immature TestInstruction which is Dragged n Dropped into the TestCase
message ImmatureTestInstructionMessage {
  BasicTestInstructionInformationMessage BasicTestInstructionInformation = 1; // Data is used to describe the basic information for the TestInstruction
  ImmatureTestInstructionInformationMessage ImmatureTestInstructionInformation = 2; // The immature information for the TestInstruction
  ImmatureElementModelMessage ImmatureSubTestCaseModel = 3; // The immature element model for this TestInstruction
}

// ****************************************************************************************************
// MatureTestInstructionsMessage

// Message holding a list of TestInstructions, received from DB or to be sent to DB
message MatureTestInstructionsMessage {
  repeated MatureTestInstructionMessage MatureTestInstructions = 1; // A list of list of TestInstructions, received from DB or to be sent to DB

  // Message holding one Mature TestInstruction which exist in a TestCase
  message MatureTestInstructionMessage {
    BasicTestInstructionInformationMessage BasicTestInstructionInformation = 1; // Data is used to describe the basic information for the TestInstruction
    MatureTestInstructionInformationMessage MatureTestInstructionInformation = 2; // Information about the Mature TestInstruction
  }
}

// ****************************************************************************************************
// BasicTestInstructionInformationMessage

// Message holding Basic information for one TestInstruction
message BasicTestInstructionInformationMessage {
  NonEditableBasicInformationMessage NonEditableInformation = 1; // All Basic information that can be shown in GUI but can't be changed by the user
  EditableBasicInformationMessage EditableInformation = 2; // All Basic information that can be shown in GUI and can be changed by the user
  InvisibleBasicInformationMessage InvisibleBasicInformation = 3; // All Basic information that is not directly shown in GUI and can't be changed by the user

  // Message holding All basic information that can be shown in GUI but can't be changed by the user
  message NonEditableBasicInformationMessage {
    string DomainUuid = 1; // The Domain, UUID, to be tested with this TestInstruction
    string DomainName = 2; // The Domain, Name, to be tested with this TestInstruction
    string TestInstructionOrignalUuid = 3; // TestInstruction UUID, set by Client system
    string TestInstructionOriginalName = 4; // TestInstruction Name, set by Client system
    string TestInstructionTypeUuid = 5; // The Type(Group), Uuid, of TestInstruction
    string TestInstructionTypeName = 6; // The Type(Group), Name, of TestInstruction
    bool Deprecated = 7; // Indicates that this TestInstruction shouldn't be used anymore
    uint32 MajorVersionNumber = 8; // Change in Major Version Number means that user must act on change
    uint32 MinorVersionNumber = 9; // Change in Minor Version Number means that user must NOT act on change
    google.protobuf.Timestamp UpdatedTimeStamp = 10; // The TimeStamp when the TestInstruction was last updated by the client system
    string TestInstructionColor = 11; // The color used for presenting the TestInstruction, e.g. #FAF437
    string TCRuleDeletion = 14; // The Deletion Rule for this TestInstruction
    string TCRuleSwap = 15; // The Swap Rule for this TestInstruction
  }

  // Message holding all Basic information that can be shown in GUI and can be changed by the user
  message EditableBasicInformationMessage {
    string TestInstructionDescription = 1; // The description of the TestInstruction
    string TestInstructionMouseOverText = 2; // The mouse over text when hovering over TestInstruction
  }

  // Message holding all Basic information that is not directly shown in GUI and can't be changed by the user
  message InvisibleBasicInformationMessage{
    bool Enabled = 1; // TestInstruction can be disabled when the user shouldn't use it anymore
  }
}

// ****************************************************************************************************
// ImmatureTestInstructionInformationMessage

// Message holding the information about the Immature TestInstruction
message ImmatureTestInstructionInformationMessage {

  repeated AvailableDropZoneMessage AvailableDropZones = 18; // A list of DropZone for this Immature TestInstruction. A DropZone is a collection of pre-defined values that the TestInstruction will get when placed in TestCase
  // Message holding one DropZone
  message AvailableDropZoneMessage {
    string DropZoneUuid = 1; // A DropZone, UUID, for the TestInstruction
    string DropZoneName = 2; // A DropZone, Name, for the TestInstruction
    string DropZoneDescription = 3; // Description of the DropZone
    string DropZoneMouseOver = 4; // The mouse over text for the DropZone
    string DropZoneColor = 5; // The color used for presenting the DropsZone, e.g. #FAF437

    repeated DropZonePreSetTestInstructionAttributeMessage DropZonePreSetTestInstructionAttributes = 6; // A list of the attributes and their pre-set values
    // Message holding one attribute with its pre-set value
    message DropZonePreSetTestInstructionAttributeMessage {
      TestInstructionAttributeTypeEnum TestInstructionAttributeType = 1; // Defines witch type attribute; TEXTBOX, COMBOBOX...
      string TestInstructionAttributeUuid = 2; // The unique uuid for the TestInstructionAttribute, set by client system
      string TestInstructionAttributeName = 3; // The name of the TestInstructionAttribute
      string AttributeValueAsString = 4; // The String-representation of the value
      string AttributeValueUuid = 5; // Combo-boxes can us a UUID as unique value behind the text visible in the combo-box
      AttributeActionCommandEnum AttributeActionCommand = 6; // Decides what to do with Attribute


      enum AttributeActionCommandEnum {
        USE_DROPZONE_VALUE_FOR_ATTRIBUTE = 0; // The Attributes value will be used when adding the TestInstruction to the TestCase-model
        REMOVE_ATTRIBUTE_FROM_TESTINSTRUCTION = 1; // Removes the attributes from the TestInstruction
      }
    }
  }
}

// ****************************************************************************************************
// MatureTestInstructionInformationMessage

//  Message holding all data that is set for the Mature TestInstruction
message MatureTestInstructionInformationMessage {
  MatureBasicTestInstructionInformationMessage MatureBasicTestInstructionInformation = 1; // The Basic information for the Matures TestInstruction
  // Message holding the mature basic information about the TestInstruction
  message MatureBasicTestInstructionInformationMessage {
    string TestCaseUuid = 1; // Reference to the TestCase where this TestInstruction exists
    string TestInstructionMatureUuid = 2; // The Mature UUID that the TestInstruction gets when it is added to the TestCase
    string ParentTestInstructionContainerUuid = 3;// A UUID-reference to TestInstructionContainer where this TestInstruction exists
    string ParentTestInstructionContainerMatureUuid = 4; // A Mature-UUID-reference to TestInstructionContainer where this TestInstruction exists
    string ChosenDropZoneUuid = 5; // The chosen dropzone, UUID, which set the attributes in TestInstruction when it was added to the TestCase
    string ChosenDropZoneName = 6; // The chosen dropzone, Name, which set the attributes in TestInstruction when it was added to the TestCase
    TestCaseModelElementTypeEnum TestInstructionType = 7; // Is the TestInstruction of TI-type or TIx-type
  }

  CreatedAndUpdatedInformationMessage CreatedAndUpdatedInformation = 2; // Information regarding who did what and when
  // Message holding information about changes to the TestInstruction, who and when
  message CreatedAndUpdatedInformationMessage  {
    google.protobuf.Timestamp AddedToTestCaseTimeStamp = 1; // The TimeStamp when the TestInstruction was first added to the TestCase
    string AddedToTestCaseByUserId = 2; // Which user added the TestInstruction to the TestCase
    google.protobuf.Timestamp LastUpdatedInTestCaseTimeStamp = 3; // The TimeStamp when the TestInstruction was updated in the TestCase
    string LastUpdatedInTestCaseByUserId = 4; // Which user was the last to update the TestInstruction in the TestCase
    google.protobuf.Timestamp DeletedFromTestCaseTimeStamp = 5; // The TimeStamp when the TestInstruction was deleted from the TestCase
    string DeletedFromTestCaseByUserId = 6; // Which user deleted the TestInstruction from the TestCase
  }

  repeated TestInstructionAttributeMessage TestInstructionAttributesList = 3; // All attributes that belongs to the TestInstruction
  // Message holding one Attribute for a Test Instruction
  message TestInstructionAttributeMessage {
    BaseAttributeInformationMessage BaseAttributeInformation = 1; // The information set from Client system about the Attribute

    message BaseAttributeInformationMessage {
      string TestInstructionAttributeUuid = 1; // The unique uuid for the TestInstructionAttribute, set by plugin
      string TestInstructionAttributeName = 2; // The name of the TestInstructionAttribute
      string TestInstructionAttributeTypeUuid = 3; // The unique uuid for the TestInstructionAttribute-type
      string TestInstructionAttributeTypeName = 4; // The name for the TestInstructionAttribute-type, used to group attributes in GUI
      string TestInstructionAttributeDescription = 5; // The description of the TestInstructionAttribute
      string TestInstructionAttributeMouseOver = 6; // The mouse over text for the TestInstructionAttribute
      bool TestInstructionAttributeVisible = 7; // Should the TestInstructionAttribute be visible in attributes list in GUI or not
      bool TestInstructionAttributeEnable = 8; // Should the TestInstructionAttribute be enabled or not
      bool TestInstructionAttributeMandatory = 9; // Should the TestInstructionAttribute be mandatory or not
      bool TestInstructionAttributeVisibleInTestCaseArea = 10; // Should the TestInstructionAttribute be visible in TestInstruction at TestCaseModel- Area in GUI or not
      bool TestInstructionAttributeIsDeprecated = 11; // Indicates that this TestInstruction attribute shouldn't be used anymore
      TestInstructionAttributeTypeEnum TestInstructionAttributeType = 12; // The chosen Enum value for what type the instruction attribute should be
    }
    AttributeInformationMessage AttributeInformation = 2; // Have the ability to store all different Attribute type, but only one should be used
    // Message holding one attribute. It has the ability to hold different types of attribute but only one should be used
    message AttributeInformationMessage {
      TestInstructionAttributeInputTextBoxProperty inputTextBoxProperty = 1; // If the attribute is a textbox then all properties can be found in structure
      // Properties if it is a TextBox attribute
      message TestInstructionAttributeInputTextBoxProperty {
        string TestInstructionAttributeInputTextBoUuid = 1; // The unique uuid for the TestInstructionAttributeInputTextBoxProperties
        string TestInstructionAttributeInputTextBoxName = 2; // The name of the TestInstructionAttributeInputTextBoxProperties
        bool TextBoxEditable = 3; // Should the the TextBox be editable or not
        string TextBoxInputMask = 4; // Input mask for the TextBox
        string TextBoxAttributeTypeUuid = 5; // The unique uuid for the Type of the TextBox. Used for data manipulation
        string TextBoxAttributeTypeName = 6; // The Name for the Type of the TextBox.
        string TextBoxAttributeValue = 7; // The value for the the TextBox, used for preset values
      }

      TestInstructionAttributeInputComboBoxProperty InputComboBoxProperty = 2; // If the attribute is a combobox then all properties can be found in structure
      // Properties if it is a ComboBox attribute
      message TestInstructionAttributeInputComboBoxProperty {
        string TestInstructionAttributeComboBoxUuid = 1; // The unique uuid for the TestInstructionAttributeComboBoxProperties
        string TestInstructionAttributeComboBoxName = 2; // The name of the TestInstructionAttributeComboBoxProperties
        bool ComboBoxEditable = 3; // Should the the ComboBox be editable or not
        string ComboBoxInputMask = 4; // Input mask for the ComboBox
        string ComboBoxAttributeTypeUuid = 5; // The unique uuid for the Type of the ComboBox Used for data manipulation
        string ComboBoxAttributeTypeName = 6; // The Name for the Type of the ComboBox
        string ComboBoxAttributeValueUuid = 7; // The uuid of the value for the the ComboBox, used for showing one value but have a unique value behind the scene
        string ComboBoxAttributeValue = 8; // The value for the the ComboBox, used for preset values
      }

      TestInstructionAttributeInputFileSelectorProperty InputFileSelectorProperty = 3; // If the attribute is a combobox then all properties can be found in structure
      // Properties if it is a FileSelector attribute
      message TestInstructionAttributeInputFileSelectorProperty {
        string TestInstructionAttributeFileSelectorUuid = 1; // The unique Uuid for the TestInstructionAttributeFileSelectorProperties
        string TestInstructionAttributeFileSelectorName = 2; // The name of the TestInstructionAttributeFileSelectorProperties
        string TestInstructionAttributeFileReferenceUuid = 3; // A reference, UUID, to a chosen file, that has been added to the TestCase
        string TestInstructionAttributeFileReferenceName = 4; // A reference, Name, to a chosen file, that has been added to the TestCase
      }

      //TODO Create Attribute property for functions
    }

  }
}

// ****************************************************************************************************
// ImmatureTestInstructionAttributesMessage

//  Message holding all attribute data for all Immature TestInstructions
message ImmatureTestInstructionAttributesMessage {

  repeated TestInstructionAttributeMessage TestInstructionAttributesList = 1; // All attributes that belongs to all TestInstructions

  // Message holding one Attribute for one TestInstruction
  message TestInstructionAttributeMessage {
    string DomainUuid = 1; // The Domain, UUID, to be tested with this TestInstruction
    string DomainName = 2; // The Domain, Name, to be tested with this TestInstruction
    string TestInstructionUuid = 3; // TestInstruction UUID, set by Client system
    string TestInstructionName = 4; // TestInstruction Name, set by Client system
    string TestInstructionAttributeUuid = 5; // The unique uuid for the TestInstructionAttribute, set by plugin
    string TestInstructionAttributeName = 6; // The name of the TestInstructionAttribute
    string TestInstructionAttributeTypeUuid = 7; // The unique uuid for the TestInstructionAttribute-type
    string TestInstructionAttributeTypeName = 8; // The name for the TestInstructionAttribute-type, used to group attributes in GUI
    string TestInstructionAttributeDescription = 9; // The description of the TestInstructionAttribute
    string TestInstructionAttributeMouseOver = 10; // The mouse over text for the TestInstructionAttribute
    bool TestInstructionAttributeVisible = 11; // Should the TestInstructionAttribute be visible in attributes list in GUI or not
    bool TestInstructionAttributeEnable = 12; // Should the TestInstructionAttribute be enabled or not
    bool TestInstructionAttributeMandatory = 13; // Should the TestInstructionAttribute be mandatory or not
    bool TestInstructionAttributeVisibleInTestCaseArea = 14; // Should the TestInstructionAttribute be visible in TestInstruction at TestCaseModel- Area in GUI or not
    bool TestInstructionAttributeIsDeprecated = 15; // Indicates that this TestInstruction attribute shouldn't be used anymore
    string TestInstructionAttributeValueAsString = 16; // The string representation of the value for the attribute
    string TestInstructionAttributeValueUuid = 17; // The UUID for the value, when Combobox is used
    string TestInstructionAttributeUIType = 18; // The type that should be presented in GUI, TEXTBOX, COMBOBOX....
  }

  AckNackResponse ackNackResponse = 2; // Hold all error messages, if there are any. Message also gives of everything was OK or not

}
