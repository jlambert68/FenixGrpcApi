syntax = "proto3";
package fenixTestCaseBuilderServerGrpcApi;
option go_package = "./go_grpc_api";
import "google/protobuf/timestamp.proto";

// All messages in this file is used to define a TestInstruction, both available and in-use in TestCase

// ****************************************************************************************************
// TestInstructionMessage

// Message holding all supported TestInstructions and Pre-defined TestInstructionContainers that the user can use when building TestCases
message TestInstructionMessage {

  AvailableTestInstructionMessage BasicTestInstructionInfromation = 1; // Data is used to describe the basic information around the TestInstruction
  // Message holding one TestInstruction
  message AvailableTestInstructionMessage {
    string DomainUuid = 1; // The Domain, UUID, to be tested with this TestInstruction
    string DomainName = 2; // The Domain, Name, to be tested with this TestInstruction
    string TestInstructionUuid = 3; // TestInstruction UUID, set by Client system
    string TestInstructionName = 4; // TestInstruction Name, set by Client system
    string TestInstructionTypeUuid = 5; // The Type(Group), Uuid, of TestInstruction
    string TestInstructionTypeName = 6; // The Type(Group), Name, of TestInstruction
    string TestInstructionDescription = 7; // The description of the TestInstruction
    string TestInstructionMouseOverText = 8; // The mouse over text when hovering over TestInstruction
    bool Deprecated = 9; // Indicates that this TestInstruction shouldn't be used anymore
    bool Enabled = 10; // TestInstruction can be disabled when the user shouldn't use it anymore
    uint32 MajorVersionNumber = 11; // Change in Major Version Number means that user must act on change
    uint32 MinorVersionNumber = 12; // Change in Minor Version Number means that user must NOT act on change
    google.protobuf.Timestamp UpdatedTimeStamp = 13; // The TimeStamp when the TestInstruction was last updated
  }

  ExtendedBasicTestInstructionInfromationMessage ExtendedBasicTestInstructionInformation = 2; // More basic information for the TestInstruction
  // Message holding the extended basic information about the TestInstruction
  message ExtendedBasicTestInstructionInfromationMessage {
    string TestInstructionColor = 17; // The color used for presenting the TestInstruction, e.g. #FAF437
    repeated AvailableDropZoneMessage AvailableDropZones = 18; // A list of DropZone for this TestInstruction. A DropZone is a collection of pre-defined values that the TestInstruction will have when placed in TestCase
  }

  inUseValuesCreatedInTestCaseMessage inUseValuesCreatedInTestCase = 3; // Values that are set when added to, or changed in, TestCase
  //  inUse Values Created In TestCase
  message inUseValuesCreatedInTestCaseMessage {
    string ParentTestInstructionContainerUuid = 16;// A UUID-reference to TestInstructionContainer where this TestInstruction exists
    AvailableDropZoneMessage ChosenDropZone = 19; // The chosen drop zone which sets potential attributes in TestInstruction when that is added to the TestCase
  }

  // Message holding one DropZone
  message AvailableDropZoneMessage {
    string DropZoneUuid = 1; // A DropZone, UUID, for the TestCaseInstruction
    string DropZoneName = 2; // A DropZone, Name, for the TestCaseInstruction
    string DropZoneDescription = 3; // Description of the DropZone
    string DropZoneMouseOver = 4; // The mouse over text for the DropZone
    string DropZoneColor = 5; // The color used for presenting the DropsZone, e.g. #FAF437

    repeated PreSetAttributeMessage PreSetAttributes = 6; // A list of the attributes and their pre-set values
    // Message holding one attribute with its pre-set value
    message PreSetAttributeMessage {
      string TestInstructionAttributeGuid = 1; // The unique guid for the TestInstructionAttribute, set by plugin
      string TestInstructionAttributeName = 2; // The name of the TestInstructionAttribute
      string AttributeValueAsString = 3; // The String-representation of the value
      string AttributeValueUuid = 4; // Combo-boxes can us a UUID as unique value behind the text visible in the combo-box
    }

  }

  repeated TestInstructionAttributeListMessage TestInstructionAttributesList = 20; // A list of all attributes, UUID and NAme, that belongs to the TestInstruction
  // A specific Attribute for a Test Instruction
  message TestInstructionAttribute {
    BaseAttributeInformationMessage BaseAttributeInformation = 1; // The information set from Client system about the Attribute
    message BaseAttributeInformationMessage {

      string TestInstructionAttributeGuid = 1; // The unique guid for the TestInstructionAttribute, set by plugin
      string TestInstructionAttributeName = 2; // The name of the TestInstructionAttribute
      string TestInstructionAttributeTypeGuid = 3; // The unique guid for the TestInstructionAttribute-type, set by plugin
      string TestInstructionAttributeTypeName = 4; // The name for the TestInstructionAttribute-type, set by plugin
      string TestInstructionAttributeDescription = 5; // The description of the TestInstructionAttribute
      string TestInstructionAttributeMouseOver = 6; // The mouse over text for the TestInstructionAttribute
      bool TestInstructionAttributeVisible = 7; // Should the TestInstructionAttribute be visible in attributes list in GUI or not
      bool TestInstructionAttributeEnable = 8; // Should the TestInstructionAttribute be enabled or not
      bool TestInstructionAttributeMandatory = 9; // Should the TestInstructionAttribute be mandatory or not
      bool TestInstructionAttributeVisibleInTestCaseArea = 10; // Should the TestInstructionAttribute be visible in TestInstruction at TestCase Area in GUI or not
      bool TestInstructionAttributeIsDeprecated = 11; // Indicates that this TestInstruction attribute shouldn't be used anymore
      TestInstructionAttributeTypeEnum TestInstructionAttributeType = 12; // The chosen Enum value for what type the instruction attribute should be

      // The TestInstructionAttribute can have one of the following types: "TextBox", "ComboBox", "FileSelector", "FunctionSelector"
      enum TestInstructionAttributeTypeEnum {
        TEXTBOX = 0; // Defines that TestInstructionAttribute of type "TextBox"
        COMBOBOX = 1; // Defines that TestInstructionAttriebute of type ComboBox
        FILE_SELECTOR = 2; // Defines that TestInstructionAttribute of type FileSelector
        FUNCTION_SELECTOR = 3; // Defines that TestInstructionAttribute of type FunctionSelector
      }

      TestInstructionAttributeInputTextBoxProperty inputTextBoxProperty = 13; // If the attribute is a textbox then all properties can be found in structure
      // Properties for TextBox attribute
      message TestInstructionAttributeInputTextBoxProperty {
        string TestInstructionAttributeInputTextBoxGuid = 1; // The unique guid for the TestInstructionAttributeInputTextBoxProperties, set by plugin
        string TestInstructionAttributeInputTextBoxName = 2; // The name of the TestInstructionAttributeInputTextBoxProperties
        bool TextBoxEditable = 3; // Should the the TextBox be editable or not
        string TextBoxInputMask = 4; // Input mask for the TextBox
        string TextBoxAttributeTypeGuid = 5; // The unique guid for the Type of the TextBox. Used for data manipulation
        string TextBoxAttributeTypeName = 6; // The Name for the Type of the TextBox.
        string TextBoxAttributeValue = 7; // The value for the the TextBox, used for preset values
      }

      TestInstructionAttributeInputComboBoxProperty InputComboBoxProperty = 14; // If the attribute is a combobox then all properties can be found in structure
      // Properties for ComboBox attribute
      message TestInstructionAttributeInputComboBoxProperty {
        string TestInstructionAttributeComboBoxGuid = 1; // The unique guid for the TestInstructionAttributeComboBoxProperties, set by plugin
        string TestInstructionAttributeComboBoxName = 2; // The name of the TestInstructionAttributeComboBoxProperties
        bool ComboBoxEditable = 3; // Should the the ComboBox be editable or not
        string ComboBoxInputMask = 4; // Input mask for the ComboBox
        string ComboBoxAttributeTypeGuid = 5; // The unique guid for the Type of the ComboBox Used for data manipulation
        string ComboBoxAttributeTypeName = 6; // The Name for the Type of the ComboBox
        string ComboBoxAttributeValueUuid = 7; // The uuid of the value for the the ComboBox, used for preset values
        string ComboBoxAttributeValue = 8; // The value for the the ComboBox, used for preset values
      }

      TestInstructionAttributeInputFileSelectorProperty InputFileSelectorProperty = 15; // If the attribute is a combobox then all properties can be found in structure
      // Properties for FileSelector attribute
      message TestInstructionAttributeInputFileSelectorProperty {
        string TestInstructionAttributeFileSelectorGuid = 1; // The unique guid for the TestInstructionAttributeFileSelectorProperties, set by plugin
        string TestInstructionAttributeFileSelectorName = 2; // The name of the TestInstructionAttributeFileSelectorProperties
      }


      //TODO Create Attribute property for functions
    }
    AttributeValueMessage AttributeValue = 16; // The attributes value, set by user, was set by client-system or Set by DropZone.
    // Message holding one attribute with its pre-set value
    message AttributeValueMessage {
      string TestInstructionAttributeGuid = 1; // The unique guid for the TestInstructionAttribute, set by plugin
      string TestInstructionAttributeName = 2; // The name of the TestInstructionAttribute
      string AttributeValueAsString = 3; // The String-representation of the value
      string AttributeValueUuid = 4; // Combo-boxes can us a UUID as unique value behind the text visible in the combo-box
    }

  }


  // ****************************************************************************************************
  // TestInstructionAttributeListMessage

  // Message holding one item in the Attributes-list in the TestInstruction
  message TestInstructionAttributeListMessage {
    string AttributeUuid = 1; // The Attribute, UUID, for the TestCaseInstruction
    string AttributeName = 2; // The Attribute, Name, for the TestCaseInstruction
  }

}

// ****************************************************************************************************
// AvailableDropZoneMessage

// Message holding one item in the DropZone-list in the TestInstruction


    }