syntax = "proto3";
package fenixTestCaseBuilderServerGrpcApi;
option go_package = "./go_grpc_api";
import "google/protobuf/timestamp.proto";

// All messages in this file is used to define the TestCase-model, and how it was constructed

// ****************************************************************************************************
// TestCaseModelMessage

// A message holding the complete model of the TestCase together with the steps to create the model
message TestCaseModelMessage {
  string TestCaseUuid = 1; // The TestCase, UUID, set by TestCase-builder
  string TestCaseName = 2; // The TestCase, Name, set in TestCase-builder
  string TestCaseModelAsString = 3; // The string representation of the TestCase, e.g. 'TC=B1-TICX(B11-TI-B12-TIX-B11X)-B1' - The last TIX could be used to clean up the environment

  repeated TestCaseModelElementMessage TestCaseModelElements = 4; // All elements in the TestCase
  // One TestCaseElement that hold type, reference to previous, next and parent elements
  message TestCaseModelElementMessage {
    string OriginalElementUuid = 1; // The original elements UUID, e.g. a TestInstruction unique UUID set by client system
    string OriginalElementName = 2; // The original elements Name, e.g. a TestInstruction Name set by client system
    string InTestCaseElementUuid = 3; // The UUID that is created in the TestCase to give it a unique id
    string PreviousElementUuid = 4;  // The UUID of the previous element. When there are no previous element then this field is populated with current element UUID
    string NextElementUuid = 5;  // The UUID of the previous element. When there are no next element then this field is populated with current element UUID
    TestCaseElementTypeEnum TestCaseElementType = 6; // The specific type of this TestCase-element
    // All TestCase-elements
    enum TestCaseElementTypeEnum {
      B0_BOND = 0; // Bond with zero connection. This is the base for any TestCase: "B0"
      B1_BOND_NONE_SWAPPABLE = 1; // Bond with one connection. Use for starting and ending a TestCase and is only found in pre-created TestInstructionContainers
      B10_BOND = 2; // Bond with zero connections which appear as an element in a new TestInstructionContainer without any other elements
      B11_BOND = 3; // Bond with one connection which appear as first or last element inside a TestInstructionContainer
      B12_BOND = 4; // Bond with two connections which connects TestInstructions or TestInstructionContainers
      B10oxo_BOND = 5; //Bond with zero connections. This Bond is used in Pre-created containers and is used when user swap TIC(B10*x*) into TIC(B11x-n-B11x).
      B10ox_BOND = 6; // Bond with zero connections. This Bond is used in Pre-created containers and is used when user swap TIC(B10*x) into TIC(B11x-n-B11).
      B10xo_BOND = 7; // Bond with zero connections. This Bond is used in Pre-created containers and is used when user swap TIC(B10x*) into TIC(B11-n-B11x).
      B11x_BOND_NONE_SWAPPABLE = 8; // Bond with one connection which appear as first or last element inside a TestInstructionContainer. This Bond is used in Pre-created containers and is used to stop a user to add new TestInstructions or TestInstructionsContainers before(first) or/and after(last) a structure.
      B12x_BOND_NONE_SWAPPABLE = 9; // Bond with two connections which connects TestInstructions or TestInstructionContainers. This Bond is used in Pre-created containers and is used to stop a user to add new TestInstructions or TestInstructionsContainers within a pre-created container.
      TI_TESTINSTRUCTION = 10; // TestInstruction
      TIx_TESTINSTRUCTION_NONE_REMOVABLE = 11; // A standard TestInstruction which can not be removed or swapped out by the user
      TIC_TESTINSTRUCTIONCONTAINER = 12; // TestInstructionContainer(X), where X is any valid structure. Children in TestExecutionContainer is executed in serial mode
      TICx_TESTINSTRUCTIONCONTAINER_NONE_REMOVABLE = 13; // A standard TestInstructionContainer(X), where X is any valid structure, which can not be removed or swapped out by the user. Children in TestExecutionContainer is executed in serial mode
    }
  }

  repeated TestCaseModelCommandMessage TestCaseModelCommands = 5; // All commands that was used to create the TestCase
  // One command that describe one change to the TestCase
  message TestCaseModelCommandMessage {
    TestCaseCommandTypeEnum TestCaseCommandType = 1; // The type of command that was used
    // All different commands that can be used
    enum TestCaseCommandTypeEnum {
      NEW_TESTCASE = 0; //NewTestCase(). Creates a new TestCase
      REMOVE_ELEMENT = 1; // RemoveElement(ElementUuidToBeRemoved). Remove an element from the TestCase
      SWAP_OUT_ELEMENT_FOR_NEW_ELEMENT = 2; // SwapOutElementForNewElement(ElementUuidTobeSwappedOut, NewElementUuidTobeSwappedIn). Swap in a new element instead of an existing
      COPY_ELEMENT = 3; // CopyElement(ElementUuid). Create a copy of an element and place it in the copy-buffer
      SWAP_OUT_ELEMENT_FOR_COPY_BUFFER_ELEMENT = 4; // SwapOutElementForCopyBufferElement(ElementUuidTobeSwappedOut, CopyBufferElementUuidTobeSwappedIn). Swap in a copy of the element that exist in the copy buffer
      CUT_ELEMENT = 5; // CopyElement(ElementUuid). Cut out an element and place in the cut buffer
      SWAP_OUT_ELEMENT_FOR_CUT_BUFFER_ELEMENT = 6; // SwapOutElementForCutBufferElement(ElementUuidTobeSwappedOut, CutBufferElementUuidTobeSwappedIn). Swap in the element that exist in the cut buffer
    }
    string FirstParameter = 2; // The first parameter, an UUID, in the command
    string SecondParameter = 3; // The second parameter, an UUID, in the command
  }

}


