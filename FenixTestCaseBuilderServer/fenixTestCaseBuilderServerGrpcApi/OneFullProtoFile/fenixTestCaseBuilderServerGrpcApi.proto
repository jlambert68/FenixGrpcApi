syntax = "proto3";
package fenixTestCaseBuilderServerGrpcApi;
option go_package = "./go_grpc_api";
option csharp_namespace = "SubCustodyServer";


import "google/protobuf/timestamp.proto";


// ****************************************************************************************************
// Fenix TestCase-builder server service definition. (Will support Test Suite building in feature, and will then be renamed)

service FenixTestCaseBuilderServerGrpcServices {

  // ************************ Admin ************************

  //Anyone can check if Fenix TestCase Builder server is alive with this service
  rpc AreYouAlive (EmptyParameter) returns (AckNackResponse) {
  }


  // ************************ Data Used to build Available structure, which is what the user can chose from ************************

  // *** Get data from DB ***

  // The TestCase Builder asks for all TestInstructions and Pre-defined TestInstructionContainer that the user can add to a TestCase
  rpc ListAllAvailableTestInstructionsAndTestInstructionContainers (UserIdentificationMessage) returns (AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) {
  }

  // The TestCase Builder asks for which TestInstructions and Pre-defined TestInstructionContainer that the user has pinned in the GUI
  rpc ListAllAvailablePinnedTestInstructionsAndTestInstructionContainers (UserIdentificationMessage) returns (AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage) {
  }

  // The TestCase Builder asks for all Bonds-elements that can be used in the TestCase-model
  rpc ListAllAvailableBonds (UserIdentificationMessage) returns (ImmatureBondsMessage) {
  }


  // *** Send data to DB ***

  // The TestCase Builder sends all TestInstructions and Pre-defined TestInstructionContainer that the user has pinned in the GUI by the user
  rpc SaveAllPinnedTestInstructionsAndTestInstructionContainers (SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage) returns (AckNackResponse) {
  }

  // ************************************************  TestCase Builder ************************************************

  // *** Get data from DB ***

  // The TestCase Builder asks for a list of TestCase, with some basic information. Messages will be streamed in chunks of e.g. 100 TestCases per chunk
  rpc ListAllTestCases(ListTestCasesRequestMessage) returns (stream ListTestCasesResponseMessage) {
  }

  // The TestCase Builder asks for one complete TestCase
  rpc GetDetailedTestCase(GetTestCaseRequestMessage) returns (TestCaseMessage) {
  }

  // List all TestInstructions in the TestCase
  rpc ListAllTestCaseTestInstructions(ListAllTestInstructionsForSpecificTestCaseRequestMessage) returns (MatureTestInstructionsMessage) {
  }

  // List all TestInstructionContainers in the TestCase
  rpc ListAllTestCaseTestInstructionContainers(ListAllTestInstructionContainersForSpecificTestCaseRequestMessage) returns (MatureTestInstructionContainerMessage) {
  }


  // *** Send data to server ***

  // Save a TestCase in DB
  rpc SaveTestCase(TestCaseMessage) returns (AckNackResponse) {
  }

  // Save all TestInstructions from the TestCase
  rpc SaveAllTestCaseTestInstructions(SaveAllTestInstructionsForSpecificTestCaseRequestMessage) returns (AckNackResponse) {
  }

  // Save all TestInstructionContainers from the TestCase
  rpc SaveAllTestCaseTestInstructionContainers(SaveAllTestInstructionContainersForSpecificTestCaseRequestMessage) returns (AckNackResponse) {
  }
}


// All messages in this file is used to control the "tree structure" in GUI where the user can choose from and the put them into a TestCase. They are referred as 'Available-typed'


// ****************************************************************************************************
// AvailableTestInstructionsAndTestInstructionContainersMessage - From DB

// Message holding all supported TestInstructions and Pre-defined TestInstructionContainers that the user can use when building TestCases
message AvailableTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage {
  repeated ImmatureTestInstructionMessage ImmatureTestInstructions = 1; // List of all TestInstruction
  repeated ImmatureTestInstructionContainerMessage ImmatureTestInstructionContainers = 2; // List of all pre-defined TestInstructionContainers
  AckNackResponse ackNackResponse = 3; // Hold all error messages, if there are any. Message also gives of everything was OK or not
}

// ****************************************************************************************************
// AvailablePinnedTestInstructionsAndTestInstructionContainersMessage - From DB

// Message holding TestInstructions and Pre-defined TestInstructionContainers that the user has pinned in the GUI
message AvailablePinnedTestInstructionsAndPreCreatedTestInstructionContainersResponseMessage {
  repeated AvailablePinnedTestInstructionMessage AvailablePinnedTestInstructions = 1; // List of all pinned, by user, TestInstructions
  repeated AvailablePinnedPreCreatedTestInstructionContainerMessage AvailablePinnedPreCreatedTestInstructionContainers = 2; //  List of all pinned, by user, pre-defined TestInstructionContainers
  AckNackResponse ackNackResponse = 3; // Hold all error messages, if there are any. Message also gives of everything was OK or not
}

// ****************************************************************************************************
// AvailablePinnedTestInstructionsAndTestInstructionContainersMessage - To DB

// Message holding TestInstructions and Pre-defined TestInstructionContainers that the user has pinned in the GUI
message SavePinnedTestInstructionsAndPreCreatedTestInstructionContainersMessage {
  string UserId = 1; // The Users Id, SEB S-id will be used for SEB
  CurrentFenixTestCaseBuilderProtoFileVersionEnum ProtoFileVersionUsedByClient = 2; // The latest proto file version number to be used
  repeated AvailablePinnedTestInstructionMessage AvailablePinnedTestInstructions = 3; // List of all pinned, by user, TestInstructions
  repeated AvailablePinnedPreCreatedTestInstructionContainerMessage AvailablePinnedPreCreatedTestInstructionContainers = 4; //  List of all pinned, by user, pre-defined TestInstructionContainers
}


// ****************************************************************************************************
// AvailablePinnedTestInstructionMessage - To/From DB

// Message holding one Pinned TestInstruction
message AvailablePinnedTestInstructionMessage {
  string TestInstructionUuid = 1; // TestInstruction UUID
  string TestInstructionName = 2; // TestInstruction Name
}

// ****************************************************************************************************
// AvailablePinnedPreCreatedTestInstructionContainerMessage - To/From DB

// Message holding one Pinned TestInstructionContainer
message AvailablePinnedPreCreatedTestInstructionContainerMessage {
  string TestInstructionContainerUuid = 1; // TestInstruction UUID
  string TestInstructionContainerName = 2; // TestInstruction Name
}




// ****************************************************************************************************
// ImmatureBondsMessage

// Message holding all immature bonds that can be used within the TestCase-model
message ImmatureBondsMessage {
  repeated ImmatureBondMessage ImmatureBonds = 1; // List of all immature bonds
  // Message holding one Immature Bond which exist in a TestCase
  message ImmatureBondMessage {
    BasicBondInformationMessage BasicBondInformation = 1; // Data is used to describe the basic information for the Bond
  }
  AckNackResponse ackNackResponse = 2; // Hold all error messages, if there are any. Message also gives of everything was OK or not
}


// ****************************************************************************************************
// MatureBondMessage

// Message holding one Mature Bond which is used when used add and Delete TestInstructions and TestInstructionContainers in the TestCase
message MatureBondMessage {
  BasicBondInformationMessage BasicBondInformation = 1; // Data is used to describe the basic information for the Bond
  MatureBondInformationMessage MatureBondInformation = 2; // Information about the Mature Bond
}

// ****************************************************************************************************
// BondMessage

// Message holding basic information for one Bond
message BasicBondInformationMessage {
  VisibleBondAttributesMessage VisibleBondAttributes = 1; // If 'ShowBondAttributes' then these attributes will be shown to users in attributes area

  // Message holding the attribute that could be shown to user in the attributes area in the GUI
  message VisibleBondAttributesMessage {
    string BondUuid = 1; // The Bond, UUID
    string BondName = 2; // The Bond, Name
    string BondDescription = 3; // The description of the TestInstruction
    string BondMouseOverText = 4; // The mouse over text when hovering over TestInstruction
    bool Deprecated = 5; // Indicates that this TestInstruction shouldn't be used anymore
    bool Enabled = 6; // Bond can be disabled when the user shouldn't use it anymore
    bool  Visible = 7; // Should the Bond be visible in the TestCase or not
    string BondColor = 8; // The color used for presenting the Bond, e.g. #FAF437
    bool CanBeDeleted = 9; // Defines of the Bond can be Deleted from the TestCase structure
    bool CanBeSwappedOut = 10; // Defines if the Bond can be swapped out from the TestCase and be replaced by some other element
    google.protobuf.Timestamp UpdatedTimeStamp = 11; // The TimeStamp when the Bond was last updated
    TestCaseModelElementTypeEnum TestCaseModelElementType = 12; // The Type of Bond
    bool ShowBondAttributes = 13; // If this is True then Attributes are shown to the user, mostly for "error-hunting"
    string TCRuleDeletion = 14; // The Deletion Rule for this Bond
    string TCRuleSwap = 15; // The Swap Rule for this Bond
  }
}

// ****************************************************************************************************
// MatureBondInformationMessage

//  Message holding all data that is set for the Mature Bond
message MatureBondInformationMessage {
  MatureBasicBondInformationMessage MatureBasicTestInstructionInformation = 1; // The Basic information for the Matures Bond
  // Message holding the mature basic information about the Bond
  message MatureBasicBondInformationMessage {
    string BondMatureUuid = 1; // The Mature UUID that the Bond gets when it is added to the TestCase
  }

  CreatedAndUpdatedInformationMessage CreatedAndUpdatedInformation = 2; // Information regarding who did what and when
  // Message holding information about changes to the Bond, who and when
  message CreatedAndUpdatedInformationMessage  {
    google.protobuf.Timestamp AddedToTestCaseTimeStamp = 1; // The TimeStamp when the TestInstructionContainer was first added to the TestCase
    string AddedToTestCaseByUserId = 2; // Which user added the Bond to the TestCase
    google.protobuf.Timestamp LastUpdatedInTestCaseTimeStamp = 3; // The TimeStamp when the Bond was updated in the TestCase
    string LastUpdatedInTestCaseByUserId = 4; // Which user was the last to update the Bond in the TestCase
    google.protobuf.Timestamp DeletedFromTestCaseTimeStamp = 5; // The TimeStamp when the Bond was was deleted from the TestCase
    string DeletedFromTestCaseByUserId = 6; // Which user deleted the Bond from the TestCase
  }
}




// ****************************************************************************************************
// General messages and Enumerations

// Used to have client and server in sync with using the same proto file version
enum CurrentFenixTestCaseBuilderProtoFileVersionEnum {
  VERSION_0_0 = 0 [deprecated = true];
  VERSION_0_1 = 1 [deprecated = true];
  VERSION_0_2 = 2 [deprecated = true];
  VERSION_0_3 = 3 [deprecated = true];
  VERSION_0_4 = 4; // Current version
}

// Error codes - for now a test
enum ErrorCodesEnum {
  OK = 0;
  ERROR_UNKNOWN_CALLER = 1;
  ERROR_WRONG_PROTO_FILE_VERSION = 2;
  ERROR_UNSPECIFIED = 3;
  ERROR_DATABASE_PROBLEM = 4;
}

// How a TestInstructionContainer is processed
enum TestInstructionContainerExecutionTypeEnum {
  PARALLELLED_PROCESSED = 0; // Children in container is parallelled processed
  SERIAL_PROCESSED = 1; // Children in container is serial processed
}

// TestInstructionContainer Child Type
enum TestInstructionContainerChildTypeEnum {
  TESTINSTRUCTION = 0; // Child os of type TestInstruction
  TESTINSTRUCTIONCONTAINER = 1; // Child os of type TestInstructionContainer
}

// All TestCaseModel-elements
enum TestCaseModelElementTypeEnum {
  B0_BOND = 0; // Bond with zero connection. This is the base for any TestCase: "B0"
  B1f_BOND_NONE_SWAPPABLE = 1; // Bond with one connection. Use for starting a TestCase and is only found in pre-created TestInstructionContainers
  B1l_BOND_NONE_SWAPPABLE = 2; // Bond with one connection. Use for ending a TestCase and is only found in pre-created TestInstructionContainers
  B10_BOND = 3; // Bond with zero connections which appear as an element in a new TestInstructionContainer without any other elements
  B11f_BOND = 4; // Bond with one connection which appear as first element inside a TestInstructionContainer
  B11l_BOND = 5; // Bond with one connection which appear as last element inside a TestInstructionContainer
  B12_BOND = 6; // Bond with two connections which connects TestInstructions or TestInstructionContainers
  B10oxo_BOND = 7; //Bond with zero connections. This Bond is used in Pre-created containers and is used when user swap TIC(B10*x*) into TIC(B11fx-n-B11lx).
  B10ox_BOND = 8; // Bond with zero connections. This Bond is used in Pre-created containers and is used when user swap TIC(B10*x) into TIC(B11fx-n-B11l).
  B10xo_BOND = 9; // Bond with zero connections. This Bond is used in Pre-created containers and is used when user swap TIC(B10x*) into TIC(B11f-n-B11lx).
  B11fx_BOND_NONE_SWAPPABLE = 10; // Bond with one connection which appear as first element inside a TestInstructionContainer. This Bond is used in Pre-created containers and is used to stop a user to add new TestInstructions or TestInstructionsContainers before(first) structure.
  B11lx_BOND_NONE_SWAPPABLE = 11; // Bond with one connection which appear as first element inside a TestInstructionContainer. This Bond is used in Pre-created containers and is used to stop a user to add new TestInstructions or TestInstructionsContainers after(last) structure.
  B12x_BOND_NONE_SWAPPABLE = 12; // Bond with two connections which connects TestInstructions or TestInstructionContainers. This Bond is used in Pre-created containers and is used to stop a user to add new TestInstructions or TestInstructionsContainers within a pre-created container.
  TI_TESTINSTRUCTION = 13; // TestInstruction
  TIx_TESTINSTRUCTION_NONE_REMOVABLE = 14; // A standard TestInstruction which can not be removed or swapped out by the user
  TIC_TESTINSTRUCTIONCONTAINER = 15; // TestInstructionContainer(X), where X is any valid structure. Children in TestExecutionContainer is executed in serial mode
  TICx_TESTINSTRUCTIONCONTAINER_NONE_REMOVABLE = 16; // A standard TestInstructionContainer(X), where X is any valid structure, which can not be removed or swapped out by the user. Children in TestExecutionContainer is executed in serial mode
}

// Presentation Names for above TestCaseModel-elements. When presenting then name only the part to left of "_" should presented
enum TestCaseModelElementPresentationNameEnum {
  B0_ = 0; // Presentation name for 'B0_BOND'. Only Present 'B0'
  B1_01 = 1; // Presentation name for 'B1f_BOND_NONE_SWAPPABLE'. Only Present 'B1'
  B1_02 = 2; // Presentation name for 'B1l_BOND_NONE_SWAPPABLE'. Only Present 'B1'
  B10_ = 3; // Presentation name for 'B10_BOND'. Only Present 'B10'
  B11_1 = 4; // Presentation name for 'B11f_BOND'. Only Present 'B11'
  B11_2 = 5; // Presentation name for 'B11l_BOND'. Only Present 'B11'
  B12_ = 6; // Presentation name for 'B12_BOND'. Only Present 'B12'
  B10x_1 = 7; //Presentation name for 'B10oxo_BOND'. Only Present 'B10x'
  B10x_2 = 8; // Presentation name for 'B10ox_BOND'. Only Present 'B10x'
  B10x_3 = 9; // Presentation name for 'B10xo_BOND'. Only Present 'B10x'
  B11x_1 = 10; // Presentation name for 'B11fx_BOND_NONE_SWAPPABLE'. Only Present 'B11x'
  B11x_2 = 11; // Presentation name for 'B11lx_BOND_NONE_SWAPPABLE'. Only Present 'B11x'
  B12x_ = 12; // Presentation name for 'B12x_BOND_NONE_SWAPPABLE'. Only Present 'B12x'
  TI_ = 13; // Presentation name for 'TI_TESTINSTRUCTION'. Only Present 'TI'
  TIx_ = 14; // Presentation name for 'TIx_TESTINSTRUCTION_NONE_REMOVABLE'. Only Present 'TIx'
  TIC_ = 15; // Presentation name for 'TIC_TESTINSTRUCTIONCONTAINER'. Only Present 'TIC(...)'
  TICx_ = 16; // Presentation name for 'TICx_TESTINSTRUCTIONCONTAINER_NONE_REMOVABLE'. Only Present 'TICx(...)'
}

// All different commands that can be used to change  TestCase-Model
enum TestCaseCommandTypeEnum {
  NEW_TESTCASE = 0; //NewTestCase(). Creates a new TestCase
  REMOVE_ELEMENT = 1; // RemoveElement(ElementUuidToBeRemoved). Remove an element from the TestCase
  SWAP_OUT_ELEMENT_FOR_NEW_ELEMENT = 2; // SwapOutElementForNewElement(ElementUuidTobeSwappedOut, NewElementUuidTobeSwappedIn). Swap in a new element instead of an existing
  COPY_ELEMENT = 3; // CopyElement(ElementUuid). Create a copy of an element and place it in the copy-buffer
  SWAP_OUT_ELEMENT_FOR_COPY_BUFFER_ELEMENT = 4; // SwapOutElementForCopyBufferElement(ElementUuidTobeSwappedOut, CopyBufferElementUuidTobeSwappedIn). Swap in a copy of the element that exist in the copy buffer
  CUT_ELEMENT = 5; // CopyElement(ElementUuid). Cut out an element and place in the cut buffer
  SWAP_OUT_ELEMENT_FOR_CUT_BUFFER_ELEMENT = 6; // SwapOutElementForCutBufferElement(ElementUuidTobeSwappedOut, CutBufferElementUuidTobeSwappedIn). Swap in the element that exist in the cut buffer
}

// The TestInstructionAttribute can have one of the following types: "TextBox", "ComboBox", "FileSelector", "FunctionSelector"
enum TestInstructionAttributeTypeEnum {
  TEXTBOX = 0; // Defines that TestInstructionAttribute of type "TextBox"
  COMBOBOX = 1; // Defines that TestInstructionAttriebute of type ComboBox
  FILE_SELECTOR = 2; // Defines that TestInstructionAttribute of type FileSelector
  FUNCTION_SELECTOR = 3; // Defines that TestInstructionAttribute of type FunctionSelector
}

// Parameter used for Empty inputs, only containing current proto-file version
message EmptyParameter {
  CurrentFenixTestCaseBuilderProtoFileVersionEnum ProtoFileVersionUsedByClient = 1; // The latest proto file version number to be used
}

// Ack/Nack- Response message with comment
message AckNackResponse {
  bool AckNack = 1; // True=Ack, False=Nack
  string Comments = 2; //Comments if needed
  repeated ErrorCodesEnum ErrorCodes = 3; // List of Error codes
  CurrentFenixTestCaseBuilderProtoFileVersionEnum ProtoFileVersionUsedByClient = 4; // The latest proto file version number to be used
}

// ****************************************************************************************************
// Client Identification Message

// Message Holding information about who is the calling client
message UserIdentificationMessage {
  string UserId = 1; // The Users Id, SEB S-id will be used for SEB
  CurrentFenixTestCaseBuilderProtoFileVersionEnum ProtoFileVersionUsedByClient = 2; // The latest proto file version number to be used
}

// ****************************************************************************************************
// TestInstructionContainerChildrenMessage
//TODO *** IS NOT USED AT THE MOMENT ***
// *** IS NOT USED AT THE MOMENT ***
//Message holding one child and its type (TestInstruction or TestInstructionContainer)
message TestInstructionContainerChildMessage {
  string TestInstructionContainerChildUuid = 1; // The UUID for the child, can be from a TestInstruction or a TestInstructionContainer
  TestInstructionContainerChildTypeEnum TestInstructionContainerChildType = 2; // The type of the child, 'TestInstruction' or 'TestInstructionContainer'
}// *** IS NOT USED AT THE MOMENT ***



// All messages in this file is used to define the TestCase

// ****************************************************************************************************
// Get TestCase Request Message

// Message holding information about who is the user and which TestCase that is requested
message GetTestCaseRequestMessage {
  string UserId = 1; // The Users Id, SEB S-id will be used for SEB
  CurrentFenixTestCaseBuilderProtoFileVersionEnum ProtoFileVersionUsedByClient = 2; // The latest proto file version number to be used
  string TestCaseUuid = 3; // The TestCase, UUID, that is requested from DB-Server
}
// ****************************************************************************************************
// List all TestCases Request Message

// Message holding information about who is the user and which TestCase that is requested
message ListTestCasesRequestMessage {
  string UserId = 1; // The Users Id, SEB S-id will be used for SEB
  CurrentFenixTestCaseBuilderProtoFileVersionEnum ProtoFileVersionUsedByClient = 2; // The latest proto file version number to be used

}

// ****************************************************************************************************
// List all TestCases Response Message

// Message a list of TestCase
message ListTestCasesResponseMessage {
  repeated BasicTestCaseInformationMessage BasicTestCaseInformation = 1; // List of TestCases with their Basic information
}


// ****************************************************************************************************
// Get MetadataItems-Request Message

// Message holding information about who is the user and from which Domain and System to request the MetaDataItems
message GetTestCaseMetaDataItemsRequestMessage {
  string UserId = 1; // The Users Id, SEB S-id will be used for SEB
  CurrentFenixTestCaseBuilderProtoFileVersionEnum ProtoFileVersionUsedByClient = 2; // The latest proto file version number to be used
  string DomainUuid = 3; // The Domain, UUID, who has the MetaDataItems
  string DomainName = 4; // The Domain, Name, who has the MetaDataItems
}

// ****************************************************************************************************
// The list of all Meta MetadataItems Message that belongs to a certain Domain

// Message holding all MetaDataItems for a specific Domain
message GetTestCaseMetaDataItemsResponseMessage {
  TestCaseMetaDataMessage TestCaseMetaData = 1; // A list of all available MetaData that must be filled in by the user
}


// ****************************************************************************************************
// TestCaseMessage

// A message holding one TestCase
message TestCaseMessage {

  BasicTestCaseInformationMessage BasicTestCaseInformation = 1; // All Basic information about the TestCase

  CreatedAndUpdatedInformationMessage CreatedAndUpdatedInformation = 2; // Information regarding who did what and when
  // Message holding information about changes to the TestCase, who and when
  message CreatedAndUpdatedInformationMessage  {
    google.protobuf.Timestamp AddedToTestCaseTimeStamp = 1; // The TimeStamp when the TestCase was first created
    string AddedToTestCaseByUserId = 2; // Which user added the TestCase
    google.protobuf.Timestamp LastUpdatedInTestCaseTimeStamp = 3; // The TimeStamp when the TestCase was updated
    string LastUpdatedInTestCaseByUserId = 4; // Which user was the last to update the TestCase
    google.protobuf.Timestamp DeletedFromTestCaseTimeStamp = 5; // The TimeStamp when the TestCase was deleted
    string DeletedFromTestCaseByUserId = 6; // Which user deleted the the TestCase
  }

  TestCaseModelMessage TestCaseModel = 3; // Hold the model of how the TestCase is constructed
  TestCaseMetaDataMessage TestCaseMetaData = 4; // Holds the metadata for the TestCase, set by the user to classify the TestCase
  TestCaseFilesMessage TestCaseFiles = 5; // All files connected to the TestCase
}

// ****************************************************************************************************
// BasicTestCaseInformationMessage

// Message holding Basic information for one TestCase
message BasicTestCaseInformationMessage {
  NonEditableBasicInformationMessage NonEditableInformation = 1; // All Basic information that can be shown in GUI but can't be changed by the user
  EditableBasicInformationMessage EditableInformation = 2; // All Basic information that can be shown in GUI and can be changed by the user
  // Not used right now - InvisibleBasicInformationMessage InvisibleBasicInformation = 3; // All Basic information that is not directly shown in GUI and can't be changed by the user

  // Message holding All basic information that can be shown in GUI but can't be changed by the user
  message NonEditableBasicInformationMessage {
    string TestCaseUuid = 1; // The TestCase, UUID, set by TestCase-builder
    string TestCaseName = 2; // The TestCase, Name, set in TestCase-builder
    string DomainUuid = 3; // The Domain, UUID, where the TestCase 'has its home'
    string DomainName = 4; // The Domain, Name, where the TestCase 'has its home'
    uint32  TestCaseVersion = 6; // Each time a TestCase is saved then the 'TestCaseVersion' will be incremented by +1
  }

  // Message holding all Basic information that can be shown in GUI and can be changed by the user
  message EditableBasicInformationMessage {
    string TestCaseDescription = 1; // The description of the TestCase
    //string TestCaseMouseOverText = 2; // The mouse over text when hovering over TestCase
  }

  // Message holding all Basic information that is not directly shown in GUI and can't be changed by the user
  /* Not used right now
    message InvisibleBasicInformationMessage{
      bool Enabled = 1; // TestCase can be disabled when the user shouldn't use it anymore
    }

   */
}


// ****************************************************************************************************
// TestCaseMetaDataMessage

// Message holding all MetaDataparameters for the TestCase
message TestCaseMetaDataMessage {
  repeated MetaDataItemMessage MetaDataItems = 1; // List of all MetaDataItems with their values

  message MetaDataItemMessage {
    string MetaDataUuid = 1; // UUID for this MetaDataItem
    string MetaDataName = 2; // Name for this MetaDataItem
    string MetaDataGroupUuid = 3; // The group, UUID,  for this MetaDataItem, used to group stuff in the GUI
    string MetaDataGroupName = 4; // The group, Name  for this MetaDataItem, used as Label for the group in the GUI
    repeated MetaDataItemMessage AvailableMetaDataItems = 5; // A list of the available MetaDataItems that the user can chose from
    MetaDataItemMessage ChosenMetaDataItem = 6; // The chosen, by user, MetaDataItems

    // Message holding one MetaDataItem
    message MetaDataItemMessage {
      string MetaDataItemUuid = 1; // Unique UUID for the MetaDataItem
      string MetaDataItemValue = 2; // The value presented in the GUI and for the user to pick
      uint32 MetaDataItemIndex = 3; // A number deciding the presentation order
    }

  }

}


// ****************************************************************************************************
// TestCaseFilesMessage

// Message holding all that is added to the TestCase, either using 'File picker' or add in some other way
message TestCaseFilesMessage {
  repeated TestCaseFileMessage TestCaseFiles = 1; // A list of files that is added to the TestCase, in some way
  // Message holding one file and information about who did what and when
  message TestCaseFileMessage {
    string FileReferenceUuid = 1; // A unique, UUID, for file
    string FileReferenceName = 2; // A Name, for the file
    repeated bytes FileAsByteArray = 3; // The file encoded as byte array
  }

  CreatedAndUpdatedInformationMessage CreatedAndUpdatedInformation = 2; // Information regarding who did what and when
  // Message holding information about changes to the File, who and when
  message CreatedAndUpdatedInformationMessage  {
    google.protobuf.Timestamp AddedToTestCaseTimeStamp = 1; // The TimeStamp when the File was first added to the TestCase
    string AddedToTestCaseByUserId = 2; // Which user added the File to the TestCase
    google.protobuf.Timestamp LastUpdatedInTestCaseTimeStamp = 3; // The TimeStamp when the File was updated in the TestCase
    string LastUpdatedInTestCaseByUserId = 4; // Which user was the last to update the File in the TestCase
    google.protobuf.Timestamp DeletedFromTestCaseTimeStamp = 5; // The TimeStamp when the File was deleted from the TestCase
    string DeletedFromTestCaseByUserId = 6; // Which user deleted the File from the TestCase
  }


}


// All messages in this file is used to define the TestCase-model, and how it was constructed

// ****************************************************************************************************
// TestCaseModelMessage

// A message holding the complete model of the TestCase together with the steps to create the model
message TestCaseModelMessage {
  string TestCaseModelAsString = 1; // The string representation of the TestCase, e.g. 'TC=B1-TICX(B11-TI-B12-TIX-B11X)-B1' - The last TIX could be used to clean up the environment

  string FirstMatureElementUuid = 2; // The UUID of first element in the TestCase-model
  repeated MatureTestCaseModelElementMessage TestCaseModelElements = 3; // All elements in the TestCase

  // The model of The TestCase
  repeated TestCaseModelCommandMessage TestCaseModelCommands = 4; // All commands that was used to create the TestCase
  // One command that describe one change to the TestCase
  message TestCaseModelCommandMessage {
    TestCaseCommandTypeEnum TestCaseCommandType = 1; // The type of command that was used
    string TestCaseCommandName = 2; // The name of command
    string FirstParameter = 3; // The first parameter, an UUID, in the command
    string SecondParameter = 4; // The second parameter, an UUID, in the command
    string UserId = 5; // User Id for the person executing the command
    google.protobuf.Timestamp CommandExecutedTimeStamp = 6; // The TimeStamp when the Command was executed
  }
}

// ****************************************************************************************************
// ImmatureSubTestCaseModelMessage

// A message holding the model for Immature elements, e.g. TestInstructions and pre-created TestInstructionContainers
message ImmatureElementModelMessage {
  string FirstImmatureElementUuid = 1; // The UUID of first element in the Immature element structure
  repeated ImmatureTestCaseModelElementMessage TestCaseModelElements = 2; // All elements in the immature element structure
}

// ****************************************************************************************************
// Objects used in several places

// One Mature TestCaseElement which hold type, reference to previous, next and parent elements
message MatureTestCaseModelElementMessage {
  string OriginalElementUuid = 1; // The original elements UUID, e.g. a TestInstruction unique UUID set by client system
  string OriginalElementName = 2; // The original elements Name, e.g. a TestInstruction Name set by client system
  string MatureElementUuid = 3; // The UUID that is created in the TestCase to give it a unique id
  string PreviousElementUuid = 4;  // The UUID of the previous element. When there are no previous element then this field is populated with 'MatureElementUuid'
  string NextElementUuid = 5;  // The UUID of the previous element. When there are no next element then this field is populated with current element UUID
  string FirstChildElementUuid = 6; // The UUID of the first child element. Only applicable when this is a TestInstructionContainer. When there are no child element then this field is populated with 'MatureElementUuid'
  string ParentElementUuid = 7; // The UUID of the parent, TestInstructionContainer. When there are no parent element then this field is populated with 'MatureElementUuid'
  TestCaseModelElementTypeEnum TestCaseModelElementType = 8; // The specific type of this TestCase-element
}

// One Immature TestCaseElement which hold type, reference to previous, next and parent elements
message ImmatureTestCaseModelElementMessage {
  string OriginalElementUuid = 1; // The original elements UUID, e.g. a TestInstruction unique UUID set by client system
  string OriginalElementName = 2; // The original elements Name, e.g. a TestInstruction Name set by client system
  string ImmatureElementUuid = 3; // The UUID that is used for creating a TestInstructionContainer structure to be able to hold together the structure
  string PreviousElementUuid = 4;  // The UUID of the previous element. When there are no previous element then this field is populated with 'ImmatureElementUuid'
  string NextElementUuid = 5;  // The UUID of the previous element. When there are no next element then this field is populated with 'ImmatureElementUuid'
  string FirstChildElementUuid = 6; // The UUID of the first child element. Only applicable when this is a TestInstructionContainer. When there are no child element then this field is populated with 'ImmatureElementUuid'
  string ParentElementUuid = 7; // The UUID of the parent, TestInstructionContainer. When there are no parent element then this field is populated with 'ImmatureElementUuid'
  TestCaseModelElementTypeEnum TestCaseModelElementType = 8; // The specific type of this TestCase-element
}




// All messages in this file is used to define a TestInstructionContainer, both Immature TestInstructionContainers that are available to chose from, and Mature TestInstructionContainers that exits in the TestCase

// ****************************************************************************************************
// ListAllTestInstructionContainersForSpecificTestCaseRequestMessage

// Message holding information about who is the user and which TestCase that the TestInstructionContainers belong to
message ListAllTestInstructionContainersForSpecificTestCaseRequestMessage {
  string UserId = 1; // The Users Id, SEB S-id will be used for SEB
  CurrentFenixTestCaseBuilderProtoFileVersionEnum ProtoFileVersionUsedByClient = 2; // The latest proto file version number to be used
  string TestCaseUuid = 3; // The TestCase, UUID, that is TestInstructionContainers belong to
}

// ****************************************************************************************************
// SaveAllTestInstructionContainersForSpecificTestCaseRequestMessage

// Message holding information about user, TestCaseUUID and the TestInstructions
message SaveAllTestInstructionContainersForSpecificTestCaseRequestMessage {
  string UserId = 1; // The Users Id, SEB S-id will be used for SEB
  CurrentFenixTestCaseBuilderProtoFileVersionEnum ProtoFileVersionUsedByClient = 2; // The latest proto file version number to be used
  string TestCaseUuid = 3; // The TestCase, UUID, that is TestInstructions belong to
  repeated MatureTestInstructionContainerMessage MatureTestInstructionContainers = 4; // All TestInstructionContainers to be saved
}

// ****************************************************************************************************
// ImmatureTestInstructionContainerMessage

// Message holding one Immature TestInstruction which is Dragged n Dropped into the TestCase
message ImmatureTestInstructionContainerMessage {
  BasicTestInstructionContainerInformationMessage BasicTestInstructionContainerInformation = 1; // Data is used to describe the basic information for the TestInstructionContainer
  ImmatureTestInstructionContainerInformationMessage ImmatureTestInstructionContainerInformation = 2; // The immature information for the TestInstructionContainer
  ImmatureElementModelMessage ImmatureSubTestCaseModel = 3; // The immature element model for this TestInstructionContainer
}

// ****************************************************************************************************
// MatureTestInstructionMessage

// Message holding one Mature TestInstruction which exist in a TestCase
message MatureTestInstructionContainerMessage {
  BasicTestInstructionContainerInformationMessage BasicTestInstructionContainerInformation = 1; //Data is used to describe the basic information for the TestInstructionContainer
  MatureTestInstructionContainerInformationMessage MatureTestInstructionContainerInformation = 2; // Information about the Mature TestInstructionContainer
}

// ****************************************************************************************************
// BasicTestInstructionContainerInformationMessage

// Message holding Basic information for one TestInstructionContainer
message BasicTestInstructionContainerInformationMessage {
  NonEditableBasicInformationMessage NonEditableInformation = 1; // All Basic information that can be shown in GUI but can't be changed by the user
  EditableBasicInformationMessage EditableInformation = 2; // All Basic information that can be shown in GUI and can be changed by the user
  InvisibleBasicInformationMessage InvisibleBasicInformation = 3; // All Basic information that is not directly shown in GUI and can't be changed by the user
  EditableTestInstructionContainerAttributesMessage EditableTestInstructionContainerAttributes = 4; // All attributes supported by a TestInstructionContainer, can be changed by the user

  // Message holding All basic information that can be shown in GUI but can't be changed by the user
  message NonEditableBasicInformationMessage {
    string DomainUuid = 1; // The Domain, UUID, who created the immature TestInstructionContainer
    string DomainName = 2; // The Domain, Name, who created the immature TestInstructionContainer
    string TestInstructionContainerUuid = 3; // TestInstructionContainer UUID, set by Client system
    string TestInstructionContainerName = 4; // TestInstructionContainer Name, set by Client system
    string TestInstructionContainerTypeUuid = 5; // The Type(Group), Uuid, of TestInstructionContainer
    string TestInstructionContainerTypeName = 6; // The Type(Group), Name, of TestInstructionContainer
    bool Deprecated = 7; // Indicates that this TestInstructionContainer shouldn't be used anymore
    uint32 MajorVersionNumber = 8; // Change in Major Version Number means that user must act on change
    uint32 MinorVersionNumber = 9; // Change in Minor Version Number means that user must NOT act on change
    google.protobuf.Timestamp UpdatedTimeStamp = 10; // The TimeStamp when the TestInstructionContainer was last updated by the client system
    string TestInstructionContainerColor = 11; // The color used for presenting the TestInstructionContainer, e.g. #FAF437
    string TCRuleDeletion = 14; // The Deletion Rule for this TestInstructionContainer
    string TCRuleSwap = 15; // The Swap Rule for this TestInstructionContainer
  }

  // Message holding all Basic information that can be shown in GUI and can be changed by the user
  message EditableBasicInformationMessage {
    string TestInstructionContainerDescription = 7; // The description of the TestInstructionContainer
    string TestInstructionContainerMouseOverText = 8; // The mouse over text when hovering over TestInstructionContainer
  }

  // Message holding all Basic information that is not directly shown in GUI and can't be changed by the user
  message InvisibleBasicInformationMessage{
    bool Enabled = 10; // TestInstructionContainer can be disabled when the user shouldn't use it anymore
  }

  // Message holding all attributes supported by a TestInstructionContainer, can be changed by the user
  message EditableTestInstructionContainerAttributesMessage {
    TestInstructionContainerExecutionTypeEnum TestInstructionContainerExecutionType = 1; // Should children in the TestInstructionContainer be Serial or Parallel executed
  }

}

// ****************************************************************************************************
// ImmatureTestInstructionContainerInformationMessage

// Message holding the information about the Immature TestInstructionContainer
message ImmatureTestInstructionContainerInformationMessage {

  repeated AvailableDropZoneMessage AvailableDropZones = 18; // A list of DropZone for this Immature TestInstructionContainer. A DropZone is a collection of pre-defined values that the TestInstructionContainer will get when placed in TestCase
  // Message holding one DropZone
  message AvailableDropZoneMessage {
    string DropZoneUuid = 1; // A DropZone, UUID, for the TestInstructionContainer
    string DropZoneName = 2; // A DropZone, Name, for the TestInstructionContainer
    string DropZoneDescription = 3; // Description of the DropZone
    string DropZoneMouseOver = 4; // The mouse over text for the DropZone
    string DropZoneColor = 5; // The color used for presenting the DropsZone, e.g. #FAF437

    repeated DropZonePreSetTestInstructionAttributeMessage DropZonePreSetTestInstructionAttributes = 6; // A list of the attributes and their pre-set values
    // Message holding one attribute with its pre-set value
    message DropZonePreSetTestInstructionAttributeMessage {
      TestInstructionAttributeTypeEnum TestInstructionAttributeType = 1; // Defines witch type attribute; TEXTBOX, COMBOBOX...
      string TestInstructionAttributeUuid = 2; // The unique uuid for the TestInstructionAttribute, set by client system
      string TestInstructionAttributeName = 3; // The name of the TestInstructionAttribute
      string AttributeValueAsString = 4; // The String-representation of the value
      string AttributeValueUuid = 5; // Combo-boxes can us a UUID as unique value behind the text visible in the combo-box
    }
  }
}

// ****************************************************************************************************
// MatureTestInstructionContainerInformationMessage

//  Message holding all data that is set for the Mature TestInstructionContainer
message MatureTestInstructionContainerInformationMessage {
  MatureBasicTestInstructionInformationMessage MatureBasicTestInstructionInformation = 1; // The Basic information for the Matures TestInstruction
  // Message holding the mature basic information about the TestInstruction
  message MatureBasicTestInstructionInformationMessage {
    string TestCaseUuid = 1; // Reference to the TestCase where this TestInstructionContainer exists
    string TestInstructionContainerMatureUuid = 2; // The Mature UUID that the TestInstructionContainer gets when it is added to the TestCase
  }

  CreatedAndUpdatedInformationMessage CreatedAndUpdatedInformation = 2; // Information regarding who did what and when
  // Message holding information about changes to the TestInstructionContainer, who and when
  message CreatedAndUpdatedInformationMessage  {
    google.protobuf.Timestamp AddedToTestCaseTimeStamp = 1; // The TimeStamp when the TestInstructionContainer was first added to the TestCase
    string AddedToTestCaseByUserId = 2; // Which user added the TestInstructionContainer to the TestCase
    google.protobuf.Timestamp LastUpdatedInTestCaseTimeStamp = 3; // The TimeStamp when the TestInstructionContainer was updated in the TestCase
    string LastUpdatedInTestCaseByUserId = 4; // Which user was the last to update the TestInstructionContainer in the TestCase
    google.protobuf.Timestamp DeletedFromTestCaseTimeStamp = 5; // The TimeStamp when the TestInstructionContainer was deleted from the TestCase
    string DeletedFromTestCaseByUserId = 6; // Which user deleted the TestInstructionContainer from the TestCase
  }
}


// All messages in this file is used to define a TestInstruction, both Immature TestInstructions that are available to chose from, and Mature TestInstructions that exits in the TestCase

// ****************************************************************************************************
// ListAllTestInstructionsForSpecificTestCaseRequestMessage

// Message holding information about who is the user and which TestCase that the TestInstructions belong to
message ListAllTestInstructionsForSpecificTestCaseRequestMessage {
  string UserId = 1; // The Users Id, SEB S-id will be used for SEB
  CurrentFenixTestCaseBuilderProtoFileVersionEnum ProtoFileVersionUsedByClient = 2; // The latest proto file version number to be used
  string TestCaseUuid = 3; // The TestCase, UUID, that is TestInstructions belong to
}

// ****************************************************************************************************
// SaveAllTestInstructionsForSpecificTestCaseRequestMessage

// Message holding information about user, TestCaseUUID and the TestInstructions
message SaveAllTestInstructionsForSpecificTestCaseRequestMessage {
  string UserId = 1; // The Users Id, SEB S-id will be used for SEB
  CurrentFenixTestCaseBuilderProtoFileVersionEnum ProtoFileVersionUsedByClient = 2; // The latest proto file version number to be used
  string TestCaseUuid = 3; // The TestCase, UUID, that is TestInstructions belong to
  repeated MatureTestInstructionsMessage MatureTestInstructions = 4; // All TestInstructions to be saved
}

// ****************************************************************************************************
// ImmatureTestInstructionMessage

// Message holding one Immature TestInstruction which is Dragged n Dropped into the TestCase
message ImmatureTestInstructionMessage {
  BasicTestInstructionInformationMessage BasicTestInstructionInformation = 1; // Data is used to describe the basic information for the TestInstruction
  ImmatureTestInstructionInformationMessage ImmatureTestInstructionInformation = 2; // The immature information for the TestInstruction
  ImmatureElementModelMessage ImmatureSubTestCaseModel = 3; // The immature element model for this TestInstruction
}

// ****************************************************************************************************
// MatureTestInstructionsMessage

// Message holding a list of TestInstructions, received from DB or to be sent to DB
message MatureTestInstructionsMessage {
  repeated MatureTestInstructionMessage MatureTestInstructions = 1; // A list of list of TestInstructions, received from DB or to be sent to DB

  // Message holding one Mature TestInstruction which exist in a TestCase
  message MatureTestInstructionMessage {
    BasicTestInstructionInformationMessage BasicTestInstructionInformation = 1; // Data is used to describe the basic information for the TestInstruction
    MatureTestInstructionInformationMessage MatureTestInstructionInformation = 2; // Information about the Mature TestInstruction
  }
}

// ****************************************************************************************************
// BasicTestInstructionInformationMessage

// Message holding Basic information for one TestInstruction
message BasicTestInstructionInformationMessage {
  NonEditableBasicInformationMessage NonEditableInformation = 1; // All Basic information that can be shown in GUI but can't be changed by the user
  EditableBasicInformationMessage EditableInformation = 2; // All Basic information that can be shown in GUI and can be changed by the user
  InvisibleBasicInformationMessage InvisibleBasicInformation = 3; // All Basic information that is not directly shown in GUI and can't be changed by the user

  // Message holding All basic information that can be shown in GUI but can't be changed by the user
  message NonEditableBasicInformationMessage {
    string DomainUuid = 1; // The Domain, UUID, to be tested with this TestInstruction
    string DomainName = 2; // The Domain, Name, to be tested with this TestInstruction
    string TestInstructionUuid = 3; // TestInstruction UUID, set by Client system
    string TestInstructionName = 4; // TestInstruction Name, set by Client system
    string TestInstructionTypeUuid = 5; // The Type(Group), Uuid, of TestInstruction
    string TestInstructionTypeName = 6; // The Type(Group), Name, of TestInstruction
    bool Deprecated = 7; // Indicates that this TestInstruction shouldn't be used anymore
    uint32 MajorVersionNumber = 8; // Change in Major Version Number means that user must act on change
    uint32 MinorVersionNumber = 9; // Change in Minor Version Number means that user must NOT act on change
    google.protobuf.Timestamp UpdatedTimeStamp = 10; // The TimeStamp when the TestInstruction was last updated by the client system
    string TestInstructionColor = 11; // The color used for presenting the TestInstruction, e.g. #FAF437
    string TCRuleDeletion = 14; // The Deletion Rule for this TestInstruction
    string TCRuleSwap = 15; // The Swap Rule for this TestInstruction
  }

  // Message holding all Basic information that can be shown in GUI and can be changed by the user
  message EditableBasicInformationMessage {
    string TestInstructionDescription = 1; // The description of the TestInstruction
    string TestInstructionMouseOverText = 2; // The mouse over text when hovering over TestInstruction
  }

  // Message holding all Basic information that is not directly shown in GUI and can't be changed by the user
  message InvisibleBasicInformationMessage{
    bool Enabled = 1; // TestInstruction can be disabled when the user shouldn't use it anymore
  }
}

// ****************************************************************************************************
// ImmatureTestInstructionInformationMessage

// Message holding the information about the Immature TestInstruction
message ImmatureTestInstructionInformationMessage {

  repeated AvailableDropZoneMessage AvailableDropZones = 18; // A list of DropZone for this Immature TestInstruction. A DropZone is a collection of pre-defined values that the TestInstruction will get when placed in TestCase
  // Message holding one DropZone
  message AvailableDropZoneMessage {
    string DropZoneUuid = 1; // A DropZone, UUID, for the TestInstruction
    string DropZoneName = 2; // A DropZone, Name, for the TestInstruction
    string DropZoneDescription = 3; // Description of the DropZone
    string DropZoneMouseOver = 4; // The mouse over text for the DropZone
    string DropZoneColor = 5; // The color used for presenting the DropsZone, e.g. #FAF437

    repeated DropZonePreSetTestInstructionAttributeMessage DropZonePreSetTestInstructionAttributes = 6; // A list of the attributes and their pre-set values
    // Message holding one attribute with its pre-set value
    message DropZonePreSetTestInstructionAttributeMessage {
      TestInstructionAttributeTypeEnum TestInstructionAttributeType = 1; // Defines witch type attribute; TEXTBOX, COMBOBOX...
      string TestInstructionAttributeUuid = 2; // The unique uuid for the TestInstructionAttribute, set by client system
      string TestInstructionAttributeName = 3; // The name of the TestInstructionAttribute
      string AttributeValueAsString = 4; // The String-representation of the value
      string AttributeValueUuid = 5; // Combo-boxes can us a UUID as unique value behind the text visible in the combo-box
    }
  }
}

// ****************************************************************************************************
// MatureTestInstructionInformationMessage

//  Message holding all data that is set for the Mature TestInstruction
message MatureTestInstructionInformationMessage {
  MatureBasicTestInstructionInformationMessage MatureBasicTestInstructionInformation = 1; // The Basic information for the Matures TestInstruction
  // Message holding the mature basic information about the TestInstruction
  message MatureBasicTestInstructionInformationMessage {
    string TestCaseUuid = 1; // Reference to the TestCase where this TestInstruction exists
    string TestInstructionMatureUuid = 2; // The Mature UUID that the TestInstruction gets when it is added to the TestCase
    string ParentTestInstructionContainerUuid = 3;// A UUID-reference to TestInstructionContainer where this TestInstruction exists
    string ParentTestInstructionContainerMatureUuid = 4; // A Mature-UUID-reference to TestInstructionContainer where this TestInstruction exists
    string ChosenDropZoneUuid = 5; // The chosen dropzone, UUID, which set the attributes in TestInstruction when it was added to the TestCase
    string ChosenDropZoneName = 6; // The chosen dropzone, Name, which set the attributes in TestInstruction when it was added to the TestCase
  }

  CreatedAndUpdatedInformationMessage CreatedAndUpdatedInformation = 2; // Information regarding who did what and when
  // Message holding information about changes to the TestInstruction, who and when
  message CreatedAndUpdatedInformationMessage  {
    google.protobuf.Timestamp AddedToTestCaseTimeStamp = 1; // The TimeStamp when the TestInstruction was first added to the TestCase
    string AddedToTestCaseByUserId = 2; // Which user added the TestInstruction to the TestCase
    google.protobuf.Timestamp LastUpdatedInTestCaseTimeStamp = 3; // The TimeStamp when the TestInstruction was updated in the TestCase
    string LastUpdatedInTestCaseByUserId = 4; // Which user was the last to update the TestInstruction in the TestCase
    google.protobuf.Timestamp DeletedFromTestCaseTimeStamp = 5; // The TimeStamp when the TestInstruction was deleted from the TestCase
    string DeletedFromTestCaseByUserId = 6; // Which user deleted the TestInstruction from the TestCase
  }

  repeated TestInstructionAttributeMessage TestInstructionAttributesList = 3; // All attributes that belongs to the TestInstruction
  // Message holding one Attribute for a Test Instruction
  message TestInstructionAttributeMessage {
    BaseAttributeInformationMessage BaseAttributeInformation = 1; // The information set from Client system about the Attribute

    message BaseAttributeInformationMessage {
      string TestInstructionAttributeUuid = 1; // The unique uuid for the TestInstructionAttribute, set by plugin
      string TestInstructionAttributeName = 2; // The name of the TestInstructionAttribute
      string TestInstructionAttributeTypeUuid = 3; // The unique uuid for the TestInstructionAttribute-type
      string TestInstructionAttributeTypeName = 4; // The name for the TestInstructionAttribute-type, used to group attributes in GUI
      string TestInstructionAttributeDescription = 5; // The description of the TestInstructionAttribute
      string TestInstructionAttributeMouseOver = 6; // The mouse over text for the TestInstructionAttribute
      bool TestInstructionAttributeVisible = 7; // Should the TestInstructionAttribute be visible in attributes list in GUI or not
      bool TestInstructionAttributeEnable = 8; // Should the TestInstructionAttribute be enabled or not
      bool TestInstructionAttributeMandatory = 9; // Should the TestInstructionAttribute be mandatory or not
      bool TestInstructionAttributeVisibleInTestCaseArea = 10; // Should the TestInstructionAttribute be visible in TestInstruction at TestCaseModel- Area in GUI or not
      bool TestInstructionAttributeIsDeprecated = 11; // Indicates that this TestInstruction attribute shouldn't be used anymore
      TestInstructionAttributeTypeEnum TestInstructionAttributeType = 12; // The chosen Enum value for what type the instruction attribute should be
    }
    AttributeInformationMessage AttributeInformation = 2; // Have the ability to store all different Attribute type, but only one should be used
    // Message holding one attribute. It has the ability to hold different types of attribute but only one should be used
    message AttributeInformationMessage {
      TestInstructionAttributeInputTextBoxProperty inputTextBoxProperty = 1; // If the attribute is a textbox then all properties can be found in structure
      // Properties if it is a TextBox attribute
      message TestInstructionAttributeInputTextBoxProperty {
        string TestInstructionAttributeInputTextBoUuid = 1; // The unique uuid for the TestInstructionAttributeInputTextBoxProperties
        string TestInstructionAttributeInputTextBoxName = 2; // The name of the TestInstructionAttributeInputTextBoxProperties
        bool TextBoxEditable = 3; // Should the the TextBox be editable or not
        string TextBoxInputMask = 4; // Input mask for the TextBox
        string TextBoxAttributeTypeUuid = 5; // The unique uuid for the Type of the TextBox. Used for data manipulation
        string TextBoxAttributeTypeName = 6; // The Name for the Type of the TextBox.
        string TextBoxAttributeValue = 7; // The value for the the TextBox, used for preset values
      }

      TestInstructionAttributeInputComboBoxProperty InputComboBoxProperty = 2; // If the attribute is a combobox then all properties can be found in structure
      // Properties if it is a ComboBox attribute
      message TestInstructionAttributeInputComboBoxProperty {
        string TestInstructionAttributeComboBoxUuid = 1; // The unique uuid for the TestInstructionAttributeComboBoxProperties
        string TestInstructionAttributeComboBoxName = 2; // The name of the TestInstructionAttributeComboBoxProperties
        bool ComboBoxEditable = 3; // Should the the ComboBox be editable or not
        string ComboBoxInputMask = 4; // Input mask for the ComboBox
        string ComboBoxAttributeTypeUuid = 5; // The unique uuid for the Type of the ComboBox Used for data manipulation
        string ComboBoxAttributeTypeName = 6; // The Name for the Type of the ComboBox
        string ComboBoxAttributeValueUuid = 7; // The uuid of the value for the the ComboBox, used for showing one value but have a unique value behind the scene
        string ComboBoxAttributeValue = 8; // The value for the the ComboBox, used for preset values
      }

      TestInstructionAttributeInputFileSelectorProperty InputFileSelectorProperty = 3; // If the attribute is a combobox then all properties can be found in structure
      // Properties if it is a FileSelector attribute
      message TestInstructionAttributeInputFileSelectorProperty {
        string TestInstructionAttributeFileSelectorUuid = 1; // The unique Uuid for the TestInstructionAttributeFileSelectorProperties
        string TestInstructionAttributeFileSelectorName = 2; // The name of the TestInstructionAttributeFileSelectorProperties
        string TestInstructionAttributeFileReferenceUuid = 3; // A reference, UUID, to a chosen file, that has been added to the TestCase
        string TestInstructionAttributeFileReferenceName = 4; // A reference, Name, to a chosen file, that has been added to the TestCase
      }

      //TODO Create Attribute property for functions
    }

  }
}






