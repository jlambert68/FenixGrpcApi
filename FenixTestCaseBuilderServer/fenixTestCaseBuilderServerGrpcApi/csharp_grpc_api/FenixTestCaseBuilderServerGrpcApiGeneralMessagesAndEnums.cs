// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SubCustodyServer {

  /// <summary>Holder for reflection information generated from FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums.proto</summary>
  public static partial class FenixTestCaseBuilderServerGrpcApiGeneralMessagesAndEnumsReflection {

    #region Descriptor
    /// <summary>File descriptor for FenixTestCaseBuilderServer/fenixTestCaseBuilderServerGrpcApi/fenixTestCaseBuilderServerGrpcApi_GeneralMessagesAndEnums.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FenixTestCaseBuilderServerGrpcApiGeneralMessagesAndEnumsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CnxGZW5peFRlc3RDYXNlQnVpbGRlclNlcnZlci9mZW5peFRlc3RDYXNlQnVp",
            "bGRlclNlcnZlckdycGNBcGkvZmVuaXhUZXN0Q2FzZUJ1aWxkZXJTZXJ2ZXJH",
            "cnBjQXBpX0dlbmVyYWxNZXNzYWdlc0FuZEVudW1zLnByb3RvEiFmZW5peFRl",
            "c3RDYXNlQnVpbGRlclNlcnZlckdycGNBcGkiigEKDkVtcHR5UGFyYW1ldGVy",
            "EngKHFByb3RvRmlsZVZlcnNpb25Vc2VkQnlDbGllbnQYASABKA4yUi5mZW5p",
            "eFRlc3RDYXNlQnVpbGRlclNlcnZlckdycGNBcGkuQ3VycmVudEZlbml4VGVz",
            "dENhc2VCdWlsZGVyUHJvdG9GaWxlVmVyc2lvbkVudW0i9QEKD0Fja05hY2tS",
            "ZXNwb25zZRIPCgdBY2tOYWNrGAEgASgIEhAKCENvbW1lbnRzGAIgASgJEkUK",
            "CkVycm9yQ29kZXMYAyADKA4yMS5mZW5peFRlc3RDYXNlQnVpbGRlclNlcnZl",
            "ckdycGNBcGkuRXJyb3JDb2Rlc0VudW0SeAocUHJvdG9GaWxlVmVyc2lvblVz",
            "ZWRCeUNsaWVudBgEIAEoDjJSLmZlbml4VGVzdENhc2VCdWlsZGVyU2VydmVy",
            "R3JwY0FwaS5DdXJyZW50RmVuaXhUZXN0Q2FzZUJ1aWxkZXJQcm90b0ZpbGVW",
            "ZXJzaW9uRW51bSKlAQoZVXNlcklkZW50aWZpY2F0aW9uTWVzc2FnZRIOCgZV",
            "c2VySWQYASABKAkSeAocUHJvdG9GaWxlVmVyc2lvblVzZWRCeUNsaWVudBgC",
            "IAEoDjJSLmZlbml4VGVzdENhc2VCdWlsZGVyU2VydmVyR3JwY0FwaS5DdXJy",
            "ZW50RmVuaXhUZXN0Q2FzZUJ1aWxkZXJQcm90b0ZpbGVWZXJzaW9uRW51bSLG",
            "AQokVGVzdEluc3RydWN0aW9uQ29udGFpbmVyQ2hpbGRNZXNzYWdlEikKIVRl",
            "c3RJbnN0cnVjdGlvbkNvbnRhaW5lckNoaWxkVXVpZBgBIAEoCRJzCiFUZXN0",
            "SW5zdHJ1Y3Rpb25Db250YWluZXJDaGlsZFR5cGUYAiABKA4ySC5mZW5peFRl",
            "c3RDYXNlQnVpbGRlclNlcnZlckdycGNBcGkuVGVzdEluc3RydWN0aW9uQ29u",
            "dGFpbmVyQ2hpbGRUeXBlRW51bSqWAQovQ3VycmVudEZlbml4VGVzdENhc2VC",
            "dWlsZGVyUHJvdG9GaWxlVmVyc2lvbkVudW0SEwoLVkVSU0lPTl8wXzAQABoC",
            "CAESEwoLVkVSU0lPTl8wXzEQARoCCAESEwoLVkVSU0lPTl8wXzIQAhoCCAES",
            "EwoLVkVSU0lPTl8wXzMQAxoCCAESDwoLVkVSU0lPTl8wXzQQBCqJAQoORXJy",
            "b3JDb2Rlc0VudW0SBgoCT0sQABIYChRFUlJPUl9VTktOT1dOX0NBTExFUhAB",
            "EiIKHkVSUk9SX1dST05HX1BST1RPX0ZJTEVfVkVSU0lPThACEhUKEUVSUk9S",
            "X1VOU1BFQ0lGSUVEEAMSGgoWRVJST1JfREFUQUJBU0VfUFJPQkxFTRAEKlwK",
            "KVRlc3RJbnN0cnVjdGlvbkNvbnRhaW5lckV4ZWN1dGlvblR5cGVFbnVtEhkK",
            "FVBBUkFMTEVMTEVEX1BST0NFU1NFRBAAEhQKEFNFUklBTF9QUk9DRVNTRUQQ",
            "ASpaCiVUZXN0SW5zdHJ1Y3Rpb25Db250YWluZXJDaGlsZFR5cGVFbnVtEhMK",
            "D1RFU1RJTlNUUlVDVElPThAAEhwKGFRFU1RJTlNUUlVDVElPTkNPTlRBSU5F",
            "UhABKsADChxUZXN0Q2FzZU1vZGVsRWxlbWVudFR5cGVFbnVtEgsKB0IwX0JP",
            "TkQQABIbChdCMWZfQk9ORF9OT05FX1NXQVBQQUJMRRABEhsKF0IxbF9CT05E",
            "X05PTkVfU1dBUFBBQkxFEAISDAoIQjEwX0JPTkQQAxINCglCMTFmX0JPTkQQ",
            "BBINCglCMTFsX0JPTkQQBRIMCghCMTJfQk9ORBAGEg8KC0IxMG94b19CT05E",
            "EAcSDgoKQjEwb3hfQk9ORBAIEg4KCkIxMHhvX0JPTkQQCRIdChlCMTFmeF9C",
            "T05EX05PTkVfU1dBUFBBQkxFEAoSHQoZQjExbHhfQk9ORF9OT05FX1NXQVBQ",
            "QUJMRRALEhwKGEIxMnhfQk9ORF9OT05FX1NXQVBQQUJMRRAMEhYKElRJX1RF",
            "U1RJTlNUUlVDVElPThANEiYKIlRJeF9URVNUSU5TVFJVQ1RJT05fTk9ORV9S",
            "RU1PVkFCTEUQDhIgChxUSUNfVEVTVElOU1RSVUNUSU9OQ09OVEFJTkVSEA8S",
            "MAosVElDeF9URVNUSU5TVFJVQ1RJT05DT05UQUlORVJfTk9ORV9SRU1PVkFC",
            "TEUQECriAQooVGVzdENhc2VNb2RlbEVsZW1lbnRQcmVzZW50YXRpb25OYW1l",
            "RW51bRIHCgNCMF8QABIJCgVCMV8wMRABEgkKBUIxXzAyEAISCAoEQjEwXxAD",
            "EgkKBUIxMV8xEAQSCQoFQjExXzIQBRIICgRCMTJfEAYSCgoGQjEweF8xEAcS",
            "CgoGQjEweF8yEAgSCgoGQjEweF8zEAkSCgoGQjExeF8xEAoSCgoGQjExeF8y",
            "EAsSCQoFQjEyeF8QDBIHCgNUSV8QDRIICgRUSXhfEA4SCAoEVElDXxAPEgkK",
            "BVRJQ3hfEBAq4wEKF1Rlc3RDYXNlQ29tbWFuZFR5cGVFbnVtEhAKDE5FV19U",
            "RVNUQ0FTRRAAEhIKDlJFTU9WRV9FTEVNRU5UEAESJAogU1dBUF9PVVRfRUxF",
            "TUVOVF9GT1JfTkVXX0VMRU1FTlQQAhIQCgxDT1BZX0VMRU1FTlQQAxIsCihT",
            "V0FQX09VVF9FTEVNRU5UX0ZPUl9DT1BZX0JVRkZFUl9FTEVNRU5UEAQSDwoL",
            "Q1VUX0VMRU1FTlQQBRIrCidTV0FQX09VVF9FTEVNRU5UX0ZPUl9DVVRfQlVG",
            "RkVSX0VMRU1FTlQQBipnCiBUZXN0SW5zdHJ1Y3Rpb25BdHRyaWJ1dGVUeXBl",
            "RW51bRILCgdURVhUQk9YEAASDAoIQ09NQk9CT1gQARIRCg1GSUxFX1NFTEVD",
            "VE9SEAISFQoRRlVOQ1RJT05fU0VMRUNUT1IQA0IiWg0uL2dvX2dycGNfYXBp",
            "qgIQU3ViQ3VzdG9keVNlcnZlcmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum), typeof(global::SubCustodyServer.ErrorCodesEnum), typeof(global::SubCustodyServer.TestInstructionContainerExecutionTypeEnum), typeof(global::SubCustodyServer.TestInstructionContainerChildTypeEnum), typeof(global::SubCustodyServer.TestCaseModelElementTypeEnum), typeof(global::SubCustodyServer.TestCaseModelElementPresentationNameEnum), typeof(global::SubCustodyServer.TestCaseCommandTypeEnum), typeof(global::SubCustodyServer.TestInstructionAttributeTypeEnum), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SubCustodyServer.EmptyParameter), global::SubCustodyServer.EmptyParameter.Parser, new[]{ "ProtoFileVersionUsedByClient" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SubCustodyServer.AckNackResponse), global::SubCustodyServer.AckNackResponse.Parser, new[]{ "AckNack", "Comments", "ErrorCodes", "ProtoFileVersionUsedByClient" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SubCustodyServer.UserIdentificationMessage), global::SubCustodyServer.UserIdentificationMessage.Parser, new[]{ "UserId", "ProtoFileVersionUsedByClient" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SubCustodyServer.TestInstructionContainerChildMessage), global::SubCustodyServer.TestInstructionContainerChildMessage.Parser, new[]{ "TestInstructionContainerChildUuid", "TestInstructionContainerChildType" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Used to have client and server in sync with using the same proto file version
  /// </summary>
  public enum CurrentFenixTestCaseBuilderProtoFileVersionEnum {
    [pbr::OriginalName("VERSION_0_0")] Version00 = 0,
    [pbr::OriginalName("VERSION_0_1")] Version01 = 1,
    [pbr::OriginalName("VERSION_0_2")] Version02 = 2,
    [pbr::OriginalName("VERSION_0_3")] Version03 = 3,
    /// <summary>
    /// Current version
    /// </summary>
    [pbr::OriginalName("VERSION_0_4")] Version04 = 4,
  }

  /// <summary>
  /// Error codes - for now a test
  /// </summary>
  public enum ErrorCodesEnum {
    [pbr::OriginalName("OK")] Ok = 0,
    [pbr::OriginalName("ERROR_UNKNOWN_CALLER")] ErrorUnknownCaller = 1,
    [pbr::OriginalName("ERROR_WRONG_PROTO_FILE_VERSION")] ErrorWrongProtoFileVersion = 2,
    [pbr::OriginalName("ERROR_UNSPECIFIED")] ErrorUnspecified = 3,
    [pbr::OriginalName("ERROR_DATABASE_PROBLEM")] ErrorDatabaseProblem = 4,
  }

  /// <summary>
  /// How a TestInstructionContainer is processed
  /// </summary>
  public enum TestInstructionContainerExecutionTypeEnum {
    /// <summary>
    /// Children in container is parallelled processed
    /// </summary>
    [pbr::OriginalName("PARALLELLED_PROCESSED")] ParallelledProcessed = 0,
    /// <summary>
    /// Children in container is serial processed
    /// </summary>
    [pbr::OriginalName("SERIAL_PROCESSED")] SerialProcessed = 1,
  }

  /// <summary>
  /// TestInstructionContainer Child Type
  /// </summary>
  public enum TestInstructionContainerChildTypeEnum {
    /// <summary>
    /// Child os of type TestInstruction
    /// </summary>
    [pbr::OriginalName("TESTINSTRUCTION")] Testinstruction = 0,
    /// <summary>
    /// Child os of type TestInstructionContainer
    /// </summary>
    [pbr::OriginalName("TESTINSTRUCTIONCONTAINER")] Testinstructioncontainer = 1,
  }

  /// <summary>
  /// All TestCaseModel-elements
  /// </summary>
  public enum TestCaseModelElementTypeEnum {
    /// <summary>
    /// Bond with zero connection. This is the base for any TestCase: "B0"
    /// </summary>
    [pbr::OriginalName("B0_BOND")] B0Bond = 0,
    /// <summary>
    /// Bond with one connection. Use for starting a TestCase and is only found in pre-created TestInstructionContainers
    /// </summary>
    [pbr::OriginalName("B1f_BOND_NONE_SWAPPABLE")] B1FBondNoneSwappable = 1,
    /// <summary>
    /// Bond with one connection. Use for ending a TestCase and is only found in pre-created TestInstructionContainers
    /// </summary>
    [pbr::OriginalName("B1l_BOND_NONE_SWAPPABLE")] B1LBondNoneSwappable = 2,
    /// <summary>
    /// Bond with zero connections which appear as an element in a new TestInstructionContainer without any other elements
    /// </summary>
    [pbr::OriginalName("B10_BOND")] B10Bond = 3,
    /// <summary>
    /// Bond with one connection which appear as first element inside a TestInstructionContainer
    /// </summary>
    [pbr::OriginalName("B11f_BOND")] B11FBond = 4,
    /// <summary>
    /// Bond with one connection which appear as last element inside a TestInstructionContainer
    /// </summary>
    [pbr::OriginalName("B11l_BOND")] B11LBond = 5,
    /// <summary>
    /// Bond with two connections which connects TestInstructions or TestInstructionContainers
    /// </summary>
    [pbr::OriginalName("B12_BOND")] B12Bond = 6,
    /// <summary>
    ///Bond with zero connections. This Bond is used in Pre-created containers and is used when user swap TIC(B10*x*) into TIC(B11fx-n-B11lx).
    /// </summary>
    [pbr::OriginalName("B10oxo_BOND")] B10OxoBond = 7,
    /// <summary>
    /// Bond with zero connections. This Bond is used in Pre-created containers and is used when user swap TIC(B10*x) into TIC(B11fx-n-B11l).
    /// </summary>
    [pbr::OriginalName("B10ox_BOND")] B10OxBond = 8,
    /// <summary>
    /// Bond with zero connections. This Bond is used in Pre-created containers and is used when user swap TIC(B10x*) into TIC(B11f-n-B11lx).
    /// </summary>
    [pbr::OriginalName("B10xo_BOND")] B10XoBond = 9,
    /// <summary>
    /// Bond with one connection which appear as first element inside a TestInstructionContainer. This Bond is used in Pre-created containers and is used to stop a user to add new TestInstructions or TestInstructionsContainers before(first) structure.
    /// </summary>
    [pbr::OriginalName("B11fx_BOND_NONE_SWAPPABLE")] B11FxBondNoneSwappable = 10,
    /// <summary>
    /// Bond with one connection which appear as first element inside a TestInstructionContainer. This Bond is used in Pre-created containers and is used to stop a user to add new TestInstructions or TestInstructionsContainers after(last) structure.
    /// </summary>
    [pbr::OriginalName("B11lx_BOND_NONE_SWAPPABLE")] B11LxBondNoneSwappable = 11,
    /// <summary>
    /// Bond with two connections which connects TestInstructions or TestInstructionContainers. This Bond is used in Pre-created containers and is used to stop a user to add new TestInstructions or TestInstructionsContainers within a pre-created container.
    /// </summary>
    [pbr::OriginalName("B12x_BOND_NONE_SWAPPABLE")] B12XBondNoneSwappable = 12,
    /// <summary>
    /// TestInstruction
    /// </summary>
    [pbr::OriginalName("TI_TESTINSTRUCTION")] TiTestinstruction = 13,
    /// <summary>
    /// A standard TestInstruction which can not be removed or swapped out by the user
    /// </summary>
    [pbr::OriginalName("TIx_TESTINSTRUCTION_NONE_REMOVABLE")] TixTestinstructionNoneRemovable = 14,
    /// <summary>
    /// TestInstructionContainer(X), where X is any valid structure. Children in TestExecutionContainer is executed in serial mode
    /// </summary>
    [pbr::OriginalName("TIC_TESTINSTRUCTIONCONTAINER")] TicTestinstructioncontainer = 15,
    /// <summary>
    /// A standard TestInstructionContainer(X), where X is any valid structure, which can not be removed or swapped out by the user. Children in TestExecutionContainer is executed in serial mode
    /// </summary>
    [pbr::OriginalName("TICx_TESTINSTRUCTIONCONTAINER_NONE_REMOVABLE")] TicxTestinstructioncontainerNoneRemovable = 16,
  }

  /// <summary>
  /// Presentation Names for above TestCaseModel-elements. When presenting then name only the part to left of "_" should presented
  /// </summary>
  public enum TestCaseModelElementPresentationNameEnum {
    /// <summary>
    /// Presentation name for 'B0_BOND'. Only Present 'B0'
    /// </summary>
    [pbr::OriginalName("B0_")] B0 = 0,
    /// <summary>
    /// Presentation name for 'B1f_BOND_NONE_SWAPPABLE'. Only Present 'B1'
    /// </summary>
    [pbr::OriginalName("B1_01")] B101 = 1,
    /// <summary>
    /// Presentation name for 'B1l_BOND_NONE_SWAPPABLE'. Only Present 'B1'
    /// </summary>
    [pbr::OriginalName("B1_02")] B102 = 2,
    /// <summary>
    /// Presentation name for 'B10_BOND'. Only Present 'B10'
    /// </summary>
    [pbr::OriginalName("B10_")] B10 = 3,
    /// <summary>
    /// Presentation name for 'B11f_BOND'. Only Present 'B11'
    /// </summary>
    [pbr::OriginalName("B11_1")] B111 = 4,
    /// <summary>
    /// Presentation name for 'B11l_BOND'. Only Present 'B11'
    /// </summary>
    [pbr::OriginalName("B11_2")] B112 = 5,
    /// <summary>
    /// Presentation name for 'B12_BOND'. Only Present 'B12'
    /// </summary>
    [pbr::OriginalName("B12_")] B12 = 6,
    /// <summary>
    ///Presentation name for 'B10oxo_BOND'. Only Present 'B10x'
    /// </summary>
    [pbr::OriginalName("B10x_1")] B10X1 = 7,
    /// <summary>
    /// Presentation name for 'B10ox_BOND'. Only Present 'B10x'
    /// </summary>
    [pbr::OriginalName("B10x_2")] B10X2 = 8,
    /// <summary>
    /// Presentation name for 'B10xo_BOND'. Only Present 'B10x'
    /// </summary>
    [pbr::OriginalName("B10x_3")] B10X3 = 9,
    /// <summary>
    /// Presentation name for 'B11fx_BOND_NONE_SWAPPABLE'. Only Present 'B11x'
    /// </summary>
    [pbr::OriginalName("B11x_1")] B11X1 = 10,
    /// <summary>
    /// Presentation name for 'B11lx_BOND_NONE_SWAPPABLE'. Only Present 'B11x'
    /// </summary>
    [pbr::OriginalName("B11x_2")] B11X2 = 11,
    /// <summary>
    /// Presentation name for 'B12x_BOND_NONE_SWAPPABLE'. Only Present 'B12x'
    /// </summary>
    [pbr::OriginalName("B12x_")] B12X = 12,
    /// <summary>
    /// Presentation name for 'TI_TESTINSTRUCTION'. Only Present 'TI'
    /// </summary>
    [pbr::OriginalName("TI_")] Ti = 13,
    /// <summary>
    /// Presentation name for 'TIx_TESTINSTRUCTION_NONE_REMOVABLE'. Only Present 'TIx'
    /// </summary>
    [pbr::OriginalName("TIx_")] Tix = 14,
    /// <summary>
    /// Presentation name for 'TIC_TESTINSTRUCTIONCONTAINER'. Only Present 'TIC(...)'
    /// </summary>
    [pbr::OriginalName("TIC_")] Tic = 15,
    /// <summary>
    /// Presentation name for 'TICx_TESTINSTRUCTIONCONTAINER_NONE_REMOVABLE'. Only Present 'TICx(...)'
    /// </summary>
    [pbr::OriginalName("TICx_")] Ticx = 16,
  }

  /// <summary>
  /// All different commands that can be used to change  TestCase-Model
  /// </summary>
  public enum TestCaseCommandTypeEnum {
    /// <summary>
    ///NewTestCase(). Creates a new TestCase
    /// </summary>
    [pbr::OriginalName("NEW_TESTCASE")] NewTestcase = 0,
    /// <summary>
    /// RemoveElement(ElementUuidToBeRemoved). Remove an element from the TestCase
    /// </summary>
    [pbr::OriginalName("REMOVE_ELEMENT")] RemoveElement = 1,
    /// <summary>
    /// SwapOutElementForNewElement(ElementUuidTobeSwappedOut, NewElementUuidTobeSwappedIn). Swap in a new element instead of an existing
    /// </summary>
    [pbr::OriginalName("SWAP_OUT_ELEMENT_FOR_NEW_ELEMENT")] SwapOutElementForNewElement = 2,
    /// <summary>
    /// CopyElement(ElementUuid). Create a copy of an element and place it in the copy-buffer
    /// </summary>
    [pbr::OriginalName("COPY_ELEMENT")] CopyElement = 3,
    /// <summary>
    /// SwapOutElementForCopyBufferElement(ElementUuidTobeSwappedOut, CopyBufferElementUuidTobeSwappedIn). Swap in a copy of the element that exist in the copy buffer
    /// </summary>
    [pbr::OriginalName("SWAP_OUT_ELEMENT_FOR_COPY_BUFFER_ELEMENT")] SwapOutElementForCopyBufferElement = 4,
    /// <summary>
    /// CopyElement(ElementUuid). Cut out an element and place in the cut buffer
    /// </summary>
    [pbr::OriginalName("CUT_ELEMENT")] CutElement = 5,
    /// <summary>
    /// SwapOutElementForCutBufferElement(ElementUuidTobeSwappedOut, CutBufferElementUuidTobeSwappedIn). Swap in the element that exist in the cut buffer
    /// </summary>
    [pbr::OriginalName("SWAP_OUT_ELEMENT_FOR_CUT_BUFFER_ELEMENT")] SwapOutElementForCutBufferElement = 6,
  }

  /// <summary>
  /// The TestInstructionAttribute can have one of the following types: "TextBox", "ComboBox", "FileSelector", "FunctionSelector"
  /// </summary>
  public enum TestInstructionAttributeTypeEnum {
    /// <summary>
    /// Defines that TestInstructionAttribute of type "TextBox"
    /// </summary>
    [pbr::OriginalName("TEXTBOX")] Textbox = 0,
    /// <summary>
    /// Defines that TestInstructionAttriebute of type ComboBox
    /// </summary>
    [pbr::OriginalName("COMBOBOX")] Combobox = 1,
    /// <summary>
    /// Defines that TestInstructionAttribute of type FileSelector
    /// </summary>
    [pbr::OriginalName("FILE_SELECTOR")] FileSelector = 2,
    /// <summary>
    /// Defines that TestInstructionAttribute of type FunctionSelector
    /// </summary>
    [pbr::OriginalName("FUNCTION_SELECTOR")] FunctionSelector = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Parameter used for Empty inputs, only containing current proto-file version
  /// </summary>
  public sealed partial class EmptyParameter : pb::IMessage<EmptyParameter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EmptyParameter> _parser = new pb::MessageParser<EmptyParameter>(() => new EmptyParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmptyParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SubCustodyServer.FenixTestCaseBuilderServerGrpcApiGeneralMessagesAndEnumsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyParameter(EmptyParameter other) : this() {
      protoFileVersionUsedByClient_ = other.protoFileVersionUsedByClient_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyParameter Clone() {
      return new EmptyParameter(this);
    }

    /// <summary>Field number for the "ProtoFileVersionUsedByClient" field.</summary>
    public const int ProtoFileVersionUsedByClientFieldNumber = 1;
    private global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum protoFileVersionUsedByClient_ = global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00;
    /// <summary>
    /// The latest proto file version number to be used
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum ProtoFileVersionUsedByClient {
      get { return protoFileVersionUsedByClient_; }
      set {
        protoFileVersionUsedByClient_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmptyParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmptyParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProtoFileVersionUsedByClient != other.ProtoFileVersionUsedByClient) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProtoFileVersionUsedByClient != global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00) hash ^= ProtoFileVersionUsedByClient.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProtoFileVersionUsedByClient != global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ProtoFileVersionUsedByClient);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProtoFileVersionUsedByClient != global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ProtoFileVersionUsedByClient);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProtoFileVersionUsedByClient != global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ProtoFileVersionUsedByClient);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmptyParameter other) {
      if (other == null) {
        return;
      }
      if (other.ProtoFileVersionUsedByClient != global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00) {
        ProtoFileVersionUsedByClient = other.ProtoFileVersionUsedByClient;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProtoFileVersionUsedByClient = (global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ProtoFileVersionUsedByClient = (global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Ack/Nack- Response message with comment
  /// </summary>
  public sealed partial class AckNackResponse : pb::IMessage<AckNackResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AckNackResponse> _parser = new pb::MessageParser<AckNackResponse>(() => new AckNackResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckNackResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SubCustodyServer.FenixTestCaseBuilderServerGrpcApiGeneralMessagesAndEnumsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckNackResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckNackResponse(AckNackResponse other) : this() {
      ackNack_ = other.ackNack_;
      comments_ = other.comments_;
      errorCodes_ = other.errorCodes_.Clone();
      protoFileVersionUsedByClient_ = other.protoFileVersionUsedByClient_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckNackResponse Clone() {
      return new AckNackResponse(this);
    }

    /// <summary>Field number for the "AckNack" field.</summary>
    public const int AckNackFieldNumber = 1;
    private bool ackNack_;
    /// <summary>
    /// True=Ack, False=Nack
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AckNack {
      get { return ackNack_; }
      set {
        ackNack_ = value;
      }
    }

    /// <summary>Field number for the "Comments" field.</summary>
    public const int CommentsFieldNumber = 2;
    private string comments_ = "";
    /// <summary>
    ///Comments if needed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comments {
      get { return comments_; }
      set {
        comments_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ErrorCodes" field.</summary>
    public const int ErrorCodesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SubCustodyServer.ErrorCodesEnum> _repeated_errorCodes_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::SubCustodyServer.ErrorCodesEnum) x);
    private readonly pbc::RepeatedField<global::SubCustodyServer.ErrorCodesEnum> errorCodes_ = new pbc::RepeatedField<global::SubCustodyServer.ErrorCodesEnum>();
    /// <summary>
    /// List of Error codes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SubCustodyServer.ErrorCodesEnum> ErrorCodes {
      get { return errorCodes_; }
    }

    /// <summary>Field number for the "ProtoFileVersionUsedByClient" field.</summary>
    public const int ProtoFileVersionUsedByClientFieldNumber = 4;
    private global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum protoFileVersionUsedByClient_ = global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00;
    /// <summary>
    /// The latest proto file version number to be used
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum ProtoFileVersionUsedByClient {
      get { return protoFileVersionUsedByClient_; }
      set {
        protoFileVersionUsedByClient_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckNackResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckNackResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AckNack != other.AckNack) return false;
      if (Comments != other.Comments) return false;
      if(!errorCodes_.Equals(other.errorCodes_)) return false;
      if (ProtoFileVersionUsedByClient != other.ProtoFileVersionUsedByClient) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AckNack != false) hash ^= AckNack.GetHashCode();
      if (Comments.Length != 0) hash ^= Comments.GetHashCode();
      hash ^= errorCodes_.GetHashCode();
      if (ProtoFileVersionUsedByClient != global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00) hash ^= ProtoFileVersionUsedByClient.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AckNack != false) {
        output.WriteRawTag(8);
        output.WriteBool(AckNack);
      }
      if (Comments.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Comments);
      }
      errorCodes_.WriteTo(output, _repeated_errorCodes_codec);
      if (ProtoFileVersionUsedByClient != global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ProtoFileVersionUsedByClient);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AckNack != false) {
        output.WriteRawTag(8);
        output.WriteBool(AckNack);
      }
      if (Comments.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Comments);
      }
      errorCodes_.WriteTo(ref output, _repeated_errorCodes_codec);
      if (ProtoFileVersionUsedByClient != global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ProtoFileVersionUsedByClient);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AckNack != false) {
        size += 1 + 1;
      }
      if (Comments.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comments);
      }
      size += errorCodes_.CalculateSize(_repeated_errorCodes_codec);
      if (ProtoFileVersionUsedByClient != global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ProtoFileVersionUsedByClient);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckNackResponse other) {
      if (other == null) {
        return;
      }
      if (other.AckNack != false) {
        AckNack = other.AckNack;
      }
      if (other.Comments.Length != 0) {
        Comments = other.Comments;
      }
      errorCodes_.Add(other.errorCodes_);
      if (other.ProtoFileVersionUsedByClient != global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00) {
        ProtoFileVersionUsedByClient = other.ProtoFileVersionUsedByClient;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AckNack = input.ReadBool();
            break;
          }
          case 18: {
            Comments = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            errorCodes_.AddEntriesFrom(input, _repeated_errorCodes_codec);
            break;
          }
          case 32: {
            ProtoFileVersionUsedByClient = (global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AckNack = input.ReadBool();
            break;
          }
          case 18: {
            Comments = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            errorCodes_.AddEntriesFrom(ref input, _repeated_errorCodes_codec);
            break;
          }
          case 32: {
            ProtoFileVersionUsedByClient = (global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Message Holding information about who is the calling client
  /// </summary>
  public sealed partial class UserIdentificationMessage : pb::IMessage<UserIdentificationMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserIdentificationMessage> _parser = new pb::MessageParser<UserIdentificationMessage>(() => new UserIdentificationMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserIdentificationMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SubCustodyServer.FenixTestCaseBuilderServerGrpcApiGeneralMessagesAndEnumsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserIdentificationMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserIdentificationMessage(UserIdentificationMessage other) : this() {
      userId_ = other.userId_;
      protoFileVersionUsedByClient_ = other.protoFileVersionUsedByClient_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserIdentificationMessage Clone() {
      return new UserIdentificationMessage(this);
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    /// <summary>
    /// The Users Id, SEB S-id will be used for SEB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ProtoFileVersionUsedByClient" field.</summary>
    public const int ProtoFileVersionUsedByClientFieldNumber = 2;
    private global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum protoFileVersionUsedByClient_ = global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00;
    /// <summary>
    /// The latest proto file version number to be used
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum ProtoFileVersionUsedByClient {
      get { return protoFileVersionUsedByClient_; }
      set {
        protoFileVersionUsedByClient_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserIdentificationMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserIdentificationMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ProtoFileVersionUsedByClient != other.ProtoFileVersionUsedByClient) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (ProtoFileVersionUsedByClient != global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00) hash ^= ProtoFileVersionUsedByClient.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (ProtoFileVersionUsedByClient != global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ProtoFileVersionUsedByClient);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (ProtoFileVersionUsedByClient != global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ProtoFileVersionUsedByClient);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (ProtoFileVersionUsedByClient != global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ProtoFileVersionUsedByClient);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserIdentificationMessage other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.ProtoFileVersionUsedByClient != global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum.Version00) {
        ProtoFileVersionUsedByClient = other.ProtoFileVersionUsedByClient;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            ProtoFileVersionUsedByClient = (global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            ProtoFileVersionUsedByClient = (global::SubCustodyServer.CurrentFenixTestCaseBuilderProtoFileVersionEnum) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ****************************************************************************************************
  /// TestInstructionContainerChildrenMessage
  ///TODO *** IS NOT USED AT THE MOMENT ***
  /// *** IS NOT USED AT THE MOMENT ***
  ///Message holding one child and its type (TestInstruction or TestInstructionContainer)
  /// </summary>
  public sealed partial class TestInstructionContainerChildMessage : pb::IMessage<TestInstructionContainerChildMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TestInstructionContainerChildMessage> _parser = new pb::MessageParser<TestInstructionContainerChildMessage>(() => new TestInstructionContainerChildMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestInstructionContainerChildMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SubCustodyServer.FenixTestCaseBuilderServerGrpcApiGeneralMessagesAndEnumsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestInstructionContainerChildMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestInstructionContainerChildMessage(TestInstructionContainerChildMessage other) : this() {
      testInstructionContainerChildUuid_ = other.testInstructionContainerChildUuid_;
      testInstructionContainerChildType_ = other.testInstructionContainerChildType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestInstructionContainerChildMessage Clone() {
      return new TestInstructionContainerChildMessage(this);
    }

    /// <summary>Field number for the "TestInstructionContainerChildUuid" field.</summary>
    public const int TestInstructionContainerChildUuidFieldNumber = 1;
    private string testInstructionContainerChildUuid_ = "";
    /// <summary>
    /// The UUID for the child, can be from a TestInstruction or a TestInstructionContainer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestInstructionContainerChildUuid {
      get { return testInstructionContainerChildUuid_; }
      set {
        testInstructionContainerChildUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TestInstructionContainerChildType" field.</summary>
    public const int TestInstructionContainerChildTypeFieldNumber = 2;
    private global::SubCustodyServer.TestInstructionContainerChildTypeEnum testInstructionContainerChildType_ = global::SubCustodyServer.TestInstructionContainerChildTypeEnum.Testinstruction;
    /// <summary>
    /// The type of the child, 'TestInstruction' or 'TestInstructionContainer'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SubCustodyServer.TestInstructionContainerChildTypeEnum TestInstructionContainerChildType {
      get { return testInstructionContainerChildType_; }
      set {
        testInstructionContainerChildType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestInstructionContainerChildMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestInstructionContainerChildMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TestInstructionContainerChildUuid != other.TestInstructionContainerChildUuid) return false;
      if (TestInstructionContainerChildType != other.TestInstructionContainerChildType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TestInstructionContainerChildUuid.Length != 0) hash ^= TestInstructionContainerChildUuid.GetHashCode();
      if (TestInstructionContainerChildType != global::SubCustodyServer.TestInstructionContainerChildTypeEnum.Testinstruction) hash ^= TestInstructionContainerChildType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TestInstructionContainerChildUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TestInstructionContainerChildUuid);
      }
      if (TestInstructionContainerChildType != global::SubCustodyServer.TestInstructionContainerChildTypeEnum.Testinstruction) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TestInstructionContainerChildType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TestInstructionContainerChildUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TestInstructionContainerChildUuid);
      }
      if (TestInstructionContainerChildType != global::SubCustodyServer.TestInstructionContainerChildTypeEnum.Testinstruction) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TestInstructionContainerChildType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TestInstructionContainerChildUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestInstructionContainerChildUuid);
      }
      if (TestInstructionContainerChildType != global::SubCustodyServer.TestInstructionContainerChildTypeEnum.Testinstruction) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TestInstructionContainerChildType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestInstructionContainerChildMessage other) {
      if (other == null) {
        return;
      }
      if (other.TestInstructionContainerChildUuid.Length != 0) {
        TestInstructionContainerChildUuid = other.TestInstructionContainerChildUuid;
      }
      if (other.TestInstructionContainerChildType != global::SubCustodyServer.TestInstructionContainerChildTypeEnum.Testinstruction) {
        TestInstructionContainerChildType = other.TestInstructionContainerChildType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TestInstructionContainerChildUuid = input.ReadString();
            break;
          }
          case 16: {
            TestInstructionContainerChildType = (global::SubCustodyServer.TestInstructionContainerChildTypeEnum) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TestInstructionContainerChildUuid = input.ReadString();
            break;
          }
          case 16: {
            TestInstructionContainerChildType = (global::SubCustodyServer.TestInstructionContainerChildTypeEnum) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
