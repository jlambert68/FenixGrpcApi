// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: fenixTestDataSyncServerGrpcApi.proto

package go_grpc_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CurrentFenixTestDataProtoFileVersionEnum int32

const (
	// Deprecated: Do not use.
	CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_9 CurrentFenixTestDataProtoFileVersionEnum = 0
	// Deprecated: Do not use.
	CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_10 CurrentFenixTestDataProtoFileVersionEnum = 1
	// Deprecated: Do not use.
	CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_11 CurrentFenixTestDataProtoFileVersionEnum = 2
	// Deprecated: Do not use.
	CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_12 CurrentFenixTestDataProtoFileVersionEnum = 3
	// Deprecated: Do not use.
	CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_13 CurrentFenixTestDataProtoFileVersionEnum = 4
	CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_14 CurrentFenixTestDataProtoFileVersionEnum = 5 // Current version // Current version
)

// Enum value maps for CurrentFenixTestDataProtoFileVersionEnum.
var (
	CurrentFenixTestDataProtoFileVersionEnum_name = map[int32]string{
		0: "VERSION_0_9",
		1: "VERSION_0_10",
		2: "VERSION_0_11",
		3: "VERSION_0_12",
		4: "VERSION_0_13",
		5: "VERSION_0_14",
	}
	CurrentFenixTestDataProtoFileVersionEnum_value = map[string]int32{
		"VERSION_0_9":  0,
		"VERSION_0_10": 1,
		"VERSION_0_11": 2,
		"VERSION_0_12": 3,
		"VERSION_0_13": 4,
		"VERSION_0_14": 5,
	}
)

func (x CurrentFenixTestDataProtoFileVersionEnum) Enum() *CurrentFenixTestDataProtoFileVersionEnum {
	p := new(CurrentFenixTestDataProtoFileVersionEnum)
	*p = x
	return p
}

func (x CurrentFenixTestDataProtoFileVersionEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrentFenixTestDataProtoFileVersionEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_fenixTestDataSyncServerGrpcApi_proto_enumTypes[0].Descriptor()
}

func (CurrentFenixTestDataProtoFileVersionEnum) Type() protoreflect.EnumType {
	return &file_fenixTestDataSyncServerGrpcApi_proto_enumTypes[0]
}

func (x CurrentFenixTestDataProtoFileVersionEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrentFenixTestDataProtoFileVersionEnum.Descriptor instead.
func (CurrentFenixTestDataProtoFileVersionEnum) EnumDescriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{0}
}

// Error codes - for now a test
type ErrorCodesEnum int32

const (
	ErrorCodesEnum_OK                                                         ErrorCodesEnum = 0
	ErrorCodesEnum_ERROR_UNKNOWN_CALLER                                       ErrorCodesEnum = 1
	ErrorCodesEnum_ERROR_WRONG_PROTO_FILE_VERSION                             ErrorCodesEnum = 2
	ErrorCodesEnum_ERROR_ROWHASH_NOT_CORRECT_CALCULATED                       ErrorCodesEnum = 3
	ErrorCodesEnum_ERROR_MERKLEHASH_NOT_CORRECT_CALCULATED                    ErrorCodesEnum = 4
	ErrorCodesEnum_ERROR_HEADERLABELHASH_NOT_CORRECT_CALCULATED               ErrorCodesEnum = 5
	ErrorCodesEnum_ERROR_TEMPORARY_STOP_IN_PROCESSING                         ErrorCodesEnum = 6
	ErrorCodesEnum_ERROR_MERKLEPATHHASH_IS_NOT_CORRECT_CALCULATED             ErrorCodesEnum = 7
	ErrorCodesEnum_ERROR_UNSPECIFIED                                          ErrorCodesEnum = 8
	ErrorCodesEnum_ERROR_TESTDATASERVER_INTERNAL_STATE_NOT_MATCHING_GRPC_CALL ErrorCodesEnum = 9
)

// Enum value maps for ErrorCodesEnum.
var (
	ErrorCodesEnum_name = map[int32]string{
		0: "OK",
		1: "ERROR_UNKNOWN_CALLER",
		2: "ERROR_WRONG_PROTO_FILE_VERSION",
		3: "ERROR_ROWHASH_NOT_CORRECT_CALCULATED",
		4: "ERROR_MERKLEHASH_NOT_CORRECT_CALCULATED",
		5: "ERROR_HEADERLABELHASH_NOT_CORRECT_CALCULATED",
		6: "ERROR_TEMPORARY_STOP_IN_PROCESSING",
		7: "ERROR_MERKLEPATHHASH_IS_NOT_CORRECT_CALCULATED",
		8: "ERROR_UNSPECIFIED",
		9: "ERROR_TESTDATASERVER_INTERNAL_STATE_NOT_MATCHING_GRPC_CALL",
	}
	ErrorCodesEnum_value = map[string]int32{
		"OK":                                                         0,
		"ERROR_UNKNOWN_CALLER":                                       1,
		"ERROR_WRONG_PROTO_FILE_VERSION":                             2,
		"ERROR_ROWHASH_NOT_CORRECT_CALCULATED":                       3,
		"ERROR_MERKLEHASH_NOT_CORRECT_CALCULATED":                    4,
		"ERROR_HEADERLABELHASH_NOT_CORRECT_CALCULATED":               5,
		"ERROR_TEMPORARY_STOP_IN_PROCESSING":                         6,
		"ERROR_MERKLEPATHHASH_IS_NOT_CORRECT_CALCULATED":             7,
		"ERROR_UNSPECIFIED":                                          8,
		"ERROR_TESTDATASERVER_INTERNAL_STATE_NOT_MATCHING_GRPC_CALL": 9,
	}
)

func (x ErrorCodesEnum) Enum() *ErrorCodesEnum {
	p := new(ErrorCodesEnum)
	*p = x
	return p
}

func (x ErrorCodesEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCodesEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_fenixTestDataSyncServerGrpcApi_proto_enumTypes[1].Descriptor()
}

func (ErrorCodesEnum) Type() protoreflect.EnumType {
	return &file_fenixTestDataSyncServerGrpcApi_proto_enumTypes[1]
}

func (x ErrorCodesEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCodesEnum.Descriptor instead.
func (ErrorCodesEnum) EnumDescriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{1}
}

// How a TestData filter column can be selected
type HeaderSelectionTypeEnum int32

const (
	HeaderSelectionTypeEnum_HEADER_IS_SINGLE_SELECT HeaderSelectionTypeEnum = 0
	HeaderSelectionTypeEnum_HEADER_IS_MULTI_SELECT  HeaderSelectionTypeEnum = 1
)

// Enum value maps for HeaderSelectionTypeEnum.
var (
	HeaderSelectionTypeEnum_name = map[int32]string{
		0: "HEADER_IS_SINGLE_SELECT",
		1: "HEADER_IS_MULTI_SELECT",
	}
	HeaderSelectionTypeEnum_value = map[string]int32{
		"HEADER_IS_SINGLE_SELECT": 0,
		"HEADER_IS_MULTI_SELECT":  1,
	}
)

func (x HeaderSelectionTypeEnum) Enum() *HeaderSelectionTypeEnum {
	p := new(HeaderSelectionTypeEnum)
	*p = x
	return p
}

func (x HeaderSelectionTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeaderSelectionTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_fenixTestDataSyncServerGrpcApi_proto_enumTypes[2].Descriptor()
}

func (HeaderSelectionTypeEnum) Type() protoreflect.EnumType {
	return &file_fenixTestDataSyncServerGrpcApi_proto_enumTypes[2]
}

func (x HeaderSelectionTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeaderSelectionTypeEnum.Descriptor instead.
func (HeaderSelectionTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{2}
}

// Parameter used for Empty inputs, only containing current proto-file version
type EmptyParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoFileVersionUsedByClient CurrentFenixTestDataProtoFileVersionEnum `protobuf:"varint,1,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"`
}

func (x *EmptyParameter) Reset() {
	*x = EmptyParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyParameter) ProtoMessage() {}

func (x *EmptyParameter) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyParameter.ProtoReflect.Descriptor instead.
func (*EmptyParameter) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{0}
}

func (x *EmptyParameter) GetProtoFileVersionUsedByClient() CurrentFenixTestDataProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_9
}

// Ack/Nack- Response message with comment
type AckNackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckNack    bool             `protobuf:"varint,1,opt,name=AckNack,proto3" json:"AckNack,omitempty"`  // True=Ack, False=Nack
	Comments   string           `protobuf:"bytes,2,opt,name=Comments,proto3" json:"Comments,omitempty"` //Comments if needed
	ErrorCodes []ErrorCodesEnum `protobuf:"varint,3,rep,packed,name=ErrorCodes,proto3,enum=fenixTestDataSyncServerGrpcApi.ErrorCodesEnum" json:"ErrorCodes,omitempty"`
}

func (x *AckNackResponse) Reset() {
	*x = AckNackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckNackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckNackResponse) ProtoMessage() {}

func (x *AckNackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckNackResponse.ProtoReflect.Descriptor instead.
func (*AckNackResponse) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{1}
}

func (x *AckNackResponse) GetAckNack() bool {
	if x != nil {
		return x.AckNack
	}
	return false
}

func (x *AckNackResponse) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *AckNackResponse) GetErrorCodes() []ErrorCodesEnum {
	if x != nil {
		return x.ErrorCodes
	}
	return nil
}

// Message Holding information about the TestDataClient
type TestDataClientInformationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataClientUuid           string                                   `protobuf:"bytes,1,opt,name=TestDataClientUuid,proto3" json:"TestDataClientUuid,omitempty"`
	TestDomainUuid               string                                   `protobuf:"bytes,2,opt,name=TestDomainUuid,proto3" json:"TestDomainUuid,omitempty"`
	TestDomainName               string                                   `protobuf:"bytes,3,opt,name=TestDomainName,proto3" json:"TestDomainName,omitempty"`
	TestDataClientIpAddress      string                                   `protobuf:"bytes,4,opt,name=TestDataClientIpAddress,proto3" json:"TestDataClientIpAddress,omitempty"`
	TestDataClientPort           string                                   `protobuf:"bytes,5,opt,name=TestDataClientPort,proto3" json:"TestDataClientPort,omitempty"`
	ProtoFileVersionUsedByClient CurrentFenixTestDataProtoFileVersionEnum `protobuf:"varint,6,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"`
}

func (x *TestDataClientInformationMessage) Reset() {
	*x = TestDataClientInformationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataClientInformationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataClientInformationMessage) ProtoMessage() {}

func (x *TestDataClientInformationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataClientInformationMessage.ProtoReflect.Descriptor instead.
func (*TestDataClientInformationMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{2}
}

func (x *TestDataClientInformationMessage) GetTestDataClientUuid() string {
	if x != nil {
		return x.TestDataClientUuid
	}
	return ""
}

func (x *TestDataClientInformationMessage) GetTestDomainUuid() string {
	if x != nil {
		return x.TestDomainUuid
	}
	return ""
}

func (x *TestDataClientInformationMessage) GetTestDomainName() string {
	if x != nil {
		return x.TestDomainName
	}
	return ""
}

func (x *TestDataClientInformationMessage) GetTestDataClientIpAddress() string {
	if x != nil {
		return x.TestDataClientIpAddress
	}
	return ""
}

func (x *TestDataClientInformationMessage) GetTestDataClientPort() string {
	if x != nil {
		return x.TestDataClientPort
	}
	return ""
}

func (x *TestDataClientInformationMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestDataProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_9
}

// Message holding the top MerkleTree hash
type MerkleHashMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataClientUuid           string                                   `protobuf:"bytes,1,opt,name=TestDataClientUuid,proto3" json:"TestDataClientUuid,omitempty"`
	MerkleHash                   string                                   `protobuf:"bytes,2,opt,name=MerkleHash,proto3" json:"MerkleHash,omitempty"`
	MerkleFilter                 string                                   `protobuf:"bytes,3,opt,name=MerkleFilter,proto3" json:"MerkleFilter,omitempty"`
	MerkleFilterHash             string                                   `protobuf:"bytes,4,opt,name=MerkleFilterHash,proto3" json:"MerkleFilterHash,omitempty"`
	ProtoFileVersionUsedByClient CurrentFenixTestDataProtoFileVersionEnum `protobuf:"varint,5,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"`
}

func (x *MerkleHashMessage) Reset() {
	*x = MerkleHashMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleHashMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleHashMessage) ProtoMessage() {}

func (x *MerkleHashMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleHashMessage.ProtoReflect.Descriptor instead.
func (*MerkleHashMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{3}
}

func (x *MerkleHashMessage) GetTestDataClientUuid() string {
	if x != nil {
		return x.TestDataClientUuid
	}
	return ""
}

func (x *MerkleHashMessage) GetMerkleHash() string {
	if x != nil {
		return x.MerkleHash
	}
	return ""
}

func (x *MerkleHashMessage) GetMerkleFilter() string {
	if x != nil {
		return x.MerkleFilter
	}
	return ""
}

func (x *MerkleHashMessage) GetMerkleFilterHash() string {
	if x != nil {
		return x.MerkleFilterHash
	}
	return ""
}

func (x *MerkleHashMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestDataProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_9
}

// Message holding the complete MerkleTree for the hashes
type MerkleTreeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataClientUuid           string                                   `protobuf:"bytes,1,opt,name=TestDataClientUuid,proto3" json:"TestDataClientUuid,omitempty"`
	MerkleTreeNodes              []*MerkleTreeNodeMessage                 `protobuf:"bytes,2,rep,name=MerkleTreeNodes,proto3" json:"MerkleTreeNodes,omitempty"`
	ProtoFileVersionUsedByClient CurrentFenixTestDataProtoFileVersionEnum `protobuf:"varint,3,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"`
}

func (x *MerkleTreeMessage) Reset() {
	*x = MerkleTreeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleTreeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleTreeMessage) ProtoMessage() {}

func (x *MerkleTreeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleTreeMessage.ProtoReflect.Descriptor instead.
func (*MerkleTreeMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{4}
}

func (x *MerkleTreeMessage) GetTestDataClientUuid() string {
	if x != nil {
		return x.TestDataClientUuid
	}
	return ""
}

func (x *MerkleTreeMessage) GetMerkleTreeNodes() []*MerkleTreeNodeMessage {
	if x != nil {
		return x.MerkleTreeNodes
	}
	return nil
}

func (x *MerkleTreeMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestDataProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_9
}

// Message holding one node of the MerkleTree
type MerkleTreeNodeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeLevel     uint32 `protobuf:"varint,1,opt,name=NodeLevel,proto3" json:"NodeLevel,omitempty"`
	NodeName      string `protobuf:"bytes,2,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
	NodePath      string `protobuf:"bytes,3,opt,name=NodePath,proto3" json:"NodePath,omitempty"`
	NodeHash      string `protobuf:"bytes,4,opt,name=NodeHash,proto3" json:"NodeHash,omitempty"`
	NodeChildHash string `protobuf:"bytes,5,opt,name=NodeChildHash,proto3" json:"NodeChildHash,omitempty"`
}

func (x *MerkleTreeNodeMessage) Reset() {
	*x = MerkleTreeNodeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleTreeNodeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleTreeNodeMessage) ProtoMessage() {}

func (x *MerkleTreeNodeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleTreeNodeMessage.ProtoReflect.Descriptor instead.
func (*MerkleTreeNodeMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{5}
}

func (x *MerkleTreeNodeMessage) GetNodeLevel() uint32 {
	if x != nil {
		return x.NodeLevel
	}
	return 0
}

func (x *MerkleTreeNodeMessage) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *MerkleTreeNodeMessage) GetNodePath() string {
	if x != nil {
		return x.NodePath
	}
	return ""
}

func (x *MerkleTreeNodeMessage) GetNodeHash() string {
	if x != nil {
		return x.NodeHash
	}
	return ""
}

func (x *MerkleTreeNodeMessage) GetNodeChildHash() string {
	if x != nil {
		return x.NodeChildHash
	}
	return ""
}

// Message holding the hash for all header information
type TestDataHeaderHashMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataClientUuid           string                                   `protobuf:"bytes,1,opt,name=TestDataClientUuid,proto3" json:"TestDataClientUuid,omitempty"`
	TestDataHeaderItemsHash      string                                   `protobuf:"bytes,2,opt,name=TestDataHeaderItemsHash,proto3" json:"TestDataHeaderItemsHash,omitempty"`
	ProtoFileVersionUsedByClient CurrentFenixTestDataProtoFileVersionEnum `protobuf:"varint,3,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"`
}

func (x *TestDataHeaderHashMessage) Reset() {
	*x = TestDataHeaderHashMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataHeaderHashMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataHeaderHashMessage) ProtoMessage() {}

func (x *TestDataHeaderHashMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataHeaderHashMessage.ProtoReflect.Descriptor instead.
func (*TestDataHeaderHashMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{6}
}

func (x *TestDataHeaderHashMessage) GetTestDataClientUuid() string {
	if x != nil {
		return x.TestDataClientUuid
	}
	return ""
}

func (x *TestDataHeaderHashMessage) GetTestDataHeaderItemsHash() string {
	if x != nil {
		return x.TestDataHeaderItemsHash
	}
	return ""
}

func (x *TestDataHeaderHashMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestDataProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_9
}

// Message holding all headers for the testdata
type TestDataHeadersMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataClientUuid           string                                   `protobuf:"bytes,1,opt,name=TestDataClientUuid,proto3" json:"TestDataClientUuid,omitempty"`
	TestDataHeaderItemsHash      string                                   `protobuf:"bytes,2,opt,name=TestDataHeaderItemsHash,proto3" json:"TestDataHeaderItemsHash,omitempty"`
	HeaderLabelsHash             string                                   `protobuf:"bytes,3,opt,name=HeaderLabelsHash,proto3" json:"HeaderLabelsHash,omitempty"`
	TestDataHeaderItems          []*TestDataHeaderItemMessage             `protobuf:"bytes,4,rep,name=TestDataHeaderItems,proto3" json:"TestDataHeaderItems,omitempty"`
	ProtoFileVersionUsedByClient CurrentFenixTestDataProtoFileVersionEnum `protobuf:"varint,5,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"`
}

func (x *TestDataHeadersMessage) Reset() {
	*x = TestDataHeadersMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataHeadersMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataHeadersMessage) ProtoMessage() {}

func (x *TestDataHeadersMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataHeadersMessage.ProtoReflect.Descriptor instead.
func (*TestDataHeadersMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{7}
}

func (x *TestDataHeadersMessage) GetTestDataClientUuid() string {
	if x != nil {
		return x.TestDataClientUuid
	}
	return ""
}

func (x *TestDataHeadersMessage) GetTestDataHeaderItemsHash() string {
	if x != nil {
		return x.TestDataHeaderItemsHash
	}
	return ""
}

func (x *TestDataHeadersMessage) GetHeaderLabelsHash() string {
	if x != nil {
		return x.HeaderLabelsHash
	}
	return ""
}

func (x *TestDataHeadersMessage) GetTestDataHeaderItems() []*TestDataHeaderItemMessage {
	if x != nil {
		return x.TestDataHeaderItems
	}
	return nil
}

func (x *TestDataHeadersMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestDataProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_9
}

// Message holding one Header Item
type TestDataHeaderItemMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataHeaderItemMessageHash       string                  `protobuf:"bytes,1,opt,name=TestDataHeaderItemMessageHash,proto3" json:"TestDataHeaderItemMessageHash,omitempty"`
	HeaderLabel                         string                  `protobuf:"bytes,2,opt,name=HeaderLabel,proto3" json:"HeaderLabel,omitempty"`
	HeaderShouldBeUsedForTestDataFilter bool                    `protobuf:"varint,3,opt,name=HeaderShouldBeUsedForTestDataFilter,proto3" json:"HeaderShouldBeUsedForTestDataFilter,omitempty"`
	HeaderIsMandatoryInTestDataFilter   bool                    `protobuf:"varint,4,opt,name=HeaderIsMandatoryInTestDataFilter,proto3" json:"HeaderIsMandatoryInTestDataFilter,omitempty"`
	HeaderSelectionType                 HeaderSelectionTypeEnum `protobuf:"varint,5,opt,name=HeaderSelectionType,proto3,enum=fenixTestDataSyncServerGrpcApi.HeaderSelectionTypeEnum" json:"HeaderSelectionType,omitempty"`
	HeaderFilterValuesHash              string                  `protobuf:"bytes,6,opt,name=HeaderFilterValuesHash,proto3" json:"HeaderFilterValuesHash,omitempty"`
	HeaderFilterValues                  []*HeaderFilterValue    `protobuf:"bytes,7,rep,name=HeaderFilterValues,proto3" json:"HeaderFilterValues,omitempty"`
}

func (x *TestDataHeaderItemMessage) Reset() {
	*x = TestDataHeaderItemMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataHeaderItemMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataHeaderItemMessage) ProtoMessage() {}

func (x *TestDataHeaderItemMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataHeaderItemMessage.ProtoReflect.Descriptor instead.
func (*TestDataHeaderItemMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{8}
}

func (x *TestDataHeaderItemMessage) GetTestDataHeaderItemMessageHash() string {
	if x != nil {
		return x.TestDataHeaderItemMessageHash
	}
	return ""
}

func (x *TestDataHeaderItemMessage) GetHeaderLabel() string {
	if x != nil {
		return x.HeaderLabel
	}
	return ""
}

func (x *TestDataHeaderItemMessage) GetHeaderShouldBeUsedForTestDataFilter() bool {
	if x != nil {
		return x.HeaderShouldBeUsedForTestDataFilter
	}
	return false
}

func (x *TestDataHeaderItemMessage) GetHeaderIsMandatoryInTestDataFilter() bool {
	if x != nil {
		return x.HeaderIsMandatoryInTestDataFilter
	}
	return false
}

func (x *TestDataHeaderItemMessage) GetHeaderSelectionType() HeaderSelectionTypeEnum {
	if x != nil {
		return x.HeaderSelectionType
	}
	return HeaderSelectionTypeEnum_HEADER_IS_SINGLE_SELECT
}

func (x *TestDataHeaderItemMessage) GetHeaderFilterValuesHash() string {
	if x != nil {
		return x.HeaderFilterValuesHash
	}
	return ""
}

func (x *TestDataHeaderItemMessage) GetHeaderFilterValues() []*HeaderFilterValue {
	if x != nil {
		return x.HeaderFilterValues
	}
	return nil
}

// One Filter value
type HeaderFilterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeaderFilterValuesAsString string `protobuf:"bytes,1,opt,name=HeaderFilterValuesAsString,proto3" json:"HeaderFilterValuesAsString,omitempty"`
}

func (x *HeaderFilterValue) Reset() {
	*x = HeaderFilterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderFilterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderFilterValue) ProtoMessage() {}

func (x *HeaderFilterValue) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderFilterValue.ProtoReflect.Descriptor instead.
func (*HeaderFilterValue) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{9}
}

func (x *HeaderFilterValue) GetHeaderFilterValuesAsString() string {
	if x != nil {
		return x.HeaderFilterValuesAsString
	}
	return ""
}

// Message holding rows with TestData
type TestdataRowsMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataClientUuid           string                                   `protobuf:"bytes,1,opt,name=TestDataClientUuid,proto3" json:"TestDataClientUuid,omitempty"`
	ProtoFileVersionUsedByClient CurrentFenixTestDataProtoFileVersionEnum `protobuf:"varint,2,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"`
	TestDataHeaderLabels         *TestDataHeaderLabelsMessage             `protobuf:"bytes,3,opt,name=TestDataHeaderLabels,proto3" json:"TestDataHeaderLabels,omitempty"`
	TestDataRows                 []*TestDataRowMessage                    `protobuf:"bytes,4,rep,name=TestDataRows,proto3" json:"TestDataRows,omitempty"`
}

func (x *TestdataRowsMessages) Reset() {
	*x = TestdataRowsMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestdataRowsMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestdataRowsMessages) ProtoMessage() {}

func (x *TestdataRowsMessages) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestdataRowsMessages.ProtoReflect.Descriptor instead.
func (*TestdataRowsMessages) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{10}
}

func (x *TestdataRowsMessages) GetTestDataClientUuid() string {
	if x != nil {
		return x.TestDataClientUuid
	}
	return ""
}

func (x *TestdataRowsMessages) GetProtoFileVersionUsedByClient() CurrentFenixTestDataProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_9
}

func (x *TestdataRowsMessages) GetTestDataHeaderLabels() *TestDataHeaderLabelsMessage {
	if x != nil {
		return x.TestDataHeaderLabels
	}
	return nil
}

func (x *TestdataRowsMessages) GetTestDataRows() []*TestDataRowMessage {
	if x != nil {
		return x.TestDataRows
	}
	return nil
}

// Message holding data labels for column data
type TestDataHeaderLabelsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeaderLabelsHash         string                            `protobuf:"bytes,1,opt,name=HeaderLabelsHash,proto3" json:"HeaderLabelsHash,omitempty"`
	TestDataItemHeaderLabels []*TestDataItemHeaderLabelMessage `protobuf:"bytes,2,rep,name=TestDataItemHeaderLabels,proto3" json:"TestDataItemHeaderLabels,omitempty"`
}

func (x *TestDataHeaderLabelsMessage) Reset() {
	*x = TestDataHeaderLabelsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataHeaderLabelsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataHeaderLabelsMessage) ProtoMessage() {}

func (x *TestDataHeaderLabelsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataHeaderLabelsMessage.ProtoReflect.Descriptor instead.
func (*TestDataHeaderLabelsMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{11}
}

func (x *TestDataHeaderLabelsMessage) GetHeaderLabelsHash() string {
	if x != nil {
		return x.HeaderLabelsHash
	}
	return ""
}

func (x *TestDataHeaderLabelsMessage) GetTestDataItemHeaderLabels() []*TestDataItemHeaderLabelMessage {
	if x != nil {
		return x.TestDataItemHeaderLabels
	}
	return nil
}

// Message Holding one TestDataItemHeaderLabel
type TestDataItemHeaderLabelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataItemHeaderLabel string `protobuf:"bytes,1,opt,name=TestDataItemHeaderLabel,proto3" json:"TestDataItemHeaderLabel,omitempty"`
}

func (x *TestDataItemHeaderLabelMessage) Reset() {
	*x = TestDataItemHeaderLabelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataItemHeaderLabelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataItemHeaderLabelMessage) ProtoMessage() {}

func (x *TestDataItemHeaderLabelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataItemHeaderLabelMessage.ProtoReflect.Descriptor instead.
func (*TestDataItemHeaderLabelMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{12}
}

func (x *TestDataItemHeaderLabelMessage) GetTestDataItemHeaderLabel() string {
	if x != nil {
		return x.TestDataItemHeaderLabel
	}
	return ""
}

// Message Holding one TestData row
type TestDataRowMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowHash       string                 `protobuf:"bytes,1,opt,name=RowHash,proto3" json:"RowHash,omitempty"`
	LeafNodeName  string                 `protobuf:"bytes,2,opt,name=LeafNodeName,proto3" json:"LeafNodeName,omitempty"`
	LeafNodePath  string                 `protobuf:"bytes,3,opt,name=LeafNodePath,proto3" json:"LeafNodePath,omitempty"`
	TestDataItems []*TestDataItemMessage `protobuf:"bytes,4,rep,name=TestDataItems,proto3" json:"TestDataItems,omitempty"`
}

func (x *TestDataRowMessage) Reset() {
	*x = TestDataRowMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataRowMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataRowMessage) ProtoMessage() {}

func (x *TestDataRowMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataRowMessage.ProtoReflect.Descriptor instead.
func (*TestDataRowMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{13}
}

func (x *TestDataRowMessage) GetRowHash() string {
	if x != nil {
		return x.RowHash
	}
	return ""
}

func (x *TestDataRowMessage) GetLeafNodeName() string {
	if x != nil {
		return x.LeafNodeName
	}
	return ""
}

func (x *TestDataRowMessage) GetLeafNodePath() string {
	if x != nil {
		return x.LeafNodePath
	}
	return ""
}

func (x *TestDataRowMessage) GetTestDataItems() []*TestDataItemMessage {
	if x != nil {
		return x.TestDataItems
	}
	return nil
}

// Message holding one TestData item
type TestDataItemMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataItemValueAsString string `protobuf:"bytes,1,opt,name=TestDataItemValueAsString,proto3" json:"TestDataItemValueAsString,omitempty"`
}

func (x *TestDataItemMessage) Reset() {
	*x = TestDataItemMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataItemMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataItemMessage) ProtoMessage() {}

func (x *TestDataItemMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataItemMessage.ProtoReflect.Descriptor instead.
func (*TestDataItemMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP(), []int{14}
}

func (x *TestDataItemMessage) GetTestDataItemValueAsString() string {
	if x != nil {
		return x.TestDataItemValueAsString
	}
	return ""
}

var File_fenixTestDataSyncServerGrpcApi_proto protoreflect.FileDescriptor

var file_fenixTestDataSyncServerGrpcApi_proto_rawDesc = []byte{
	0x0a, 0x24, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x8c, 0x01, 0x0a, 0x1c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x48, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64,
	0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x6b,
	0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41,
	0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x22, 0x9b, 0x03, 0x0a, 0x20, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x8c, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x22, 0xc2, 0x02, 0x0a, 0x11, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x8c, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42,
	0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e,
	0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xb3, 0x02, 0x0a, 0x11, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x5f, 0x0a, 0x0f, 0x4d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x8c, 0x01, 0x0a,
	0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x15,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x48, 0x61, 0x73, 0x68, 0x22, 0x94, 0x02,
	0x0a, 0x19, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x48, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x8c, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x22, 0xaa, 0x03, 0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x38, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x6b, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x13, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x22, 0xa9, 0x04, 0x0a, 0x19, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x44, 0x0a, 0x1d, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x50, 0x0a, 0x23, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x42, 0x65, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x42, 0x65, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x21, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x73, 0x4d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x13, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x61, 0x0a, 0x12, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x53, 0x0a,
	0x11, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x22, 0x9e, 0x03, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x6f, 0x77, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x8c, 0x01, 0x0a, 0x1c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x48, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x6f, 0x0a, 0x14, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x6f, 0x77, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x7a, 0x0a, 0x18, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x18, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x5a, 0x0a, 0x1e, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a,
	0x17, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xd1, 0x01, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x52, 0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x66,
	0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4c, 0x65, 0x61, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x4c, 0x65, 0x61, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x4c, 0x65, 0x61, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x59, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x53, 0x0a, 0x13, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x2a, 0xa9, 0x01, 0x0a, 0x28, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x13, 0x0a,
	0x0b, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x39, 0x10, 0x00, 0x1a, 0x02,
	0x08, 0x01, 0x12, 0x14, 0x0a, 0x0c, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f,
	0x31, 0x30, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x14, 0x0a, 0x0c, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x31, 0x31, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x14,
	0x0a, 0x0c, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x31, 0x32, 0x10, 0x03,
	0x1a, 0x02, 0x08, 0x01, 0x12, 0x14, 0x0a, 0x0c, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x30, 0x5f, 0x31, 0x33, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x31, 0x34, 0x10, 0x05, 0x2a, 0x92, 0x03, 0x0a,
	0x0e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52,
	0x4f, 0x57, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x2b, 0x0a, 0x27, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x45, 0x52, 0x4b, 0x4c, 0x45, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x26,
	0x0a, 0x22, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4d, 0x45, 0x52, 0x4b, 0x4c, 0x45, 0x50, 0x41, 0x54, 0x48, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x49,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41,
	0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x08, 0x12, 0x3e, 0x0a, 0x3a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x44,
	0x41, 0x54, 0x41, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10,
	0x09, 0x2a, 0x52, 0x0a, 0x17, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x17,
	0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45,
	0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x53, 0x45, 0x4c,
	0x45, 0x43, 0x54, 0x10, 0x01, 0x32, 0x98, 0x07, 0x0a, 0x19, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x0b, 0x41, 0x72, 0x65, 0x59, 0x6f, 0x75, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x12, 0x2e, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x1a, 0x2f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x40, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x2f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x31, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2f, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a,
	0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12,
	0x31, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69,
	0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x2f, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x39, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70,
	0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x48, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2f, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b,
	0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80,
	0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x36, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2f,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7d, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x34, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x6f, 0x77, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x2f, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b,
	0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70,
	0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fenixTestDataSyncServerGrpcApi_proto_rawDescOnce sync.Once
	file_fenixTestDataSyncServerGrpcApi_proto_rawDescData = file_fenixTestDataSyncServerGrpcApi_proto_rawDesc
)

func file_fenixTestDataSyncServerGrpcApi_proto_rawDescGZIP() []byte {
	file_fenixTestDataSyncServerGrpcApi_proto_rawDescOnce.Do(func() {
		file_fenixTestDataSyncServerGrpcApi_proto_rawDescData = protoimpl.X.CompressGZIP(file_fenixTestDataSyncServerGrpcApi_proto_rawDescData)
	})
	return file_fenixTestDataSyncServerGrpcApi_proto_rawDescData
}

var file_fenixTestDataSyncServerGrpcApi_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_fenixTestDataSyncServerGrpcApi_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_fenixTestDataSyncServerGrpcApi_proto_goTypes = []interface{}{
	(CurrentFenixTestDataProtoFileVersionEnum)(0), // 0: fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum
	(ErrorCodesEnum)(0),                           // 1: fenixTestDataSyncServerGrpcApi.ErrorCodesEnum
	(HeaderSelectionTypeEnum)(0),                  // 2: fenixTestDataSyncServerGrpcApi.HeaderSelectionTypeEnum
	(*EmptyParameter)(nil),                        // 3: fenixTestDataSyncServerGrpcApi.EmptyParameter
	(*AckNackResponse)(nil),                       // 4: fenixTestDataSyncServerGrpcApi.AckNackResponse
	(*TestDataClientInformationMessage)(nil),      // 5: fenixTestDataSyncServerGrpcApi.TestDataClientInformationMessage
	(*MerkleHashMessage)(nil),                     // 6: fenixTestDataSyncServerGrpcApi.MerkleHashMessage
	(*MerkleTreeMessage)(nil),                     // 7: fenixTestDataSyncServerGrpcApi.MerkleTreeMessage
	(*MerkleTreeNodeMessage)(nil),                 // 8: fenixTestDataSyncServerGrpcApi.MerkleTreeNodeMessage
	(*TestDataHeaderHashMessage)(nil),             // 9: fenixTestDataSyncServerGrpcApi.TestDataHeaderHashMessage
	(*TestDataHeadersMessage)(nil),                // 10: fenixTestDataSyncServerGrpcApi.TestDataHeadersMessage
	(*TestDataHeaderItemMessage)(nil),             // 11: fenixTestDataSyncServerGrpcApi.TestDataHeaderItemMessage
	(*HeaderFilterValue)(nil),                     // 12: fenixTestDataSyncServerGrpcApi.HeaderFilterValue
	(*TestdataRowsMessages)(nil),                  // 13: fenixTestDataSyncServerGrpcApi.TestdataRowsMessages
	(*TestDataHeaderLabelsMessage)(nil),           // 14: fenixTestDataSyncServerGrpcApi.TestDataHeaderLabelsMessage
	(*TestDataItemHeaderLabelMessage)(nil),        // 15: fenixTestDataSyncServerGrpcApi.TestDataItemHeaderLabelMessage
	(*TestDataRowMessage)(nil),                    // 16: fenixTestDataSyncServerGrpcApi.TestDataRowMessage
	(*TestDataItemMessage)(nil),                   // 17: fenixTestDataSyncServerGrpcApi.TestDataItemMessage
}
var file_fenixTestDataSyncServerGrpcApi_proto_depIdxs = []int32{
	0,  // 0: fenixTestDataSyncServerGrpcApi.EmptyParameter.ProtoFileVersionUsedByClient:type_name -> fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum
	1,  // 1: fenixTestDataSyncServerGrpcApi.AckNackResponse.ErrorCodes:type_name -> fenixTestDataSyncServerGrpcApi.ErrorCodesEnum
	0,  // 2: fenixTestDataSyncServerGrpcApi.TestDataClientInformationMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum
	0,  // 3: fenixTestDataSyncServerGrpcApi.MerkleHashMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum
	8,  // 4: fenixTestDataSyncServerGrpcApi.MerkleTreeMessage.MerkleTreeNodes:type_name -> fenixTestDataSyncServerGrpcApi.MerkleTreeNodeMessage
	0,  // 5: fenixTestDataSyncServerGrpcApi.MerkleTreeMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum
	0,  // 6: fenixTestDataSyncServerGrpcApi.TestDataHeaderHashMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum
	11, // 7: fenixTestDataSyncServerGrpcApi.TestDataHeadersMessage.TestDataHeaderItems:type_name -> fenixTestDataSyncServerGrpcApi.TestDataHeaderItemMessage
	0,  // 8: fenixTestDataSyncServerGrpcApi.TestDataHeadersMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum
	2,  // 9: fenixTestDataSyncServerGrpcApi.TestDataHeaderItemMessage.HeaderSelectionType:type_name -> fenixTestDataSyncServerGrpcApi.HeaderSelectionTypeEnum
	12, // 10: fenixTestDataSyncServerGrpcApi.TestDataHeaderItemMessage.HeaderFilterValues:type_name -> fenixTestDataSyncServerGrpcApi.HeaderFilterValue
	0,  // 11: fenixTestDataSyncServerGrpcApi.TestdataRowsMessages.ProtoFileVersionUsedByClient:type_name -> fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum
	14, // 12: fenixTestDataSyncServerGrpcApi.TestdataRowsMessages.TestDataHeaderLabels:type_name -> fenixTestDataSyncServerGrpcApi.TestDataHeaderLabelsMessage
	16, // 13: fenixTestDataSyncServerGrpcApi.TestdataRowsMessages.TestDataRows:type_name -> fenixTestDataSyncServerGrpcApi.TestDataRowMessage
	15, // 14: fenixTestDataSyncServerGrpcApi.TestDataHeaderLabelsMessage.TestDataItemHeaderLabels:type_name -> fenixTestDataSyncServerGrpcApi.TestDataItemHeaderLabelMessage
	17, // 15: fenixTestDataSyncServerGrpcApi.TestDataRowMessage.TestDataItems:type_name -> fenixTestDataSyncServerGrpcApi.TestDataItemMessage
	3,  // 16: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.AreYouAlive:input_type -> fenixTestDataSyncServerGrpcApi.EmptyParameter
	5,  // 17: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.RegisterTestDataClient:input_type -> fenixTestDataSyncServerGrpcApi.TestDataClientInformationMessage
	6,  // 18: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendMerkleHash:input_type -> fenixTestDataSyncServerGrpcApi.MerkleHashMessage
	7,  // 19: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendMerkleTree:input_type -> fenixTestDataSyncServerGrpcApi.MerkleTreeMessage
	9,  // 20: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendTestDataHeaderHash:input_type -> fenixTestDataSyncServerGrpcApi.TestDataHeaderHashMessage
	10, // 21: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendTestDataHeaders:input_type -> fenixTestDataSyncServerGrpcApi.TestDataHeadersMessage
	13, // 22: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendTestDataRows:input_type -> fenixTestDataSyncServerGrpcApi.TestdataRowsMessages
	4,  // 23: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.AreYouAlive:output_type -> fenixTestDataSyncServerGrpcApi.AckNackResponse
	4,  // 24: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.RegisterTestDataClient:output_type -> fenixTestDataSyncServerGrpcApi.AckNackResponse
	4,  // 25: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendMerkleHash:output_type -> fenixTestDataSyncServerGrpcApi.AckNackResponse
	4,  // 26: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendMerkleTree:output_type -> fenixTestDataSyncServerGrpcApi.AckNackResponse
	4,  // 27: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendTestDataHeaderHash:output_type -> fenixTestDataSyncServerGrpcApi.AckNackResponse
	4,  // 28: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendTestDataHeaders:output_type -> fenixTestDataSyncServerGrpcApi.AckNackResponse
	4,  // 29: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcServices.SendTestDataRows:output_type -> fenixTestDataSyncServerGrpcApi.AckNackResponse
	23, // [23:30] is the sub-list for method output_type
	16, // [16:23] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_fenixTestDataSyncServerGrpcApi_proto_init() }
func file_fenixTestDataSyncServerGrpcApi_proto_init() {
	if File_fenixTestDataSyncServerGrpcApi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckNackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataClientInformationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleHashMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleTreeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleTreeNodeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataHeaderHashMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataHeadersMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataHeaderItemMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderFilterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestdataRowsMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataHeaderLabelsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataItemHeaderLabelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataRowMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerGrpcApi_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDataItemMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fenixTestDataSyncServerGrpcApi_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fenixTestDataSyncServerGrpcApi_proto_goTypes,
		DependencyIndexes: file_fenixTestDataSyncServerGrpcApi_proto_depIdxs,
		EnumInfos:         file_fenixTestDataSyncServerGrpcApi_proto_enumTypes,
		MessageInfos:      file_fenixTestDataSyncServerGrpcApi_proto_msgTypes,
	}.Build()
	File_fenixTestDataSyncServerGrpcApi_proto = out.File
	file_fenixTestDataSyncServerGrpcApi_proto_rawDesc = nil
	file_fenixTestDataSyncServerGrpcApi_proto_goTypes = nil
	file_fenixTestDataSyncServerGrpcApi_proto_depIdxs = nil
}
