syntax = "proto3";
package fenixTestDataSyncServerGrpcApi;
option go_package ="./go_grpc_api";


// ****************************************************************************************************
// General messages and Enumerations

// Used to have client and server in sync with using the same proto file version
// Minor changes is backwards compatible with previous version
// Major changes changes needs to be the same for server and client
enum CurrentFenixTestDataProtoFileVersionEnum {
    VERSION_0_9 = 0 [deprecated = true];
    VERSION_0_10 = 1; // Current version
}

// Error codes - for now a test
enum ErrorCodesEnum {
    OK = 0;
    ERROR_UNKNOWN_CALLER = 1;
    ERROR_WRONG_PROTO_FILE_VERSION = 2;
    ERROR_ROWHASH_NOT_CORRECT_CALCULATED = 3;
    ERROR_MERKLEHASH_NOT_CORRECT_CALCULATED = 4;
    ERROR_HEADERLABELHASH_NOT_CORRECT_CALCULATED = 5;

}

// Parameter used for Empty inputs, only containing current proto-file version
message EmptyParameter {
    CurrentFenixTestDataProtoFileVersionEnum ProtoFileVersionUsedByClient = 1;
}

// Ack/Nack- Response message with comment
message AckNackResponse {
    bool AckNack = 1; // True=Ack, False=Nack
    string Comments = 2; //Comments if needed
    repeated ErrorCodesEnum ErrorCodes = 3;
}


// ****************************************************************************************************
// Fenix Testdata sync server service definition.

service FenixTestDataGrpcServices {

    //Fenix client can check if Fenix Testdata sync server is alive with this service
    rpc AreYouAlive (EmptyParameter) returns (AckNackResponse) {
    }

    // Fenix client can register itself with the Fenix Testdata sync server
    rpc RegisterTestDataClient(TestDataClientInformationMessage) returns (AckNackResponse) {
    }

    // Fenix client can send TestData MerkleHash to Fenix Testdata sync server with this service
    rpc SendMerkleHash (MerkleHashMessage) returns (AckNackResponse) {
    }

    // Fenix client can send TestData MerkleTree to Fenix Testdata sync server with this service
    rpc SendMerkleTree (MerkleTreeMessage) returns (AckNackResponse) {
    }

    // Fenix client can send TestDataHeaderHash to Fenix Testdata sync server with this service
    rpc SendTestDataHeaderHash (TestDataHeaderHashMessage) returns (AckNackResponse) {
    }

    // Fenix client can send TestDataHeaders to Fenix Testdata sync server with this service
    rpc SendTestDataHeaders (TestDataHeadersMessage) returns (AckNackResponse) {
    }    // Fenix client can send TestDataHeaders to Fenix Testdata sync server with this service

    // Fenix client can send TestData rows to Fenix Testdata sync server with this service
    rpc SendTestDataRows (TestdataRowsMessages) returns (AckNackResponse) {
    }

}

// ****************************************************************************************************
// Client Information

// Message Holding information about the TestDataClient
message TestDataClientInformationMessage {
    string TestDataClientUuid = 1;
    string TestDomainUuid = 2;
    string TestDomainName = 3;
    string TestDataClientIpAddress = 4;
    string TestDataClientPort = 5;
    CurrentFenixTestDataProtoFileVersionEnum ProtoFileVersionUsedByClient = 6;
}

// ****************************************************************************************************
// MerkleHash

// Message holding the top MerkleTree hash
message MerkleHashMessage {
    string TestDataClientUuid = 1;
    string MerkleHash = 2;
    string MerkleFilter = 3;
    CurrentFenixTestDataProtoFileVersionEnum ProtoFileVersionUsedByClient = 4;

}
// ****************************************************************************************************
// MerkleTree

// Message holding the complete MerkleTree for the hashes
message MerkleTreeMessage {
    string TestDataClientUuid = 1;
    repeated MerkleTreeNodeMessage MerkleTreeNodes = 2;
    CurrentFenixTestDataProtoFileVersionEnum ProtoFileVersionUsedByClient = 3;
}

// Message holding one node of the MerkleTree
message MerkleTreeNodeMessage {
    uint32 NodeLevel = 1;
    string NodeName = 2;
    string NodePath = 3;
    string NodeHash = 4;
    string NodeChildHash = 5;
}

// ****************************************************************************************************
// TestDataHeaders

// Message holding the hash for all header information
message TestDataHeaderHashMessage {
    string TestDataClientUuid = 1;
    string TestDataHeaderItemsHash = 2;
    CurrentFenixTestDataProtoFileVersionEnum ProtoFileVersionUsedByClient = 3;
}

// Message holding all headers for the testdata
message TestDataHeadersMessage {
    string TestDataClientUuid = 1;
    string TestDataHeaderItemsHash = 2;
    repeated TestDataHeaderItemMessage TestDataHeaderItems = 3;
    CurrentFenixTestDataProtoFileVersionEnum ProtoFileVersionUsedByClient = 4;
}

// Message holding one Header Item
message TestDataHeaderItemMessage {
    string TestDataHeaderItemMessageHash = 1;
    string HeaderLabel = 2;
    bool HeaderShouldBeUsedForTestDataFilter = 3;
    bool HeaderIsMandatoryInTestDataFilter = 4;
    HeaderSelectionTypeEnum HeaderSelectionType = 5;
   repeated HeaderFilterValue HeaderFilterValues = 6;

}

// How a TestData filter column can be selected
enum HeaderSelectionTypeEnum {
    HEADER_IS_SINGLE_SELECT = 0;
    HEADER_IS_MULTI_SELECT = 1;
}

// One Filter value
message HeaderFilterValue {
    string HeaderFilterValuesAsString = 1;
}



// ****************************************************************************************************
// TestData

// Message holding rows with TestData
message TestdataRowsMessages {
    string TestDataClientUuid = 1;
    CurrentFenixTestDataProtoFileVersionEnum ProtoFileVersionUsedByClient = 2;
    TestDataHeaderLabelsMessage TestDataHeaderLabels = 3;
    repeated TestDataRowMessage TestDataRows = 4;

}

// Message holding data labels for column data
message TestDataHeaderLabelsMessage {
    string HeaderLabelsHash = 1;
    repeated TestDataItemHeaderLabelMessage TestDataItemHeaderLabels = 2;
}

// Message Holding one TestDataItemHeaderLabel
message TestDataItemHeaderLabelMessage {
    string TestDataItemHeaderLabel = 1;
}

// Message Holding one TestData row
message TestDataRowMessage {
    string RowHash = 1;
    repeated TestDataItemMessage TestDataItems = 2;
}

// Message holding one TestData item
message TestDataItemMessage {
    string TestDataItemValueAsString = 1;
}




