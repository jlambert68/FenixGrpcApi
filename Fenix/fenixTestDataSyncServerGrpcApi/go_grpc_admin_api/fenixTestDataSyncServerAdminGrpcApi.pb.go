// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: fenixTestDataSyncServerAdminGrpcApi.proto

package go_grpc_admin_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Used to have client and server in sync with using the same proto file version
type CurrentFenixTestDataProtoFileVersionEnum int32

const (
	// Deprecated: Do not use.
	CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_9  CurrentFenixTestDataProtoFileVersionEnum = 0
	CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_10 CurrentFenixTestDataProtoFileVersionEnum = 1 // Current version
)

// Enum value maps for CurrentFenixTestDataProtoFileVersionEnum.
var (
	CurrentFenixTestDataProtoFileVersionEnum_name = map[int32]string{
		0: "VERSION_0_9",
		1: "VERSION_0_10",
	}
	CurrentFenixTestDataProtoFileVersionEnum_value = map[string]int32{
		"VERSION_0_9":  0,
		"VERSION_0_10": 1,
	}
)

func (x CurrentFenixTestDataProtoFileVersionEnum) Enum() *CurrentFenixTestDataProtoFileVersionEnum {
	p := new(CurrentFenixTestDataProtoFileVersionEnum)
	*p = x
	return p
}

func (x CurrentFenixTestDataProtoFileVersionEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrentFenixTestDataProtoFileVersionEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_fenixTestDataSyncServerAdminGrpcApi_proto_enumTypes[0].Descriptor()
}

func (CurrentFenixTestDataProtoFileVersionEnum) Type() protoreflect.EnumType {
	return &file_fenixTestDataSyncServerAdminGrpcApi_proto_enumTypes[0]
}

func (x CurrentFenixTestDataProtoFileVersionEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrentFenixTestDataProtoFileVersionEnum.Descriptor instead.
func (CurrentFenixTestDataProtoFileVersionEnum) EnumDescriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerAdminGrpcApi_proto_rawDescGZIP(), []int{0}
}

// Error codes - for now a test
type ErrorCodesEnum int32

const (
	ErrorCodesEnum_OK                             ErrorCodesEnum = 0
	ErrorCodesEnum_ERROR_UNKNOWN_CALLER           ErrorCodesEnum = 1
	ErrorCodesEnum_ERROR_WRONG_PROTO_FILE_VERSION ErrorCodesEnum = 2
)

// Enum value maps for ErrorCodesEnum.
var (
	ErrorCodesEnum_name = map[int32]string{
		0: "OK",
		1: "ERROR_UNKNOWN_CALLER",
		2: "ERROR_WRONG_PROTO_FILE_VERSION",
	}
	ErrorCodesEnum_value = map[string]int32{
		"OK":                             0,
		"ERROR_UNKNOWN_CALLER":           1,
		"ERROR_WRONG_PROTO_FILE_VERSION": 2,
	}
)

func (x ErrorCodesEnum) Enum() *ErrorCodesEnum {
	p := new(ErrorCodesEnum)
	*p = x
	return p
}

func (x ErrorCodesEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCodesEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_fenixTestDataSyncServerAdminGrpcApi_proto_enumTypes[1].Descriptor()
}

func (ErrorCodesEnum) Type() protoreflect.EnumType {
	return &file_fenixTestDataSyncServerAdminGrpcApi_proto_enumTypes[1]
}

func (x ErrorCodesEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCodesEnum.Descriptor instead.
func (ErrorCodesEnum) EnumDescriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerAdminGrpcApi_proto_rawDescGZIP(), []int{1}
}

// Parameter used for Empty inputs, only containing current proto-file version
type EmptyParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoFileVersionUsedByClient CurrentFenixTestDataProtoFileVersionEnum `protobuf:"varint,1,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"`
}

func (x *EmptyParameter) Reset() {
	*x = EmptyParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerAdminGrpcApi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyParameter) ProtoMessage() {}

func (x *EmptyParameter) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerAdminGrpcApi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyParameter.ProtoReflect.Descriptor instead.
func (*EmptyParameter) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerAdminGrpcApi_proto_rawDescGZIP(), []int{0}
}

func (x *EmptyParameter) GetProtoFileVersionUsedByClient() CurrentFenixTestDataProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_9
}

// Ack/Nack- Response message with comment
type AckNackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckNack    bool             `protobuf:"varint,1,opt,name=AckNack,proto3" json:"AckNack,omitempty"`  // True=Ack, False=Nack
	Comments   string           `protobuf:"bytes,2,opt,name=Comments,proto3" json:"Comments,omitempty"` //Comments if needed
	ErrorCodes []ErrorCodesEnum `protobuf:"varint,3,rep,packed,name=ErrorCodes,proto3,enum=fenixTestDataSyncServerGrpcApi.ErrorCodesEnum" json:"ErrorCodes,omitempty"`
}

func (x *AckNackResponse) Reset() {
	*x = AckNackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerAdminGrpcApi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckNackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckNackResponse) ProtoMessage() {}

func (x *AckNackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerAdminGrpcApi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckNackResponse.ProtoReflect.Descriptor instead.
func (*AckNackResponse) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerAdminGrpcApi_proto_rawDescGZIP(), []int{1}
}

func (x *AckNackResponse) GetAckNack() bool {
	if x != nil {
		return x.AckNack
	}
	return false
}

func (x *AckNackResponse) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *AckNackResponse) GetErrorCodes() []ErrorCodesEnum {
	if x != nil {
		return x.ErrorCodes
	}
	return nil
}

// Message for turning on or off in- and outgoing messages for Fenix TestData Sync Server
type AllowOrDisallowIncomingAndOutgoingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowInAndOutgoingMessages   bool                                     `protobuf:"varint,1,opt,name=AllowInAndOutgoingMessages,proto3" json:"AllowInAndOutgoingMessages,omitempty"`
	ProtoFileVersionUsedByClient CurrentFenixTestDataProtoFileVersionEnum `protobuf:"varint,2,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"`
}

func (x *AllowOrDisallowIncomingAndOutgoingMessage) Reset() {
	*x = AllowOrDisallowIncomingAndOutgoingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerAdminGrpcApi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllowOrDisallowIncomingAndOutgoingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowOrDisallowIncomingAndOutgoingMessage) ProtoMessage() {}

func (x *AllowOrDisallowIncomingAndOutgoingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerAdminGrpcApi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowOrDisallowIncomingAndOutgoingMessage.ProtoReflect.Descriptor instead.
func (*AllowOrDisallowIncomingAndOutgoingMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerAdminGrpcApi_proto_rawDescGZIP(), []int{2}
}

func (x *AllowOrDisallowIncomingAndOutgoingMessage) GetAllowInAndOutgoingMessages() bool {
	if x != nil {
		return x.AllowInAndOutgoingMessages
	}
	return false
}

func (x *AllowOrDisallowIncomingAndOutgoingMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestDataProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_9
}

// Message for Verifying Client's ability to send correct rows based on incoming Request paths
type AbilityToSendCorrectTestDataRowsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestDataClientUuid           string                                   `protobuf:"bytes,1,opt,name=TestDataClientUuid,proto3" json:"TestDataClientUuid,omitempty"`
	ProtoFileVersionUsedByClient CurrentFenixTestDataProtoFileVersionEnum `protobuf:"varint,2,opt,name=ProtoFileVersionUsedByClient,proto3,enum=fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum" json:"ProtoFileVersionUsedByClient,omitempty"`
}

func (x *AbilityToSendCorrectTestDataRowsMessage) Reset() {
	*x = AbilityToSendCorrectTestDataRowsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fenixTestDataSyncServerAdminGrpcApi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbilityToSendCorrectTestDataRowsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbilityToSendCorrectTestDataRowsMessage) ProtoMessage() {}

func (x *AbilityToSendCorrectTestDataRowsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fenixTestDataSyncServerAdminGrpcApi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbilityToSendCorrectTestDataRowsMessage.ProtoReflect.Descriptor instead.
func (*AbilityToSendCorrectTestDataRowsMessage) Descriptor() ([]byte, []int) {
	return file_fenixTestDataSyncServerAdminGrpcApi_proto_rawDescGZIP(), []int{3}
}

func (x *AbilityToSendCorrectTestDataRowsMessage) GetTestDataClientUuid() string {
	if x != nil {
		return x.TestDataClientUuid
	}
	return ""
}

func (x *AbilityToSendCorrectTestDataRowsMessage) GetProtoFileVersionUsedByClient() CurrentFenixTestDataProtoFileVersionEnum {
	if x != nil {
		return x.ProtoFileVersionUsedByClient
	}
	return CurrentFenixTestDataProtoFileVersionEnum_VERSION_0_9
}

var File_fenixTestDataSyncServerAdminGrpcApi_proto protoreflect.FileDescriptor

var file_fenixTestDataSyncServerAdminGrpcApi_proto_rawDesc = []byte{
	0x0a, 0x29, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x22, 0x9f, 0x01, 0x0a, 0x0e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x8c,
	0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x97, 0x01,
	0x0a, 0x0f, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x41, 0x63, 0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x65,
	0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x29, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x4f, 0x72, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e,
	0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x49, 0x6e, 0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x27, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x8c, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2a,
	0x51, 0x0a, 0x28, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x0b, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x39, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x31, 0x30,
	0x10, 0x01, 0x2a, 0x56, 0x0a, 0x0e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x45, 0x52, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x32, 0xf0, 0x04, 0x0a, 0x1e, 0x46,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x70, 0x0a,
	0x0b, 0x41, 0x72, 0x65, 0x59, 0x6f, 0x75, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0x2f, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63,
	0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xaa, 0x01, 0x0a, 0x2a, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x72, 0x44, 0x69, 0x73, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x4f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x49,
	0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x72, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2f, 0x2e, 0x66, 0x65, 0x6e, 0x69,
	0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a,
	0x1b, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x65, 0x6e, 0x69, 0x78, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0x2f, 0x2e, 0x66,
	0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63,
	0x6b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xab, 0x01, 0x0a, 0x2d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77,
	0x73, 0x12, 0x47, 0x2e, 0x66, 0x65, 0x6e, 0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41,
	0x70, 0x69, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x6f, 0x77, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2f, 0x2e, 0x66, 0x65, 0x6e,
	0x69, 0x78, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x4e,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x15, 0x5a,
	0x13, 0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fenixTestDataSyncServerAdminGrpcApi_proto_rawDescOnce sync.Once
	file_fenixTestDataSyncServerAdminGrpcApi_proto_rawDescData = file_fenixTestDataSyncServerAdminGrpcApi_proto_rawDesc
)

func file_fenixTestDataSyncServerAdminGrpcApi_proto_rawDescGZIP() []byte {
	file_fenixTestDataSyncServerAdminGrpcApi_proto_rawDescOnce.Do(func() {
		file_fenixTestDataSyncServerAdminGrpcApi_proto_rawDescData = protoimpl.X.CompressGZIP(file_fenixTestDataSyncServerAdminGrpcApi_proto_rawDescData)
	})
	return file_fenixTestDataSyncServerAdminGrpcApi_proto_rawDescData
}

var file_fenixTestDataSyncServerAdminGrpcApi_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_fenixTestDataSyncServerAdminGrpcApi_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_fenixTestDataSyncServerAdminGrpcApi_proto_goTypes = []interface{}{
	(CurrentFenixTestDataProtoFileVersionEnum)(0),     // 0: fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum
	(ErrorCodesEnum)(0),                               // 1: fenixTestDataSyncServerGrpcApi.ErrorCodesEnum
	(*EmptyParameter)(nil),                            // 2: fenixTestDataSyncServerGrpcApi.EmptyParameter
	(*AckNackResponse)(nil),                           // 3: fenixTestDataSyncServerGrpcApi.AckNackResponse
	(*AllowOrDisallowIncomingAndOutgoingMessage)(nil), // 4: fenixTestDataSyncServerGrpcApi.AllowOrDisallowIncomingAndOutgoingMessage
	(*AbilityToSendCorrectTestDataRowsMessage)(nil),   // 5: fenixTestDataSyncServerGrpcApi.AbilityToSendCorrectTestDataRowsMessage
}
var file_fenixTestDataSyncServerAdminGrpcApi_proto_depIdxs = []int32{
	0, // 0: fenixTestDataSyncServerGrpcApi.EmptyParameter.ProtoFileVersionUsedByClient:type_name -> fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum
	1, // 1: fenixTestDataSyncServerGrpcApi.AckNackResponse.ErrorCodes:type_name -> fenixTestDataSyncServerGrpcApi.ErrorCodesEnum
	0, // 2: fenixTestDataSyncServerGrpcApi.AllowOrDisallowIncomingAndOutgoingMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum
	0, // 3: fenixTestDataSyncServerGrpcApi.AbilityToSendCorrectTestDataRowsMessage.ProtoFileVersionUsedByClient:type_name -> fenixTestDataSyncServerGrpcApi.CurrentFenixTestDataProtoFileVersionEnum
	2, // 4: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcAdminServices.AreYouAlive:input_type -> fenixTestDataSyncServerGrpcApi.EmptyParameter
	4, // 5: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcAdminServices.AllowOrDisallowIncomingAndOutgoingMessages:input_type -> fenixTestDataSyncServerGrpcApi.AllowOrDisallowIncomingAndOutgoingMessage
	2, // 6: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcAdminServices.RestartFenixServerProcesses:input_type -> fenixTestDataSyncServerGrpcApi.EmptyParameter
	5, // 7: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcAdminServices.VerifyClientsAbilityToSendCorrectTestDataRows:input_type -> fenixTestDataSyncServerGrpcApi.AbilityToSendCorrectTestDataRowsMessage
	3, // 8: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcAdminServices.AreYouAlive:output_type -> fenixTestDataSyncServerGrpcApi.AckNackResponse
	3, // 9: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcAdminServices.AllowOrDisallowIncomingAndOutgoingMessages:output_type -> fenixTestDataSyncServerGrpcApi.AckNackResponse
	3, // 10: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcAdminServices.RestartFenixServerProcesses:output_type -> fenixTestDataSyncServerGrpcApi.AckNackResponse
	3, // 11: fenixTestDataSyncServerGrpcApi.FenixTestDataGrpcAdminServices.VerifyClientsAbilityToSendCorrectTestDataRows:output_type -> fenixTestDataSyncServerGrpcApi.AckNackResponse
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_fenixTestDataSyncServerAdminGrpcApi_proto_init() }
func file_fenixTestDataSyncServerAdminGrpcApi_proto_init() {
	if File_fenixTestDataSyncServerAdminGrpcApi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fenixTestDataSyncServerAdminGrpcApi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerAdminGrpcApi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckNackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerAdminGrpcApi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllowOrDisallowIncomingAndOutgoingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fenixTestDataSyncServerAdminGrpcApi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbilityToSendCorrectTestDataRowsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fenixTestDataSyncServerAdminGrpcApi_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fenixTestDataSyncServerAdminGrpcApi_proto_goTypes,
		DependencyIndexes: file_fenixTestDataSyncServerAdminGrpcApi_proto_depIdxs,
		EnumInfos:         file_fenixTestDataSyncServerAdminGrpcApi_proto_enumTypes,
		MessageInfos:      file_fenixTestDataSyncServerAdminGrpcApi_proto_msgTypes,
	}.Build()
	File_fenixTestDataSyncServerAdminGrpcApi_proto = out.File
	file_fenixTestDataSyncServerAdminGrpcApi_proto_rawDesc = nil
	file_fenixTestDataSyncServerAdminGrpcApi_proto_goTypes = nil
	file_fenixTestDataSyncServerAdminGrpcApi_proto_depIdxs = nil
}
